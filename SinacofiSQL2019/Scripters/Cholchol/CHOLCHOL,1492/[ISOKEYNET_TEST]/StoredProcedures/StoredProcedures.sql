
GO
--SqlScripter----[dbo].[ax_robot_Reports_ExtraData_CustomFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_Reports_ExtraData_CustomFields]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ax_robot_Reports_ExtraData_CustomFields] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ax_robot_Reports_ExtraData_CustomFields]
@RPT_UID uniqueidentifier,
	@TEMP_TABLE nvarchar(200)
AS
BEGIN
	SET NOCOUNT ON;

    DECLARE @CUSTOM_FIELDS_XML xml;

     SELECT
          @CUSTOM_FIELDS_XML = ISNULL(CUSTOM_FIELDS_XML,'<dictionary></dictionary>')
        FROM
        ROBOTS_REPORTS_EXTRADATA
        WHERE ROBOTS_REPORTS_EXTRADATA.RPT_UID=@RPT_UID;
        
        SELECT 
	        Tab.Col.value('@name','nvarchar(100)') AS name ,
	        Tab.Col.value('.','nvarchar(max)') AS value 
        INTO #TEMP_DICTIONARY
        FROM @CUSTOM_FIELDS_XML.nodes('//dictionary/entry') Tab(Col);        
        
        
        DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX);
        select @cols = STUFF((SELECT ',' + QUOTENAME(#TEMP_DICTIONARY.name) 
                            FROM #TEMP_DICTIONARY
                    FOR XML PATH(''), TYPE
                    ).value('.', 'NVARCHAR(MAX)') 
                ,1,1,'');


      DECLARE @colsINS nvarchar(max);
      SET @colsINS = REPLACE(@cols,'],','] nvarchar(200),') + ' nvarchar(max)';
      
      SET @query = ' ALTER TABLE '+ @TEMP_TABLE +'  ADD ' + @colsINS ;
      execute(@query);

      set @query = '	
			      INSERT INTO '+ @TEMP_TABLE +' ('+ @cols +')
			      SELECT ' + @cols + '  FROM 
                    (
                      SELECT 
					      name, value
				      FROM #TEMP_DICTIONARY'+'
                  ) x
                  PIVOT
                  (
                      MAX(value)
                      FOR name IN (' + @cols + ')
                  ) p '


      execute(@query);
      

END
GO

GO
--SqlScripter----[dbo].[GetSector].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[GetSector]') IS NULL EXEC('CREATE PROCEDURE [dbo].[GetSector] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
/*  STORED PROCEDURES  */

ALTER PROCEDURE [dbo].[GetSector]
(@Nodo int,@Padres varchar(4000) OUTPUT)
AS
	declare @DescripPadres varchar(4000), @Padre int , @Descrip varchar(50), @Tipo int, @fin int
	set @DescripPadres=''

             select @Padre=CODIGOPADRE from ORGANIGRAMA where CODIGO=@Nodo
	set @Nodo=@Padre
             set @fin=1

	while  (@Nodo is not null) and @Nodo > 0  and @fin=1 begin
		select @Padre=CODIGOPADRE, @Tipo=TIPO, @Descrip=DESCRIPCION from ORGANIGRAMA where CODIGO=@Nodo
                           if @Tipo=0 AND @Padre>0
                               Begin
			set @DescripPadres=  rtrim(ltrim(@Descrip)) 
			set @fin=0
		    end
		set @Nodo=@Padre
	end
	set @Padres=@DescripPadres
GO

GO
--SqlScripter----[dbo].[GetSuperior].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[GetSuperior]') IS NULL EXEC('CREATE PROCEDURE [dbo].[GetSuperior] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[GetSuperior]
(@Nodo int,@Padres varchar(4000) OUTPUT)
AS
	declare @DescripPadres varchar(4000), @Padre int , @Descrip varchar(50), @Tipo int, @fin int
	set @DescripPadres=''

             select @Padre=CODIGOPADRE from ORGANIGRAMA where CODIGO=@Nodo
	set @Nodo=@Padre
             set @fin=1

	while  (@Nodo is not null) and @Nodo > 0  and @fin=1 begin
		select @Padre=CODIGOPADRE, @Tipo=TIPO, @Descrip=DESCRIPCION from ORGANIGRAMA where CODIGO=@Nodo
                           if @Tipo=1 OR @Tipo=4
                               Begin
					set @DescripPadres=  rtrim(ltrim(@Descrip)) 
					set @fin=0
		    		end
		set @Nodo=@Padre
	end
	set @Padres=@DescripPadres
GO

GO
--SqlScripter----[dbo].[ik_Action_Get].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Action_Get]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Action_Get] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Action_Get]
(
	@IKALERTID	int,
	@IKCDU int
	
)  AS

DECLARE @FORUMID INT
SELECT @FORUMID=FORUMID FROM IKALERTS WHERE IKALERTS.IKALERTS_ID=@IKALERTID

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)

INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOFORO=@FORUMID AND IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



	SELECT IKALERTS.*,IKALERTS_USERS_OPTIONS.ALERT_CLASS, IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED, NM.MENSAJES as CURRENTUSER_NEWMENSAJES, NM.ARCHIVOS as CURRENTUSER_NEWARCHIVOS, NM.RECORDATORIOS as CURRENTUSER_NEWRECORDATORIOS, NM.URGENTES as CURRENTUSER_NEWURGENTES,
	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END AS NEWMESSAGES,

	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  CASE WHEN ISNULL(NM.MENSAJES,0) >0  THEN ' · ' ELSE '' END  + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''		
	END AS NEWFILES,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN ' · ' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END AS NEWREMINDERS,
	ISNULL(NM.LASTNEW,0) AS LASTNEW
	
	FROM IKALERTS 
	LEFT JOIN IKALERTS_USERS_OPTIONS ON IKALERTS_USERS_OPTIONS.IKALERTS_ID=IKALERTS.IKALERTS_ID AND IKALERTS_USERS_OPTIONS.USERID=@IKCDU
	LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=IKALERTS.FORUMID
	
	WHERE IKALERTS.IKALERTS_ID = @IKALERTID
GO

GO
--SqlScripter----[dbo].[ik_Actions_GetActionsNotPinnedWithNewsCount].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Actions_GetActionsNotPinnedWithNewsCount]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Actions_GetActionsNotPinnedWithNewsCount] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Actions_GetActionsNotPinnedWithNewsCount]
(
	@IKCDU int
)  AS

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)

INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



	SELECT COUNT(*) AS ACTIONSCOUNT
	FROM IKALERTS 
	LEFT JOIN IKALERTS_USERS_OPTIONS ON IKALERTS_USERS_OPTIONS.IKALERTS_ID=IKALERTS.IKALERTS_ID AND IKALERTS_USERS_OPTIONS.USERID=@IKCDU
	
	JOIN #TMP_FOROS NM ON NM.CODIGOFORO=IKALERTS.FORUMID
	WHERE
	(IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED=0 OR IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED IS NULL)
	--AND
	--	(IKALERTS.IKALERTS_ID IN (SELECT IKALERTS_TARGETS.IKALERTS_ID FROM IKALERTS_TARGETS WHERE IKALERTS_TARGETS.USERID_TARGET=@IKCDU))
	 --ORDER BY DATE_EFFECTIVE
GO

GO
--SqlScripter----[dbo].[ik_Actions_GetEntityRelated].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Actions_GetEntityRelated]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Actions_GetEntityRelated] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Actions_GetEntityRelated]
(
	@IKCDU int,
	@EntityDescriptor nvarchar(10),
	@EntityId int,
	@L_SHOWALL tinyint
)  AS

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)

INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



	SELECT IKALERTS.*,IKALERTS_USERS_OPTIONS.ALERT_CLASS, IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED, NM.MENSAJES as CURRENTUSER_NEWMENSAJES, NM.ARCHIVOS as CURRENTUSER_NEWARCHIVOS, NM.RECORDATORIOS as CURRENTUSER_NEWRECORDATORIOS, NM.URGENTES as CURRENTUSER_NEWURGENTES,
	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END + '</span>'  AS NEWMESSAGES,

	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  CASE WHEN ISNULL(NM.MENSAJES,0) >0  THEN ' <span class="middot">·</span> ' ELSE '' END  + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''		
	END + '</span>'  AS NEWFILES,

	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN ' <span class="middot">·</span> ' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END + '</span>'  AS NEWREMINDERS,
	ISNULL(NM.LASTNEW,0) AS LASTNEW
	
	FROM IKALERTS 
	LEFT JOIN IKALERTS_USERS_OPTIONS ON IKALERTS_USERS_OPTIONS.IKALERTS_ID=IKALERTS.IKALERTS_ID AND IKALERTS_USERS_OPTIONS.USERID=@IKCDU
	
	LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=IKALERTS.FORUMID
	WHERE 
		SOURCE_ENTITY_PARTICLE=@EntityDescriptor 
		AND SOURCE_ENTITY_ID=@EntityId
		AND (@L_SHOWALL=1 OR (@EntityDescriptor='M' AND IKALERTS.USERID_SOURCE= @IKCDU )OR IKALERTS.IKALERTS_ID IN (SELECT IKALERTS_TARGETS.IKALERTS_ID FROM IKALERTS_TARGETS WHERE IKALERTS_TARGETS.USERID_TARGET=@IKCDU))
	 ORDER BY IKALERTS.DATE_DONE, DATE_EFFECTIVE
GO

GO
--SqlScripter----[dbo].[ik_Actions_GetTargetUsers].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Actions_GetTargetUsers]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Actions_GetTargetUsers] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Actions_GetTargetUsers]
(
	@IKCDU int,
	@EntityDescriptor nvarchar(10),
	@EntityId int,
	@SecondaryEntityId int

)  AS

IF @EntityDescriptor='M'
BEGIN
/*
@USERALERTLEVEL
"0">User can't create actions
"1">Only to himself/herself
"2">To Forum members also
"3">To involved people also
"4">To any user
*/
	DECLARE @USERALERTLEVEL int
	SELECT @USERALERTLEVEL= CASE WHEN CATEGORIA=4 THEN 4 ELSE USERALERTLEVEL END FROM USUARIOS WHERE CODIGO=@IKCDU
	IF (@USERALERTLEVEL=0) 
	BEGIN
		SELECT TOP 1 CODIGOUSUARIO, USUARIO FROM IKFOROSSUSCRIPTORES WHERE 1=0
	END
	ELSE IF (@USERALERTLEVEL=1) 
	BEGIN
		SELECT 
			CODIGO AS CODIGOUSUARIO,USUARIO 
		FROM USUARIOS
		WHERE CODIGO=@IKCDU
	END		
	ELSE IF (@USERALERTLEVEL>=2) 
	BEGIN
		SELECT 
			CODIGOUSUARIO, 
			USUARIO 
		FROM IKFOROSSUSCRIPTORES 
		WHERE CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSMENSAJES WHERE CODIGO=@EntityId)
		ORDER BY USUARIO
	END
END
ELSE IF @EntityDescriptor='N'
BEGIN
	SELECT DISTINCT 
		CODIGOUSUARIO, 
		USUARIO 
	FROM [VISTA_INVOLUCRADOSUSUARIOS]
	WHERE NOT CODIGOUSUARIO IS NULL AND CODIGONC=@EntityId
	ORDER BY USUARIO
END
ELSE IF SUBSTRING (@EntityDescriptor, 0, 6) = 'STD2_'
BEGIN
	SELECT DISTINCT 
		CODIGOUSUARIO, 
		USUARIO 
	FROM [VISTA_INVOLUCRADOSUSUARIOS]
	WHERE NOT CODIGOUSUARIO IS NULL AND CODIGONC=@SecondaryEntityId
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='T'
BEGIN
	SELECT DISTINCT 
		CODIGOUSUARIO, 
		USUARIO 
	FROM [VISTA_INVOLUCRADOSTAREA]
	WHERE NOT CODIGOUSUARIO IS NULL AND CODIGOTAREA=@EntityId	
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='D'
BEGIN
	SELECT DISTINCT 
		UserId AS CODIGOUSUARIO, 
		UserName as USUARIO 
	FROM [VISTA_USUARIOSNIVELACCESODOCS]
	JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_USUARIOSNIVELACCESODOCS].UserId
	WHERE USUARIOS.L_WEBGROUP=0
	AND SecurityLevel> 300002 AND NOT UserId IS NULL AND CODIGODOCUMENTO=@EntityId	
	ORDER BY UserName
END
ELSE IF @EntityDescriptor='SP'
BEGIN
	SELECT DISTINCT 
		USERID AS CODIGOUSUARIO, 
		VISTA_BS_STRATPLANS_OPTIONS.USUARIO 
	FROM [VISTA_BS_STRATPLANS_OPTIONS]
	JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_BS_STRATPLANS_OPTIONS].USERID
	WHERE USUARIOS.L_WEBGROUP=0
	AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND BS_STRAT_PLANSID=@EntityId	
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='S'
BEGIN
	SELECT * FROM(
		SELECT DISTINCT 
			USERID AS CODIGOUSUARIO, 
			VISTA_BS_STRATNODES_OPTIONS.USUARIO 
		FROM [VISTA_BS_STRATNODES_OPTIONS]
		JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_BS_STRATNODES_OPTIONS].USERID
		WHERE USUARIOS.L_WEBGROUP=0
		AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_BS_STRATNODES_OPTIONS.BS_STRAT_NODESID =@EntityId	
		
		UNION 
		
		SELECT DISTINCT 
			USERID AS CODIGOUSUARIO, 
			VISTA_BS_STRATPLANS_OPTIONS.USUARIO 
		FROM [VISTA_BS_STRATPLANS_OPTIONS]
		JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_BS_STRATPLANS_OPTIONS].USERID
		WHERE USUARIOS.L_WEBGROUP=0
		AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND BS_STRAT_PLANSID IN (SELECT BS_STRAT_NODES.BS_STRAT_PLANSID  FROM BS_STRAT_NODES WHERE BS_STRAT_NODES.BS_STRAT_NODESID =@EntityId)
	) AS DATA
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='I'
BEGIN
	SELECT DISTINCT 
		USERID AS CODIGOUSUARIO, 
		VISTA_BS_INDICATORS_OPTIONS.USUARIO 
	FROM [VISTA_BS_INDICATORS_OPTIONS]
	JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_BS_INDICATORS_OPTIONS].USERID
		WHERE USUARIOS.L_WEBGROUP=0
	AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_BS_INDICATORS_OPTIONS.BS_INDICATORSID  =@EntityId		
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='SVG'
BEGIN
	SELECT DISTINCT 
		USERID AS CODIGOUSUARIO, 
		VISTA_BS_SVG_OPTIONS.USUARIO 
	FROM [VISTA_BS_SVG_OPTIONS]
	JOIN USUARIOS ON USUARIOS.CODIGO=VISTA_BS_SVG_OPTIONS.USERID
		WHERE USUARIOS.L_WEBGROUP=0
	AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_BS_SVG_OPTIONS.BS_SVGID   =@EntityId		
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='PP'
BEGIN
	SELECT DISTINCT 
		USERID AS CODIGOUSUARIO, 
		VISTA_PROCPLANS_OPTIONS.USUARIO 
	FROM VISTA_PROCPLANS_OPTIONS 
	JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_PROCPLANS_OPTIONS].USERID
	WHERE USUARIOS.L_WEBGROUP=0
	AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_PROCPLANS_OPTIONS.PROC_PLANSID =@EntityId		
	ORDER BY USUARIO
END
ELSE IF @EntityDescriptor='P'
BEGIN
	SELECT * FROM(
		SELECT DISTINCT 
			USERID AS CODIGOUSUARIO, 
			VISTA_PROCNODES_OPTIONS.USUARIO 
		FROM VISTA_PROCNODES_OPTIONS
		JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_PROCNODES_OPTIONS].USERID
		WHERE USUARIOS.L_WEBGROUP=0
		AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_PROCNODES_OPTIONS.PROC_NODESID  =@EntityId	
		
		UNION 
		
		SELECT DISTINCT 
			USERID AS CODIGOUSUARIO, 
			VISTA_PROCPLANS_OPTIONS.USUARIO 
		FROM   VISTA_PROCPLANS_OPTIONS
		JOIN USUARIOS ON USUARIOS.CODIGO=[VISTA_PROCPLANS_OPTIONS].USERID
		WHERE USUARIOS.L_WEBGROUP=0
		AND SEC_LEVEL > 2 AND NOT USERID IS NULL AND VISTA_PROCPLANS_OPTIONS.PROC_PLANSID  IN (SELECT PROC_NODES.PROC_PLANSID FROM PROC_NODES WHERE PROC_NODES.PROC_NODESID =@EntityId)
	) AS DATA
	ORDER BY USUARIO
END
ELSE 
BEGIN
	SELECT -1 AS CODIGOUSUARIO, '' AS USUARIO 
	FROM DUAL
	WHERE 1=0
END
GO

GO
--SqlScripter----[dbo].[ik_Actions_SetClass].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Actions_SetClass]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Actions_SetClass] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Actions_SetClass]
(
	@IKACTIONID int,
	@IKCDU int,
	@ALERT_CLASS [nvarchar](50) 
	
)  AS

IF EXISTS (SELECT IKALERTS_ID FROM IKALERTS_USERS_OPTIONS WHERE IKALERTS_ID=@IKACTIONID  AND USERID=@IKCDU)
BEGIN
	UPDATE IKALERTS_USERS_OPTIONS SET ALERT_CLASS=@ALERT_CLASS WHERE IKALERTS_ID=@IKACTIONID  AND USERID=@IKCDU
END
ELSE
BEGIN
	INSERT INTO IKALERTS_USERS_OPTIONS (IKALERTS_ID, USERID, ALERT_CLASS, ALERT_L_ISPINNED) VALUES(@IKACTIONID, @IKCDU, @ALERT_CLASS, 0)
END
GO

GO
--SqlScripter----[dbo].[ik_Actions_SetPinnedUnpinned].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Actions_SetPinnedUnpinned]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Actions_SetPinnedUnpinned] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Actions_SetPinnedUnpinned]
(
	@IKACTIONID int,
	@IKCDU int,
	@ALERT_L_ISPINNED tinyint,
	@CURRENT_USERNAME nvarchar(100)
	
)  AS

DECLARE @STR_PINNED nvarchar(100)
SET @STR_PINNED='pinned'
IF @ALERT_L_ISPINNED=0
BEGIN
	SET @STR_PINNED='not pinned'
END

IF EXISTS (SELECT IKALERTS_ID FROM IKALERTS_USERS_OPTIONS WHERE IKALERTS_ID=@IKACTIONID  AND USERID=@IKCDU)
BEGIN
	UPDATE IKALERTS_USERS_OPTIONS SET ALERT_L_ISPINNED=@ALERT_L_ISPINNED WHERE IKALERTS_ID=@IKACTIONID  AND USERID=@IKCDU

	INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
	VALUES (@IKCDU, GETDATE() , 'Action X-'+ CONVERT(nvarchar(10),@IKACTIONID) +' tagged as ' + @STR_PINNED,@CURRENT_USERNAME, 1)

END
ELSE
BEGIN
	INSERT INTO IKALERTS_USERS_OPTIONS (IKALERTS_ID, USERID, ALERT_L_ISPINNED) VALUES(@IKACTIONID, @IKCDU, @ALERT_L_ISPINNED )

	INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
	VALUES (@IKCDU, GETDATE() , 'Action X-'+ CONVERT(nvarchar(10),@IKACTIONID) +' tagged as ' + @STR_PINNED,@CURRENT_USERNAME, 1)

END
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesDeadlinesBCToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesDeadlinesBCToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesBCToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesBCToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

SELECT 
CODIGONC, ETAPA, MAX(FECHALIMITE) AS FECHALIMITE_ETAPA
INTO #TEMP_FECHASLIMITE_ETAPAS
FROM NCTAREAS
JOIN NCMAINPROD ON NCMAINPROD.CODIGO = NCTAREAS.CODIGONC
WHERE NCTAREAS.L_CUMPLIDA=0 AND NCMAINPROD.TIPO=@MODULEID
GROUP BY CODIGONC, ETAPA


DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('BC_DEADLINE_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] nvarchar(10),') + ' nvarchar(10)'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					CASE 
						WHEN SYSTEM_CUMPLIDA=1 THEN ''''
						WHEN FECHAVENCIMIENTO IS NULL THEN ''''
						WHEN datediff(day,getdate(),FECHAVENCIMIENTO) < 0 THEN ''''
						WHEN datediff(day,#TEMP_FECHASLIMITE_ETAPAS.FECHALIMITE_ETAPA , FECHAVENCIMIENTO)< 0 THEN ''yellow''
						ELSE ''''
					END AS BG_COLOR,					
					''BC_DEADLINE_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
					LEFT JOIN #TEMP_FECHASLIMITE_ETAPAS ON #TEMP_FECHASLIMITE_ETAPAS.CODIGONC=NCETAPAS.CODIGONC AND NCETAPAS.ETAPA=#TEMP_FECHASLIMITE_ETAPAS.ETAPA
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(BG_COLOR)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesDeadlinesCSSToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesDeadlinesCSSToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesCSSToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesCSSToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

SELECT 
CODIGONC, ETAPA, MAX(FECHALIMITE) AS FECHALIMITE_ETAPA
INTO #TEMP_FECHASLIMITE_ETAPAS
FROM NCTAREAS
JOIN NCMAINPROD ON NCMAINPROD.CODIGO = NCTAREAS.CODIGONC
WHERE NCTAREAS.L_CUMPLIDA=0 AND NCMAINPROD.TIPO=@MODULEID
GROUP BY CODIGONC, ETAPA


DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('CSS_DEADLINE_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] nvarchar(10),') + ' nvarchar(10)'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					CASE 
						WHEN SYSTEM_CUMPLIDA=1 THEN ''''
						WHEN FECHAVENCIMIENTO IS NULL THEN ''''
						WHEN datediff(day,getdate(),FECHAVENCIMIENTO) < 0 THEN ''red_sem''
						WHEN datediff(day,#TEMP_FECHASLIMITE_ETAPAS.FECHALIMITE_ETAPA , FECHAVENCIMIENTO)< 0 THEN ''yellow_sem''
						ELSE ''''
					END AS BG_COLOR,					
					''CSS_DEADLINE_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
					LEFT JOIN #TEMP_FECHASLIMITE_ETAPAS ON #TEMP_FECHASLIMITE_ETAPAS.CODIGONC=NCETAPAS.CODIGONC AND NCETAPAS.ETAPA=#TEMP_FECHASLIMITE_ETAPAS.ETAPA
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(BG_COLOR)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesDeadlinesFCToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesDeadlinesFCToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesFCToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesFCToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

SELECT 
CODIGONC, ETAPA, MAX(FECHALIMITE) AS FECHALIMITE_ETAPA
INTO #TEMP_FECHASLIMITE_ETAPAS
FROM NCTAREAS
JOIN NCMAINPROD ON NCMAINPROD.CODIGO = NCTAREAS.CODIGONC
WHERE NCTAREAS.L_CUMPLIDA=0 AND NCMAINPROD.TIPO=@MODULEID
GROUP BY CODIGONC, ETAPA


DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('FC_DEADLINE_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] nvarchar(10),') + ' nvarchar(10)'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					CASE 
						WHEN SYSTEM_CUMPLIDA=1 THEN ''''
						WHEN FECHAVENCIMIENTO IS NULL THEN ''''
						WHEN datediff(day,getdate(),FECHAVENCIMIENTO) < 0 THEN ''red''
						WHEN datediff(day,#TEMP_FECHASLIMITE_ETAPAS.FECHALIMITE_ETAPA , FECHAVENCIMIENTO)< 0 THEN  ''yellow''
						ELSE ''''
					END AS BG_COLOR,					
					''FC_DEADLINE_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
					LEFT JOIN #TEMP_FECHASLIMITE_ETAPAS ON #TEMP_FECHASLIMITE_ETAPAS.CODIGONC=NCETAPAS.CODIGONC AND NCETAPAS.ETAPA=#TEMP_FECHASLIMITE_ETAPAS.ETAPA
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(BG_COLOR)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesDeadlinesToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesDeadlinesToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesDeadlinesToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('DEADLINE_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] datetime,') + ' datetime'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					NCETAPAS.FECHAVENCIMIENTO , 
					''DEADLINE_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(FECHAVENCIMIENTO)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesDescripToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesDescripToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesDescripToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesDescripToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('DESCRIPCION_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] NVARCHAR(MAX) NULL,') + ' NVARCHAR(MAX) NULL'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);

-- si hay mÃ¡s de 5 lineas en el campo, lo mete colapsado con botÃ³n para expandir
set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					CASE WHEN LEN(CONVERT(VARCHAR(MAX),COMENTARIOSETAPA))-LEN(REPLACE(CONVERT(VARCHAR(MAX),COMENTARIOSETAPA),CHAR(13),''''))>5
					THEN
					''<span class="expandcolresp hiddenResp"><span class="cmd" >&nbsp;</span><span class="points"></span><span class="NAWhenHidden resps_html">'' + 
					REPLACE(CONVERT(nvarchar(max), NCETAPAS.COMENTARIOSETAPA),CHAR(13),''<br>'') 
					 + ''</span></span>''
					ELSE
					REPLACE(CONVERT(nvarchar(max), NCETAPAS.COMENTARIOSETAPA),CHAR(13),''<br>'') 
					END  AS COMENTARIOSETAPA,
					''DESCRIPCION_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(COMENTARIOSETAPA)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);

RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesRespsPositionIdsToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesRespsPositionIdsToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesRespsPositionIdsToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesRespsPositionIdsToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('RESP_POSITIONID_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] int,') + ' int'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 
					CODIGO_CARGO_RESPONSABLE, 
					''RESP_POSITIONID_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC
				FROM NCETAPAS 
				WHERE TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(CODIGO_CARGO_RESPONSABLE)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesRespsPositionToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesRespsPositionToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesRespsPositionToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesRespsPositionToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('RESP_POSITION_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] nvarchar(200),') + ' nvarchar(200)'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 					
					ORGANIGRAMA.DESCRIPCION AS DESCRIPCION_CARGO,
					''RESP_POSITION_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC 					
				FROM NCETAPAS JOIN ORGANIGRAMA ON ORGANIGRAMA.CODIGO=CODIGO_CARGO_RESPONSABLE 
				WHERE NCETAPAS.TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(DESCRIPCION_CARGO)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addIssueClassStagesRespsUserToTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addIssueClassStagesRespsUserToTable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addIssueClassStagesRespsUserToTable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addIssueClassStagesRespsUserToTable]
(
@MODULEID int,
@tmp_table nvarchar(500)
)
AS

DECLARE @cols AS NVARCHAR(MAX), @query  AS NVARCHAR(MAX)

select @cols = STUFF((SELECT ',' + QUOTENAME('RESP_USER_STAGE_' + CONVERT(nvarchar(10),NCDEFINICIONETAPAS.ETAPA)) 
                    FROM NCDEFINICIONETAPAS 
					WHERE TIPO=@MODULEID AND NCDEFINICIONETAPAS.L_EXCLUIDA=0
					group by NCDEFINICIONETAPAS.DESCRIPCIONCORTA,NCDEFINICIONETAPAS.ETAPA
                    order by NCDEFINICIONETAPAS.ETAPA
					
            FOR XML PATH(''), TYPE
            ).value('.', 'NVARCHAR(MAX)') 
        ,1,1,'')


DECLARE @colsINS nvarchar(max)
SET @colsINS = REPLACE(@cols,'],','] nvarchar(200),') + ' nvarchar(200)'


set @query = ' ALTER TABLE '+ @tmp_table +' ADD ' + @colsINS
execute(@query);


set @query = '	
			INSERT INTO '+ @tmp_table +'					
			SELECT CODIGONC,' + @cols + ' FROM 
             (
                SELECT 					
					VISTA_CARGOSUSUARIOS.USUARIO AS DESCRIPCION_USUARIO,
					''RESP_USER_STAGE_'' + CONVERT(nvarchar(10),NCETAPAS.ETAPA) +  '''' AS DESCRIPCIONCORTA,
					NCETAPAS.CODIGONC 					
				FROM NCETAPAS 
					LEFT JOIN VISTA_CARGOSUSUARIOS ON VISTA_CARGOSUSUARIOS.CODIGOCARGO=CODIGO_CARGO_RESPONSABLE 
				WHERE NCETAPAS.TIPO='+ CONVERT(nvarchar(20),@MODULEID) +'
            ) x
            PIVOT
            (
                MAX(DESCRIPCION_USUARIO)
                FOR DESCRIPCIONCORTA IN (' + @cols + ')
            ) p '


execute(@query);


RETURN
GO

GO
--SqlScripter----[dbo].[ik_addNCInvolved].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addNCInvolved]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addNCInvolved] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addNCInvolved]
@CODIGONC INT, @CODIGOCARGO INT, @INSTANCIA INT, @NOMBRECARGO VARCHAR(200), @TIPOOBJETO INT, @NIVEL INT, @INVOLMENT_METHOD INT 
AS
BEGIN

   DECLARE @SWNCINVOLUCRADOS__var0  INT

   select   @SWNCINVOLUCRADOS__var0 = COUNT(*)  FROM NCINVOLUCRADOS
   WHERE CODIGONC = @CODIGONC and CODIGOCARGO = @CODIGOCARGO

   IF @SWNCINVOLUCRADOS__var0 = 0
      INSERT INTO NCINVOLUCRADOS(CODIGONC,CODIGOCARGO,INSTANCIA,NOMBRECARGO,TIPOOBJETO,NIVEL,INVOLMENT_METHOD)
       VALUES(@CODIGONC,@CODIGOCARGO,@INSTANCIA,@NOMBRECARGO,@TIPOOBJETO,@NIVEL,@INVOLMENT_METHOD)
   

END
GO

GO
--SqlScripter----[dbo].[ik_addUserToDocForum].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_addUserToDocForum]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_addUserToDocForum] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_addUserToDocForum]
@CODIGOCARGO INT,
@CARGO VARCHAR(100),
@CODIGOUSUARIO INT,
@USUARIO VARCHAR(50),
@USUARIOALTA VARCHAR(50),
@CODIGOFORO INT,
@USER_HISTORY_MESSAGE VARCHAR(1000),
@DOCCODE INT,
@DOC_HISTORY_MESSAGE VARCHAR(1000)

AS
BEGIN

   IF ISNULL((SELECT COUNT(*) FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO = @CODIGOUSUARIO and CODIGOFORO = @CODIGOFORO),0) = 0
   and
   ISNULL((SELECT COUNT(*) FROM USUARIOS WHERE L_DELETED = 0 and L_GRUPO = 0 and L_WEBGROUP = 0 and CODIGO = @CODIGOUSUARIO),0) = 1
   begin
INSERT INTO IKFOROSSUSCRIPTORES(CODIGOCARGO, CARGO, CODIGOUSUARIO, USUARIO, USUARIOALTA, FECHAALTA, CODIGOFORO)
     VALUES(@CODIGOCARGO, @CARGO, @CODIGOUSUARIO, @USUARIO, @USUARIOALTA, GETDATE(), @CODIGOFORO)
     
      INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
     VALUES(@CODIGOUSUARIO,GetDate(),@USER_HISTORY_MESSAGE,@USUARIOALTA,1)

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, CODIGOUSUARIO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
VALUES(@DOCCODE, 0, @USUARIOALTA, GETDATE(),@DOC_HISTORY_MESSAGE ,0,0)

   end


END
GO

GO
--SqlScripter----[dbo].[ik_adm_users].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_adm_users]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_adm_users] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_adm_users]
(
	@parameters nvarchar(1000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
	@sort nvarchar(50) /*WITHOUT CLAUSE ORDER BY*/
)
AS
BEGIN
	SET NOCOUNT ON;

DECLARE @strSQL varchar(4000)

SET @strSQL=

'SELECT USUARIOS.*,' + 

'			CASE' + 
'			WHEN L_WEBGROUP=1 THEN N''Group''' + 
'			ELSE N''User''' + 
'			END AS ITEM_TYPE ,' + 

'			CASE' + 
'			WHEN L_WEBGROUP=1 THEN dbo.CONCAT(N''IKBase.aspx?VIEW=ADMINGROUPPROPERTIESREPORT&MODE=EDIT&USRCODE='', LTRIM(STR(CODIGO)))' + 
'			ELSE dbo.CONCAT(N''IKBase.aspx?VIEW=ADMINUSERPROPERTIESREPORT&USRCODE='', LTRIM(STR(CODIGO)))' + 
'           END AS URLEDIT,' + 

'            CASE' + 
'            WHEN L_WEBGROUP=1 THEN ''N/A''' + 
'            WHEN CATEGORIA = 4 THEN ''Loc_Administrator''' + 
'            WHEN CATEGORIA = 3 THEN ''Loc_Power_User''' + 
'            WHEN CATEGORIA = 1 THEN ''Loc_User''' + 
'            WHEN CATEGORIA = 0 THEN ''Loc_AccessDenied''' + 
'            END AS LEVELDESCRIP,' + 

'            CASE' + 
'            WHEN L_WEBGROUP=1 THEN ''n/a''' + 
'            WHEN PERMISOSDOCUMENTOS = 0 THEN ''Loc_Administrator''' + 
'            WHEN PERMISOSDOCUMENTOS = 1 THEN ''Loc_User''' + 
'            WHEN PERMISOSDOCUMENTOS = 2 THEN ''Loc_AccessDenied''' + 
'            END AS DOCLEVELDESCRIP,' + 

'            CASE' + 
'            WHEN L_WEBGROUP=1 THEN ''n/a''' + 
'            WHEN PERMISOSBSPROC = 0 THEN ''Administrator''' + 
'            WHEN PERMISOSBSPROC = 1 THEN ''Loc_User''' + 
'            WHEN PERMISOSBSPROC = 2 THEN ''Loc_AccessDenied''' + 
'            END AS BSPROCLEVELDESCRIP,' + 

'            CASE' + 
'            WHEN NOT LOGINNAME IS NULL AND USUARIO != LOGINNAME THEN dbo.CONCAT4(USUARIO,'' ('', LOGINNAME, '')'')'+
'            ELSE USUARIO' + 
'            END AS FULLUSERNAME' + 

'            FROM USUARIOS' + 
'            LEFT OUTER JOIN dbo.ik_getFullUsersIds() F ON F.CODIGOUSUARIO=USUARIOS.CODIGO'

IF @parameters <> ''
	BEGIN
		SET @strSQL = @strSQL + ' WHERE ' + @parameters
	END

	IF @sort <> ''
	BEGIN
		SET @strSQL = @strSQL + ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @strSQL = @strSQL + ' ORDER BY USUARIO '
	END

EXEC (@strSQL)

END
GO

GO
--SqlScripter----[dbo].[ik_archive_USUARIOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_archive_USUARIOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_archive_USUARIOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_archive_USUARIOS]
(@IKUSERID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @IKUSERID = CODIGO of the record from USUARIOS to archive
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_archive_USUARIOS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_archive_USUARIOS: VALIDATION: FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-2)
END


IF (SELECT COUNT(CODIGO) FROM PERSONAS WHERE CODIGO=@IKUSERID ) = 0
AND  (SELECT COUNT(CODIGO) FROM USUARIOS WHERE CODIGO=@IKUSERID AND L_WEBGROUP=1 ) = 0

BEGIN
	SET @Success = 0
	RAISERROR('ik_archive_USUARIOS: CHECK: FAILURE (%u). PERSON OR GROUP DOESN´T EXSIST.',16,1,@IKUSERID)
	RETURN(-2)
END

/*
IF (SELECT L_IS_SYNCHRONIZED FROM PERSONAS WHERE CODIGO=@IKUSERID ) = 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_archive_USUARIOS: CHECK: FAILURE (%u). PERSON IS SYNCHRONIZED.',16,1,@IKUSERID)
	RETURN(-2)
END
*/

DECLARE @L_IS_IKUSER tinyint
SET @L_IS_IKUSER=(SELECT L_IS_IKUSER FROM PERSONAS WHERE CODIGO=@IKUSERID )


IF (@L_IS_IKUSER) = 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_archive_USUARIOS: CHECK: FAILURE (%u). PERSON IS NOT A USER.',16,1,@IKUSERID)
	RETURN(-2)
END




DECLARE @L_WEBGROUP tinyint
SET @L_WEBGROUP=(SELECT L_WEBGROUP FROM USUARIOS WHERE CODIGO=@IKUSERID )




DECLARE @LastError int
SET @LastError = 0

DECLARE @UserDeletionSuccess int
SET @UserDeletionSuccess = 0

BEGIN TRANSACTION


DELETE FROM PERMISOSDOC WHERE CODIGOUSUARIO=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS:DELETE PERMISOSDOC FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM IKFOROSNOVEDADES WHERE CODIGOUSUARIO=@IKUSERID AND L_LEIDO=0
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE IKFOROSNOVEDADES FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE IKFOROSSUSCRIPTORES FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE NCMODULESECURITYLEVELS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM BS_STRAT_NODES_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE BS_STRAT_NODES_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM BS_STRAT_PLANS_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE BS_STRAT_PLANS_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM BS_SVG_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE BS_SVG_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM BS_INDICATORS_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE BS_INDICATORS_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM PROC_NODES_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE PROC_NODES_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

DELETE FROM PROC_PLANS_OPTIONS WHERE USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE PROC_PLANS_OPTIONS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END


DELETE FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKUSERID OR CODIGOGRUPO=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: DELETE WEBGROUPMEMBERS FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

UPDATE TAREASREVISION SET ESTADO='A' WHERE CODIGOUSUARIO=@IKUSERID AND ESTADO='V'
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: UPDATE TAREASREVISION  FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END

UPDATE BS_SVG SET LOCK_DATE=NULL, LOCK_USERNAME=NULL, LOCK_USERID=NULL WHERE LOCK_USERID=@IKUSERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_archive_USUARIOS: UPDATE BS_SVG  FAILURE (%u)',16,1,@IKUSERID)
	RETURN(-1)
END




	UPDATE IK_PEOPLE SET IKUSER_ARCHIVE_DATE=GETDATE(),USUARIO = '_' + USUARIO, L_DELETED = 1, LOGINNAME='_' +  LOGINNAME WHERE CODIGO=@IKUSERID
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_archive_USUARIOS: UPDATE USUARIOS FAILURE (%u)',16,1,@IKUSERID)
		RETURN(-1)
	END

/*
ALL DONE
*/

SET @Success = 1
	PRINT 'ik_archive_USUARIOS: SUCCESS (' + ltrim(str(@IKUSERID)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_bs_AddIndMissingData].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bs_AddIndMissingData]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bs_AddIndMissingData] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bs_AddIndMissingData]
(
		@BS_INDICATORSID int,
		@TODATE datetime
	)

AS
DECLARE @TIME_PERIOD tinyint
SET @TIME_PERIOD = (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID = @BS_INDICATORSID)

DECLARE @FROMDATE datetime
DECLARE @DBDATE datetime
DECLARE @VE FLOAT
DECLARE @VR FLOAT

SET @VE=(SELECT PV_DEFAULT_VALUE FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID AND PV_CALCULATION_TYPE!=0)
SET @VR=(SELECT RV_DEFAULT_VALUE FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID AND RV_CALCULATION_TYPE!=0)

SET @DBDATE = (
			SELECT TOP 1 MSR_DATE FROM BS_INDICATORSDATA
					WHERE BS_INDICATORSID = @BS_INDICATORSID AND
							MSR_DATE< @TODATE
					ORDER BY MSR_DATE DESC 
			)

IF (@DBDATE IS NULL)
BEGIN
	SET @FROMDATE = DATEADD(Day, -365, @TODATE)
END
ELSE
BEGIN
	SET @FROMDATE = @DBDATE
END
IF (ISDATE(@FROMDATE)=1)
BEGIN	

	SET @FROMDATE = dbo.ik_bs_Next_Period_Date(@TIME_PERIOD,@FROMDATE)		
	WHILE (DATEDIFF(day,@FROMDATE,@TODATE)> 0)
	BEGIN
		INSERT INTO BS_INDICATORSDATA (BS_INDICATORSID, MSR_REAL_VALUE, MSR_PLANNED_VALUE, MSR_DATE, INPUTDATE, INPUTUSER)	
		VALUES (@BS_INDICATORSID, @VR, @VE, @FROMDATE, GETDATE(), 'IS-KEY')
			
		SET @FROMDATE = dbo.ik_bs_Next_Period_Date(@TIME_PERIOD,@FROMDATE)
	END
END		

RETURN
GO

GO
--SqlScripter----[dbo].[ik_bs_AddIndMissingDataToToday].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_bs_AddIndMissingDataToToday]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bs_AddIndMissingDataToToday] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bs_AddIndMissingDataToToday]
(
	@BS_INDICATORSID int,
	@BS_TIMEPERIOD int

	)

AS
DECLARE @TODATE datetime
SET @TODATE = GETDATE()

EXEC  dbo.ik_bs_AddIndicatorsMissingData @BS_INDICATORSID,@TODATE
GO

GO
--SqlScripter----[dbo].[IK_BS_ARCHIVEINDICATORSDATA].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[IK_BS_ARCHIVEINDICATORSDATA]') IS NULL EXEC('CREATE PROCEDURE [dbo].[IK_BS_ARCHIVEINDICATORSDATA] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[IK_BS_ARCHIVEINDICATORSDATA]
@DESCRIPTION NVARCHAR(2000),
@REMARKS NTEXT,
@DATE_CREATE DATETIME,
@USER_CREATE NVARCHAR(2000),
@UPTODATE DATETIME 
AS
BEGIN

   DECLARE @DATA_ARCHIVEDID INT
   DECLARE @AFFECTED_ROWS INT

   SET @AFFECTED_ROWS = 0

   INSERT INTO BS_INDICATORS_DATA_ARCHIVED([DESCRIPTION], REMARKS, DATE_CREATE, USER_CREATE, UPTODATE)
VALUES(@DESCRIPTION, @REMARKS, @DATE_CREATE, @USER_CREATE, @UPTODATE)
   SET @DATA_ARCHIVEDID = @@IDENTITY


   INSERT INTO BS_INDICATORS_DATA_ARCHIVED_RE(BS_INDICATORS_DATA_ARCHIVEDID,
BS_INDICATORSID,
INPUTUSER,
INPUTDATE,
MSR_REAL_VALUE,
MSR_PLANNED_VALUE,
MSR_DATE)
   SELECT
   @DATA_ARCHIVEDID AS BS_INDICATORS_DATA_ARCHIVEDID ,
BS_INDICATORSID,
INPUTUSER,
INPUTDATE,
MSR_REAL_VALUE,
MSR_PLANNED_VALUE,
MSR_DATE
   FROM BS_INDICATORSDATA
   WHERE (MSR_DATE < @UPTODATE) 

   SET @AFFECTED_ROWS = @@rowcount

   update BS_INDICATORS_DATA_ARCHIVED set MEASUREMENTS_COUNT = @AFFECTED_ROWS  WHERE
   BS_INDICATORS_DATA_ARCHIVEDID = @DATA_ARCHIVEDID

   DELETE FROM BS_INDICATORSDATA WHERE MSR_DATE < @UPTODATE


END
GO

GO
--SqlScripter----[dbo].[ik_BS_AVG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_AVG]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_AVG] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_AVG]
(
	@BS_INDICATORSID int,
	@TIME_PERIOD int
	)
AS
/* 
Valid @BS_TimePeriods
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Semester = 4
Annualy = 5
*/

SET DATEFORMAT YMD
SET DATEFIRST 7

SELECT 
	dbo.ik_bs_Periods_GroupExp_ToDate(@TIME_PERIOD,MSR_DATE) AS MSR_DATE,
	MSR_REAL_VALUE,
	MSR_PLANNED_VALUE
FROM
(

SELECT dbo.ik_bs_Periods_Grouping(@TIME_PERIOD, R.MSR_DATE) AS MSR_DATE,
	   AVG(R.MSR_REAL_VALUE) AS MSR_REAL_VALUE,
	   AVG(R.MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE
	
FROM BS_INDICATORS P
INNER JOIN BS_INDICATORSREL REL

	INNER JOIN BS_INDICATORSDATA R
	ON REL.REL_BS_INDICATORSID = R.BS_INDICATORSID

ON REL.BS_INDICATORSID = P.BS_INDICATORSID

WHERE P.BS_INDICATORSID=@BS_INDICATORSID


GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD, R.MSR_DATE)

) AS T1

RETURN
GO

GO
--SqlScripter----[dbo].[ik_BS_CloneDiagram].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_CloneDiagram]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_CloneDiagram] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_CloneDiagram]
(
	@BS_SVGID int,
	@DESCRIPTION varchar(100)
	)
AS

BEGIN TRANSACTION
/* MAIN RECORD */
INSERT INTO BS_SVG (
[DESCRIPTION],
DOCUMENT,
SVGDOCUMENT,
REMARKS,
SVG_TYPESID,
LOCK_USERID,
LOCK_USERNAME,
LOCK_DATE,
LAST_USER,
LAST_DATE
)
SELECT 
@DESCRIPTION  AS [DESCRIPTION],
DOCUMENT,
SVGDOCUMENT,
REMARKS,
SVG_TYPESID,
LOCK_USERID,
LOCK_USERNAME,
LOCK_DATE,
'ISOKEY',
GETDATE()
FROM BS_SVG
WHERE BS_SVGID = @BS_SVGID

DECLARE @RESULT int
SET @RESULT = (SELECT BS_SVGID FROM BS_SVG WHERE (BS_SVGID = @@IDENTITY))

/* SVG OPTIONS */
INSERT INTO BS_SVG_OPTIONS (
BS_SVGID,
USERID,
SEC_LEVEL,
SHOWINMYTASKS
)
SELECT
@RESULT AS BS_SVGID,
USERID,
SEC_LEVEL,
SHOWINMYTASKS
FROM BS_SVG_OPTIONS 
WHERE BS_SVGID = @BS_SVGID

COMMIT TRANSACTION


RETURN
GO

GO
--SqlScripter----[dbo].[ik_BS_CloneIndicator_Full].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_CloneIndicator_Full]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_CloneIndicator_Full] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_CloneIndicator_Full]
(
	@BS_INDICATORSID int,
	@DESCRIPTION varchar(100)
	)
AS


BEGIN TRANSACTION

/* MAIN RECORD */
INSERT INTO BS_INDICATORS (
[DESCRIPTION],
REMARKS,
TIME_PERIOD,
OWNER_RANKID,
RESP_USERID,
BS_GOALSID,
RV_CALCULATION_TYPE,
TBL_UNIDADES_ID,
RV_CALC_FORMULA,
BS_LOCATIONSID,
MET_MODE,
L_ACTIVE,
INPUTUSER,
INPUTDATE,
PERC_TO_RED,
PV_CALCULATION_TYPE,
PV_CALC_FORMULA,
SP4PROCESSING,
LAST_UPDATE,
CUALITATIVE_RULES,
STATUS_MODE,
SP4PROCESSING_PARAMETERS,
RV_DEFAULT_VALUE,
PV_DEFAULT_VALUE,
RV_LABEL,
PV_LABEL, 
MINVAL, 
MAXVAL, 
BS_INDICATORSCATEGORIESID,
CUSTOM_ICON_ID,
IK_HTMLREPORTS_OPTIONS_ID,
DATAMINVAL,
DATAMAXVAL,
PERC_GREEN
)
SELECT 
@DESCRIPTION  AS [DESCRIPTION],
REMARKS,
TIME_PERIOD,
OWNER_RANKID,
RESP_USERID,
BS_GOALSID,
RV_CALCULATION_TYPE,
TBL_UNIDADES_ID,
RV_CALC_FORMULA,
BS_LOCATIONSID,
MET_MODE,
L_ACTIVE,
INPUTUSER,
INPUTDATE,
PERC_TO_RED,
PV_CALCULATION_TYPE,
PV_CALC_FORMULA,
SP4PROCESSING,
LAST_UPDATE,
CUALITATIVE_RULES,
STATUS_MODE,
SP4PROCESSING_PARAMETERS,
RV_DEFAULT_VALUE,
PV_DEFAULT_VALUE,
RV_LABEL,
PV_LABEL,
MINVAL, 
MAXVAL, 
BS_INDICATORSCATEGORIESID,
CUSTOM_ICON_ID,
IK_HTMLREPORTS_OPTIONS_ID,
DATAMINVAL,
DATAMAXVAL,
PERC_GREEN
FROM BS_INDICATORS
WHERE BS_INDICATORSID = @BS_INDICATORSID

DECLARE @RESULT int
SET @RESULT = (SELECT BS_INDICATORSID FROM BS_INDICATORS WHERE (BS_INDICATORSID = @@IDENTITY))

/* INDICATORS OPTIONS */
INSERT INTO BS_INDICATORS_OPTIONS (
BS_INDICATORSID,
USERID,
SEC_LEVEL,
SHOWINMYTASKS,
NOTIFYSTATUSCHANGE,
NOTIFYTENDENCECHANGE
)
SELECT
@RESULT AS BS_INDICATORSID,
USERID,
SEC_LEVEL,
SHOWINMYTASKS,
NOTIFYSTATUSCHANGE,
NOTIFYTENDENCECHANGE
FROM BS_INDICATORS_OPTIONS 
WHERE BS_INDICATORSID = @BS_INDICATORSID


/* RELATED INDICATORS */
INSERT INTO BS_INDICATORSREL (
BS_INDICATORSID,
REL_BS_INDICATORSID
)
SELECT
@RESULT AS BS_INDICATORSID,
REL_BS_INDICATORSID
FROM BS_INDICATORSREL 
WHERE BS_INDICATORSID = @BS_INDICATORSID

/* DATA */
INSERT INTO BS_INDICATORSDATA (
BS_INDICATORSID,
INPUTUSER,
INPUTDATE,
MSR_REAL_VALUE,
MSR_PLANNED_VALUE,
MSR_DATE
)
SELECT
@RESULT AS BS_INDICATORSID,
INPUTUSER,
INPUTDATE,
MSR_REAL_VALUE,
MSR_PLANNED_VALUE,
MSR_DATE
FROM BS_INDICATORSDATA 
WHERE BS_INDICATORSID = @BS_INDICATORSID

COMMIT TRANSACTION
GO

GO
--SqlScripter----[dbo].[ik_BS_FORMULA].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_FORMULA]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_FORMULA] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_FORMULA]
(
	@BS_INDICATORSID int,
	@TIME_PERIOD int,
	@RV_FORMULA varchar(max),
	@PV_FORMULA varchar(max),
	@CS_INVOLVED_INDICATORS varchar(300),
	@SJOINS varchar(max),
	@SWHERE varchar(max)
	)
AS
/* 

Valid @BS_TimePeriods
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Semester = 6
Annualy = 5

*/
SET NOCOUNT ON

SET DATEFORMAT ymd
SET DATEFIRST 7

CREATE TABLE #TEMP_INDICATOR (
PERIODO int,
PLANNED_VALUE float,
ACTUAL_VALUE float,
SRC_INDICATOR int
)

DECLARE @SQL varchar(max)
DECLARE @GROUP_EXP varchar(1000)
DECLARE @FECHA_EXP varchar(1000)

	
SET @GROUP_EXP = 'dbo.ik_bs_Periods_Grouping('+LTRIM(STR(@TIME_PERIOD))+', P.MSR_DATE)'
SET @FECHA_EXP = 'dbo.ik_bs_Periods_GroupExp_ToDate('+LTRIM(STR(@TIME_PERIOD))+',R1.PERIODO)'

SET @SQL = '
INSERT INTO #TEMP_INDICATOR
SELECT '+ @GROUP_EXP +' AS PERIOD,
	   SUM(P.MSR_PLANNED_VALUE) AS PLANNED_VALUE,
	   SUM(P.MSR_REAL_VALUE) AS ACTUAL_VALUE,
	   REL.REL_BS_INDICATORSID

FROM  BS_INDICATORSREL REL
  INNER JOIN BS_INDICATORSDATA P
  ON REL.REL_BS_INDICATORSID = P.BS_INDICATORSID

WHERE REL.BS_INDICATORSID='+LTRIM(STR(@BS_INDICATORSID))+' AND REL.REL_BS_INDICATORSID IN ('+@CS_INVOLVED_INDICATORS+')

GROUP BY REL.REL_BS_INDICATORSID,' + @GROUP_EXP

EXEC(@SQL)

SET @SQL = '
SELECT '
+@RV_FORMULA+' AS MSR_REAL_VALUE, '
+@PV_FORMULA+' AS MSR_PLANNED_VALUE, 
' + @FECHA_EXP + ' AS MSR_DATE

FROM #TEMP_INDICATOR R1
'+@SJOINS+'
WHERE 
'+@SWHERE

EXEC(@SQL)

DROP TABLE #TEMP_INDICATOR

RETURN
GO

GO
--SqlScripter----[dbo].[ik_BS_GroupBy_SUM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_GroupBy_SUM]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_GroupBy_SUM] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_GroupBy_SUM]
(
	@BS_INDICATORSID int,
	@BS_TIMEPERIOD int,
	@STARTDATE datetime,
	@ENDDATE datetime
	)
AS
	/* 
	
	  Valid @BS_TimePeriods
	  Daily = 1
        Weekly = 2
        Monthly = 3
        Quarterly = 4
        Annualy = 5
        Semester = 6
	
	*/

SET DATEFORMAT YMD
SET DATEFIRST 7

DECLARE @STARTVALUE int
DECLARE @ENDVALUE int


SET @STARTVALUE = dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, @STARTDATE)
SET @ENDVALUE = dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, @ENDDATE)
SELECT MIN(MSR_DATE)  AS MSR_DATE,  dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE) AS PERIOD,
	   SUM(MSR_REAL_VALUE) AS ACTUAL_VALUE,
	   SUM(MSR_PLANNED_VALUE) AS PLANNED_VALUE 
FROM BS_INDICATORSDATA
WHERE BS_INDICATORSID=@BS_INDICATORSID AND dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE) BETWEEN @STARTVALUE AND @ENDVALUE
GROUP BY dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE)
ORDER BY 1 DESC

RETURN
GO

GO
--SqlScripter----[dbo].[ik_BS_GroupBy_SUM_Forced_Data].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_GroupBy_SUM_Forced_Data]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_GroupBy_SUM_Forced_Data] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_GroupBy_SUM_Forced_Data]
(
	@BS_INDICATORSID int,
	@BS_TIMEPERIOD int,
	@STARTDATE datetime,
	@ENDDATE datetime
	)
AS
	/* 
	
	  Valid @BS_TimePeriods
		Daily = 1
        Weekly = 2
        Monthly = 3
        Quarterly = 4
        Semester = 6
        Annualy = 5
        Semester = 6	
	*/

SET DATEFORMAT YMD
SET DATEFIRST 7


CREATE TABLE #TEMP_INDICATOR (
MSR_DATE datetime,
PERIOD int,
ACTUAL_VALUE float,
PLANNED_VALUE float
)


DECLARE @STARTVALUE int
DECLARE @ENDVALUE int

SET @STARTVALUE = dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, @STARTDATE)
SET @ENDVALUE = dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, @ENDDATE)

INSERT INTO #TEMP_INDICATOR
SELECT MSR_DATE, dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE) AS PERIOD,
	   SUM(MSR_REAL_VALUE) AS ACTUAL_VALUE,
	   SUM(MSR_PLANNED_VALUE) AS PLANNED_VALUE 
FROM BS_INDICATORSDATA
WHERE BS_INDICATORSID=@BS_INDICATORSID AND dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE) BETWEEN @STARTVALUE AND @ENDVALUE
GROUP BY dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD, MSR_DATE),MSR_DATE
ORDER BY 1 DESC


DECLARE @FROMDATE datetime
DECLARE @TODATE datetime
DECLARE @DBDATE datetime
DECLARE @WN int

-- AGREGAR FECHAS AL PRINCIPIO
SET @FROMDATE = @STARTDATE
SET @DBDATE = (SELECT TOP 1 MSR_DATE FROM #TEMP_INDICATOR ORDER BY MSR_DATE)

IF (@DBDATE IS NULL)
BEGIN
	SET @TODATE = @ENDDATE 
END
ELSE
BEGIN
	SET @TODATE = @DBDATE
END

WHILE (DATEDIFF(day,@FROMDATE,@TODATE)> 0)
BEGIN
	INSERT INTO #TEMP_INDICATOR (MSR_DATE, PERIOD, ACTUAL_VALUE, PLANNED_VALUE)	
	VALUES (
		@FROMDATE,
		dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD,@FROMDATE),
		NULL,NULL
		)
		
	SET @FROMDATE = dbo.ik_bs_Next_Period_Date(@BS_TIMEPERIOD,@FROMDATE)
END
-- END AGREGAR FECHAS AL PRINCIPIO



-- AGREGAR FECHAS AL FINAL
SET @TODATE = @ENDDATE 
SET @DBDATE = (SELECT TOP 1 MSR_DATE FROM #TEMP_INDICATOR ORDER BY MSR_DATE DESC)

IF (@DBDATE IS NULL)
BEGIN
	SET @FROMDATE = @STARTDATE
END
ELSE
BEGIN
	SET @FROMDATE = @DBDATE
END

--SET @FROMDATE = (DATEADD(Day, 1, @FROMDATE))
SET @FROMDATE = dbo.ik_bs_Next_Period_Date(@BS_TIMEPERIOD,@FROMDATE)
WHILE (DATEDIFF(day,@FROMDATE,@TODATE) >= 0)
BEGIN
	INSERT INTO #TEMP_INDICATOR (MSR_DATE, PERIOD, ACTUAL_VALUE, PLANNED_VALUE)	
	VALUES (
		@FROMDATE,
		dbo.ik_bs_Periods_Grouping(@BS_TIMEPERIOD,@FROMDATE),
		NULL,NULL
		)
		
	SET @FROMDATE = dbo.ik_bs_Next_Period_Date(@BS_TIMEPERIOD,@FROMDATE)
END
-- END AGREGAR FECHAS AL FINAL

SELECT * FROM #TEMP_INDICATOR ORDER BY PERIOD DESC
DROP TABLE #TEMP_INDICATOR

RETURN
GO

GO
--SqlScripter----[dbo].[ik_BS_Indicators_Forget_Calculation_Controls].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_Indicators_Forget_Calculation_Controls]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_Indicators_Forget_Calculation_Controls] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_Indicators_Forget_Calculation_Controls]
AS

TRUNCATE TABLE BS_INDICATORS_LAST_CALCULATE
GO

GO
--SqlScripter----[dbo].[ik_BS_SUM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_BS_SUM]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_BS_SUM] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_BS_SUM]
(
	@BS_INDICATORSID int,
	@TIME_PERIOD int
	)
AS
/* 
Valid @BS_TimePeriods
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Semester = 6
Annualy = 5
*/
SET DATEFORMAT YMD
SET DATEFIRST 7

SELECT 
	dbo.ik_bs_Periods_GroupExp_ToDate(@TIME_PERIOD,MSR_DATE) AS MSR_DATE,
	MSR_REAL_VALUE,
	MSR_PLANNED_VALUE
FROM
(

SELECT dbo.ik_bs_Periods_Grouping(@TIME_PERIOD, R.MSR_DATE) AS MSR_DATE,
	   SUM(R.MSR_REAL_VALUE) AS MSR_REAL_VALUE,
	   SUM(R.MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE
	
FROM BS_INDICATORS P
INNER JOIN BS_INDICATORSREL REL

	INNER JOIN BS_INDICATORSDATA R
	ON REL.REL_BS_INDICATORSID = R.BS_INDICATORSID

ON REL.BS_INDICATORSID = P.BS_INDICATORSID

WHERE P.BS_INDICATORSID=@BS_INDICATORSID


GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD, R.MSR_DATE)

) AS T1

RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsindicators_4userinput].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsindicators_4userinput]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsindicators_4userinput] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsindicators_4userinput]
(
		@parameters nvarchar(500) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(50), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

DECLARE @strSQL varchar(4000)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION FROM VISTA_BS_INDICATORS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION  FROM VISTA_BS_INDICATORS' /*select all*/
	ELSE /*Select only allowed indicators*/
		
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION  FROM (
		SELECT * FROM VISTA_BS_INDICATORS
		WHERE 
		BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM BS_INDICATORS WHERE RESP_USERID='+ LTRIM(STR(@IKCDU)) +') 
		 OR BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL=5 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		 OR BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL=5 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @strSQL = @strSQL + ' WHERE ' + @parameters
	END

	IF @sort <> ''
	BEGIN
		SET @strSQL = @strSQL + ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @strSQL = @strSQL + ' ORDER BY [DESCRIPTION]'
	END
END


EXEC (@strSQL)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsindicators_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsindicators_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsindicators_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsindicators_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION FROM VISTA_BS_INDICATORS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION  FROM VISTA_BS_INDICATORS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT *, ''Images/bs_indicador.gif'' AS ICONOINDICADOR, ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION  FROM (
		SELECT * FROM VISTA_BS_INDICATORS
		WHERE BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END


EXEC (@strSQL+@where+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsindicatorsIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsindicatorsIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsindicatorsIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsindicatorsIds_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_IND_WITH_ACCESS_IDS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS' /*select all*/
	ELSE /*Select only allowed */
		
		'SELECT BS_INDICATORSID FROM (
		SELECT * FROM VISTA_BS_INDICATORS
		WHERE BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END


BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' ' +  @strSQL+@where+@parameters+@sort)
END TRY
BEGIN CATCH	
END CATCH



IF @L_RETURN_DATA = 1
BEGIN
	EXEC (@strSQL+@where+@parameters+@sort)
END



RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsStratNodesIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsStratNodesIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsStratNodesIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsStratNodesIds_withaccess]
(
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_BS_STRAT_NODES_WITH_ACCESS_IDS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD
SET NOCOUNT ON

BEGIN TRY
	CREATE TABLE #TMP_BS_STRATNODES_WITH_ACCESS(BS_STRAT_NODESID int)
END TRY
BEGIN CATCH
END CATCH


CREATE TABLE #TMP_BS_STRATPLANS_WITH_ACCESS (BS_STRAT_PLANSID int)		
EXEC dbo.ik_bsstratplansIds_withaccess '','',@BSPROCCAT,@IKCAT, @IKCDU,'#TMP_BS_STRATPLANS_WITH_ACCESS',0
		
CREATE TABLE #TMP_BS_STRATNODES_WITHOUT_ACCESS (BS_STRAT_NODESID int)		


INSERT INTO #TMP_BS_STRATNODES_WITHOUT_ACCESS (BS_STRAT_NODESID)
SELECT BS_STRAT_NODES_OPTIONS.BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODES_OPTIONS.SEC_LEVEL=0 AND USERID=@IKCDU

INSERT INTO #TMP_BS_STRATNODES_WITHOUT_ACCESS (BS_STRAT_NODESID)
SELECT BS_STRAT_NODES_OPTIONS.BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODES_OPTIONS.SEC_LEVEL=0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU) AND NOT BS_STRAT_NODESID IN (SELECT BS_STRAT_NODES_OPTIONS.BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODES_OPTIONS.SEC_LEVEL>0 AND USERID=@IKCDU)


IF @IKCAT=0 OR @BSPROCCAT=2  
BEGIN
		INSERT INTO #TMP_BS_STRATNODES_WITH_ACCESS
		SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES WHERE 1=0 /*select nothing*/
END
ELSE IF @IKCAT=4 OR @BSPROCCAT=0 
BEGIN
		INSERT INTO #TMP_BS_STRATNODES_WITH_ACCESS
		SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES /*select all*/
END
ELSE /*Select only allowed docs*/		
BEGIN
		INSERT INTO #TMP_BS_STRATNODES_WITH_ACCESS

		SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES 
		JOIN #TMP_BS_STRATPLANS_WITH_ACCESS ON #TMP_BS_STRATPLANS_WITH_ACCESS.BS_STRAT_PLANSID=BS_STRAT_NODES.BS_STRAT_PLANSID
		WHERE NOT BS_STRAT_NODESID IN (SELECT #TMP_BS_STRATNODES_WITHOUT_ACCESS.BS_STRAT_NODESID FROM #TMP_BS_STRATNODES_WITHOUT_ACCESS)

		UNION
				
		SELECT BS_STRAT_NODES_OPTIONS.BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODES_OPTIONS.SEC_LEVEL>0 AND USERID=@IKCDU

		UNION

		SELECT BS_STRAT_NODES_OPTIONS.BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODES_OPTIONS.SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU) AND NOT BS_STRAT_NODESID IN (SELECT #TMP_BS_STRATNODES_WITHOUT_ACCESS.BS_STRAT_NODESID FROM #TMP_BS_STRATNODES_WITHOUT_ACCESS)				
		
END		


BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' SELECT * FROM #TMP_BS_STRATNODES_WITH_ACCESS')
END TRY
BEGIN CATCH	
END CATCH


IF @L_RETURN_DATA = 1
BEGIN
	SELECT * FROM #TMP_BS_STRATNODES_WITH_ACCESS
END



RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsstratplans_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsstratplans_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsstratplans_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsstratplans_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000), @where varchar(100)


SELECT @strDOC =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT *, ''Images/bs_planestrateg.gif'' AS ICONOPLAN FROM BS_STRAT_PLANS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT *, ''Images/bs_planestrateg.gif'' AS ICONOPLAN FROM BS_STRAT_PLANS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT *, ''Images/bs_planestrateg.gif'' AS ICONOPLAN FROM (
		SELECT * FROM BS_STRAT_PLANS		
		WHERE BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM VISTA_BS_STRATPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM VISTA_BS_STRATPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END


EXEC (@strDOC+@where+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_bsstratplansIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_bsstratplansIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_bsstratplansIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_bsstratplansIds_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_BSSTRATPLANS_WITH_ACCESS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT BS_STRAT_PLANSID FROM (
		SELECT * FROM BS_STRAT_PLANS		
		WHERE BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM VISTA_BS_STRATPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM VISTA_BS_STRATPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END



BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' ' +  @strSQL+@where+@parameters+@sort)
END TRY
BEGIN CATCH	
END CATCH



IF @L_RETURN_DATA = 1
BEGIN
	EXEC (@strSQL+@where+@parameters+@sort)
END

RETURN
GO

GO
--SqlScripter----[dbo].[ik_cookie_is_valid].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_cookie_is_valid]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_cookie_is_valid] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_cookie_is_valid]
(@Cookie nvarchar(50) = '', @SPName nvarchar(50),@IsValid tinyint OUTPUT)
AS

SET @IsValid = 1
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_AverageAnual].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AverageAnual]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AverageAnual] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AverageAnual]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)

/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

DECLARE @BY_PERIOD int
IF @TIME_PERIOD > 100 SET @BY_PERIOD = 105
ELSE SET @BY_PERIOD = 5

SELECT AVG(MSR_REAL_VALUE) AS MSR_REAL_VALUE, AVG(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3

RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_AverageMonthly].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AverageMonthly]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AverageMonthly] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AverageMonthly]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)

/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

IF 	(@TIME_PERIOD>=4)
BEGIN
	SELECT 'Quarterly, Semesterly and Annualy periods are not supported' AS IK_ERROR
	RETURN	
END


DECLARE @BY_PERIOD int
SET @BY_PERIOD = 3

SELECT AVG(MSR_REAL_VALUE) AS MSR_REAL_VALUE, AVG(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_AverageQuarterly].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AverageQuarterly]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AverageQuarterly] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AverageQuarterly]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)

AS
/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

IF 	(@TIME_PERIOD>=5)
BEGIN
	SELECT 'Semesterly and Annualy periods are not supported' AS IK_ERROR
	RETURN	
END

DECLARE @BY_PERIOD int
IF @TIME_PERIOD > 100 SET @BY_PERIOD = 104
ELSE SET @BY_PERIOD = 4


SELECT AVG(MSR_REAL_VALUE) AS MSR_REAL_VALUE, AVG(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_AvgOfSurveyQuestion].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AvgOfSurveyQuestion]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AvgOfSurveyQuestion] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AvgOfSurveyQuestion]
(
		@TIME_PERIOD AS tinyint,
		@SURVEYID AS int,
		@QUESTION as tinyint
	)

/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF NOT EXISTS(
SELECT * FROM dbo.syscolumns WHERE name LIKE  'Q' + LTRIM(STR(@QUESTION)) AND id IN (SELECT id FROM dbo.sysobjects WHERE name LIKE 'IK_SURVEY_' + LTRIM(STR(@SURVEYID)))
)
BEGIN
	SELECT 'Incorrect survey question or survey not running' AS IK_ERROR
	RETURN
END 


DECLARE @STRSQL varchar(8000)	

SET @STRSQL = '
SELECT MIN(PDATE) AS MSR_DATE,
AVG(CAST(Q'+ LTRIM(STR(@QUESTION))  +' AS FLOAT)) AS MSR_REAL_VALUE,
NULL AS MSR_PLANNED_VALUE
FROM IK_SURVEY_' + LTRIM(STR(@SURVEYID)) + 
' GROUP BY dbo.ik_bs_Periods_Grouping('+LTRIM(STR(@TIME_PERIOD))+',PDATE)
ORDER BY dbo.ik_bs_Periods_Grouping('+LTRIM(STR(@TIME_PERIOD))+',PDATE)
'
exec (@STRSQL)
	
return
GO

GO
--SqlScripter----[dbo].[ik_dc_AvgTimeOfRespOfComps].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AvgTimeOfRespOfComps]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AvgTimeOfRespOfComps] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AvgTimeOfRespOfComps]
(
		@TIME_PERIOD AS tinyint		
	)

/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 


SELECT MIN(MSR_DATE) AS MSR_DATE, 
       AVG(MSR_REAL_VALUE) AS MSR_REAL_VALUE, 
       NULL AS MSR_PLANNED_VALUE FROM (
       
	   SELECT 
		FECHA AS MSR_DATE, 
		CASE 
			WHEN V_ESTADO=1 AND FECHARESPUESTA IS NULL THEN
				CAST(DATEDIFF(day, FECHA, GETDATE()) AS FLOAT) 
			ELSE CAST(DATEDIFF(day, FECHA, FECHARESPUESTA) AS FLOAT) 
		END AS MSR_REAL_VALUE, 
		NULL AS MSR_PLANNED_VALUE 
	   FROM VAR_QUEJAS_VIEW
		WHERE 
			(
			DATEDIFF(day,FECHA,GETDATE())>=0 ) AND( 
			(V_ESTADO=2 AND FECHARESPUESTA<=GETDATE() AND FECHARESPUESTA>= FECHA)
			OR
			(V_ESTADO=1 AND ((FECHARESPUESTA<=GETDATE() AND FECHARESPUESTA>= FECHA) OR (FECHARESPUESTA IS NULL)))
			)

) AS RS

GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)


RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_AvgTimeOfSolutionOfComps].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_AvgTimeOfSolutionOfComps]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_AvgTimeOfSolutionOfComps] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_AvgTimeOfSolutionOfComps]
(
		@TIME_PERIOD AS tinyint		
	)

/* 

@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5

*/

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 
	

SELECT MIN(MSR_DATE) AS MSR_DATE, AVG(MSR_REAL_VALUE) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM (
	SELECT 
		FECHA AS MSR_DATE, 
		CASE 
			WHEN V_ESTADO=1 AND FECHASOLUCION IS NULL THEN
				CAST(DATEDIFF(day, FECHA, GETDATE()) AS FLOAT) 
			ELSE CAST(DATEDIFF(day, FECHA, FECHASOLUCION) AS FLOAT) 
		END 
		AS MSR_REAL_VALUE, 
		NULL AS MSR_PLANNED_VALUE 
	FROM VAR_QUEJAS_VIEW
		WHERE 
			(
			DATEDIFF(day,FECHA,GETDATE())>=0 ) AND( 
			(V_ESTADO=2 AND FECHASOLUCION<=GETDATE() AND FECHASOLUCION>= FECHA)
			OR
			(V_ESTADO=1 AND ((FECHASOLUCION<=GETDATE() AND FECHASOLUCION>= FECHA) OR (FECHASOLUCION IS NULL)))
			)

) AS RS

GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_CumulativeAnual].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_CumulativeAnual]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_CumulativeAnual] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_CumulativeAnual]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

DECLARE @BY_PERIOD int
IF @TIME_PERIOD > 100 SET @BY_PERIOD = 105
ELSE SET @BY_PERIOD = 5


SELECT SUM(MSR_REAL_VALUE) AS MSR_REAL_VALUE, SUM(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3
	
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_CumulativeMonthly].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_CumulativeMonthly]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_CumulativeMonthly] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_CumulativeMonthly]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

IF 	(@TIME_PERIOD>=4)
BEGIN
	SELECT 'Quarterly, Semesterly and Annualy periods are not supported' AS IK_ERROR
	RETURN	
END


DECLARE @BY_PERIOD int
SET @BY_PERIOD = 3

SELECT SUM(MSR_REAL_VALUE) AS MSR_REAL_VALUE, SUM(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3

RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_CumulativeQuarterly].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_CumulativeQuarterly]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_CumulativeQuarterly] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_CumulativeQuarterly]
(
		@BS_INDICATORSID  int,
		@TIME_PERIOD  tinyint,
		@BS_INDICATORSID_SOURCE int
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

IF (SELECT TIME_PERIOD FROM BS_INDICATORS WHERE BS_INDICATORSID=@BS_INDICATORSID_SOURCE)<> @TIME_PERIOD 
BEGIN
	SELECT 'The selected indicator must have the same time period' AS IK_ERROR
	RETURN	
END

IF (SELECT COUNT(*) FROM BS_INDICATORSREL WHERE BS_INDICATORSID=@BS_INDICATORSID AND REL_BS_INDICATORSID=@BS_INDICATORSID_SOURCE )=0
BEGIN
	SELECT 'The supplied indicator is not a data source of this indicator' AS IK_ERROR
	RETURN	
END

IF 	(@TIME_PERIOD>=5)
BEGIN
	SELECT 'Semesterly and Annualy periods are not supported' AS IK_ERROR
	RETURN	
END

DECLARE @BY_PERIOD int
IF @TIME_PERIOD > 100 SET @BY_PERIOD = 104
ELSE SET @BY_PERIOD = 4


SELECT SUM(MSR_REAL_VALUE) AS MSR_REAL_VALUE, SUM(MSR_PLANNED_VALUE) AS MSR_PLANNED_VALUE, MIN(MSR_DATE) AS MSR_DATE FROM (
SELECT B.MSR_REAL_VALUE , B.MSR_PLANNED_VALUE ,A.MSR_DATE
FROM dbo.BS_INDICATORSDATA A
	INNER JOIN dbo.BS_INDICATORSDATA B
		ON A.BS_INDICATORSID = B.BS_INDICATORSID
			AND B.MSR_DATE <= A.MSR_DATE
WHERE A.BS_INDICATORSID=@BS_INDICATORSID_SOURCE
AND dbo.ik_bs_Dates_Are_Same_Period(@BY_PERIOD,B.MSR_DATE,A.MSR_DATE) = 1
) AS DATA
GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,MSR_DATE)
ORDER BY 3

RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfComplaints].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfComplaints]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfComplaints] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfComplaints]
(
		@TIME_PERIOD AS tinyint		
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

	SELECT MIN(FECHA) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_QUEJAS_VIEW
	WHERE V_ESTADO=1 OR V_ESTADO=2
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)


RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfComplaintsByCat].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfComplaintsByCat]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfComplaintsByCat] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfComplaintsByCat]
(
		@TIME_PERIOD AS tinyint,
		@CATEGORIA_ID AS int
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 
	
	SELECT MIN(FECHA) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_QUEJAS_VIEW
	WHERE V_CATEGORIA = @CATEGORIA_ID AND (V_ESTADO=1 OR V_ESTADO=2)
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfComplaintsBySector].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfComplaintsBySector]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfComplaintsBySector] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfComplaintsBySector]
(
		@TIME_PERIOD AS tinyint,
		@SECTORDETECCION AS nvarchar(1000)
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 


	SELECT MIN(FECHA) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_QUEJAS_VIEW
	WHERE SECTORDETECCION LIKE @SECTORDETECCION AND (V_ESTADO=1 OR V_ESTADO=2)
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfImpIntSuggestions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfImpIntSuggestions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfImpIntSuggestions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfImpIntSuggestions]
(
		@TIME_PERIOD AS tinyint		
	)

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 
		
	SELECT MIN(FECHA) AS MSR_DATE, 
	SUM(
	CASE 
		WHEN V_ESTADO=2 THEN 1
		ELSE 0
	END
	) AS MSR_REAL_VALUE
	, NULL AS MSR_PLANNED_VALUE FROM VAR_SUGERENCIASINT_VIEW
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
		

RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfIntSuggestions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfIntSuggestions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfIntSuggestions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfIntSuggestions]
(
		@TIME_PERIOD AS tinyint		
	)

AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 
		
	SELECT MIN(FECHA) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_SUGERENCIASINT_VIEW
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHA)
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfNC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfNC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfNC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfNC]
(
		@TIME_PERIOD AS tinyint		
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

	SELECT MIN(FECHADETECCION) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_NOCONFORMIDADES_VIEW
	WHERE V_ESTADO=1 OR V_ESTADO=2
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)


RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfNCByCategory].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfNCByCategory]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfNCByCategory] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfNCByCategory]
(
		@TIME_PERIOD AS tinyint,
		@CATEGORIA_ID AS int
	)
/* 
@TIME_PERIOD: 
Daily = 1
Weekly = 2
Monthly = 3
Quarterly = 4
Annualy = 5
*/
AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 

	SELECT MIN(FECHADETECCION) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_NOCONFORMIDADES_VIEW
	WHERE V_CATEGORIA = @CATEGORIA_ID AND (V_ESTADO=1 OR V_ESTADO=2)
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_dc_QtyOfNCBySector].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dc_QtyOfNCBySector]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dc_QtyOfNCBySector] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dc_QtyOfNCBySector]
(
		@TIME_PERIOD AS tinyint,
		@SECTORDETECCION AS nvarchar(1000)
	)


AS
SET DATEFORMAT YMD
SET DATEFIRST 7
SET NOCOUNT ON 
	
	SELECT MIN(FECHADETECCION) AS MSR_DATE, COUNT(CODIGO) AS MSR_REAL_VALUE, NULL AS MSR_PLANNED_VALUE FROM VAR_NOCONFORMIDADES_VIEW
	WHERE SECTORDETECCION LIKE @SECTORDETECCION  AND (V_ESTADO=1 OR V_ESTADO=2)
	GROUP BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)
	ORDER BY dbo.ik_bs_Periods_Grouping(@TIME_PERIOD,FECHADETECCION)

	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_delete_AUDITORIAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_AUDITORIAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_AUDITORIAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_AUDITORIAS]
(@CodAudit int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodAudit = CODIGO of the table AUDITORIAS to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodAudit in
other tables AND @CodAudit itself from AUDITORIAS
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_AUDITORIAS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_AUDITORIAS: VALIDATION: FAILURE (%u)',16,1,@CodAudit)
	RETURN(-2)
END



DECLARE @LastError int
SET @LastError = 0




BEGIN TRANSACTION


/*
RELATED DATA
*/

DELETE FROM AUDITORIASARCHIVOS WHERE CODIGOMARCO= @CodAudit
SELECT @LastError = @LastError + @@ERROR

DELETE FROM MARCODOCUMENTOSREL WHERE CODIGOMARCO= @CodAudit
SELECT @LastError = @LastError + @@ERROR

DELETE FROM AUD_RELATEDITEMS WHERE A_ID= @CodAudit
SELECT @LastError = @LastError + @@ERROR

DELETE FROM AUDITEDS WHERE AUDIT_ID= @CodAudit
SELECT @LastError = @LastError + @@ERROR

DELETE FROM AUDITORS WHERE AUDIT_ID= @CodAudit
SELECT @LastError = @LastError + @@ERROR

UPDATE NCMAINPROD SET CODIGOMARCO=0 , TIPOMARCO=0 WHERE CODIGOMARCO=@CodAudit AND TIPOMARCO=1

/*AUDITORIAS itself*/

DELETE FROM AUDITORIAS WHERE CODIGO = @CodAudit
SELECT @LastError = @LastError + @@ERROR



IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_AUDITORIAS: FAILURE (%u)',16,1,@CodAudit)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_AUDITORIAS: SUCCESS (' + ltrim(str(@CodAudit)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_BS_INDICATORS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_BS_INDICATORS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_BS_INDICATORS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_BS_INDICATORS]
(@BsIndicatorID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @BsIndicatorID = BS_INDICATORSID from table BS_INDICATORS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodDoc in
other tables AND @CodDoc itself from DOCUMENTOS
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_BS_INDICATORS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_INDICATORS: VALIDATION: FAILURE (%u)',16,1,@BsIndicatorID)
	RETURN(-2)
END


IF (SELECT COUNT(BS_INDICATORSID) FROM BS_INDICATORS WHERE BS_INDICATORSID=@BsIndicatorID) = 0
BEGIN
	SET @Success = 0
	RAISERROR('@BsIndicatorID: CHECK: FAILURE (%u). INDICATOR DOESN´T EXSIST.',16,1,@BsIndicatorID)
	RETURN(-2)
END


IF (SELECT L_ACTIVE FROM BS_INDICATORS  WHERE BS_INDICATORSID=@BsIndicatorID) = 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_INDICATORS: CHECK: FAILURE (%u). THE SPECIFIED CODE BELONGS TO AN ACTIVE INDICATOR SO CANNOT BE DELETED.',16,1,@BsIndicatorID)
	RETURN(-2)
END

IF (SELECT COUNT(BS_INDICATORSID ) FROM BS_INDICATORSREL WHERE REL_BS_INDICATORSID= @BsIndicatorID) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_INDICATORS: CHECK: FAILURE (%u). THE SPECIFIED CODE IS RELATED FROM ONE OR MORE INDICATORS',16,1,@BsIndicatorID)
	RETURN(-2)
END




DECLARE @LastError int
SET @LastError = 0

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM BS_INDICATORS WHERE BS_INDICATORSID=@BsIndicatorID)

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_BS_INDICATORS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@BsIndicatorID)
		RETURN(-1)
	END
END




DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='I' AND IKALERTS.SOURCE_ENTITY_ID = @BsIndicatorID) 

declare @IKALERTS_ID int


open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions


DELETE FROM BS_INDICATORSDATA WHERE BS_INDICATORSID = @BsIndicatorID 
SELECT @LastError = @LastError + @@ERROR

DELETE FROM BS_INDICATORSREL WHERE BS_INDICATORSID = @BsIndicatorID OR REL_BS_INDICATORSID= @BsIndicatorID
SELECT @LastError = @LastError + @@ERROR

DELETE FROM BS_IND_ASSESMENTS WHERE BS_INDICATORSID = @BsIndicatorID 
SELECT @LastError = @LastError + @@ERROR

DELETE FROM BS_INDICATORS_OPTIONS WHERE BS_INDICATORSID= @BSINDICATORID 

DELETE FROM BS_IND_STATE_CACHE WHERE BS_INDICATORSID= @BSINDICATORID 


DELETE FROM IKI_BSINDICATORS WHERE I_ID = @BsIndicatorID 
SELECT @LastError = @LastError + @@ERROR

DELETE FROM BS_INDICATORS_NOTIFICATIONS WHERE BS_INDICATORSID=@BSINDICATORID


/*BS_INDICATORSID itself*/

DELETE FROM BS_INDICATORS WHERE BS_INDICATORSID= @BsIndicatorID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_BS_INDICATORS: FAILURE (%u)',16,1,@BsIndicatorID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_BS_INDICATORS: SUCCESS (' + ltrim(str(@BsIndicatorID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_BS_STRAT_NODES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_BS_STRAT_NODES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_BS_STRAT_NODES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_BS_STRAT_NODES]
(@BsStratNodeID int, @Cookie nvarchar(50) = '' OUTPUT, @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @BsStratNodeID = BS_STRAT_PLANSID from table BS_STRAT_PLANS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_BS_STRAT_NODES', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_STRAT_NODES: VALIDATION: FAILURE (%u)',16,1,@BsStratNodeID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM BS_STRAT_NODES WHERE BS_STRAT_NODESID=@BsStratNodeID)

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_BS_STRAT_NODES: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@BsStratNodeID)
		RETURN(-1)
	END
END

DELETE FROM [IKI_BSSTRATNODES] WHERE S_ID = @BsStratNodeID 
SELECT @LastError = @LastError + @@ERROR



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='S' AND IKALERTS.SOURCE_ENTITY_ID = @BsStratNodeID) 

declare @IKALERTS_ID int

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



DELETE FROM BS_STRAT_NODES_OPTIONS WHERE BS_STRAT_NODESID = @BsStratNodeID 
SELECT @LastError = @LastError + @@ERROR


DELETE FROM BS_STRAT_NODES_RELATIONS WHERE BS_STRAT_NODESID_SOURCE = @BsStratNodeID OR BS_STRAT_NODESID_TARGET = @BsStratNodeID
SELECT @LastError = @LastError + @@ERROR

UPDATE BS_STRAT_NODES SET BS_STRAT_NODESID_PARENT =NULL WHERE BS_STRAT_NODESID_PARENT=@BsStratNodeID


UPDATE NCMAINPROD SET CODIGOMARCO=NULL , TIPOMARCO=0 WHERE CODIGOMARCO=@BsStratNodeID AND TIPOMARCO=4


/*BS_STRAT_PLANSID itself*/

DELETE FROM BS_STRAT_NODES WHERE BS_STRAT_NODESID= @BsStratNodeID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_BS_STRAT_NODES: FAILURE (%u)',16,1,@BsStratNodeID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_BS_STRAT_NODES: SUCCESS (' + ltrim(str(@BsStratNodeID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_BS_STRAT_PLANS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_BS_STRAT_PLANS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_BS_STRAT_PLANS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_BS_STRAT_PLANS]
(@BsStratPlanID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @BsStratPlanID = BS_STRAT_PLANSID from table BS_STRAT_PLANS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_BS_STRAT_PLANS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_STRAT_PLANS: VALIDATION: FAILURE (%u)',16,1,@BsStratPlanID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM BS_STRAT_PLANS WHERE BS_STRAT_PLANSID=@BsStratPlanID)

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_BS_STRAT_PLANS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@BsStratPlanID)
		RETURN(-1)
	END
END

DELETE FROM [IKI_BSSTRATPLANS] WHERE  [IKI_BSSTRATPLANS].SPLAN_ID = @BsStratPlanID 
SELECT @LastError = @LastError + @@ERROR



DELETE FROM BS_STRAT_PLANS_OPTIONS WHERE BS_STRAT_PLANSID = @BsStratPlanID 
SELECT @LastError = @LastError + @@ERROR


DECLARE curNODES CURSOR FOR
	SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES WHERE BS_STRAT_PLANSID=@BsStratPlanID 

DECLARE @BsStratNodeID int
DECLARE @LastErrorOnNode INT

OPEN curNODES
FETCH NEXT FROM curNODES INTO @BsStratNodeID
WHILE @@FETCH_STATUS = 0
BEGIN
	EXEC ik_delete_BS_STRAT_NODES @BsStratNodeID, @Cookie, @LastErrorOnNode OUTPUT
	IF @LastErrorOnNode <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
	
	FETCH NEXT FROM curNODES INTO @BsStratNodeID
END

CLOSE curNODES
DEALLOCATE curNODES







DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='SP' AND IKALERTS.SOURCE_ENTITY_ID = @BsStratPlanID) 

declare @IKALERTS_ID int

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



	

/*BS_STRAT_PLANSID itself*/

DELETE FROM BS_STRAT_PLANS WHERE BS_STRAT_PLANSID= @BsStratPlanID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_BS_STRAT_PLANS: FAILURE (%u)',16,1,@BsStratPlanID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_BS_STRAT_PLANS: SUCCESS (' + ltrim(str(@BsStratPlanID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_BS_SVG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_BS_SVG]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_BS_SVG] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_BS_SVG]
(@BS_SVGID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @BS_SVGID = BS_SVGID from table BS_SVG
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_BS_SVGID', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_SVGID: VALIDATION: FAILURE (%u)',16,1,@BS_SVGID)
	RETURN(-2)
END


IF (SELECT COUNT(BS_SVGID) FROM BS_SVG WHERE BS_SVGID=@BS_SVGID) = 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_SVGID: CHECK: FAILURE (%u). DIAGRAM DOESN´T EXSIST.',16,1,@BS_SVGID)
	RETURN(-2)
END


IF NOT (SELECT LOCK_USERID FROM BS_SVG  WHERE BS_SVGID=@BS_SVGID) IS NULL
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_BS_SVGID: CHECK: FAILURE (%u). THE SPECIFIED DIAGRAM IS CHECKED OUT.',16,1,@BS_SVGID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0


BEGIN TRANSACTION



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='SVG' AND IKALERTS.SOURCE_ENTITY_ID = @BS_SVGID) 

declare @IKALERTS_ID int


open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



DELETE FROM BS_SVG_OPTIONS WHERE BS_SVGID = @BS_SVGID 
SELECT @LastError = @LastError + @@ERROR

DELETE FROM IKI_SVGDRAWINGS WHERE SVG_ID = @BS_SVGID 
SELECT @LastError = @LastError + @@ERROR

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM BS_SVG WHERE  BS_SVG.BS_SVGID=@BS_SVGID)
IF @IKI_MASTERID  > 0
BEGIN
	DECLARE @LastErrorIKI INT
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_BS_SVGID: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@BS_SVGID)
		RETURN(-1)
	END
END



/*BS_SVGID itself*/

DELETE FROM BS_SVG WHERE BS_SVGID= @BS_SVGID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_BS_SVGID: FAILURE (%u)',16,1,@BS_SVGID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_BS_SVGID: SUCCESS (' + ltrim(str(@BS_SVGID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_DOCUMENTOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_DOCUMENTOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_DOCUMENTOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_DOCUMENTOS]
(@CodDoc int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodDoc = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodDoc in
other tables AND @CodDoc itself from DOCUMENTOS
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_DOCUMENTOS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_DOCUMENTOS: VALIDATION: FAILURE (%u)',16,1,@CodDoc)
	RETURN(-2)
END


IF (SELECT COUNT(CODIGO) FROM DOCUMENTOS WHERE CODIGO=@CodDoc ) = 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_DOCUMENTOS: CHECK: FAILURE (%u). DOCUMENT DOESNT EXSIST.',16,1,@CodDoc)
	RETURN(-2)
END


IF (SELECT ESTADO FROM DOCUMENTOS WHERE CODIGO=@CodDoc ) = 2
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_DOCUMENTOS: CHECK: FAILURE (%u). THE SPECIFIED CODE BELONGS TO A CURRENT DOCUMENT SO CANNOT BE DELETED.',16,1,@CodDoc)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @DocDeletionSuccess int
SET @DocDeletionSuccess = 0


DECLARE @CodForumDev int
DECLARE @CodForumCrit int
DECLARE @CodSurvey int
DECLARE @LastErrorForum int

SET @CodForumDev = (SELECT CODIGOFORODESARROLLO FROM DOCUMENTOS WHERE CODIGO=@CodDoc)
SET @CodForumCrit = (SELECT CODIGOFOROCRITICAS FROM DOCUMENTOS WHERE CODIGO=@CodDoc)
SET @CodSurvey = (SELECT CODIGOSURVEY FROM DOCUMENTOS WHERE CODIGO=@CodDoc)



BEGIN TRANSACTION

DECLARE @ExtendedDeletionSuccess INT
SET @ExtendedDeletionSuccess=0

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ik_delete_DOCUMENTOS_extended]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	EXEC ik_delete_DOCUMENTOS_extended @CodDoc, @Cookie, @ExtendedDeletionSuccess OUTPUT
	IF @ExtendedDeletionSuccess <> 1
	BEGIN	
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_DOCUMENTOS: EXTENDED DATA FAILURE (%u)',16,1,@CodDoc)
		RETURN(-1)
	END
END

/*
DEV. FORUM 
*/

IF @CodForumDev  > 0
BEGIN
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForumDev, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
END


/*
RELATED DATA
*/

IF @CodForumCrit  > 0
BEGIN
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForumCrit, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
END



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='D' AND IKALERTS.SOURCE_ENTITY_ID=@CodDoc) 

declare @IKALERTS_ID int


open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



IF @CodSurvey  > 0
BEGIN
	DELETE FROM SURVEYEDGROUPS WHERE CODIGOSURVEY=@CodSurvey
	DELETE FROM SURVEYDEFINITIONS WHERE CODIGO=@CodSurvey
END


DELETE FROM DOCUMENTOS_CHANGELOG WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR

DELETE FROM CRITICAS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSREL WHERE CODIGODOCUMENTO = @CodDoc OR CODIGORELACIONADO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


-- BEGIN ALMACEN_ARCHIVOS
DELETE FROM ALMACEN_ARCHIVOS WHERE CODIGO IN (SELECT CODIGOALMACEN FROM ARCHIVOS WHERE CODIGODOCUMENTO=@CodDoc)
SELECT @LastError = @LastError + @@ERROR
-- END ALMACEN_ARCHIVOS

DELETE FROM ARCHIVOS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSHISTORIA WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM TAREASREVISION WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM PROCESOS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSRELTRANS WHERE CODIGODOCUMENTO = @CodDoc OR CODIGORELACIONADO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM PERMISOSDOC WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


--DELETE FROM ORGANIGRAMAREL WHERE CODIGODOCUMENTO = @CodDoc
--SELECT @LastError = @LastError + @@ERROR


DELETE FROM APROBACIONES WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DISTRIBUCION WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM MARCODOCUMENTOSREL WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSCATEGORIAS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


UPDATE DOCUMENTOS SET CODIGOAPROBACION = 0 WHERE CODIGOAPROBACION=@CodDoc

UPDATE DOCUMENTOS SET CODIGODISTRIBUCION = 0 WHERE CODIGODISTRIBUCION=@CodDoc

UPDATE DOC1 SET DOC1.CODIGOBASADOEN=DOC2.CODIGOBASADOEN, DOC1.BASADOEN=DOC2.BASADOEN, DOC1.VERSIONBASADOEN=DOC2.VERSIONBASADOEN
FROM DOCUMENTOS DOC1 LEFT JOIN DOCUMENTOS DOC2 ON DOC1.CODIGOBASADOEN=DOC2.CODIGO 
WHERE DOC1.CODIGOBASADOEN=@CodDoc


/*IK interrelated*/
DELETE FROM IKI_DOCUMENTS WHERE D_ID=@CodDoc
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_DOCUMENTOS: IKI_ISSUES: FAILURE (%u)',16,1,@CodDoc)
	RETURN(-1)
END


DECLARE @IKI_MASTERID INT
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO=@CodDoc)

IF NOT @IKI_MASTERID IS NULL
BEGIN
	DECLARE @LastErrorIKI INT
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_DOCUMENTOS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@CodDoc)
		RETURN(-1)
	END

END



/*DOCUMENTOS itself*/

DELETE FROM DOCUMENTOS WHERE CODIGO = @CodDoc
SELECT @LastError = @LastError + @@ERROR



IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_DOCUMENTOS: FAILURE (%u)',16,1,@CodDoc)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_DOCUMENTOS: SUCCESS (' + ltrim(str(@CodDoc)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_DOCUMENTOS_vigentes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_DOCUMENTOS_vigentes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_DOCUMENTOS_vigentes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_DOCUMENTOS_vigentes]
(@CodDoc int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodDoc = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodDoc in
other tables AND @CodDoc itself from DOCUMENTOS
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_DOCUMENTOS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_DOCUMENTOS: VALIDATION: FAILURE (%u)',16,1,@CodDoc)
	RETURN(-2)
END


IF (SELECT COUNT(CODIGO) FROM DOCUMENTOS WHERE CODIGO=@CodDoc ) = 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_DOCUMENTOS: CHECK: FAILURE (%u). DOCUMENT DOESNT EXSIST.',16,1,@CodDoc)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @DocDeletionSuccess int
SET @DocDeletionSuccess = 0


DECLARE @CodForumDev int
DECLARE @CodForumCrit int
DECLARE @CodSurvey int
DECLARE @LastErrorForum int

SET @CodForumDev = (SELECT CODIGOFORODESARROLLO FROM DOCUMENTOS WHERE CODIGO=@CodDoc)
SET @CodForumCrit = (SELECT CODIGOFOROCRITICAS FROM DOCUMENTOS WHERE CODIGO=@CodDoc)
SET @CodSurvey = (SELECT CODIGOSURVEY FROM DOCUMENTOS WHERE CODIGO=@CodDoc)



BEGIN TRANSACTION

DECLARE @ExtendedDeletionSuccess INT
SET @ExtendedDeletionSuccess=0

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ik_delete_DOCUMENTOS_extended]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	EXEC ik_delete_DOCUMENTOS_extended @CodDoc, @Cookie, @ExtendedDeletionSuccess OUTPUT
	IF @ExtendedDeletionSuccess <> 1
	BEGIN	
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_DOCUMENTOS: EXTENDED DATA FAILURE (%u)',16,1,@CodDoc)
		RETURN(-1)
	END
END

/*
DEV. FORUM 
*/

IF @CodForumDev  > 0
BEGIN
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForumDev, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
END


/*
RELATED DATA
*/

IF @CodForumCrit  > 0
BEGIN
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForumCrit, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
END



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='D' AND IKALERTS.SOURCE_ENTITY_ID=@CodDoc) 

declare @IKALERTS_ID int


open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



IF @CodSurvey  > 0
BEGIN
	DELETE FROM SURVEYEDGROUPS WHERE CODIGOSURVEY=@CodSurvey
	DELETE FROM SURVEYDEFINITIONS WHERE CODIGO=@CodSurvey
END


DELETE FROM DOCUMENTOS_CHANGELOG WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR

DELETE FROM CRITICAS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSREL WHERE CODIGODOCUMENTO = @CodDoc OR CODIGORELACIONADO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM ARCHIVOS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSHISTORIA WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM TAREASREVISION WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM PROCESOS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSRELTRANS WHERE CODIGODOCUMENTO = @CodDoc OR CODIGORELACIONADO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM PERMISOSDOC WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM ORGANIGRAMAREL WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM APROBACIONES WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DISTRIBUCION WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM MARCODOCUMENTOSREL WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


DELETE FROM DOCUMENTOSCATEGORIAS WHERE CODIGODOCUMENTO = @CodDoc
SELECT @LastError = @LastError + @@ERROR


UPDATE DOCUMENTOS SET CODIGOAPROBACION = 0 WHERE CODIGOAPROBACION=@CodDoc

UPDATE DOCUMENTOS SET CODIGODISTRIBUCION = 0 WHERE CODIGODISTRIBUCION=@CodDoc

UPDATE DOC1 SET DOC1.CODIGOBASADOEN=DOC2.CODIGOBASADOEN, DOC1.BASADOEN=DOC2.BASADOEN, DOC1.VERSIONBASADOEN=DOC2.VERSIONBASADOEN
FROM DOCUMENTOS DOC1 LEFT JOIN DOCUMENTOS DOC2 ON DOC1.CODIGOBASADOEN=DOC2.CODIGO 
WHERE DOC1.CODIGOBASADOEN=@CodDoc


/*IK interrelated*/
DELETE FROM IKI_DOCUMENTS WHERE D_ID=@CodDoc
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_DOCUMENTOS: IKI_ISSUES: FAILURE (%u)',16,1,@CodDoc)
	RETURN(-1)
END


DECLARE @IKI_MASTERID INT
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO=@CodDoc)

IF NOT @IKI_MASTERID IS NULL
BEGIN
	DELETE FROM IKI_PROCNODES WHERE IKI_MASTERID=@IKI_MASTERID
	DELETE FROM IKI_BSINDICATORS WHERE IKI_MASTERID=@IKI_MASTERID
END



/*DOCUMENTOS itself*/

DELETE FROM DOCUMENTOS WHERE CODIGO = @CodDoc
SELECT @LastError = @LastError + @@ERROR



IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_DOCUMENTOS: FAILURE (%u)',16,1,@CodDoc)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_DOCUMENTOS: SUCCESS (' + ltrim(str(@CodDoc)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_FORUM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_FORUM]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_FORUM] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_FORUM]
(@CodForum int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodForum = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodForum Forum
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_FORUM', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_FORUM: VALIDATION: FAILURE (%u)',16,1,@CodForum)
	RETURN(-2)
END


BEGIN TRANSACTION



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActionsF CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='M' AND IKALERTS.SOURCE_ENTITY_ID IN (SELECT CODIGO FROM IKFOROSMENSAJES WHERE CODIGOFORO=@CodForum)) 

declare @IKALERTS_ID int


open CurActionsF
fetch next from CurActionsF into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActionsF
		deallocate CurActionsF
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActionsF into @IKALERTS_ID
end

close CurActionsF
deallocate CurActionsF







DELETE FROM IKFOROSNOVEDADES WHERE CODIGOFORO=@CodForum
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE IKFOROSNOVEDADES FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END

DELETE FROM ALMACEN_ARCHIVOS WHERE CODIGO IN (SELECT CODIGOALMACEN FROM IKFOROSARCHIVOS WHERE CODIGOFORO=@CodForum)
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE ALMACEN_ARCHIVOS FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END

DELETE FROM IKFOROSARCHIVOS WHERE CODIGOFORO=@CodForum
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE IKFOROSARCHIVOS FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END

DELETE FROM IKFOROSMENSAJES WHERE CODIGOFORO=@CodForum
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE IKFOROSMENSAJES FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END


DELETE FROM IKFOROSSUSCRIPTORES WHERE CODIGOFORO=@CodForum
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE IKFOROSSUSCRIPTORES FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END

DELETE FROM IKFOROS WHERE CODIGO=@CodForum
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM:  DELETE IKFOROS FAILURE (%u)',16,1,@CodForum)
	RETURN(-1)
END



/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_FORUM: SUCCESS (' + ltrim(str(@CodForum)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_FORUM_Message].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_FORUM_Message]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_FORUM_Message] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_FORUM_Message]
(@CodForumMsg int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodForumMsg = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes the forum message @CodForumMsg
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_FORUM_Message', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_FORUM_Message: VALIDATION: FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-2)
END


BEGIN TRANSACTION



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='M' AND IKALERTS.SOURCE_ENTITY_ID = @CodForumMsg) 

declare @IKALERTS_ID int


open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



DELETE FROM IKFOROSNOVEDADES WHERE CODIGOTIPOPENDIENTE=1 AND CODIGOPENDIENTE =@CodForumMsg 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  DELETE IKFOROSNOVEDADES FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END

DELETE FROM IKFOROSNOVEDADES WHERE CODIGOTIPOPENDIENTE=2 AND CODIGOPENDIENTE IN ( SELECT CODIGO FROM IKFOROSARCHIVOS WHERE CODIGORESPUESTARELACIONADA=@CodForumMsg)
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  DELETE IKFOROSNOVEDADES FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END

DELETE FROM ALMACEN_ARCHIVOS WHERE CODIGO IN (SELECT CODIGOALMACEN FROM IKFOROSARCHIVOS WHERE CODIGORESPUESTARELACIONADA=@CodForumMsg)
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  DELETE ALMACEN_ARCHIVOS FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END

DELETE FROM IKFOROSARCHIVOS WHERE CODIGORESPUESTARELACIONADA=@CodForumMsg
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  DELETE IKFOROSARCHIVOS FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END

DECLARE @CodRespRel int
SET @CodRespRel = (SELECT CODIGORESPUESTARELACIONADA FROM IKFOROSMENSAJES WHERE CODIGO=@CodForumMsg)

UPDATE IKFOROSMENSAJES SET CODIGORESPUESTARELACIONADA=@CodRespRel WHERE CODIGORESPUESTARELACIONADA=@CodForumMsg
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  UPDATE IKFOROSMENSAJES FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END

DELETE FROM IKFOROSMENSAJES WHERE CODIGO=@CodForumMsg
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_FORUM_Message:  DELETE IKFOROSMENSAJES FAILURE (%u)',16,1,@CodForumMsg)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_FORUM_Message: SUCCESS (' + ltrim(str(@CodForumMsg)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_IK_ALERTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_IK_ALERTS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_IK_ALERTS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_IK_ALERTS]
(@IKALERTS_ID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @IKALERTS_ID = IKALERTS_ID from table IKALERTS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_IK_ALERTS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IK_ALERTS: VALIDATION: FAILURE (%u)',16,1,@IKALERTS_ID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

DECLARE @CodForum int

SET @CodForum = (SELECT FORUMID FROM IKALERTS  WHERE  IKALERTS_ID=@IKALERTS_ID)

IF @CodForum  > 0
BEGIN
	DECLARE @LastErrorForum int
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForum, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: ik_delete_FORUM: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
END

DELETE FROM IKALERTS_USERS_OPTIONS WHERE IKALERTS_ID=@IKALERTS_ID
SELECT @LastError = @LastError + @@ERROR

DELETE FROM IKALERTS_HISTORY WHERE IKALERTS_ID=@IKALERTS_ID
SELECT @LastError = @LastError + @@ERROR

DELETE FROM IKALERTS_TARGETS WHERE IKALERTS_ID=@IKALERTS_ID
SELECT @LastError = @LastError + @@ERROR

/*IKALERTS_ID itself*/

DELETE FROM IKALERTS WHERE IKALERTS_ID=@IKALERTS_ID
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_IK_ALERTS: SUCCESS (' + ltrim(str(@IKALERTS_ID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_IKI_MASTER].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_IKI_MASTER]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_IKI_MASTER] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_IKI_MASTER]
(@IKI_MASTERID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @IKI_MASTERID = IKI_MASTERID of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodForum Forum
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_IKI_MASTER', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IKI_MASTER: VALIDATION: FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-2)
END


BEGIN TRANSACTION

DELETE FROM IKI_DOCUMENTS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER:  DELETE IKI_DOCUMENTS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_ORGCHART WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: DELETE IKI_ORGCHART FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_ISSUES WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: DELETE IKI_ISSUES FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_ISSUESTASKS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: DELETE IKI_ISSUESTASKS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END


DELETE FROM IKI_BSINDICATORS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_BSINDICATORS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_SVGDRAWINGS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_SVGDRAWINGS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_FILES WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_FILES FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_BSSTRATPLANS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_BSSTRATPLANS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_BSSTRATNODES WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_BSSTRATNODES FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_PROCPLANS WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_PROCPLANS FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END

DELETE FROM IKI_PROCNODES WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_PROCNODES FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END


DELETE FROM IKI_IKPEOPLE WHERE IKI_MASTERID=@IKI_MASTERID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKI_MASTER: IKI_IKPEOPLE FAILURE (%u)',16,1,@IKI_MASTERID)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_IKI_MASTER: SUCCESS (' + ltrim(str(@IKI_MASTERID)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_IKPOSITIONSGROUPSTREE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_IKPOSITIONSGROUPSTREE]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_IKPOSITIONSGROUPSTREE] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_IKPOSITIONSGROUPSTREE]
(@IKPOSITIONSGROUPSTREEID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @IKPOSITIONSGROUPSTREEID = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_IKPOSITIONSGROUPSTREE', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IKPOSITIONSGROUPSTREE: VALIDATION: FAILURE (%u)',16,1,@IKPOSITIONSGROUPSTREEID)
	RETURN(-2)
END

IF (SELECT IKPOSITIONSGROUPSTREEID FROM IKPOSITIONSGROUPSTREE WHERE (PARENTID=@IKPOSITIONSGROUPSTREEID))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IKPOSITIONSGROUPSTREE: There are distribution groups parented with this record: FAILURE (%u)',16,1,@IKPOSITIONSGROUPSTREEID)
	RETURN(-2)
END

IF (SELECT IKPOSITIONSGROUPSTREEID FROM IKPOSITIONSGROUPS WHERE (IKPOSITIONSGROUPSTREEID=@IKPOSITIONSGROUPSTREEID))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IKPOSITIONSGROUPSTREE: There group has members: FAILURE (%u)',16,1,@IKPOSITIONSGROUPSTREEID)
	RETURN(-2)
END

IF (SELECT CODIGOGRUPO FROM DISTRIBUCION WHERE (CODIGOGRUPO=@IKPOSITIONSGROUPSTREEID))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_IKPOSITIONSGROUPSTREE: There group has related documents: FAILURE (%u)',16,1,@IKPOSITIONSGROUPSTREEID)
	RETURN(-2)
END

DECLARE @DeletionSuccess int
SET @DeletionSuccess = 0

BEGIN TRANSACTION


DELETE FROM IKPOSITIONSGROUPSTREE WHERE IKPOSITIONSGROUPSTREEID=@IKPOSITIONSGROUPSTREEID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_IKPOSITIONSGROUPSTREE: FAILURE (%u)',16,1,@IKPOSITIONSGROUPSTREEID)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_IKPOSITIONSGROUPSTREE: SUCCESS (' + ltrim(str(@IKPOSITIONSGROUPSTREEID)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_NCCLASES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_NCCLASES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_NCCLASES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_NCCLASES]
(@CODIGO int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CODIGO = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_NCCLASES', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCCLASES: VALIDATION: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END

IF (SELECT CODIGO FROM TBL_CATEGORIASDOCUMENTOS WHERE (CODIGOPADRE=@CODIGO))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCCLASES: There are groups parented with this record: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END


DECLARE @DeletionSuccess int
SET @DeletionSuccess = 0

BEGIN TRANSACTION


DELETE FROM NCCLASES WHERE CODIGO=@CODIGO
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCCLASES: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_NCCLASES: SUCCESS (' + ltrim(str(@CODIGO)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_NCMAINPROD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_NCMAINPROD]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_NCMAINPROD] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_NCMAINPROD]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodIssue in
other tables AND @CodIssue itself from NCMAINPROD
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_NCMAINPROD', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCMAINPROD: VALIDATION: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-2)
END


DECLARE @TasksDeletionSuccess int
SET @TasksDeletionSuccess = 0

declare CurTasks CURSOR FAST_FORWARD for SELECT CODIGO FROM NCTAREAS
										 WHERE CODIGONC=@CodIssue

declare @CODIGO int


BEGIN TRANSACTION

/*

TASKS

*/

open CurTasks
fetch next from CurTasks into @CODIGO

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_NCTAREAS_relateddata @CODIGO, @Cookie, @TasksDeletionSuccess OUTPUT
	IF @TasksDeletionSuccess <> 1
	BEGIN
		close CurTasks
		deallocate CurTasks
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCMAINPROD: FAILURE (%u)',16,1,@CodIssue)
		RETURN(-1)
	END
	fetch next from CurTasks into @CODIGO
end

close CurTasks
deallocate CurTasks

/*
All tasks must be deleted at once to prevent any
violation to a foreign key pointing to the same table
*/

DELETE FROM NCTAREAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCTAREAS: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END







DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='N' AND IKALERTS.SOURCE_ENTITY_ID=@CodIssue ) OR (IKALERTS.SOURCE_ENTITY_PARTICLE LIKE '%STD2%' AND IKALERTS.SECONDARY_SOURCE_ID=@CodIssue )

declare @IKALERTS_ID int



/*

issue AND subclasses of issue actions

*/

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions









/*

COSTS

*/

DELETE FROM NCCOSTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCCOSTOS: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

/*

INTER RELATIONS

*/

DELETE FROM NCINTERRELACIONES WHERE CODIGOASUNTOORIGEN=@CodIssue OR CODIGOASUNTORELACIONADO=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCINTERRELACIONES: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM NCMAINPROD WHERE CODIGO=@CodIssue)

DECLARE @LastErrorIKI INT

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCMAINPROD: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@CodIssue)
		RETURN(-1)
	END
END



/*

TRACKING STAGES

*/

DELETE FROM NCETAPAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCETAPAS: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

/*

INVOLVED PEOPLE

*/

DELETE FROM NCINVOLUCRADOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCINVOLUCRADOS: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END


/*
FORUM 

*/

DECLARE @CodForum int

SET @CodForum = (SELECT CODIGOFORO FROM NCMAINPROD WHERE CODIGO=@CodIssue)

IF @CodForum  > 0
BEGIN
	DECLARE @LastErrorForum int
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForum, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCMAINPROD: ik_delete_FORUM: FAILURE (%u)',16,1,@CodIssue)
		RETURN(-1)
	END
END


/*Archivos*/

DELETE FROM ALMACEN_ARCHIVOS WHERE CODIGO IN (SELECT CODIGOALMACEN FROM NC_FILES WHERE CODIGONC=@CodIssue)
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: ALMACEN_ARCHIVOS FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

DELETE FROM NC_FILES WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NC_FILES: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END


/*IK interrelated*/

DELETE FROM IKI_ISSUES WHERE N_ID=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: IKI_ISSUES: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

/*

WF

*/

DECLARE @WF_ID INT
SELECT @WF_ID = WF_ID FROM NCMAINPROD WHERE CODIGO=@CodIssue
IF NOT @WF_ID IS NULL
BEGIN
	EXEC ik_delete_WF @WF_ID
END



/*

NCMAINPROD

*/

DELETE FROM NCMAINPROD WHERE CODIGO=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCMAINPROD: NCMAINPROD: FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END

/*
ALL DONE
*/


SET @Success = 1
PRINT 'ik_delete_NCMAINPROD: SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_NCTAREAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_NCTAREAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_NCTAREAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_NCTAREAS]
(@CodTask int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CodTask = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodTask in
other tables but does not remove @CodTask itself from NCTAREAS
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_NCTAREAS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCTAREAS: VALIDATION: FAILURE (%u)',16,1,@CodTask)
	RETURN(-2)
END

IF (SELECT CODIGO FROM NCTAREAS WHERE (CODIGOTAREACONDICIONAL=@CodTask))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCTAREAS: CONDITIONAL TASKS VALIDATION: FAILURE (%u)',16,1,@CodTask)
	RETURN(-2)
END

DECLARE @TasksDeletionSuccess int
SET @TasksDeletionSuccess = 0

BEGIN TRANSACTION

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM NCTAREAS WHERE CODIGO=@CodTask)
IF @IKI_MASTERID  > 0
BEGIN
	DECLARE @LastErrorIKI INT
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCTAREAS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@CodTask)
		RETURN(-1)
	END
END

DELETE FROM [IKI_ISSUESTASKS] WHERE  T_ID = @CodTask 



DECLARE @CodMilestone int
SET @CodMilestone = (SELECT CODIGOTAREACONTRIBUYE FROM NCTAREAS WHERE CODIGO=@CodTask)

IF NOT @CodMilestone IS NULL
BEGIN
	UPDATE NCTAREAS SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGO=@CodTask
	EXEC ik_nctasks_upd_casc_cond @CodTask,@CodMilestone
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('Error updating conditional sequence',16,1,@CodTask)
		RETURN(-1)
	END
END

UPDATE NCTAREAS SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGOTAREACONTRIBUYE=@CodTask


EXEC ik_delete_NCTAREAS_relateddata @CodTask, @Cookie, @TasksDeletionSuccess OUTPUT
IF @TasksDeletionSuccess <> 1
BEGIN	
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: RELATED DATA FAILURE (%u)',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM NCTAREAS WHERE CODIGO=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE (%u)',16,1,@CodTask)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_NCTAREAS: SUCCESS (' + ltrim(str(@CodTask)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_NCTAREAS_relateddata].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_NCTAREAS_relateddata]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_NCTAREAS_relateddata] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_NCTAREAS_relateddata]
(
	@CodTask int, 
	@Cookie nvarchar(50) = '', 
	@Success tinyint = 0 OUTPUT
) 

AS
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_NCTAREAS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_NCTAREAS: VALIDATION: FAILURE (%u)',16,1,@CodTask)
	RETURN(-2)
END

BEGIN TRANSACTION

DECLARE @ExtendedDeletionSuccess INT
SET @ExtendedDeletionSuccess=0

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ik_delete_NCTAREAS_relateddata_extended]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	EXEC ik_delete_NCTAREAS_relateddata_extended @CodTask, @Cookie, @ExtendedDeletionSuccess OUTPUT
		
	IF @ExtendedDeletionSuccess <> 1
	BEGIN	
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCTAREAS_relateddata: EXTENDED DATA FAILURE (%u)',16,1,@CodTask)
		RETURN(-1)
	END
END

DECLARE @CodForum int

SET @CodForum = (SELECT CODIGOFORO FROM NCTAREAS WHERE CODIGO=@CodTask)

IF @CodForum  > 0
BEGIN
	DECLARE @LastErrorForum int
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForum, @Cookie, @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
	 	SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NCTAREAS: ik_delete_FORUM FAILURE (%u)',16,1,@CodTask)
		RETURN(-1)
	END
END







DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='T' AND IKALERTS.SOURCE_ENTITY_ID=@CodTask) 

declare @IKALERTS_ID int


/*

issue AND subclasses of issue actions

*/

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, @Cookie, @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions







UPDATE NCTAREAS SET CODIGOFORO = NULL WHERE CODIGO = @CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE (%u)',16,1,@CodTask)
	RETURN(-1)
END



DELETE FROM NCTAREASDESTINATARIOS WHERE CODIGOTAREA=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING NCTAREASDESTINATARIOS (%u)',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM IKROLES_NCTAREAS WHERE IKROLES_NCTAREAS.NCTASK_ID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING IKROLES_NCTAREAS (%u)',16,1,@CodTask)
	RETURN(-1)
END




DELETE FROM ALMACEN_ARCHIVOS WHERE CODIGO IN (SELECT CODIGOALMACEN FROM NC_TASKFILES WHERE CODIGOTAREA=@CodTask)
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING ALMACEN_ARCHIVOS (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM NC_TASKFILES WHERE CODIGOTAREA=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING NC_TASKFILES (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM NCTASKSSTEPS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING NCTASKSSTEPS (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM TASKSDELAYS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS: FAILURE DELETING TASKSDELAYS (%u)',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM NCTAREAS_DEPENDENCIES WHERE CODIGOTAREA=@CodTask OR CODIGOTAREAREL=@CodTask 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS_relateddata: FAILURE DELETING NCTAREAS_DEPENDENCIES (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM NCTASKSPEOPLE WHERE NCTASKID=@CodTask 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NCTAREAS_relateddata: FAILURE DELETING NCTASKSPEOPLE (%u)',16,1,@CodTask)
	RETURN(-1)
END






/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_NCTAREAS_relateddata: SUCCESS (' + ltrim(str(@CodTask)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_NONSTARTEDTASK].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_NONSTARTEDTASK]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_NONSTARTEDTASK] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_NONSTARTEDTASK]
(@CodTask int, @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CodTask = CODIGO of the record to delete
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodTask in
other tables and removes @CodTask from NCTAREAS
*/

IF (SELECT L_CUMPLIDA FROM NCTAREAS WHERE CODIGO = @CodTask) <>2 
BEGIN
	IF NOT (SELECT FECHA  FROM NCTAREAS WHERE CODIGO = @CodTask) IS NULL
	BEGIN
		SET @Success = 0
		RAISERROR('Loc_ValidationErrorTaskStarted',16,1,@CodTask)
		RETURN(-2)
	END
END


IF (SELECT COUNT(CODIGO) FROM NCTAREAS WHERE CODIGOTAREACONDICIONAL = @CodTask) >0
BEGIN
	SET @Success = 0
	RAISERROR('Loc_ValidationErrorConditionalTasks',16,1,@CodTask)
	RETURN(-2)
END


IF (SELECT COUNT(M.CODIGO) FROM IKFOROSMENSAJES M JOIN NCTAREAS T ON M.CODIGOFORO = T.CODIGOFORO WHERE T.CODIGO = @CodTask) > 0
BEGIN
	SET @Success = 0
	RAISERROR('Loc_ValidationErrorTaskWithForumMessages',16,1,@CodTask)
	RETURN(-2)
END

IF (SELECT COUNT(CODIGO) FROM ARCHIVOSTAREAS WHERE CODIGOTAREA = @CodTask) > 0
BEGIN
	SET @Success = 0
	RAISERROR('Loc_ValidationErrorTaskWithFiles',16,1,@CodTask)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0
BEGIN TRANSACTION





DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='T' AND IKALERTS.SOURCE_ENTITY_ID=@CodTask) 

declare @IKALERTS_ID int


/*

issue AND subclasses of issue actions

*/

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, '', @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions




DECLARE @ExtendedDeletionSuccess INT
SET @ExtendedDeletionSuccess=0

if exists (select * from dbo.sysobjects where id = object_id(N'[dbo].[ik_delete_NCTAREAS_relateddata_extended]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
BEGIN
	EXEC ik_delete_NCTAREAS_relateddata_extended @CodTask, '', @ExtendedDeletionSuccess OUTPUT
		
	IF @ExtendedDeletionSuccess <> 1
	BEGIN	
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_NONSTARTEDTASK: EXTENDED DATA FAILURE (%u)',16,1,@CodTask)
		RETURN(-1)
	END
END

DECLARE @CodMilestone int
SET @CodMilestone = (SELECT CODIGOTAREACONTRIBUYE FROM NCTAREAS WHERE CODIGO=@CodTask)

IF NOT @CodMilestone IS NULL
BEGIN
	UPDATE NCTAREAS SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGO=@CodTask
	EXEC ik_nctasks_upd_casc_cond @CodTask,@CodMilestone
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('Error updating conditional sequence',16,1,@CodTask)
		RETURN(-1)
	END
END

UPDATE NCTAREAS SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGOTAREACONTRIBUYE=@CodTask

DECLARE @CodForum int
SET @CodForum = (SELECT CODIGOFORO FROM NCTAREAS WHERE CODIGO=@CodTask)

IF @CodForum  > 0
BEGIN
	DECLARE @LastErrorForum int
	SET @LastErrorForum = 0
	EXEC ik_delete_FORUM @CodForum, '', @LastErrorForum OUTPUT
	IF @LastErrorForum <> 1
	BEGIN
	 	SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('Loc_ErrorDeletingForumItems',16,1,@CodForum)
		RETURN(-1)
	END
END


DELETE FROM NCTAREASDESTINATARIOS WHERE CODIGOTAREA=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingResponsiblePeople',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM IKROLES_NCTAREAS WHERE IKROLES_NCTAREAS.NCTASK_ID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingResponsibleRoles',16,1,@CodTask)
	RETURN(-1)
END



DELETE FROM NCTASKSSTEPS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingTaskSteps',16,1,@CodTask)
	RETURN(-1)
END



DELETE FROM TASKSDELAYS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingTaskDelays',16,1,@CodTask)
	RETURN(-1)
END



DELETE FROM NCTAREAS_DEPENDENCIES WHERE CODIGOTAREA=@CodTask OR CODIGOTAREAREL=@CodTask 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_NONSTARTEDTASK: FAILURE DELETING NCTAREAS_DEPENDENCIES (%u)',16,1,@CodTask)
	RETURN(-1)
END




DELETE NCTAREAS WHERE CODIGO = @CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingTaskRow',16,1,@CodTask)
	RETURN(-1)
END



/*
ALL DONE
*/

SET @Success = 1
	PRINT 'ik_delete_NONSTARTEDTASK: SUCCESS (' + ltrim(str(@CodTask)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_OrgChart].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_OrgChart]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_OrgChart] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_OrgChart]
(
@OrgChartName varchar(50)
)

 AS

DECLARE @CODIGO int
SET @CODIGO = (SELECT CODIGO FROM ORGANIGRAMA WHERE CAMINO=@OrgChartName)
IF @CODIGO IS NULL
BEGIN
	RAISERROR('ik_delete_OrgChart: ORG. CHART DOES NOT EXIST',16,1)
	RETURN
END

DECLARE @ORDEN int
SET @ORDEN = (SELECT ORDEN FROM ORGANIGRAMA WHERE CODIGO=@CODIGO)
IF @ORDEN IS NULL OR @ORDEN=-100000 OR @ORDEN=-1
BEGIN
	RAISERROR('ik_delete_OrgChart: ORG. CHART CANNOT BE DELETED (Default or Basket Org. Charts cannot be deleted)',16,1)
	RETURN
END

DECLARE @CODIGORAIZ int
SET @CODIGORAIZ = (SELECT CODIGORAIZ FROM ORGANIGRAMA WHERE CODIGO=@CODIGO)
IF @CODIGORAIZ IS NULL OR @CODIGORAIZ <> 0
BEGIN
	RAISERROR('ik_delete_OrgChart: THE NODE IS NOT AN ORG. CHART NODE',16,1)
	RETURN
END

DECLARE @CHILDREN int
SET @CHILDREN = (SELECT COUNT(CODIGO) FROM ORGANIGRAMA WHERE CODIGORAIZ=@CODIGO)
IF  @CHILDREN <> 0
BEGIN
	RAISERROR('ik_delete_OrgChart:THE ORG. CHART HAS CHILD NODES AND CANNOT BE DELETED. DELETE CHILD NODES FIRST.',16,1)
	RETURN
END

DELETE FROM ORGANIGRAMA WHERE CODIGO=@CODIGO
PRINT 'Org Chart has been deleted'
GO

GO
--SqlScripter----[dbo].[ik_delete_PERSONAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_PERSONAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_PERSONAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_PERSONAS]
(@IKPERSONID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @IKPERSONID = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_PERSONAS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: VALIDATION: FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-2)
END


IF (SELECT COUNT(CODIGO) FROM PERSONAS WHERE CODIGO=@IKPERSONID ) = 0
AND  (SELECT COUNT(CODIGO) FROM USUARIOS WHERE CODIGO=@IKPERSONID AND L_WEBGROUP=1 ) = 0

BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). PERSON OR GROUP DOESN´T EXSIST.',16,1,@IKPERSONID)
	RETURN(-2)
END

IF (SELECT L_IS_SYNCHRONIZED FROM PERSONAS WHERE CODIGO=@IKPERSONID ) = 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). PERSON IS SYNCHRONIZED.',16,1,@IKPERSONID)
	RETURN(-2)
END


DECLARE @L_IS_IKUSER tinyint
SET @L_IS_IKUSER=(SELECT L_IS_IKUSER FROM PERSONAS WHERE CODIGO=@IKPERSONID )

/*
IF (@L_IS_IKUSER) = 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). PERSON IS A USER. USE USERS MAINTENANCE FOR DELETION',16,1,@IKPERSONID)
	RETURN(-2)
END

*/

DECLARE @L_WEBGROUP tinyint
SET @L_WEBGROUP=(SELECT L_WEBGROUP FROM USUARIOS WHERE CODIGO=@IKPERSONID )


IF (SELECT COUNT(CODIGO) FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@IKPERSONID ) > 0
BEGIN
	SET @Success = 0
	IF @L_WEBGROUP = 1
		RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). GROUP BELONGS TO ONE OR MORE MULTIPLE RANK.',16,1,@IKPERSONID)
	ELSE
		RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). PERSON HAS ONE OR MORE RANKS.',16,1,@IKPERSONID)
	RETURN(-2)

END


IF (SELECT COUNT(CODIGO) FROM DOCUMENTOS WHERE USUARIORESPONSABLE=@IKPERSONID AND (ESTADO =1 OR ESTADO=2 )) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). USER IS RESPONSABLE OF ONE OR MORE DOCUMENTS.',16,1,@IKPERSONID)
	RETURN(-2)
END


IF (SELECT COUNT(RESP_USERID) FROM BS_INDICATORS WHERE RESP_USERID=@IKPERSONID ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS: CHECK: FAILURE (%u). USER IS RESPONSABLE OF ONE OR MORE INDICATORS.',16,1,@IKPERSONID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @UserDeletionSuccess int
SET @UserDeletionSuccess = 0

BEGIN TRANSACTION


DELETE FROM PERMISOSDOC WHERE CODIGOUSUARIO=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS:DELETE PERMISOSDOC FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM IKFOROSNOVEDADES WHERE CODIGOUSUARIO=@IKPERSONID AND L_LEIDO=0
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE IKFOROSNOVEDADES FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE IKFOROSSUSCRIPTORES FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE NCMODULESECURITYLEVELS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM BS_STRAT_NODES_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE BS_STRAT_NODES_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM BS_STRAT_PLANS_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE BS_STRAT_PLANS_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM BS_SVG_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE BS_SVG_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM BS_INDICATORS_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE BS_INDICATORS_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM PROC_NODES_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE PROC_NODES_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

DELETE FROM PROC_PLANS_OPTIONS WHERE USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE PROC_PLANS_OPTIONS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END


DELETE FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKPERSONID OR CODIGOGRUPO=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE WEBGROUPMEMBERS FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

UPDATE TAREASREVISION SET ESTADO='A' WHERE CODIGOUSUARIO=@IKPERSONID AND ESTADO='V'
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: UPDATE TAREASREVISION  FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END

UPDATE BS_SVG SET LOCK_DATE=NULL, LOCK_USERNAME=NULL, LOCK_USERID=NULL WHERE LOCK_USERID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: UPDATE BS_SVG  FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END



DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM PERSONAS WHERE CODIGO=@IKPERSONID)

DECLARE @LastErrorIKI INT

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_PERSONAS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@IKPERSONID)
		RETURN(-1)
	END
END

DELETE IKI_IKPEOPLE WHERE PE_ID=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE IKI_IKPEOPLE  FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END


DELETE DATOSUSUARIOS WHERE CODIGOUSUARIO=@IKPERSONID
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS: DELETE DATOSUSUARIOS  FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END



EXEC ik_delete_PERSONAS_reldata_ext @IKPERSONID, @Cookie, @UserDeletionSuccess  OUTPUT
IF @UserDeletionSuccess  <> 1
BEGIN	
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PERSONAS_reldata_ext: RELATED DATA FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-1)
END


IF @L_IS_IKUSER=1
BEGIN
	UPDATE IK_PEOPLE SET USUARIO = '_' + USUARIO, L_DELETED = 1, LOGINNAME='_' +  LOGINNAME WHERE CODIGO=@IKPERSONID
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_PERSONAS: UPDATE USUARIOS FAILURE (%u)',16,1,@IKPERSONID)
		RETURN(-1)
	END
END
ELSE
BEGIN
	DELETE IK_PEOPLE_HISTORY WHERE IK_PEOPLE_ID=@IKPERSONID
	DELETE IK_PEOPLE WHERE CODIGO=@IKPERSONID
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_PERSONAS: DELETE PERSONAS FAILURE (%u)',16,1,@IKPERSONID)
		RETURN(-1)
	END
END


/*
ALL DONE
*/

SET @Success = 1
	PRINT 'ik_delete_PERSONAS: SUCCESS (' + ltrim(str(@IKPERSONID)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_PERSONAS_reldata_ext].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_PERSONAS_reldata_ext]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_PERSONAS_reldata_ext] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_PERSONAS_reldata_ext]
(
	@IKPERSONID int, 
	@Cookie nvarchar(50) = '', 
	@Success tinyint = 0 OUTPUT
) 

/*Procedimiento para incorporar borrado de registros de desarrollos a medida*/

AS
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_PERSONAS_relateddata_extended', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PERSONAS_relateddata_extended: VALIDATION: FAILURE (%u)',16,1,@IKPERSONID)
	RETURN(-2)
END

BEGIN TRANSACTION

DECLARE @ExtendedDeletionSuccess INT
SET @ExtendedDeletionSuccess=0


SET @Success = 1
PRINT 'ik_delete_PERSONAS_relateddata_extended: SUCCESS (' + ltrim(str(@IKPERSONID)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_PROC_NODES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_PROC_NODES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_PROC_NODES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_PROC_NODES]
(@ProcNodeID int, @Cookie nvarchar(50) = '' OUTPUT, @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @ProcNodeID = PROC_PLANSID from table PROC_PLANS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_PROC_NODES', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PROC_NODES: VALIDATION: FAILURE (%u)',16,1,@ProcNodeID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM PROC_NODES WHERE PROC_NODESID=@ProcNodeID)

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_PROC_NODES: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@ProcNodeID)
		RETURN(-1)
	END
END

DELETE IKI_PROCNODES WHERE P_ID=@ProcNodeID



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='P' AND IKALERTS.SOURCE_ENTITY_ID=@ProcNodeID) 

declare @IKALERTS_ID int

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, '', @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions



DELETE FROM PROC_NODES_OPTIONS WHERE PROC_NODESID = @ProcNodeID 
SELECT @LastError = @LastError + @@ERROR


DELETE FROM PROC_NODES_RELATIONS WHERE PROC_NODESID_SOURCE = @ProcNodeID OR PROC_NODESID_TARGET = @ProcNodeID
SELECT @LastError = @LastError + @@ERROR

DELETE FROM PROC_FLOW_RELATIONS WHERE PROC_NODESID_SOURCE = @ProcNodeID OR PROC_NODESID_TARGET = @ProcNodeID
SELECT @LastError = @LastError + @@ERROR


UPDATE PROC_NODES SET PROC_NODESID_PARENT =NULL WHERE PROC_NODESID_PARENT=@ProcNodeID



/*PROC_PLANSID itself*/

DELETE FROM PROC_NODES WHERE PROC_NODESID= @ProcNodeID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PROC_NODES: FAILURE (%u)',16,1,@ProcNodeID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_PROC_NODES: SUCCESS (' + ltrim(str(@ProcNodeID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_PROC_PLANS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_PROC_PLANS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_PROC_PLANS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_PROC_PLANS]
(@ProcPlanID int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @ProcPlanID = PROC_PLANSID from table PROC_PLANS
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_PROC_PLANS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_PROC_PLANS: VALIDATION: FAILURE (%u)',16,1,@ProcPlanID)
	RETURN(-2)
END


DECLARE @LastError int
SET @LastError = 0

DECLARE @IKI_MASTERID int
SET @IKI_MASTERID = (SELECT IKI_MASTERID FROM PROC_PLANS WHERE PROC_PLANSID=@ProcPlanID)

DECLARE @LastErrorIKI INT

BEGIN TRANSACTION

IF @IKI_MASTERID  > 0
BEGIN
	SET @LastErrorIKI = 0
	EXEC ik_delete_IKI_MASTER @IKI_MASTERID, @Cookie, @LastErrorIKI OUTPUT
	IF @LastErrorIKI <> 1
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_PROC_PLANS: ik_delete_IKI_MASTER: FAILURE (%u)',16,1,@ProcPlanID)
		RETURN(-1)
	END
END

DELETE IKI_PROCPLANS WHERE IKI_PROCPLANS.PPLAN_ID=@ProcPlanID



DECLARE @ActionsDeletionSuccess int
SET @ActionsDeletionSuccess = 0

declare CurActions CURSOR FAST_FORWARD for SELECT IKALERTS.IKALERTS_ID FROM IKALERTS
										 WHERE (IKALERTS.SOURCE_ENTITY_PARTICLE='PP' AND IKALERTS.SOURCE_ENTITY_ID=@ProcPlanID) 

declare @IKALERTS_ID int

open CurActions
fetch next from CurActions into @IKALERTS_ID

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_IK_ALERTS @IKALERTS_ID, '', @ActionsDeletionSuccess OUTPUT
	IF @ActionsDeletionSuccess <> 1
	BEGIN
		close CurActions
		deallocate CurActions
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_IK_ALERTS: FAILURE (%u)',16,1,@IKALERTS_ID)
		RETURN(-1)
	END
	fetch next from CurActions into @IKALERTS_ID
end

close CurActions
deallocate CurActions





DELETE FROM PROC_PLANS_OPTIONS WHERE PROC_PLANSID = @ProcPlanID 
SELECT @LastError = @LastError + @@ERROR


DECLARE curNODES CURSOR FOR
	SELECT PROC_NODESID FROM PROC_NODES WHERE PROC_PLANSID=@ProcPlanID 

DECLARE @BsStratNodeID int
DECLARE @LastErrorOnNode INT

OPEN curNODES
FETCH NEXT FROM curNODES INTO @BsStratNodeID
WHILE @@FETCH_STATUS = 0
BEGIN
	EXEC ik_delete_PROC_NODES @BsStratNodeID, @Cookie, @LastErrorOnNode OUTPUT
	IF @LastErrorOnNode <> 1
	BEGIN
		 SELECT @LastError = @LastError + 1
	END
	
	FETCH NEXT FROM curNODES INTO @BsStratNodeID
END

CLOSE curNODES
DEALLOCATE curNODES
	

/*PROC_PLANSID itself*/

DELETE FROM PROC_PLANS WHERE PROC_PLANSID= @ProcPlanID 
SELECT @LastError = @LastError + @@ERROR


IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_PROC_PLANS: FAILURE (%u)',16,1,@ProcPlanID)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_delete_PROC_PLANS: SUCCESS (' + ltrim(str(@ProcPlanID)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_delete_TBL_CATEGORIASDOCUMENTOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_TBL_CATEGORIASDOCUMENTOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_TBL_CATEGORIASDOCUMENTOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_TBL_CATEGORIASDOCUMENTOS]
(@CODIGO int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CODIGO = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_TBL_CATEGORIASDOCUMENTOS', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_TBL_CATEGORIASDOCUMENTOS: VALIDATION: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END

IF (SELECT COUNT(CODIGO) FROM TBL_CATEGORIASDOCUMENTOS WHERE (CODIGOPADRE=@CODIGO))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_TBL_CATEGORIASDOCUMENTOS: There are groups parented with this record: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END

/*
IF (SELECT COUNT(CODIGO) FROM NCMODULESECURITYLEVELS WHERE (CODIGOTIPONC = 300000 + @CODIGO))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_TBL_CATEGORIASDOCUMENTOS: There are permissions granted to this group: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END
*/

IF (SELECT COUNT(CODIGO) FROM DOCUMENTOSCATEGORIAS WHERE (CODIGOCATEGORIA=@CODIGO))>0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_TBL_CATEGORIASDOCUMENTOS: The group has related documents: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-2)
END

DECLARE @DeletionSuccess int
SET @DeletionSuccess = 0

BEGIN TRANSACTION


DELETE FROM TBL_CATEGORIASDOCUMENTOS WHERE CODIGO=@CODIGO
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TBL_CATEGORIASDOCUMENTOS: FAILURE (%u)',16,1,@CODIGO)
	RETURN(-1)
END


/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_TBL_CATEGORIASDOCUMENTOS: SUCCESS (' + ltrim(str(@CODIGO)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_TBL_GENERIC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_TBL_GENERIC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_TBL_GENERIC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_TBL_GENERIC]
(@RecordId int, @TableName nvarchar(200), @UserId int, @UserName nvarchar(50))
AS
/*
SINGLE RECORD DELETION

Parameters:
	@RecordId = Value of CODIGO for the record to delete
	@TableName = Name of the table where the record is located
	@UserId = IS-KEY User Id of the user attempting to delete the record
			  This parameter is automatically sent by
	          from IS-KEY Relational Tables maintenance utility
	@UserName = IS-KEY User Name of the user attempting to delete the record
	            This parameter is automatically sent by
	            from IS-KEY Relational Tables maintenance utility
	  
You may insert your own authentication routines to validate the user
*/
DECLARE @SQLCommand nvarchar(300)
SET @SQLCommand = 'DELETE FROM ' + @TableName + ' WHERE CODIGO=' + ltrim(str(@RecordId))
EXEC(@SQLCommand)
IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('Cannot delete the specified record',16,1)
	RETURN(-1)
END

RETURN (0)
GO

GO
--SqlScripter----[dbo].[ik_delete_TPROT_NONSTARTEDTASK].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_TPROT_NONSTARTEDTASK]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_TPROT_NONSTARTEDTASK] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_TPROT_NONSTARTEDTASK]
(@CodTask int, @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @CodTask = CODIGO of the record to delete
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

/*
This procedure deletes all records related to @CodTask in
other tables and removes @CodTask from TPROT_TASK
*/


IF (SELECT COUNT(CODIGO) FROM TPROT_TASK WHERE CODIGOTAREACONDICIONAL = @CodTask) >0
BEGIN
	SET @Success = 0
	RAISERROR('Loc_ValidationErrorConditionalTasks',16,1,@CodTask)
	RETURN(-2)
END

DECLARE @LastError int
SET @LastError = 0
BEGIN TRANSACTION

DECLARE @CodMilestone int
SET @CodMilestone = (SELECT CODIGOTAREACONTRIBUYE FROM TPROT_TASK WHERE CODIGO=@CodTask)

IF NOT @CodMilestone IS NULL
BEGIN
	UPDATE TPROT_TASK SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGO=@CodTask
	EXEC ik_tasks_prot_upd_casc_cond @CodTask,@CodMilestone
	IF @@ERROR <> 0
	BEGIN
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('Error updating conditional sequence',16,1,@CodTask)
		RETURN(-1)
	END
END

UPDATE TPROT_TASK SET CODIGOTAREACONTRIBUYE=NULL WHERE CODIGOTAREACONTRIBUYE=@CodTask

DELETE FROM TPROT_RESPONSIBLE WHERE CODIGOTAREA=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingResponsiblePeople',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM IKROLES_TPROT_TASK WHERE IKROLES_TPROT_TASK.NCTASK_ID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TPROT_TASK_relateddata: FAILURE DELETING IKROLES_TPROT_TASK (%u)',16,1,@CodTask)
	RETURN(-1)
END


DELETE FROM TPROT_TASKSSTEPS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingTaskSteps',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM TPROTTASK_DEPENDENCIES WHERE CODIGOTAREA=@CodTask OR CODIGOTAREAREL=@CodTask 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_prototype_NONSTARTEDTASK: FAILURE DELETING TPROTTASK_DEPENDENCIES (%u)',16,1,@CodTask)
	RETURN(-1)
END


DELETE TPROT_TASK WHERE CODIGO = @CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('Loc_ErrorDeletingTaskRow',16,1,@CodTask)
	RETURN(-1)
END



/*
ALL DONE
*/

SET @Success = 1
	PRINT 'ik_delete_prototype_NONSTARTEDTASK: SUCCESS (' + ltrim(str(@CodTask)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_TPROT_TASK_reldata].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_TPROT_TASK_reldata]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_TPROT_TASK_reldata] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_TPROT_TASK_reldata]
(
	@CodTask int, 
	@Cookie nvarchar(50) = '', 
	@Success tinyint = 0 OUTPUT
) 

AS
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_TPROT_TASK_relateddata', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_TPROT_TASK_relateddata: VALIDATION: FAILURE (%u)',16,1,@CodTask)
	RETURN(-2)
END

BEGIN TRANSACTION




DELETE FROM TPROT_RESPONSIBLE WHERE CODIGOTAREA=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TPROT_TASK_relateddata: FAILURE DELETING TPROT_RESPONSIBLE (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM IKROLES_TPROT_TASK WHERE IKROLES_TPROT_TASK.NCTASK_ID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TPROT_TASK_relateddata: FAILURE DELETING IKROLES_TPROT_TASK (%u)',16,1,@CodTask)
	RETURN(-1)
END





DELETE FROM TPROT_TASKSSTEPS WHERE NCTASKID=@CodTask
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TPROT_TASK_relateddata: FAILURE DELETING TPROT_TASKSSTEPS (%u)',16,1,@CodTask)
	RETURN(-1)
END

DELETE FROM TPROTTASK_DEPENDENCIES WHERE CODIGOTAREA=@CodTask OR CODIGOTAREAREL=@CodTask 
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_TPROT_TASK_relateddata: FAILURE DELETING TPROTTASK_DEPENDENCIES (%u)',16,1,@CodTask)
	RETURN(-1)
END



/*
ALL DONE
*/

SET @Success = 1
PRINT 'ik_delete_TPROT_TASK_relateddata: SUCCESS (' + ltrim(str(@CodTask)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_USERSGROUP_validate].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_USERSGROUP_validate]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_USERSGROUP_validate] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_USERSGROUP_validate]
(@USERSGROUP int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS

/*
Parameters:
   @USERSGROUP = CODIGO of the IK_PEOPLE record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, 'ik_delete_USERSGROUP_validation', @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: VALIDATION: FAILURE (%u)',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(CODIGO) FROM USUARIOS WHERE CODIGO=@USERSGROUP AND L_WEBGROUP=1 ) = 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP DOESN´T EXSIST.',16,1,@USERSGROUP)
	RETURN(-2)
END




IF (SELECT COUNT(CODIGO) FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP BELONGS TO ONE OR MORE MULTIPLE RANK.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM WEBGROUPMEMBERS WHERE CODIGOGRUPO=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS MEMBERS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS MODULES PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM BS_INDICATORS_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS INDICATORS PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM BS_STRAT_NODES_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS STRAT NODES PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM BS_STRAT_PLANS_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS STRAT PLANS PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM PROC_NODES_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS PROC NODES PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END

IF (SELECT COUNT(*) FROM PROC_PLANS_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS PROC PLANS PERMISSIONS.',16,1,@USERSGROUP)
	RETURN(-2)
END


IF (SELECT COUNT(*) FROM BS_SVG_OPTIONS WHERE USERID=@USERSGROUP ) > 0
BEGIN
	SET @Success = 0
	RAISERROR('ik_delete_USERSGROUP_validation: CHECK: FAILURE (%u). GROUP STILL HAS DIAGRAMS PERMISSIONS.',16,1,@USERSGROUP)	RETURN(-2)
END
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_USUARIOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_USUARIOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_USUARIOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_USUARIOS]
(@CodUser int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT) AS
/*
Parameters:
   @CodUser = CODIGO of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/

EXEC dbo.ik_delete_PERSONAS  @CodUser, @Cookie, @Success
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ACCCORRECTIVAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ACCCORRECTIVAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ACCCORRECTIVAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ACCCORRECTIVAS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ACCIONESCORRECTIVAS'
DECLARE @ModuleId int
SET @ModuleId = 550

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/


DELETE FROM VAR_ACCIONESCORRECTIVAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ACCIDENTES_XT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ACCIDENTES_XT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ACCIDENTES_XT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ACCIDENTES_XT]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ACCIDENTES_XT'
DECLARE @ModuleId int
SET @ModuleId = 556

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION


DELETE FROM VARCHILD_ACCIDENTADOS_XT WHERE CODIGONC=@CodIssue
DELETE FROM VARCHILD_OTROSDAÑOS_XT WHERE CODIGONC=@CodIssue
DELETE FROM VARCHILD_NC_PERSONAS WHERE CODIGONC=@CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS WHERE CODIGONC=@CodIssue
DELETE FROM VARCHILD_REL_SYSO_ACCIDENTE_AGENTE WHERE CODIGONC=@CodIssue
DELETE FROM VARCHILD_REL_SYSO_ACCIDENTE_CAUSAS WHERE CODIGONC=@CodIssue




/*
Delete class specific related records
*/

DELETE FROM VAR_PROYECTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ACP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ACP]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ACP] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ACP]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ACP'
DECLARE @ModuleId int
SET @ModuleId = 550

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_ACCIONESCORRECTIVAS WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ACTIVIDADES].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ACTIVIDADES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ACTIVIDADES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ACTIVIDADES]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ACTIVIDADES'
DECLARE @ModuleId int
SET @ModuleId = 17

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/


DELETE FROM VAR_ACTIVIDADES WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ADM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ADM]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ADM] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ADM]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ADM'
DECLARE @ModuleId int
SET @ModuleId = 551

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_ACCIONESMEJORA WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_AUDITORIAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_AUDITORIAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_AUDITORIAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_AUDITORIAS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_AUDITORIAS'
DECLARE @ModuleId int

SELECT @ModuleId = MODULEID FROM XML_MODULE_DEFINITIONS WHERE VARTABLE = 'VAR_AUDITORIAS'

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/


DELETE FROM VARCHILD_NCCC_PROCESOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_NCCC_PROCESOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_AUDITORS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_AUDITORS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_EXTERNAL_AUDITORS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_EXTERNAL_AUDITORS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_PROCESOS_APROBACION_AP WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_PROCESOS_APROBACION_AP: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_TAREAS_APROBACION_AP WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_TAREAS_APROBACION_AP: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VAR_AUDITORIAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_BSSTRATINITS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_BSSTRATINITS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_BSSTRATINITS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_BSSTRATINITS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_BSSTRATINITIATIVES'
DECLARE @ModuleId int
SET @ModuleId = 350

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_BSSTRATINITIATIVES WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_CIRCULOS_CALIDAD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_CIRCULOS_CALIDAD]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_CIRCULOS_CALIDAD] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_CIRCULOS_CALIDAD]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_CIRCULOS_CALIDAD'
DECLARE @ModuleId int
SET @ModuleId = 9

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_CIRCULOS_CALIDAD WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_COMPETENCIAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_COMPETENCIAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_COMPETENCIAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_COMPETENCIAS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_COMPETENCIAS'
DECLARE @ModuleId int
SET @ModuleId = 96

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DECLARE @COMPETENCIAS_PERSONAS INT
SET @COMPETENCIAS_PERSONAS = (SELECT COUNT(*) FROM VAR_COMPETENCIAS_PERSONA WHERE CODIGONC = @CodIssue) 

IF @COMPETENCIAS_PERSONAS > 0
BEGIN
	RAISERROR('Se deben eliminar los registros de la competencia de la tabla VAR_COMPETENCIAS_PERSONA',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DECLARE @COMPETENCIAS_CARGOS INT
SET @COMPETENCIAS_CARGOS = (SELECT COUNT(*) FROM VAR_COMPETENCIAS_CARGO WHERE CODIGO_COMPETENCIA = @CodIssue) 

IF @COMPETENCIAS_CARGOS > 0
BEGIN
	RAISERROR('Se deben eliminar los registros de la competencia de la tabla VAR_COMPETENCIAS_CARGO',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/



DELETE FROM VAR_COMPETENCIAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_CONTACTOS].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_CONTACTOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_CONTACTOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_CONTACTOS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_CONTACTOS'
DECLARE @ModuleId int
SET @ModuleId = 19

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_CONTACTO_PERSONAS WHERE CODIGO_CONTACTO=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_CONTACTO_PERSONAS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VAR_REGISTRO_CONTACTOS WHERE CODIGO_CONTACTO=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_REGISTRO_CONTACTOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VAR_CONTACTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_CONTROL_CAMBIOS_XT].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_CONTROL_CAMBIOS_XT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_CONTROL_CAMBIOS_XT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_CONTROL_CAMBIOS_XT]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_CONTROL_CAMBIOS_XT'
DECLARE @ModuleId int
SET @ModuleId = 555

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_INFORMES_CONTROL_CAMBIOS_XT WHERE CONTROL_CAMBIOS_CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_INFORMES_CONTROL_CAMBIOS_XT: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VARCHILD_IMPACTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_IMPACTOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VARCHILD_PRODUCTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_PRODUCTOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VARCHILD_COSTOS_CONTROL_CAMBIOS_XT WHERE CONTROL_CAMBIOS_CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_COSTOS_CONTROL_CAMBIOS_XT: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END







DELETE FROM VAR_CONTROL_CAMBIOS_XT WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_DISENOPRODUCTOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_DISENOPRODUCTOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_DISENOPRODUCTOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_DISENOPRODUCTOS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_DISENOPRODUCTOS'
DECLARE @ModuleId int
SET @ModuleId = 7

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_DISENOPRODUCTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_FOROS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_FOROS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_FOROS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_FOROS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_FOROS'
DECLARE @ModuleId int
SET @ModuleId = 554

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/


DELETE FROM VAR_FOROS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_INA].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_INA]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_INA] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_INA]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_INA'
DECLARE @ModuleId int
SET @ModuleId = 14

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_INCIDENTES_AUD WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_ING].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_ING]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_ING] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_ING]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ING'
DECLARE @ModuleId int
SET @ModuleId = 13

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_INCIDENTESINT WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_NCAUD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_NCAUD]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_NCAUD] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_NCAUD]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_NCAUD'
DECLARE @ModuleId int
SET @ModuleId = 1

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_NCAUD WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_NCI].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_NCI]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_NCI] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_NCI]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_NCI'
DECLARE @ModuleId int
SET @ModuleId = 6

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_NOCONFORMIDADES WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_OBJETIVOSCUAL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_OBJETIVOSCUAL]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_OBJETIVOSCUAL] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_OBJETIVOSCUAL]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_OBJETIVOSCUAL'
DECLARE @ModuleId int
SET @ModuleId = 4

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_OBJETIVOSCUAL WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_OBJETIVOSNUM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_OBJETIVOSNUM]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_OBJETIVOSNUM] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_OBJETIVOSNUM]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_OBJETIVOSNUM'
DECLARE @ModuleId int
SET @ModuleId = 2

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_DATOS WHERE CODIGO_OBJETIVO=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_DATOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VAR_OBJETIVOSNUM WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_PEOPLE_GROUP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_PEOPLE_GROUP]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_PEOPLE_GROUP] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_PEOPLE_GROUP]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_PEOPLE_GROUP'
DECLARE @ModuleId int
SET @ModuleId = 97

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


BEGIN TRANSACTION

/*
Delete class specific related records
*/

DELETE FROM VARCHILD_PEOPLE_GROUP_CARGOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_PEOPLE_GROUP_PEOPLE WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VAR_PEOPLE_GROUP WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_PRESENTATIONS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_PRESENTATIONS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_PRESENTATIONS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_PRESENTATIONS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_PRESENTATIONS'
DECLARE @ModuleId int
SET @ModuleId =552

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

DELETE FROM FROZEN_PRESENTATIONS_ITEMS 
WHERE FROZEN_PRESENTATION_ID IN(
	SELECT FROZEN_PRESENTATION_ID 
		FROM VARCHILD_FROZEN_PRESENTATIONS
		WHERE CODIGONC=@CodIssue
)

DELETE FROM VARCHILD_FROZEN_PRESENTATIONS WHERE CODIGONC=@CodIssue

DELETE FROM VARCHILD_PRESENTATIONS_SLIDES WHERE CODIGONC=@CodIssue





/*
Delete class specific related records
*/
DELETE FROM VAR_PRESENTATIONS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_PROYECTOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_PROYECTOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_PROYECTOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_PROYECTOS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_PROYECTOS'
DECLARE @ModuleId int
SET @ModuleId = 16

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_PROYECTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_QUEJAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_QUEJAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_QUEJAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_QUEJAS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_QUEJAS'
DECLARE @ModuleId int
SET @ModuleId = 10

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_NCCC_AREAS			WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CAUSAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_PROCESOS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_CONSECUENCIAS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_REQNORMATIVOS	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NCCC_ESPINA5WHY	WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_CLIENTES		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PERSONAS		WHERE CODIGONC = @CodIssue
DELETE FROM VARCHILD_NC_PROVEEDORES		WHERE CODIGONC = @CodIssue
DELETE FROM NCCOSTOS					WHERE CODIGONC = @CodIssue
DELETE FROM NC_WF_ETAPAS				WHERE CODIGO_NC = @CodIssue

DELETE FROM VAR_QUEJAS WHERE CODIGONC = @CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT dbo.CONCAT4(@ValidationName, ': SUCCESS (', ltrim(str(@CodIssue)), ')')
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_REQUISITOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_REQUISITOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_REQUISITOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_REQUISITOS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_REQUISITOS'
DECLARE @ModuleId int
SET @ModuleId = 8

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_REQUISITOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_REUNIONES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_REUNIONES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_REUNIONES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_REUNIONES]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_REUNIONES'
DECLARE @ModuleId int
SET @ModuleId = 11

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_REUNIONES WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_SEGUIMIENTO_PLAZOS].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_SEGUIMIENTO_PLAZOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_SEGUIMIENTO_PLAZOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_SEGUIMIENTO_PLAZOS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_SEGUIMIENTO_PLAZOS'
DECLARE @ModuleId int

SELECT @ModuleId = MODULEID FROM XML_MODULE_DEFINITIONS WHERE VARTABLE = 'VAR_SEGUIMIENTO_PLAZOS'
/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VARCHILD_SEG_PLA_CLASES WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_CLASES: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_SEG_PLA_ASUNTOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_ASUNTOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_SEG_PLA_TAREAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_TAREAS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_SEG_PLA_ASUNTOS_EXCL WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_ASUNTOS_EXCL: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

DELETE FROM VARCHILD_SEG_PLA_ASUNTOS_INC WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_ASUNTOS_INC: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END


DELETE FROM VARCHILD_SEG_PLA_INV_MANUAL WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VARCHILD_SEG_PLA_INV_MANUAL: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END




DELETE FROM VAR_SEGUIMIENTO_PLAZOS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_SEGUIMIENTO_PLAZOS: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_SUGERENCIAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_SUGERENCIAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_SUGERENCIAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_SUGERENCIAS]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_SUGERENCIAS'
DECLARE @ModuleId int
SET @ModuleId = 12

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_SUGERENCIAS WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_SUGERENCIASINT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_SUGERENCIASINT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_SUGERENCIASINT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_SUGERENCIASINT]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_SUGERENCIASINT'
DECLARE @ModuleId int
SET @ModuleId = 15

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*
Delete class specific related records
*/
DELETE FROM VAR_SUGERENCIASINT WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_VAR_TPROT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_VAR_TPROT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_VAR_TPROT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_VAR_TPROT]
(@CodIssue int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)
AS
/*
Parameters:
   @CodIssue = CODIGONC of the record to delete
   @Cookie = Authentication cookie for the process
Returns:
   @Success = 1 if the operation succeeded
   @Success = 0 if the operation failed
*/


DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_VAR_ACCIONESCORRECTIVAS'
DECLARE @ModuleId int
SET @ModuleId = 99

/*
Validate the cookie:
*/
DECLARE @CookieIsValid tinyint
EXEC ik_cookie_is_valid @Cookie, @ValidationName, @CookieIsValid OUTPUT
IF @CookieIsValid <> 1
BEGIN
	SET @Success = 0
	RAISERROR('%s: VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-2)
END

/*
Verify that the NCMAINPROD record belongs to the class
*/
DECLARE @RecordModuleId int
SET @RecordModuleId = (SELECT TIPO FROM NCMAINPROD WHERE CODIGO=@CodIssue)
IF @RecordModuleId <> @ModuleId
BEGIN
	SET @Success = 0
	RAISERROR('%s: CLASS VALIDATION: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

BEGIN TRANSACTION

/*

PROT TASKS

*/
DECLARE @TasksDeletionSuccess int
SET @TasksDeletionSuccess = 0

declare CurTasks CURSOR FAST_FORWARD for SELECT CODIGO FROM TPROT_TASK
										 WHERE CODIGONC=@CodIssue

declare @CODIGO int


open CurTasks
fetch next from CurTasks into @CODIGO

while @@FETCH_STATUS = 0
begin
	EXEC ik_delete_TPROT_TASK_reldata @CODIGO, @Cookie, @TasksDeletionSuccess OUTPUT
	IF @TasksDeletionSuccess <> 1
	BEGIN
		close CurTasks
		deallocate CurTasks
		SET @Success = 0
		ROLLBACK TRANSACTION
		RAISERROR('ik_delete_TPROT_TASK_reldata: FAILURE (%u)',16,1,@CodIssue)
		RETURN(-1)
	END
	fetch next from CurTasks into @CODIGO
end

close CurTasks
deallocate CurTasks


DELETE FROM TPROT_TASK WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_VAR_TPROT:DELETE TPROT_TASK FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END


/*Involveds*/

DELETE FROM TPROT_INVOLVED WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('ik_delete_VAR_TPROT:DELETE TPROT_INVOLVED FAILURE (%u)',16,1,@CodIssue)
	RETURN(-1)
END


/*
Delete class specific related records
*/


DELETE FROM VAR_TPROT WHERE CODIGONC=@CodIssue
IF @@ERROR <> 0
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: VAR_TABLE: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END



/*
Delete NCMAINPROD and related records
*/
DECLARE @NCDeletionSuccess int
SET @NCDeletionSuccess = 0

EXEC ik_delete_NCMAINPROD @CodIssue, @Cookie, @NCDeletionSuccess OUTPUT
IF @NCDeletionSuccess <> 1
BEGIN
	SET @Success = 0
	ROLLBACK TRANSACTION
	RAISERROR('%s: FAILURE (%u)',16,1, @ValidationName,@CodIssue)
	RETURN(-1)
END

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodIssue)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_delete_WF].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_delete_WF]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_delete_WF] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_delete_WF]
(@CodWF int, @Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT)

AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_WF'

BEGIN TRANSACTION

UPDATE NCMAINPROD SET WF_ID=NULL,WF_XML_FILE=NULL WHERE WF_ID=@CodWF


DELETE FROM WF_APPROVAL_RECORDS WHERE WF_NODE_ID IN (SELECT WF_NODE_ID FROM WF_NODE WHERE WF_ID =@CodWF)

DELETE FROM WF_APPROVAL_REQUIREMENTS WHERE WF_NODE_ID IN (SELECT WF_NODE_ID FROM WF_NODE WHERE WF_ID =@CodWF)

DELETE FROM WF_EXTRADATA WHERE WF_ID =@CodWF

DELETE FROM WF_NODE_ROL WHERE WF_ID =@CodWF

DELETE FROM WF_SCHEDDATES WHERE WF_ID =@CodWF

DELETE FROM WF_NODE WHERE WF_ID =@CodWF

DELETE FROM WF_FLAGS WHERE WF_ID =@CodWF

DELETE FROM WF WHERE WF_ID =@CodWF

SET @Success = 1
PRINT @ValidationName + ': SUCCESS (' + ltrim(str(@CodWF)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_dfs_create_uid].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dfs_create_uid]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dfs_create_uid] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dfs_create_uid]
@IK_DFS_FILENAME VARCHAR(300),
@IK_DFS_ALMACEN INT,
@IK_DFS_FULLPATH NVARCHAR(2000),
@IK_DFS_FILE_DATE DATETIME,
@IK_DFS_FILE_LENGTH FLOAT 

AS
BEGIN
   DECLARE @NID CHAR(36)
   SET @NID = NEWID()
   INSERT INTO IK_DFS(IK_DFS_ID,IK_DFS_FILENAME,IK_DFS_ALMACEN,IK_DFS_FULLPATH,IK_DFS_SETDATE,IK_DFS_FILE_DATE,IK_DFS_FILE_LENGTH)
  VALUES(@NID,@IK_DFS_FILENAME,@IK_DFS_ALMACEN,@IK_DFS_FULLPATH,GetDate(),@IK_DFS_FILE_DATE,@IK_DFS_FILE_LENGTH)
  
   select   @NID

END
GO

GO
--SqlScripter----[dbo].[ik_dfs_get].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_dfs_get]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_dfs_get] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_dfs_get]
(
		@uid uniqueidentifier
	)

AS

DELETE FROM IK_DFS WHERE DATEDIFF(s,IK_DFS_SETDATE, GETDATE()) > 60


DECLARE @IK_DFS_FILENAME nvarchar(200)
DECLARE @IK_DFS_ALMACEN int
DECLARE @IK_DFS_FULLPATH nvarchar(2000)
DECLARE @IK_DFS_SETDATE datetime
DECLARE @IK_DFS_FILE_DATE datetime
DECLARE @IK_DFS_FILE_LENGTH float

SET @IK_DFS_FILENAME=(SELECT IK_DFS_FILENAME FROM IK_DFS WHERE IK_DFS_ID = @UID)
IF @IK_DFS_FILENAME IS NULL
BEGIN
	SELECT 'ERROR: ID DOES NOT EXIST'
	RETURN
END

SET @IK_DFS_SETDATE=(SELECT IK_DFS_SETDATE FROM IK_DFS WHERE IK_DFS_ID = @UID)
IF datediff(s,@IK_DFS_SETDATE, GETDATE()) > 60
BEGIN
	SELECT 'ERROR: ID HAS EXPIRED'
	RETURN
END

SET @IK_DFS_ALMACEN=(SELECT IK_DFS_ALMACEN FROM IK_DFS WHERE IK_DFS_ID = @UID)
SET @IK_DFS_FULLPATH=(SELECT IK_DFS_FULLPATH FROM IK_DFS WHERE IK_DFS_ID = @UID)
SET @IK_DFS_FILE_DATE=(SELECT IK_DFS_FILE_DATE FROM IK_DFS WHERE IK_DFS_ID = @UID)
SET @IK_DFS_FILE_LENGTH=(SELECT IK_DFS_FILE_LENGTH FROM IK_DFS WHERE IK_DFS_ID = @UID)

--DELETE FROM IK_DFS WHERE IK_DFS_ID = @UID

SELECT 
@IK_DFS_FILENAME AS IK_DFS_FILENAME,
@IK_DFS_ALMACEN AS IK_DFS_ALMACEN,
@IK_DFS_FULLPATH AS IK_DFS_FULLPATH,
@IK_DFS_FILE_DATE AS IK_DFS_FILE_DATE,
@IK_DFS_FILE_LENGTH AS IK_DFS_FILE_LENGTH
RETURN
GO

GO
--SqlScripter----[dbo].[ik_doc_allgroups_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_allgroups_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_allgroups_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_allgroups_withaccess]
(
		@IKPDO int,
		@IKCAT int,
		@IKCDU int,
		@PARAMETERS varchar(8000)='',
		@SORT nvarchar(100)='CATEGORIADOCUMENTO'
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000)

IF LEN(@PARAMETERS)=0 SET @PARAMETERS='1=1'

SELECT @strDOC =
CASE	
	WHEN  @IKCAT=0 OR @IKPDO=2  THEN
		'SELECT * FROM TBL_CATEGORIASDOCUMENTOS WHERE CODIGO = 0 '		 /*select nothing*/
	WHEN @IKCAT=4 OR @IKPDO=0 THEN
		'SELECT * FROM TBL_CATEGORIASDOCUMENTOS WHERE '
			
	ELSE /*Select only allowed docs groups*/
		'SELECT * FROM TBL_CATEGORIASDOCUMENTOS 
			WHERE 
			    CODIGO NOT IN (
				SELECT CODIGOTIPONC-300000 FROM NCMODULESECURITYLEVELS 
					WHERE NIVELACCESO=300011 
					AND CODIGOUSUARIO='+ CONVERT(nvarchar(5),@IKCDU) +') 
			AND (CODIGO NOT IN (
				SELECT CODIGOTIPONC-300000 FROM NCMODULESECURITYLEVELS 
				WHERE NIVELACCESO=300011 
				AND CODIGOUSUARIO IN (
					SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS 
					WHERE CODIGOUSUARIO='+ CONVERT(nvarchar(5),@IKCDU) +')) 
				OR CODIGO IN (
					SELECT CODIGOTIPONC-300000 FROM NCMODULESECURITYLEVELS 
					WHERE NIVELACCESO=300010 
					AND CODIGOUSUARIO='+ CONVERT(nvarchar(5),@IKCDU) +')) 
			AND ' 
	
END		


IF NOT (@IKCAT=0 OR @IKPDO=2)
BEGIN
	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [CATEGORIADOCUMENTO]'
	END
END


EXEC (@strDOC+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_doc_DistributedUsersGroups].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_DistributedUsersGroups]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_DistributedUsersGroups] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_DistributedUsersGroups]
@DOCCODE int
AS
BEGIN

   SELECT DISTINCT  U.CODIGO,U.USUARIO AS GRUPO FROM USUARIOS U
   JOIN(VISTA_CARGOSUSUARIOS CU
   JOIN dbo.fn_doc_getDistributeds (@DOCCODE) DI ON DI.CODIGOCARGO = CU.CODIGOCARGO and DI.TIPO = 4)
   ON CU.CODIGOUSUARIO = U.CODIGO
   WHERE U.L_WEBGROUP = 1

END
GO

GO
--SqlScripter----[dbo].[ik_doc_duplicateIKMASTER_Rels].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_duplicateIKMASTER_Rels]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_duplicateIKMASTER_Rels] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_duplicateIKMASTER_Rels]
@OLDDOC INT,
@NUEVODOC INT 
AS
BEGIN

   DECLARE @NUEVOIKI_MASTERID INT

   IF NOT(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC) IS NULL
   BEGIN
		INSERT INTO IKI_MASTER(IKI_FORTABLE) VALUES('DOCUMENTOS')
	     SET @NUEVOIKI_MASTERID =(SELECT IKI_MASTERID FROM IKI_MASTER WHERE (IKI_MASTERID = @@IDENTITY))

      UPDATE DOCUMENTOS  SET IKI_MASTERID = @NUEVOIKI_MASTERID WHERE CODIGO = @NUEVODOC


	  INSERT INTO IKI_BSINDICATORS(IKI_MASTERID, I_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, I_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_BSINDICATORS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


	  INSERT INTO IKI_BSSTRATNODES(IKI_MASTERID, S_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, S_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_BSSTRATNODES
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


      INSERT INTO IKI_BSSTRATPLANS(IKI_MASTERID, SPLAN_ID , ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, SPLAN_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_BSSTRATPLANS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


	  INSERT INTO IKI_DOCUMENTS(IKI_MASTERID, D_ID , ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, D_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_DOCUMENTS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


      INSERT INTO IKI_IKPEOPLE(IKI_MASTERID, PE_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, PE_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_IKPEOPLE
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


      INSERT INTO IKI_ISSUES(IKI_MASTERID, N_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, N_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_ISSUES
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)

	  INSERT INTO IKI_ISSUESTASKS(IKI_MASTERID, T_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, T_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_ISSUESTASKS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


	  INSERT INTO IKI_ORGCHART(IKI_MASTERID, O_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, O_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_ORGCHART
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


      INSERT INTO IKI_PROCNODES(IKI_MASTERID, P_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, P_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_PROCNODES
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)


      INSERT INTO IKI_PROCPLANS(IKI_MASTERID, PPLAN_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, PPLAN_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_PROCPLANS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)
      

      INSERT INTO IKI_SVGDRAWINGS(IKI_MASTERID, SVG_ID, ROL, IKI_DATE, IKI_USER)
      SELECT @NUEVOIKI_MASTERID AS IKI_MASTERID, SVG_ID, ROL, IKI_DATE, IKI_USER 
		FROM IKI_SVGDRAWINGS
      WHERE IKI_MASTERID =(SELECT IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO = @OLDDOC)

	  
	  



	  
	  

   END




END
GO

GO
--SqlScripter----[dbo].[ik_doc_getDistributeds].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_getDistributeds]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_getDistributeds] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_getDistributeds]
@DOCCODE INT
AS
BEGIN
	SET NOCOUNT ON;


SELECT DOC.*, C.USUARIO FROM fn_doc_getDistributeds(@DOCCODE) DOC
LEFT JOIN VISTA_CARGOSUSUARIOS C ON DOC.CODIGOCARGO = C.CODIGOCARGO
END
GO

GO
--SqlScripter----[dbo].[ik_doc_getRedistributionCandidates].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_getRedistributionCandidates]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_getRedistributionCandidates] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_getRedistributionCandidates]
@DOCCODE INT,
@LANG varchar(10) = 'SP'
AS
BEGIN

DECLARE @DB_REQUERIRDISTRIBUCION NVARCHAR(100)
SET @DB_REQUERIRDISTRIBUCION = (SELECT TOP 1 DB_REQUERIRDISTRIBUCION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)

SELECT DISTINCT CODIGOUSUARIO INTO #TEMP_TASKS_COMPLETED FROM TAREASREVISION WHERE ESTADO='C' AND ACCION=@DB_REQUERIRDISTRIBUCION AND CODIGODOCUMENTO =@DOCCODE


SELECT DISTINCT P.CODIGOUSUARIO INTO #TEMP_PERMISOSDOC 
	FROM PERMISOSDOC P 
		JOIN USUARIOS U ON U.CODIGO=P.CODIGOUSUARIO 
WHERE U.L_WEBGROUP=0 AND (NIVELACCESO >= 300002) AND CODIGODOCUMENTO=@DOCCODE


INSERT INTO #TEMP_PERMISOSDOC (CODIGOUSUARIO)
SELECT DISTINCT U.CODIGO
	FROM USUARIOS U 
WHERE (U.CATEGORIA=0 OR U.PERMISOSDOCUMENTOS=0) AND NOT U.CODIGO IN (SELECT #TEMP_PERMISOSDOC.CODIGOUSUARIO FROM #TEMP_PERMISOSDOC)


INSERT INTO #TEMP_PERMISOSDOC (CODIGOUSUARIO)
SELECT DISTINCT M.CODIGOUSUARIO 
	FROM PERMISOSDOC P 
		JOIN USUARIOS G ON G.CODIGO=P.CODIGOUSUARIO 
		JOIN WEBGROUPMEMBERS M ON M.CODIGOGRUPO=P.CODIGOUSUARIO
WHERE G.L_WEBGROUP=1 AND NIVELACCESO >= 300002 AND CODIGODOCUMENTO=@DOCCODE AND NOT M.CODIGOUSUARIO IN (SELECT #TEMP_PERMISOSDOC.CODIGOUSUARIO FROM #TEMP_PERMISOSDOC)


SELECT 
	D.DESCRIPCION AS CARGO,
	O.CODIGO AS CODIGOCARGO,
	CASE WHEN D.TIPO=4 THEN U.USUARIO ELSE O.USUARIO END AS USUARIO,
	CASE WHEN D.TIPO=4 THEN U.CODIGO ELSE O.CODIGOUSUARIO END AS CODIGOUSUARIO,
	D.TIPO_DISTRIBUCION,
	D.TIPO_DISTRIBUCIONLOC,
	CASE WHEN #TEMP_TASKS_COMPLETED.CODIGOUSUARIO IS NULL THEN 0 ELSE 1 END AS L_DISTRIBUTED,
	CASE WHEN #TEMP_PERMISOSDOC.CODIGOUSUARIO IS NULL THEN 0 ELSE 1 END AS L_HASACCESS
	FROM dbo.fn_doc_getDistributeds(@DOCCODE) D 
	LEFT JOIN VISTA_ORGANIGRAMA O ON O.CODIGO=D.ORGANIGRAMA_CODIGO 
	LEFT JOIN USUARIOS U ON U.CODIGO=D.CODIGOUSUARIOCARGOMULTIPLE AND D.TIPO=4
	LEFT JOIN #TEMP_TASKS_COMPLETED ON #TEMP_TASKS_COMPLETED.CODIGOUSUARIO=CASE WHEN D.TIPO=4 THEN U.CODIGO ELSE O.CODIGOUSUARIO END
	LEFT JOIN #TEMP_PERMISOSDOC ON #TEMP_PERMISOSDOC.CODIGOUSUARIO=CASE WHEN D.TIPO=4 THEN U.CODIGO ELSE O.CODIGOUSUARIO END

WHERE 
TIPO_DISTRIBUCION != 10 --NO ES SUB DISTRI
AND NOT CASE WHEN D.TIPO=4 THEN U.CODIGO ELSE O.CODIGOUSUARIO END IS NULL --EL CARGO TIENE USUARIO
AND (#TEMP_TASKS_COMPLETED.CODIGOUSUARIO IS NULL OR #TEMP_PERMISOSDOC.CODIGOUSUARIO IS NULL) --LE FALTA PERMISO O LE FALTA CUMPLIR LA TAREA
AND O.L_DELETED=0 --USUARIO VIGENTE
AND (TIPO_DISTRIBUCION=4 AND #TEMP_PERMISOSDOC.CODIGOUSUARIO IS NULL OR TIPO_DISTRIBUCION!=4) --SI ES CONCEDER ACCESO SOLO SI NO TIENE PERMISO

ORDER BY 3

DROP TABLE #TEMP_TASKS_COMPLETED
DROP TABLE #TEMP_PERMISOSDOC

END
GO

GO
--SqlScripter----[dbo].[ik_doc_obsoleteIKMASTER_Rels].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_doc_obsoleteIKMASTER_Rels]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_doc_obsoleteIKMASTER_Rels] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_doc_obsoleteIKMASTER_Rels]
@DOC_ID INT
AS
BEGIN

DECLARE @IKI_MASTERID INT

SELECT @IKI_MASTERID = DOCUMENTOS.IKI_MASTERID FROM DOCUMENTOS WHERE CODIGO=@DOC_ID

	  DELETE FROM IKI_BSINDICATORS WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_BSSTRATNODES WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_BSSTRATPLANS WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_DOCUMENTS WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_IKPEOPLE WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_ISSUES WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_ISSUESTASKS WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_ORGCHART WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_PROCNODES WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_PROCPLANS WHERE IKI_MASTERID  = @IKI_MASTERID

	  DELETE FROM IKI_SVGDRAWINGS WHERE IKI_MASTERID  = @IKI_MASTERID

	  

END
GO

GO
--SqlScripter----[dbo].[ik_docs_groups_for_new].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_docs_groups_for_new]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_docs_groups_for_new] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_docs_groups_for_new]
(@CodUser int, @IKPDO int, @IKCAT int, @IKGLST nvarchar(500))
AS

/*Check if the user is an IS-KEY administrator or Document administrator*/
IF @IKCAT=4 OR @IKPDO=0
BEGIN
	SELECT CODIGO,CAMINO AS DESCRIPCION,ORDEN FROM TBL_CATEGORIASDOCUMENTOS ORDER BY ORDEN
	RETURN
END

IF LTRIM(RTRIM(@IKGLST)) = ''
	BEGIN
		SELECT DISTINCT t.CODIGO,t.CAMINO AS DESCRIPCION,t.ORDEN
			FROM  TBL_CATEGORIASDOCUMENTOS t 
			INNER JOIN NCMODULESECURITYLEVELS n ON t.codigo = n.codigotiponc - 300000
			WHERE n.CODIGOUSUARIO = @CodUser
				AND n.L_PUEDENUEVOS = 1
			ORDER BY ORDEN
	END
ELSE
	BEGIN
	DECLARE @ALL varchar(500)
	DECLARE @SQL varchar(1000)
	SET @ALL = @IKGLST + ',' + LTRIM(STR(@CodUser))
	SET @SQL='SELECT DISTINCT t.CODIGO,t.CAMINO AS DESCRIPCION,t.ORDEN
			FROM  TBL_CATEGORIASDOCUMENTOS t 
			INNER JOIN NCMODULESECURITYLEVELS n ON t.codigo = n.codigotiponc - 300000
			WHERE n.CODIGOUSUARIO IN (' + @ALL +')
				AND n.L_PUEDENUEVOS = 1
			ORDER BY ORDEN'
	EXEC(@SQL)
	END
RETURN
GO

GO
--SqlScripter----[dbo].[ik_docs_types_for_new].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_docs_types_for_new]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_docs_types_for_new] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_docs_types_for_new]
(@CodUser int, @IKPDO int, @IKCAT int, @IKGLST nvarchar(500))
AS

/*Check if the user is an IS-KEY administrator or Document administrator*/
IF @IKCAT=4 OR @IKPDO=0 
BEGIN
	SELECT CODIGO,DESCRIPCION,dbo.CONCAT3(RTRIM(TIPO),': ',RTRIM(DESCRIPCION)) AS TIPO FROM TIPOSDOCUMENTOS ORDER BY TIPO
	RETURN
END

IF (@IKGLST IS NULL) OR (LTRIM(RTRIM(@IKGLST)) = '')
	BEGIN
		SELECT DISTINCT t.CODIGO,t.DESCRIPCION,dbo.CONCAT3(RTRIM(t.TIPO),': ',RTRIM(t.DESCRIPCION)) AS TIPO
			FROM  TIPOSDOCUMENTOS t 
			LEFT OUTER JOIN TBL_RESTRICTED_AM_DOCTYPES R ON t.CODIGO=R.DOCTYPEID 
			WHERE R.CODIGO IS NULL OR USERID=@CodUser
			ORDER BY TIPO
	END
ELSE
	BEGIN
	DECLARE @ALL varchar(500)
	DECLARE @SQL varchar(1000)
	SET @ALL = @IKGLST + ',' + LTRIM(STR(@CodUser))
	SET @SQL='SELECT DISTINCT t.CODIGO,t.DESCRIPCION,dbo.CONCAT3(RTRIM(t.TIPO),'': '',RTRIM(t.DESCRIPCION)) AS TIPO
			FROM  TIPOSDOCUMENTOS t 
			LEFT OUTER JOIN TBL_RESTRICTED_AM_DOCTYPES R ON t.CODIGO=R.DOCTYPEID 
			WHERE R.CODIGO IS NULL OR USERID IN (' + @ALL +') ORDER BY TIPO'
	EXEC(@SQL)
	END
RETURN
GO

GO
--SqlScripter----[dbo].[ik_Document_Distribution_List].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Document_Distribution_List]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Document_Distribution_List] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Document_Distribution_List]
@DOCCODE INT, @ORDERBY VARCHAR(50) 
AS
BEGIN

   DECLARE @SOURCEDOCCODE INT
   DECLARE @FROMDOCCODE INT

   SET @SOURCEDOCCODE = @DOCCODE


   IF(SELECT CODIGODISTRIBUCION FROM DOCUMENTOS WHERE CODIGO = @SOURCEDOCCODE) > 0
      SET @FROMDOCCODE =(SELECT CODIGODISTRIBUCION FROM DOCUMENTOS WHERE CODIGO = @SOURCEDOCCODE)
   ELSE
      SET @FROMDOCCODE = @SOURCEDOCCODE


	SELECT 
	TIPO_ORG_IMG, 
	D.DESCRIPCION AS CARGO,
	USUARIO,
	EMAIL,
	TIPO_DISTRIBUCIONLOC  
	FROM dbo.fn_doc_getDistributeds(@FROMDOCCODE) D 
	LEFT JOIN VISTA_ORGANIGRAMA O ON O.CODIGO=D.ORGANIGRAMA_CODIGO 

ORDER BY 
CASE 
	WHEN @ORDERBY='D.DESCRIPCION' THEN D.DESCRIPCION
	WHEN @ORDERBY='USUARIO' THEN USUARIO 
	WHEN @ORDERBY='EMAIL' THEN EMAIL
	WHEN @ORDERBY='TIPO_DISTRIBUCION' THEN STR(TIPO_DISTRIBUCION)
	ELSE D.DESCRIPCION
END




END
GO

GO
--SqlScripter----[dbo].[ik_document_groups_in_document].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_document_groups_in_document]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_document_groups_in_document] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_document_groups_in_document]
(@CodUser int,@CodDocument int, @IKPDO int, @IKCAT int, @IKGLST nvarchar(500))
AS

SELECT t.CODIGO AS CODIGO, t.DESCRIPCION 
		FROM DOCUMENTOSCATEGORIAS d INNER JOIN TBL_CATEGORIASDOCUMENTOS t
		ON d.CODIGOCATEGORIA = t.CODIGO
		WHERE d.CODIGODOCUMENTO = @CodDocument
		ORDER BY t.DESCRIPCION
	RETURN
GO

GO
--SqlScripter----[dbo].[ik_documents_getDistributeds].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_getDistributeds]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_getDistributeds] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_getDistributeds]
(
		@DOCCODE INT
	)

AS
SELECT * FROM
dbo.fn_doc_getDistributeds(@DOCCODE)
ORDER BY DESCRIPCION
	RETURN
GO

GO
--SqlScripter----[dbo].[ik_documents_inheriting].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_inheriting]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_inheriting] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_inheriting]
(
		@DOCCODE int,
		@PROCESSTYPE tinyint
	)

AS
	       
 SELECT * FROM (
			SELECT TOP 1 
				D_CODIGO,
				D_NOMBRECOMPLETO,
				O_CODIGO,
				O_NOMBRECOMPLETO,
				O_URL_DATA,
				D_URL_DATA,
				POLITICA
			FROM VISTA_DOCUMENTOS_HERENCIA 
				WHERE O_CODIGO = @DOCCODE AND POLITICA = @PROCESSTYPE
			UNION
			SELECT D_CODIGO,
				D_NOMBRECOMPLETO, 
				NULL O_CODIGO,
				NULL O_NOMBRECOMPLETO,
				NULL _O_URL_DATA,
				D_URL_DATA,
				POLITICA
			FROM VISTA_DOCUMENTOS_HERENCIA 
			WHERE 
	        (O_CODIGO = @DOCCODE AND POLITICA = @PROCESSTYPE AND NOT D_CODIGO IN (SELECT TOP 1 D_CODIGO FROM VISTA_DOCUMENTOS_HERENCIA WHERE O_CODIGO = @DOCCODE AND POLITICA = @PROCESSTYPE ))
	        ) DOCHERENCIA
GO

GO
--SqlScripter----[dbo].[ik_Documents_Tasks].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Documents_Tasks]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Documents_Tasks] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Documents_Tasks]
(
	@LANG varchar(10) = 'SP',
	@tmp_table nvarchar(500) = '#TMP_DOC_TASKSINPROGRESS',
	@L_RETURN_DATA int = 1
)

AS
SET NOCOUNT ON




DECLARE @DB_REQUERIRDISTRIBUCION varchar(100)
DECLARE @DB_REQUERIRAPROBACION varchar(100)
DECLARE @DB_REQUERIRREVISION varchar(100)
DECLARE @Loc_Next_Rev_Date_Reached varchar(100)

SET @DB_REQUERIRDISTRIBUCION = (SELECT TOP 1 DB_REQUERIRDISTRIBUCION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @DB_REQUERIRAPROBACION = (SELECT TOP 1 DB_REQUERIRAPROBACION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @DB_REQUERIRREVISION = (SELECT TOP 1 DB_REQUERIRREVISION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @Loc_Next_Rev_Date_Reached = 'Loc_Next_Rev_Date_Reached'


SELECT DISTINCT DO.CODIGO 
INTO #TEMP_DOCS_HERENCIAS
FROM DOCUMENTOS DO 
JOIN  DOCUMENTOS DD ON DO.CODIGO=DD.CODIGOBASADOEN	
	

SELECT *,

CASE
	WHEN ESTADO=0 OR ESTADO=1 THEN 'Images/Doc_Development.gif'
	WHEN ESTADO=2 THEN 'Images/Doc_Current.gif'
	WHEN ESTADO=3 THEN 'Images/Doc_Obsolete.gif'
END AS DOCICON,

CASE 
	WHEN ACCION = @DB_REQUERIRDISTRIBUCION THEN 'Images/IK_DISTRIBUCION.GIF'
	WHEN ACCION = @DB_REQUERIRAPROBACION THEN 'Images/IK_APROBACION.GIF'
	WHEN ACCION = @DB_REQUERIRREVISION THEN 'Images/IK_REVISION.GIF'
	WHEN ACCION = @Loc_Next_Rev_Date_Reached THEN 'Images/Task_Unsigned.gif'
END AS DOCTASKICON,

CASE 
	WHEN ACCION = @DB_REQUERIRDISTRIBUCION THEN 'Loc_Distribution'
	WHEN ACCION = @DB_REQUERIRAPROBACION THEN 'Loc_Approval'
	WHEN ACCION = @DB_REQUERIRREVISION THEN 'Loc_Revision'
	WHEN ACCION = @Loc_Next_Rev_Date_Reached THEN 'Loc_Next_Rev'
END AS DOCTASKLOC,

CASE 
	WHEN FECHAVTO IS NULL THEN 'n/a'
	ELSE ''
END AS STRFECVTO,


CASE 
	WHEN  DATEDIFF(DAY,GETDATE(),FECHAVTO) < 0   THEN 'red'
	ELSE ''
END AS FECVTO_COLOR,
CASE 
	WHEN  DATEDIFF(DAY,GETDATE(),FECHAVTO) < 0   THEN 'white'
	ELSE ''
END AS FECVTO_FORECOLOR,

CASE 
	WHEN  DATEDIFF(DAY,GETDATE(),FECHAVTO) < 0   THEN 'red_sem'
	ELSE ''
END AS FECVTO_CSSCLASS



INTO #TMP_TBL

 FROM (

/* 
SELECT CODIGOTAREA, CODIGODOCUMENTO AS DOCCODE, DESCRIPCIONDOC,ACCION, CARGOREQ,DOCUMENTOSESTADO AS ESTADO,CODIGOUSUARIO,CODIGOCARGO,NOMBRE,CODIGOISO,C_REVISION,REVISION,FECHAVENCIMIENTO AS FECHAVTO  
FROM VISTA_CONDOCTAREASUSUARIOS 
*/

SELECT 
	dbo.TAREASREVISION.CODIGO AS CODIGOTAREA, 
	dbo.TAREASREVISION.CODIGODOCUMENTO AS DOCCODE, 
	DESCRIPCIONDOC,ACCION, 
	CARGOREQ,DOCUMENTOS.ESTADO AS ESTADO,
	CODIGOUSUARIO,
	dbo.TAREASREVISION.CODIGOCARGOREQ AS CODIGOCARGO,
	NOMBRE,
	CODIGOISO,
	C_REVISION,
	REVISION,
	L_ISSURVEY,
	dbo.TAREASREVISION.FECHAVENCIMIENTO AS FECHAVTO ,
	dbo.TAREASREVISION.ESTADO AS ESTADOTAREA 
	,
	CASE WHEN dbo.TAREASREVISION.ESTADO ='C' THEN FECHAACCIONSYS 
	ELSE NULL 
	END AS FECHAFIN,
	dbo.TAREASREVISION.FECHA AS FECHAINICIO

	,ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
	USUARIOS.USUARIO AS USUARIORESPONSABLE_DESC,
	DOCUMENTOS.USUARIORESPONSABLE AS USUARIORESPONSABLE_ID,
	TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
	DOCUMENTOS.CODIGOTIPO AS TIPO_ID,
	DOCUMENTOS.CODIGOISO + ' Rev.' + DOCUMENTOS.C_REVISION AS CODIGOREV,
	TAREASREVISION.CODIGOPROCESO AS PROCESO_CODIGO,
	PROCESOS.FINALIZADO AS PROCESO_FECHAFIN,
	CASE 
		WHEN PROCESOS.ESTADO='CANCELADO' AND PROCESOS.RESULTADO IS NULL THEN 'CANCELADO'
		WHEN PROCESOS.ESTADO='TERMINADO' AND PROCESOS.RESULTADO IS NULL THEN 'TERMINADO'
		ELSE PROCESOS.RESULTADO 
	END AS PROCESO_RESULTADO,
			
	CASE 
		WHEN TAREASREVISION.ESTADO = 'A' THEN  'ANULADA'
		WHEN TAREASREVISION.ESTADO = 'C' AND TAREASREVISION.RESPUESTA IS NULL AND DOCUMENTOS.ESTADO=3 THEN  'ANULADA'
		ELSE TAREASREVISION.RESPUESTA
	END AS RESPUESTA

FROM dbo.TAREASREVISION 
JOIN dbo.DOCUMENTOS ON dbo.TAREASREVISION.CODIGODOCUMENTO = dbo.DOCUMENTOS.CODIGO 
LEFT OUTER JOIN dbo.PROCESOS ON dbo.TAREASREVISION.CODIGOPROCESO = dbo.PROCESOS.CODIGO
JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO 
JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
LEFT JOIN USUARIOS ON USUARIOS.CODIGO=DOCUMENTOS.USUARIORESPONSABLE


UNION ALL 

SELECT 0 AS CODIGOTAREA, DOCUMENTOS.CODIGO AS CODIGODOCUMENTO, CODIGOISO + ' - Rev.' + C_REVISION +  NOMBRE AS DESCRIPCIONDOC,'Loc_Next_Rev_Date_Reached' AS ACCION,'' AS CARGOREQ,ESTADO AS DOCUMENTOESTADO,USUARIORESPONSABLE AS CODIGOUSUARIO,0 AS CODIGOCARGO,NOMBRE,CODIGOISO,C_REVISION,REVISION,L_ISSURVEY,FECHAPROXREV AS FECHAVTO 
,'V' AS ESTADOTAREA
,NULL as FECHAFIN
,FECHAVIGENCIA AS FECHAINICIO

,ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
	USUARIOS.USUARIO AS USUARIORESPONSABLE_DESC,
	DOCUMENTOS.USUARIORESPONSABLE AS USUARIORESPONSABLE_ID,
	TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
	DOCUMENTOS.CODIGOTIPO AS TIPO_ID,
	DOCUMENTOS.CODIGOISO + ' Rev.' + DOCUMENTOS.C_REVISION AS CODIGOREV,
	NULL AS PROCESO_CODIGO,
		NULL AS PROCESO_FECHAFIN,
			NULL AS PROCESO_RESULTADO,
			NULL AS RESPUESTA
FROM DOCUMENTOS
JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO 
JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
LEFT JOIN USUARIOS ON USUARIOS.CODIGO=DOCUMENTOS.USUARIORESPONSABLE
 LEFT JOIN #TEMP_DOCS_HERENCIAS ON #TEMP_DOCS_HERENCIAS.CODIGO= DOCUMENTOS.CODIGO


WHERE ESTADO=2 AND FECHAPROXREV <=GETDATE() AND 
/*
DOCUMENTOS.CODIGO NOT IN 
			(SELECT DO.CODIGO FROM DOCUMENTOS DO 
					JOIN  DOCUMENTOS DD ON DO.CODIGO=DD.CODIGOBASADOEN)
*/
#TEMP_DOCS_HERENCIAS.CODIGO IS NULL

) AS ITASKS
            



BEGIN TRY
	EXEC ('TRUNCATE TABLE '+ @tmp_table)
END TRY
BEGIN CATCH
END CATCH


BEGIN TRY
	EXEC ('INSERT INTO '+ @tmp_table +' SELECT * FROM #TMP_TBL   ')
END TRY
BEGIN CATCH
END CATCH

IF @L_RETURN_DATA=1
BEGIN	
	SELECT * FROM #TMP_TBL
END


	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_documents_vldTipoDoc].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_vldTipoDoc]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_vldTipoDoc] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_vldTipoDoc]
(@CODIGO INT, @TIPO NVARCHAR(10), @DESCRIPCION NVARCHAR(200), @MASCARA NVARCHAR(50), @CANT INT OUTPUT, @MASCARAUPDTED TINYINT, @CANTUPDTED TINYINT, @Success INT OUTPUT)
AS
	SET NOCOUNT ON

	IF (SELECT COUNT(*) FROM [TIPOSDOCUMENTOS] WHERE TIPO LIKE @TIPO AND CODIGO != ISNULL(@CODIGO,-1) )>0
	BEGIN			
		SET @Success = 0
		RAISERROR('Loc_DuplicatedDocumentType',16,1, @TIPO,'')
	END
	IF (LEN(@MASCARA)>0)  
	BEGIN  
		IF (CHARINDEX('[ORD]',@MASCARA) = 0)  
		BEGIN  
			SET @Success = 0
			RAISERROR('Loc_CodAutoGen_NotDefined',16,1,@MASCARA,'')  
		END  
		IF (CHARINDEX('[DT]',@MASCARA) = 0)  
		BEGIN  
			SET @Success = 0
			RAISERROR('Loc_CodAutoGen_NotDefined',16,1,@MASCARA,'')  
		END 
		IF @MASCARAUPDTED=1
		BEGIN
			DECLARE @CodISO NVARCHAR(50), @CodISOMaxLen INT, @Cant2 INT

			SET @CodISOMaxLen = (SELECT MAX_LENGTH/2 FROM SYS.COLUMNS SC JOIN SYS.OBJECTS SO ON SC.OBJECT_ID=SO.OBJECT_ID WHERE SO.NAME='DOCUMENTOS' AND SC.NAME='CODIGOISO')
			SET @CodISO = dbo.ik_doc_getIsoIdFromMask(@CODIGO)
			SET @Cant2  = ISNULL(@CANT,0)
			-- la mascara debe permitir generar al menos 999 documentos a partir del CANT actual
			IF (LEN(@CodISO)-LEN(LTRIM(STR(@Cant2)))+LEN(LTRIM(STR(@Cant2+999)))) > @CodISOMaxLen
			BEGIN
				SET @Success = 0
				-- El largo máximo para el código ISO es %u y debe permitir al menos 999 documentos (%s),@CodISOMaxLen,@CodISO
				RAISERROR('Usr_TipoDocMascaraExcedida',16,1)
			END
		END
	END		
	IF @CANT IS NULL  
	BEGIN  
		SET @CANT = (SELECT COUNT(CODIGO) FROM DOCUMENTOS WHERE CODIGOTIPO = @CODIGO)
		UPDATE TIPOSDOCUMENTOS SET CANT=@CANT WHERE CODIGO = @CODIGO  
	END
GO

GO
--SqlScripter----[dbo].[ik_documents_vldTipoDoc_ext].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_vldTipoDoc_ext]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_vldTipoDoc_ext] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_vldTipoDoc_ext]
(@CODIGO INT, @TIPO NVARCHAR(10), @DESCRIPCION NVARCHAR(200), @MASCARA NVARCHAR(50) OUTPUT, @CANT INT OUTPUT, @MASCARAUPDTED TINYINT, @CANTUPDTED TINYINT, @Success INT OUTPUT)
AS

SET NOCOUNT ON

DECLARE @N INT

IF @CANT IS NOT NULL AND @MASCARA IS NOT NULL AND @CANTUPDTED=1 AND LEN(CONVERT(NVARCHAR,@CANT))<>LEN(CONVERT(NVARCHAR,@CANT+1))
BEGIN
	SET @N = CHARINDEX('0[ORD]',@MASCARA)
	IF @N > 0
	BEGIN
		SET @MASCARA = STUFF(@MASCARA, @N, 1, '')
		UPDATE TIPOSDOCUMENTOS SET MASCARA=@MASCARA WHERE CODIGO = @CODIGO  
	END
END
GO

GO
--SqlScripter----[dbo].[ik_documents_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@IKPDO int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000), @where varchar(100)


SELECT @strDOC =
CASE	
	-- @IKCAT=0 es acceso denegado gral
	-- @IKPDO=2 es acceso denegado a documentos
	WHEN  @IKCAT=0 OR @IKPDO=2  THEN
		'SELECT *, '' as USUARIORESPONSABLE_DESC   FROM DOCUMENTOS WHERE CODIGO = 0' /*select nothing*/
	-- @IKCAT=4 es admin gral
	-- @IKPDO=0 es admin de docs
	WHEN @IKCAT=4 OR @IKPDO=0 THEN
		'SELECT DOCUMENTOS.* ,
		CASE
			WHEN (DOCUMENTOS.ESTADO=1) THEN ''Images/Doc_Development.gif''
			WHEN (DOCUMENTOS.ESTADO=2) THEN ''Images/Doc_Current.gif''
			ELSE ''Images/Doc_Obsolete.gif''
		END AS ICONOESTADO,
		''DOCCODE=''+LTRIM(STR(DOCUMENTOS.CODIGO))+''&STATUS=''+LTRIM(STR(DOCUMENTOS.ESTADO)) AS URL_DATA,
		TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + DOCUMENTOS.C_REVISION AS CODIGOREV,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + DOCUMENTOS.C_REVISION  + '' - '' + DOCUMENTOS.NOMBRE  AS NOMBRECOMPLETO, 
		 ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
		 USUARIOS.USUARIO AS USUARIORESPONSABLE_DESC				
		 
		 FROM DOCUMENTOS 
			JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO 
			JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
			LEFT JOIN USUARIOS ON USUARIOS.CODIGO=DOCUMENTOS.USUARIORESPONSABLE
			' /*select all*/
		
	ELSE /*Select only allowed docs*/
		'DECLARE @TBLDOC TABLE(CODIGODOCUMENTO INT) '+
		'INSERT INTO @TBLDOC ' +
' 
SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
FROM PERMISOSDOC 
JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
WHERE (DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND (PERMISOSDOC.CODIGOUSUARIO =' + LTRIM(STR(@IKCDU)) + ' OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= ' + LTRIM(STR(@IKCDU)) + ' )))
AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO=300000) )
UNION
SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
FROM PERMISOSDOC 
JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
WHERE (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND (PERMISOSDOC.CODIGOUSUARIO =' + LTRIM(STR(@IKCDU)) + ' OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= ' + LTRIM(STR(@IKCDU)) + ' )) )
AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO=300000) )
' + 

		 ' SELECT DOCUMENTOS.* ,
		 CASE
			WHEN (DOCUMENTOS.ESTADO=1) THEN ''Images/Doc_Development.gif''
			WHEN (DOCUMENTOS.ESTADO=2) THEN ''Images/Doc_Current.gif''
			ELSE ''Images/Doc_Obsolete.gif''
		END AS ICONOESTADO,
		''DOCCODE=''+LTRIM(STR(CODIGODOCUMENTO))+''&STATUS=''+LTRIM(STR(ESTADO)) AS URL_DATA,
		TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
  	        DOCUMENTOS.CODIGOISO + '' Rev.'' + DOCUMENTOS.C_REVISION AS CODIGOREV,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + DOCUMENTOS.C_REVISION  + '' - '' + DOCUMENTOS.NOMBRE  AS NOMBRECOMPLETO, 
		 ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
		 USUARIOS.USUARIO AS USUARIORESPONSABLE_DESC		
		 
 		  FROM  
			@TBLDOC D 
			JOIN DOCUMENTOS ON D.CODIGODOCUMENTO = DOCUMENTOS.CODIGO 
			JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO 
			JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
			LEFT JOIN USUARIOS ON USUARIOS.CODIGO=DOCUMENTOS.USUARIORESPONSABLE
			'	
							
		
END		

	-- @IKCAT=0 es acceso denegado gral
	-- @IKPDO=2 es acceso denegado a documentos

	-- @IKCAT=4 es admin gral
	-- @IKPDO=0 es admin de docs

SET @where = ''
IF NOT (@IKCAT=0 OR @IKPDO=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY DOCUMENTOS.CODIGO'
	END
END
ELSE
BEGIN
	SET @parameters = ''
	SET @sort = ''
END

--PRINT @strDOC+@where+@parameters+@sort

EXEC (@strDOC+@where+@parameters+@sort )



RETURN
GO

GO
--SqlScripter----[dbo].[ik_documents_withaccess2].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documents_withaccess2]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documents_withaccess2] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documents_withaccess2]
(
		@PARAMETERS nvarchar(1000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@SORT nvarchar(50) /*WITHOUT CLAUSE ORDER BY*/
--		@IKPDO int,
--		@IKCAT int,
--		@IKCDU int
--	Este proc se utiliza en el ADMDocWithAccess.xml, recibe en @PARAMETERS un "<<USERID = {VALUE}>>" que hay que parsear para obtener los datos del user y luego quitarlo 
	)

AS

SET DATEFORMAT YMD

DECLARE @AUX varchar(4000), @I INT, @FIN INT
DECLARE @IKPDO INT, @IKCAT INT, @IKCDU INT
DECLARE @CIKPDO VARCHAR(20), @CIKCAT VARCHAR(20), @CIKCDU VARCHAR(20)

SET @IKCDU = 0
SET @IKPDO = 0
SET @IKCAT = 4

SET @I=PATINDEX('%AND <<USERID = %',@PARAMETERS)
IF @I <> 0 
	BEGIN
	SET @FIN=PATINDEX('%>>%',@PARAMETERS)
	SET @AUX = SUBSTRING(@PARAMETERS, @I+15, @FIN-@I-15)
	SET @IKCDU = CONVERT(INT, @AUX)
	SET @PARAMETERS=STUFF(@PARAMETERS, @I, @FIN-@I+2, '')
	SELECT @IKPDO=PERMISOSDOCUMENTOS, @IKCAT=CATEGORIA FROM IK_PEOPLE WHERE CODIGO=@IKCDU
	END

SET @CIKCDU = CONVERT(VARCHAR, @IKCDU)
SET @CIKCAT = CONVERT(VARCHAR, @IKCAT)
SET @CIKPDO = CONVERT(VARCHAR, @IKPDO)

SET @PARAMETERS = REPLACE(REPLACE(REPLACE(@PARAMETERS, '<$IKCDU>', @CIKCDU), '<$IKCAT>', @CIKCAT), '<$IKPDO>', @CIKPDO)

EXEC ik_documents_withaccess @PARAMETERS,@SORT,@IKPDO,@IKCAT,@IKCDU
RETURN
GO

GO
--SqlScripter----[dbo].[ik_documentsgroups_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_documentsgroups_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_documentsgroups_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_documentsgroups_withaccess]
(
		@IKPDO int,
		@IKCAT int,
		@IKCDU int
	)

AS

DECLARE @strDOC varchar(4000)


SELECT @strDOC =
CASE	
	WHEN  @IKCAT=0 OR @IKPDO=2  THEN
		'SELECT DISTINCT CODIGOCATEGORIADOCUMENTO,CATEGORIADOCUMENTO,CAMINO FROM VISTA_DOCUMENTOSCATEGORIAS WHERE CODIGODOCUMENTO = 0 ORDER BY CATEGORIADOCUMENTO' /*select nothing*/
	WHEN @IKCAT=4 OR @IKPDO=0 THEN
		'SELECT DISTINCT CODIGOCATEGORIADOCUMENTO,CATEGORIADOCUMENTO,CAMINO FROM VISTA_DOCUMENTOSCATEGORIAS ORDER BY CAMINO'
	ELSE /*Select only allowed docs*/
		'SELECT DISTINCT CODIGOCATEGORIADOCUMENTO,CATEGORIADOCUMENTO,CAMINO FROM VISTA_DOCUMENTOSCATEGORIAS WHERE CODIGODOCUMENTO IN 
			(
			SELECT PERMISOSDOC.CODIGODOCUMENTO  FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
			WHERE 
				(DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ') ' + 
				'OR (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ') ' + 

			' UNION

			SELECT PERMISOSDOC.CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
			JOIN WEBGROUPMEMBERS ON WEBGROUPMEMBERS.CODIGOGRUPO = PERMISOSDOC.CODIGOUSUARIO
			WHERE ((DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND WEBGROUPMEMBERS.CODIGOUSUARIO =  ' + LTRIM(STR(@IKCDU)) + ') ' + 
			' OR  (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND WEBGROUPMEMBERS.CODIGOUSUARIO =  ' + LTRIM(STR(@IKCDU)) + ') ' + 
			')
			AND
				PERMISOSDOC.CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (DOCUMENTOS.ESTADO=2  AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO=300000) OR (DOCUMENTOS.ESTADO=1  AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO<300003))
			) ORDER BY CAMINO
			'	
		
END		


EXEC (@strDOC)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_DocumentsIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_DocumentsIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_DocumentsIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_DocumentsIds_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_DOCS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
DECLARE @IKPDO INT
SELECT @IKCAT=CATEGORIA, @IKPDO=PERMISOSDOCUMENTOS FROM USUARIOS WHERE CODIGO=@IKCDU




BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH


SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_DOCS
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_DOCS (CODIGODOC INT)


IF @IKCAT=0   OR @IKPDO=2 
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS WHERE 1=0
END
ELSE IF  @IKCAT=4 OR @IKPDO=0
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS 
END
ELSE
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
		FROM PERMISOSDOC 
		JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
		WHERE 
			( (DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))
			 --OR
			 --(DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))
			)
		AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO= @IKCDU AND NIVELACCESO=300000) )

	UNION


SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
		FROM PERMISOSDOC 
		JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
		WHERE 
			(
			-- (DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))
			 --OR
			 (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))
			)
		AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO= @IKCDU AND NIVELACCESO=300000) )


END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGODOC ) SELECT CODIGODOC FROM  #TMP_DOCS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_DocumentsIds_withAdminAccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_DocumentsIds_withAdminAccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_DocumentsIds_withAdminAccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_DocumentsIds_withAdminAccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_DOCS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
DECLARE @IKPDO INT
SELECT @IKCAT=CATEGORIA, @IKPDO=PERMISOSDOCUMENTOS FROM USUARIOS WHERE CODIGO=@IKCDU




BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH


SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_DOCS
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_DOCS (CODIGODOC INT)


IF @IKCAT=0   OR @IKPDO=2 
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS WHERE 1=0
END
/*
ELSE IF  @IKCAT=4 OR @IKPDO=0
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS 
END
*/
ELSE
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
		FROM PERMISOSDOC 
		JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
		WHERE 
			(PERMISOSDOC.NIVELACCESO = 300005 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))

		AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO= @IKCDU AND NIVELACCESO<300005) )



END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGODOC ) SELECT CODIGODOC FROM  #TMP_DOCS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_DocumentsIds_withAdminSupervAccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_DocumentsIds_withAdminSupervAccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_DocumentsIds_withAdminSupervAccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_DocumentsIds_withAdminSupervAccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_DOCS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
DECLARE @IKPDO INT
SELECT @IKCAT=CATEGORIA, @IKPDO=PERMISOSDOCUMENTOS FROM USUARIOS WHERE CODIGO=@IKCDU




BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH


SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_DOCS
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_DOCS (CODIGODOC INT)


IF @IKCAT=0   OR @IKPDO=2 
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS WHERE 1=0
END
/*
ELSE IF  @IKCAT=4 OR @IKPDO=0
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT CODIGO FROM DOCUMENTOS 
END
*/
ELSE
BEGIN
	INSERT INTO #TMP_DOCS(CODIGODOC)
	SELECT DISTINCT PERMISOSDOC.CODIGODOCUMENTO 
		FROM PERMISOSDOC 
		JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
		WHERE 
			(PERMISOSDOC.NIVELACCESO >= 300004 AND (PERMISOSDOC.CODIGOUSUARIO = @IKCDU OR PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS )))

		AND CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (CODIGOUSUARIO= @IKCDU AND NIVELACCESO<300004) )



END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGODOC ) SELECT CODIGODOC FROM  #TMP_DOCS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_forums_Report_Full].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_forums_Report_Full]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_forums_Report_Full] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_forums_Report_Full]
(
		@IKCDU INT,
		@DAYSNOTREAD int
)
AS
BEGIN

SET NOCOUNT ON;

/* TABLA DE NOVEDADES (ABREVIADO) */
CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT)

INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
	SELECT IKFOROSNOVEDADES.CODIGOFORO, 
	SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
	SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
	SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
	SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
FROM IKFOROSNOVEDADES 
LEFT JOIN IKFOROSMENSAJES M 
	ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
GROUP BY IKFOROSNOVEDADES.CODIGOFORO


/* TOP n FOROS CON (SIN LEER O MARCADOS COMO LEIDOS ULT. 30 DIAS) ORDENADOS POR ULTIMA NOVEDAD */
SELECT TOP 250 
NOVEDADES.CODIGOFORO,

CASE
	WHEN IKFOROS.TABLAPROPIETARIA='DOCUMENTOS' THEN (SELECT NOMBRE FROM DOCUMENTOS WHERE CODIGOFORODESARROLLO = NOVEDADES.CODIGOFORO OR CODIGOFOROCRITICAS = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='NCMAINPROD' THEN (SELECT DESCRIPCION FROM NCMAINPROD WHERE CODIGOFORO = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='NCTAREAS' THEN (SELECT DESCRIPCION FROM NCTAREAS WHERE CODIGOFORO = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='IKALERTS' THEN (SELECT LEFT(CONVERT(nvarchar(max),IKALERTS.COMMENTS), 200) FROM IKALERTS WHERE IKALERTS.FORUMID = NOVEDADES.CODIGOFORO)	
	ELSE 'N/A'
END AS DESCRIPCION,

CASE
	WHEN IKFOROS.TABLAPROPIETARIA='DOCUMENTOS' THEN (SELECT 'D-'+LTRIM(STR(CODIGO)) FROM DOCUMENTOS WHERE CODIGOFORODESARROLLO = NOVEDADES.CODIGOFORO OR CODIGOFOROCRITICAS = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='NCMAINPROD' THEN (SELECT 'N-'+LTRIM(STR(CODIGO)) FROM NCMAINPROD WHERE CODIGOFORO = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='NCTAREAS' THEN (SELECT 'T-'+LTRIM(STR(CODIGO)) FROM NCTAREAS WHERE CODIGOFORO = NOVEDADES.CODIGOFORO)
	WHEN IKFOROS.TABLAPROPIETARIA='IKALERTS' THEN (SELECT 'X-'+LTRIM(STR(IKALERTS.IKALERTS_ID)) FROM IKALERTS WHERE FORUMID = NOVEDADES.CODIGOFORO)	
	ELSE 'N/A'
END AS IKENTITY,

'' as ENTITY_ICON,

IKFOROSMENSAJES.CODIGO AS LASTMSGCODIGO,
IKFOROSMENSAJES.DESCRIPCION AS LASTMSGDESCRIPCION,
IKFOROSMENSAJES.USUARIO AS LASTMSGUSUARIO,
IKFOROSMENSAJES.FECHA AS LASTMSGFECHA,
IKFOROSMENSAJES.GRADOURGENCIA AS LASTMSGURGENCIA,

'' AS LASTMSGFECHA_LITERAL,
'' AS LASTMSGURGENCIA_LITERAL,
'' AS L_LEIDO_LITERAL,

ISNULL((SELECT TOP 1 L_LEIDO FROM IKFOROSNOVEDADES WHERE CODIGOPENDIENTE=NOVEDADES.LASTMSG AND CODIGOUSUARIO=@IKCDU AND CODIGOTIPOPENDIENTE=1),1) AS LASTMSGLEIDO,

ISNULL(IKFOROSMENSAJES.TO_USERNAMES,'none') AS LASTMSGRECIPIENTS,

CASE 
	WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
	WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
	ELSE ''
END AS NEWMESSAGES,
 
CASE 
	WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  '<BR>' + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
	ELSE ''
END AS NEWFILES,

CASE 
	WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN '<BR>' + 
		CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
			WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
			ELSE ''
		END
	ELSE 
		CASE 
			WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
			WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
			ELSE ''
		END
END AS NEWREMINDERS,

'' AS SHOWCHECKBOX,
ISNULL(NOVEDADES.LASTCODIGO,0) AS LASTNEW

FROM 
(
	SELECT RESULTADOS.CODIGOFORO, MAX(RESULTADOS.LASTCODIGO) AS LASTCODIGO, MAX(RESULTADOS.LASTMSG) AS LASTMSG
	FROM
	(
		SELECT CODIGOFORO, MAX(CODIGO) AS LASTCODIGO, MAX(CODIGOPENDIENTE) AS LASTMSG
		FROM IKFOROSNOVEDADES
		WHERE CODIGOUSUARIO = @IKCDU
		AND
		(L_LEIDO=0 OR (NOT FECHALECTURA IS NULL AND FECHALECTURA > GETDATE()-@DAYSNOTREAD))
		GROUP BY CODIGOFORO

		UNION

		SELECT CODIGOFORO, MAX(CODIGO) AS LASTCODIGO, MAX(CODIGO) AS LASTMSG
		FROM IKFOROSMENSAJES
		WHERE CODIGOUSUARIO = @IKCDU
		AND
		FECHA > GETDATE()-@DAYSNOTREAD
		GROUP BY CODIGOFORO
	) RESULTADOS
	GROUP BY CODIGOFORO
) NOVEDADES
INNER JOIN IKFOROS ON NOVEDADES.CODIGOFORO = IKFOROS.CODIGO
LEFT JOIN #TMP_FOROS NM ON NOVEDADES.CODIGOFORO = NM.CODIGOFORO
INNER JOIN IKFOROSMENSAJES ON NOVEDADES.LASTMSG = IKFOROSMENSAJES.CODIGO
ORDER BY IKFOROSMENSAJES.FECHA DESC

/* DROP TABLA TEMPORAL */
DROP TABLE #TMP_FOROS 
END
GO

GO
--SqlScripter----[dbo].[ik_forums_tag_message_as_read].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_forums_tag_message_as_read]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_forums_tag_message_as_read] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_forums_tag_message_as_read]
(
		@MessageID int ,
		@UserID int
	)

AS
	--SET NOCOUNT ON 
	
	DECLARE @FileMessageID int
	SET @FileMessageID = (SELECT TOP 1 CODIGO FROM IKFOROSARCHIVOS WHERE CODIGORESPUESTARELACIONADA=@MessageID)
	
	UPDATE IKFOROSNOVEDADES SET L_LEIDO=1, FECHALECTURA=GETDATE(),USUARIOLECTURA='IS-KEY'
	WHERE CODIGOUSUARIO=@UserID AND CODIGOPENDIENTE= @MessageID AND CODIGOTIPOPENDIENTE=1
	

	IF (@FileMessageID>0)
	BEGIN
		UPDATE IKFOROSNOVEDADES SET L_LEIDO=1, FECHALECTURA=GETDATE(),USUARIOLECTURA='IS-KEY'
		WHERE CODIGOUSUARIO=@UserID AND CODIGOPENDIENTE=@FileMessageID AND CODIGOTIPOPENDIENTE=2
	END
	
	 
	RETURN
GO

GO
--SqlScripter----[dbo].[ik_forums_unread].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_forums_unread]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_forums_unread] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_forums_unread]
(@ForumId int, @CodUser int)
AS

SELECT CODIGOPENDIENTE INTO #TEMP_READ FROM IKFOROSNOVEDADES
	WHERE L_LEIDO=0
	AND CODIGOTIPOPENDIENTE=1
	AND CODIGOUSUARIO=@CodUser
	AND CODIGOFORO=@ForumId

SELECT * FROM VISTA_IKFOROSMENSAJES_SINTEXTO WHERE 
CODIGOFORO=@ForumId
/*
AND
(L_ARCHIVADO=0 OR L_ARCHIVADO IS NULL)
*/
AND
(
	CODIGO IN (SELECT CODIGOPENDIENTE FROM #TEMP_READ) 
	OR 
	CODIGORESPUESTARELACIONADA IN (SELECT CODIGOPENDIENTE FROM #TEMP_READ)
	OR 
	CODIGO IN (SELECT CODIGORESPUESTARELACIONADA FROM IKFOROSMENSAJES 
							INNER JOIN #TEMP_READ IKFOROSNOVEDADES ON IKFOROSMENSAJES.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE)
)

ORDER BY CODIGO

/*
SELECT * FROM VISTA_IKFOROSMENSAJESARCHIVOS WHERE 
(CODIGOFORO=@ForumId)
AND
(
	CODIGO IN (SELECT CODIGOPENDIENTE FROM #TEMP_READ) 
	OR 
	CODIGORESPUESTARELACIONADA IN (SELECT CODIGOPENDIENTE FROM #TEMP_READ)
	OR 
	CODIGO IN (SELECT CODIGORESPUESTARELACIONADA FROM IKFOROSMENSAJES 
							INNER JOIN #TEMP_READ IKFOROSNOVEDADES ON IKFOROSMENSAJES.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE)
)
*/
DROP TABLE #TEMP_READ
RETURN
GO

GO
--SqlScripter----[dbo].[ik_ForumSearchInvolded].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_ForumSearchInvolded]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_ForumSearchInvolded] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_ForumSearchInvolded]
@TEXTOBUSQUEDA nvarchar(1000),
	@IKCDU int
AS
BEGIN
--BRANCHED PROC
	SET NOCOUNT ON;

DECLARE @strSQL nvarchar(4000);

SET @TEXTOBUSQUEDA=REPLACE(@TEXTOBUSQUEDA, '''', '''''');

CREATE TABLE #TMP ([KEY] INT, [RANK] INT );

SET @strSQL = dbo.CONCAT3('
INSERT INTO #TMP
SELECT [KEY], [RANK]  FROM FREETEXTTABLE (IKFOROSMENSAJES,*, ''' , @TEXTOBUSQUEDA , ''' )')

EXEC (@strSQL)

SELECT TOP 100
[RANK],
CODIGO,
CODIGO AS [KEY],
DESCRIPCION,
INSTRUCCIONES,
CASE
  WHEN NCPCODE IS NULL THEN ''
  ELSE dbo.CONCAT('N-' , LTRIM(STR(NCPCODE)))
END    AS NCPCODE,
CASE
  WHEN NCTCODE IS NULL THEN ''
  ELSE dbo.CONCAT('T-', LTRIM(STR(NCTCODE)))
END             AS NCTCODE,
CASE
  WHEN DOCCODE IS NULL THEN ''
  ELSE dbo.CONCAT('D-' , LTRIM(STR(DOCCODE)))
END             AS DOCCODE,
CASE
  WHEN IKACTIONID IS NULL THEN ''
  ELSE dbo.CONCAT('X-' , LTRIM(STR(IKACTIONID)))
END             AS IKACTIONID,
USUARIO,
FECHA,
URL_NCPCODE,
URL_FORUM,
URL_FORUMMESSAGE,
URL_TASK,
URL_DOC,
URL_IKACTION
FROM VISTA_IKFOROSSEARCHINVOLVED
JOIN #TMP TBLSEARCH ON  VISTA_IKFOROSSEARCHINVOLVED.CODIGO = TBLSEARCH.[KEY]
WHERE ((SUSCRIPTOR=@IKCDU  AND NOT DESCRIPCION LIKE '@SUR%') )
ORDER BY [RANK] DESC, CODIGO DESC;




END
GO

GO
--SqlScripter----[dbo].[ik_GET_PROCESOS_NC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_GET_PROCESOS_NC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_GET_PROCESOS_NC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
--SELECT PROC_NODESID AS CODIGO, DESCRIPTION AS DESCRIPCION FROM PROC_NODES WHERE PROC_NODE_TYPESID = 2
-- ik_GET_PROCESOS_NC 2					-- @PROC_NODE_TYPESID int
ALTER PROCEDURE [dbo].[ik_GET_PROCESOS_NC]
AS
CREATE TABLE #TablaT (CODIGO int, NOMBRE nvarchar(400), DESCRIPCION nvarchar(4000))

	DECLARE @CODIGO INT
	DECLARE @CODIGO_PLAN INT
	DECLARE @PADRE INT
	DECLARE @NOMBRE NVARCHAR(400)
	DECLARE @NOMBRE_PLAN NVARCHAR(400)
	DECLARE @RUTA_COMPLETA NVARCHAR(4000)
	DECLARE @RUTA_AUX NVARCHAR(400)	

	DECLARE PTR CURSOR LOCAL FAST_FORWARD FOR 
		SELECT	T1.PROC_NODESID, T1.DESCRIPTION, T1.PROC_NODESID_PARENT, T1.PROC_PLANSID, T2.DESCRIPTION AS NAME_PLAN
		FROM	PROC_NODES T1
					INNER JOIN PROC_PLANS T2
						ON T1.PROC_PLANSID = T2.PROC_PLANSID
		--WHERE	PROC_NODE_TYPESID = @PROC_NODE_TYPESID	-- CODIGO_PADRE = @Nodopadre

    OPEN PTR 
	FETCH NEXT FROM PTR INTO @CODIGO, @NOMBRE, @PADRE, @CODIGO_PLAN, @NOMBRE_PLAN

	WHILE @@FETCH_STATUS = 0
	BEGIN
		SET @RUTA_COMPLETA = @NOMBRE
        WHILE (@PADRE IS NOT NULL)
		BEGIN
			SELECT @RUTA_AUX = DESCRIPTION, @PADRE = PROC_NODESID_PARENT FROM PROC_NODES WHERE PROC_NODESID = @PADRE
			SET @RUTA_COMPLETA = dbo.CONCAT3(@RUTA_AUX, '\', @RUTA_COMPLETA)
		END 
		SET @RUTA_COMPLETA = dbo.CONCAT3(@NOMBRE_PLAN, '\', @RUTA_COMPLETA)
		INSERT INTO #TablaT(CODIGO, DESCRIPCION, NOMBRE) VALUES (@CODIGO, @RUTA_COMPLETA, @NOMBRE)
		FETCH NEXT FROM PTR INTO @CODIGO, @NOMBRE, @PADRE, @CODIGO_PLAN, @NOMBRE_PLAN
	END

	CLOSE PTR
	DEALLOCATE PTR

	SELECT CODIGO, NOMBRE, DESCRIPCION FROM #TablaT ORDER BY DESCRIPCION

	DROP TABLE #TablaT
GO

GO
--SqlScripter----[dbo].[ik_GET_RP_AREAS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_GET_RP_AREAS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_GET_RP_AREAS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- ik_get_ruta_padre 4
ALTER PROCEDURE [dbo].[ik_GET_RP_AREAS]
(@Nodopadre int)
AS
		
	CREATE TABLE #TablaT (
    CODIGO int,	
	NOMBRE nvarchar(400),
	DESCRIPCION nvarchar(4000)
  )

	DECLARE @CODIGON int
	DECLARE @PADRE INT
	DECLARE @DESCRIPCION NVARCHAR(4000)
	DECLARE @DESC NVARCHAR(400)
	DECLARE @NOMBRE NVARCHAR(400)

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_AREA_CAUSAS 
	WHERE CODIGO_PADRE = @Nodopadre AND (L_BORRADO=0 OR L_BORRADO IS NULL)

    open CurNodos
	fetch next from CurNodos into @CODIGON

	DECLARE @CODIGO_FIRST_NODE INT
	SELECT 	@CODIGO_FIRST_NODE = CODIGO FROM TBL_AREA_CAUSAS WHERE CODIGO_PADRE = -1
	
	while @@FETCH_STATUS = 0
	begin
	
		SELECT @PADRE = CODIGO_PADRE, @DESCRIPCION = DESCRIPCION, @NOMBRE = DESCRIPCION FROM TBL_AREA_CAUSAS 
		WHERE CODIGO = @CODIGON

        WHILE (@PADRE <> @CODIGO_FIRST_NODE)
		BEGIN
			SELECT @DESC = DESCRIPCION FROM TBL_AREA_CAUSAS WHERE CODIGO = @PADRE
			SET @DESCRIPCION = dbo.CONCAT3(@DESC, '\', @DESCRIPCION)
			SELECT @PADRE = CODIGO_PADRE  FROM TBL_AREA_CAUSAS WHERE CODIGO = @PADRE
		END 

		INSERT INTO #TablaT(CODIGO, DESCRIPCION, NOMBRE) 
		VALUES (@CODIGON, @DESCRIPCION, @NOMBRE)
		fetch next from CurNodos into @CODIGON
	end

	close CurNodos
	deallocate CurNodos

declare @sqlst varchar(8000)
set @sqlst = ' SELECT * FROM #TablaT '

EXEC(@sqlst)
GO

GO
--SqlScripter----[dbo].[ik_GET_RP_PROCESOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_GET_RP_PROCESOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_GET_RP_PROCESOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- ik_GET_RP_PROCESOS 1
ALTER PROCEDURE [dbo].[ik_GET_RP_PROCESOS]
(@Nodopadre int)
AS
	CREATE TABLE #TablaT (
    CODIGO int,	
	NOMBRE nvarchar(400),
	DESCRIPCION nvarchar(4000)
	)

	DECLARE @CODIGON int
	DECLARE @PADRE INT
	DECLARE @DESCRIPCION NVARCHAR(4000)
	DECLARE @DESC NVARCHAR(400)
	DECLARE @NOMBRE NVARCHAR(400)

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT	PROC_NODESID AS CODIGO
	FROM	PROC_NODES 
	WHERE	PROC_NODESID_PARENT = @Nodopadre

--SELECT	PROC_PLANSID, PROC_NODESID, PROC_NODE_TYPESID, DESCRIPTION, PROC_NODESID_PARENT
--FROM	PROC_NODES	

    open CurNodos
	fetch next from CurNodos into @CODIGON

	DECLARE @STR_NOMBRE_PLAN NVARCHAR(100)
	DECLARE @CODIGO_FIRST_NODE INT
	SELECT 	@CODIGO_FIRST_NODE = T1.PROC_NODESID, @STR_NOMBRE_PLAN = T2.DESCRIPTION
	FROM	PROC_NODES T1 
				INNER JOIN PROC_PLANS T2
					ON T1.PROC_PLANSID = T2.PROC_PLANSID
	WHERE	T1.PROC_NODESID_PARENT IS NULL

	while @@FETCH_STATUS = 0
	begin
	
		SELECT	@PADRE = PROC_NODESID_PARENT, @DESCRIPCION = DESCRIPTION, @NOMBRE = DESCRIPTION 
		FROM	PROC_NODES 
		WHERE	PROC_NODESID = @CODIGON

        WHILE (@PADRE <> @CODIGO_FIRST_NODE)
		BEGIN
			SELECT	@DESC = DESCRIPTION FROM PROC_NODES WHERE PROC_NODESID = @PADRE
			SET @DESCRIPCION = dbo.CONCAT3(@DESC, '\', @DESCRIPCION)
			SELECT @PADRE = PROC_NODESID_PARENT  FROM PROC_NODES WHERE PROC_NODESID = @PADRE
		END 
		SET @DESCRIPCION = dbo.CONCAT3(@STR_NOMBRE_PLAN, '\', @DESCRIPCION)
		INSERT INTO #TablaT(CODIGO, DESCRIPCION, NOMBRE) 
		VALUES (@CODIGON, @DESCRIPCION, @NOMBRE)
		fetch next from CurNodos into @CODIGON
	end

	close CurNodos
	deallocate CurNodos

declare @sqlst varchar(8000)
set @sqlst = ' SELECT * FROM #TablaT '

EXEC(@sqlst)
GO

GO
--SqlScripter----[dbo].[ik_GET_RP_REQUISITOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_GET_RP_REQUISITOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_GET_RP_REQUISITOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- ik_GET_RP_REQUISITOS 4
ALTER PROCEDURE [dbo].[ik_GET_RP_REQUISITOS]
(@Nodopadre int)
AS
	CREATE TABLE #TablaT (
    CODIGO int,	
	NOMBRE nvarchar(400),
	DESCRIPCION nvarchar(4000)
	)

	DECLARE @CODIGON int
	DECLARE @PADRE INT
	DECLARE @DESCRIPCION NVARCHAR(4000)
	DECLARE @DESC NVARCHAR(400)
	DECLARE @NOMBRE NVARCHAR(400)

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_REQUISITOSNORMATIVOS 
	WHERE CODIGO_PADRE = @Nodopadre

    open CurNodos
	fetch next from CurNodos into @CODIGON

	DECLARE @CODIGO_FIRST_NODE INT
	SELECT 	@CODIGO_FIRST_NODE = CODIGO FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO_PADRE = -1

	while @@FETCH_STATUS = 0
	begin
	
		SELECT @PADRE = CODIGO_PADRE, @DESCRIPCION = DESCRIPCION, @NOMBRE = DESCRIPCION FROM TBL_NCCC_REQUISITOSNORMATIVOS 
		WHERE CODIGO = @CODIGON

        WHILE (@PADRE <> @CODIGO_FIRST_NODE)
		BEGIN
			SELECT @DESC = DESCRIPCION FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO = @PADRE
			SET @DESCRIPCION = dbo.CONCAT3(@DESC, '\', @DESCRIPCION)
			SELECT @PADRE = CODIGO_PADRE  FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO = @PADRE
		END 

		INSERT INTO #TablaT(CODIGO, DESCRIPCION, NOMBRE) 
		VALUES (@CODIGON, @DESCRIPCION, @NOMBRE)
		fetch next from CurNodos into @CODIGON
	end

	close CurNodos
	deallocate CurNodos

declare @sqlst varchar(8000)
set @sqlst = ' SELECT * FROM #TablaT '

EXEC(@sqlst)
GO

GO
--SqlScripter----[dbo].[ik_get_ruta_padre].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_get_ruta_padre]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_get_ruta_padre] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- ik_get_ruta_padre 4
ALTER PROCEDURE [dbo].[ik_get_ruta_padre]
(@Nodopadre int)
AS
		
	CREATE TABLE #TablaT (
    CODIGO int,	
	NOMBRE nvarchar(400),
	DESCRIPCION nvarchar(4000)
  )

	DECLARE @CODIGON int
	DECLARE @PADRE INT
	DECLARE @DESCRIPCION NVARCHAR(4000)
	DECLARE @DESC NVARCHAR(400)
	DECLARE @NOMBRE NVARCHAR(400)

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_CAUSAS 
	WHERE CODIGO_PADRE = @Nodopadre

    open CurNodos
	fetch next from CurNodos into @CODIGON

	DECLARE @CODIGO_FIRST_NODE INT
	SELECT 	@CODIGO_FIRST_NODE = CODIGO FROM TBL_NCCC_CAUSAS WHERE CODIGO_PADRE = -1
	
	while @@FETCH_STATUS = 0
	begin
	
		SELECT @PADRE = CODIGO_PADRE, @DESCRIPCION = DESCRIPCION, @NOMBRE = DESCRIPCION FROM TBL_NCCC_CAUSAS 
		WHERE CODIGO = @CODIGON

        WHILE (@PADRE <> @CODIGO_FIRST_NODE)
		BEGIN
			SELECT @DESC = DESCRIPCION FROM TBL_NCCC_CAUSAS WHERE CODIGO = @PADRE
			SET @DESCRIPCION = dbo.CONCAT3(@DESC, '\', @DESCRIPCION)
			SELECT @PADRE = CODIGO_PADRE  FROM TBL_NCCC_CAUSAS WHERE CODIGO = @PADRE
		END 

		INSERT INTO #TablaT(CODIGO, DESCRIPCION, NOMBRE) 
		VALUES (@CODIGON, @DESCRIPCION, @NOMBRE)
		fetch next from CurNodos into @CODIGON
	end

	close CurNodos
	deallocate CurNodos

declare @sqlst varchar(8000)
set @sqlst = ' SELECT * FROM #TablaT '

EXEC(@sqlst)
GO

GO
--SqlScripter----[dbo].[ik_getDocumentDistributed].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_getDocumentDistributed]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_getDocumentDistributed] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_getDocumentDistributed]
(
@DOCCODE INT,
@SUBDISTRIBUTOR INT 
)
AS
BEGIN

   IF @SUBDISTRIBUTOR = -1
		SELECT * FROM dbo.fn_doc_getDistributeds(@DOCCODE)
   ELSE
		SELECT * FROM dbo.fn_doc_getDistributeds(@DOCCODE)
		WHERE CODIGODISTRIBUIDOR = @SUBDISTRIBUTOR

END
GO

GO
--SqlScripter----[dbo].[ik_getDocumentDistributedPositions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_getDocumentDistributedPositions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_getDocumentDistributedPositions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_getDocumentDistributedPositions]
@DOCCODE INT
AS
BEGIN
	SET NOCOUNT ON;


SELECT DOC.*, C.USUARIO FROM fn_doc_getDistributeds(@DOCCODE) DOC
LEFT JOIN VISTA_CARGOSUSUARIOS C ON DOC.CODIGOCARGO = C.CODIGOCARGO
END
GO

GO
--SqlScripter----[dbo].[ik_getDocumentSubDistributed].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_getDocumentSubDistributed]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_getDocumentSubDistributed] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_getDocumentSubDistributed]
@DOCCODE  int ,
  @SUBDISTRIBUTOR int

AS
BEGIN
	SET NOCOUNT ON;

  SELECT DOC.*, C.USUARIO,O.DESCRIPCION AS MULTIPOSITIONNAME 
  FROM dbo.fn_doc_getDistributeds(@DOCCODE) DOC
 LEFT JOIN VISTA_CARGOSUSUARIOS C ON DOC.CODIGOCARGO = C.CODIGOCARGO
 LEFT JOIN ORGANIGRAMA O ON O.CODIGO=DOC.ORGANIGRAMA_CODIGO
 WHERE CODIGODISTRIBUIDOR=@SUBDISTRIBUTOR
 ORDER BY ORGANIGRAMA_CODIGO;

END
GO

GO
--SqlScripter----[dbo].[ik_getTreePath].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_getTreePath]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_getTreePath] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_getTreePath]
(@Nodo int, @Padres varchar(4000)OUTPUT)
AS
	declare @Padre int
	declare @PadresAUX varchar(4000)
	declare @Descripcion varchar(100)
	declare @NodoInic int
	set @NodoInic=@Nodo
	set @PadresAUX=''
	set @Padres=''
		

	while @Nodo<>0
	begin
		
	SELECT @Padre=CODIGOPADRE, @Descripcion=DESCRIPCION  FROM NCCLASES WHERE CODIGO=@Nodo
	set @PadresAUX=@Padres
	if @Nodo=@NodoInic
		set @Padres=@Descripcion
	else
		set @Padres= @Descripcion+'\'+@PadresAUX
	set @Nodo=@Padre

	end
GO

GO
--SqlScripter----[dbo].[ik_getTreeRecords].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_getTreeRecords]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_getTreeRecords] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_getTreeRecords]
(@CodigoRaiz int ) AS

create table #Descripciones ( CODIGO int, DESCRIPCION varchar(200)  ) 

declare Cur CURSOR FAST_FORWARD for select CODIGO from NCCLASES where  (CODIGORAIZ= @CodigoRaiz OR CODIGO= @CodigoRaiz)
declare @Codigo int -- variable para implementar el loop
declare @Desc varchar(4000)
open Cur
while 1=1 begin
 fetch next from Cur into @Codigo
 if @@FETCH_STATUS <> 0 break

exec ik_getTreePath @Codigo, @Desc OUTPUT
insert into #Descripciones values(@Codigo,@Desc)
set @Desc=''

end

close Cur
deallocate Cur
 
-- retorno del conjunto de resultados
select * from #Descripciones ORDER BY DESCRIPCION
GO

GO
--SqlScripter----[dbo].[ik_grantPermissionOnDoc].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_grantPermissionOnDoc]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_grantPermissionOnDoc] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_grantPermissionOnDoc]
@CODIGOUSUARIO INT,
@CODIGODOCUMENTO INT,
@NIVELACCESO INT,
@NOMBREUSUARIO VARCHAR(50),
@HISTORY_MESSAGE VARCHAR(1000),
@TAREA VARCHAR(250),
@IK_PEOPLE_HISTORY_ENTRY_TYPE SMALLINT 
AS
BEGIN

   IF(SELECT COUNT(*) FROM PERMISOSDOC WHERE CODIGOUSUARIO = @CODIGOUSUARIO and CODIGODOCUMENTO = @CODIGODOCUMENTO) = 0
   begin
INSERT INTO PERMISOSDOC(CODIGOUSUARIO,CODIGODOCUMENTO,NIVELACCESO) VALUES(@CODIGOUSUARIO,@CODIGODOCUMENTO,@NIVELACCESO)
   
      INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_REPORT, IK_PEOPLE_HISTORY_ENTRY_TYPE)
   VALUES(@CODIGOUSUARIO, GetDate(), @HISTORY_MESSAGE, @NOMBREUSUARIO, NULL,@IK_PEOPLE_HISTORY_ENTRY_TYPE)
   
      INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, FECHA, NOMBREUSUARIO, TAREA)
   VALUES(@CODIGODOCUMENTO, GetDate(), @NOMBREUSUARIO, @TAREA)
   end



END
GO

GO
--SqlScripter----[dbo].[ik_Issues_Stages].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_Issues_Stages]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_Issues_Stages] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_Issues_Stages]
(
@tmp_table nvarchar(500) = '#TMP_ISSUES_STAGES',
@L_RETURN_DATA int = 1
)
AS

BEGIN TRY
	EXEC ('SELECT * INTO #TMP_DUMMY_TEST FROM  '+ @tmp_table)
END TRY
BEGIN CATCH
	CREATE TABLE #TMP_ISSUES_STAGES(			
			WF_TYPE INT
			,ISSUES_STAGES_CUSTOM_ID INT
      ,ISSUE_ID INT
			,MODULE_ID INT
			,ISSUE_DESC NVARCHAR(500)
			,ISSUE_CAT NVARCHAR(MAX)
			,ISSUE_CATID INT
			,ISSUE_STATUS INT
			,ISSUE_COORDINATOR_POSITIONID INT
			,ISSUE_COORDINATOR_POSITION NVARCHAR(200)
			,ISSUE_COORDINATOR_USERID INT
			,ISSUE_COORDINATOR_USER NVARCHAR(200)
			,ISSUE_COORDINATOR_FULL_DESC NVARCHAR(500)
			,MODULE_DESC NVARCHAR(200)
      ,STAGE_NUMBER INT
			,STAGE_DESC NVARCHAR(100)
			,STAGE_DEADLINE DATETIME
      ,STAGE_ENDDATE DATETIME
			,STAGE_L_STARTED INT
			,STAGE_L_COMPLETED INT
			,STAGE_RESP_USER NVARCHAR(200)
			,STAGE_RESP_USERID INT
			,STAGE_RESP_POSITION NVARCHAR(200)
			,STAGE_RESP_POSITIONID INT
			,STAGE_RESP_FULL_DESC NVARCHAR(500)
			,ISSUE_AVA_STATE NVARCHAR(50)
			,ISSUE_AVA_PROY_DELAY_STATE NVARCHAR(50)
			,ISSUE_AVA_STATE_IMG NVARCHAR(200)
			,ISSUE_AVA_PROY_DELAY_STATE_IMG NVARCHAR(200)
      ,L_STAGE_HAS_TASKS_DELAYED INT
		)
END CATCH


SELECT 
	CODIGONC, ETAPA, MAX(FECHALIMITE) AS FECHALIMITE, MAX(CUMPLIMIENTO) AS CUMPLIMIENTO, MIN(FECHA) AS INICIO, MIN(L_CUMPLIDA) AS L_CUMPLIDA 
		INTO #TEMP_TASKS
		FROM NCTAREAS
		WHERE L_CUMPLIDA<2 
		GROUP BY CODIGONC, ETAPA
SELECT 
	CODIGONC, ETAPA
		INTO #TEMP_STAGE_TASKS_DUE
		FROM NCTAREAS
		WHERE L_CUMPLIDA=0 AND  DATEDIFF(DAY,GETDATE(),FECHALIMITE) < 0 
		GROUP BY CODIGONC, ETAPA
		
		
		
SELECT 
--CONVERT(int, CONVERT(nvarchar(50), CONVERT(int, N.INPUTFECHA )) +  CONVERT(nvarchar(10), N.CODIGO) + CONVERT(nvarchar(10), E.ETAPA )) as ISSUES_STAGES_CUSTOM_ID
CONVERT(int, CONVERT(nvarchar(10), N.CODIGO) + CONVERT(nvarchar(10), E.ETAPA )) as ISSUES_STAGES_CUSTOM_ID
,N.CODIGO AS ISSUE_ID
,N.TIPO AS MODULE_ID
,N.DESCRIPCION AS ISSUE_DESC
,N.CATEGORIADESC AS ISSUE_CAT
,N.CATEGORIA AS ISSUE_CATID
,N.ESTADO AS ISSUE_STATUS
,N.CODIGOCARGOADMINISTRADOR AS ISSUE_COORDINATOR_POSITIONID
,ISSUES_RESPS.DESCRIPCION AS  ISSUE_COORDINATOR_POSITION
,ISSUES_RESPS.CODIGOUSUARIO AS  ISSUE_COORDINATOR_USERID
,ISSUES_RESPS.USUARIO AS  ISSUE_COORDINATOR_USER
,ISSUES_RESPS.DESCRIPCION + ' (' + ISNULL(ISSUES_RESPS.USUARIO,'N/A') + ')' AS ISSUE_COORDINATOR_FULL_DESC
,M.DESCRIPTION AS MODULE_DESC
,E.ETAPA AS STAGE_NUMBER
,E.DESCRIPCIONCORTA AS STAGE_DESC
,T.FECHALIMITE AS STAGE_DEADLINE
,CASE WHEN T.L_CUMPLIDA =1 THEN T.CUMPLIMIENTO ELSE NULL END AS STAGE_ENDDATE
,CASE WHEN T.INICIO IS NULL THEN 0 ELSE 1 END AS  STAGE_L_STARTED
,CASE WHEN T.L_CUMPLIDA =1 THEN 1 ELSE 0 END AS  STAGE_L_COMPLETED
,NULL AS STAGE_RESP_USER
,NULL AS STAGE_RESP_USERID
,NULL AS STAGE_RESP_POSITION
,NULL  AS STAGE_RESP_POSITIONID
,NULL AS STAGE_RESP_FULL_DESC
,N.AVA_STATE AS ISSUE_AVA_STATE
,N.AVA_PROY_DELAY_STATE AS ISSUE_AVA_PROY_DELAY_STATE
,CASE 
    WHEN AVA_OPTIONS!=0 THEN
        dbo.CONCAT5('<a style="cursor:pointer" IKballoonHeight="145" IKballoonExpr="NCAVA-', LTRIM(STR(N.CODIGO)) ,'"> <img src="Images/bs_ind_status_Data',N.AVA_STATE,'.png" </a>') 
    ELSE
        'N/A'
END AS ISSUE_AVA_STATE_IMG,
CASE 
    WHEN AVA_OPTIONS!=0 THEN
        dbo.CONCAT5('<a style="cursor:pointer" IKballoonHeight="145" IKballoonExpr="NCAVA-', LTRIM(STR(N.CODIGO)) ,'"> <img src="Images/bs_ind_status_Data',N.AVA_PROY_DELAY_STATE,'.png" </a>') 
    ELSE
        'N/A'
END AS ISSUE_AVA_PROY_DELAY_STATE_IMG   ,

CASE
	WHEN NOT #TEMP_STAGE_TASKS_DUE.ETAPA IS NULL THEN 1
	ELSE 0
END AS L_STAGE_HAS_TASKS_DELAYED

INTO #TEMP_NON_WF_STAGES

FROM
#TEMP_TASKS T
JOIN VISTA_ETAPASNC E ON E.CODIGONC=T.CODIGONC AND E.ETAPA=T.ETAPA
JOIN NCMAINPROD N ON N.CODIGO=T.CODIGONC
JOIN XML_MODULE_DEFINITIONS M ON M.MODULEID=N.TIPO
JOIN VISTA_ORGANIGRAMA ISSUES_RESPS ON ISSUES_RESPS.CODIGO=N.CODIGOCARGOADMINISTRADOR
LEFT JOIN #TEMP_STAGE_TASKS_DUE ON #TEMP_STAGE_TASKS_DUE.CODIGONC=T.CODIGONC AND #TEMP_STAGE_TASKS_DUE.ETAPA=T.ETAPA


--DROP TABLE #TEMP_TASKS

IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'WF_SCHEDDATES'))
BEGIN

	DELETE FROM #TEMP_NON_WF_STAGES WHERE ISSUE_ID IN (SELECT DISTINCT CODIGO FROM NCMAINPROD WHERE WF_ID IN (SELECT WF_ID FROM WF_SCHEDDATES))
	
	
SELECT 
--CONVERT(int,CONVERT(nvarchar(50), CONVERT(int, N.INPUTFECHA )) +  CONVERT(nvarchar(10), N.CODIGO) + CONVERT(nvarchar(10), E.WF_SCHEDDATES_ID)) 	 AS ISSUES_STAGES_CUSTOM_ID
CONVERT(int,  CONVERT(nvarchar(10), N.CODIGO) + CONVERT(nvarchar(10), E.WF_SCHEDDATES_ID)) 	 AS ISSUES_STAGES_CUSTOM_ID
,N.CODIGO AS ISSUE_ID
,N.TIPO AS MODULE_ID
,N.DESCRIPCION AS ISSUE_DESC
,N.CATEGORIADESC AS ISSUE_CAT
,N.CATEGORIA AS ISSUE_CATID
,N.ESTADO AS ISSUE_STATUS
,N.CODIGOCARGOADMINISTRADOR AS ISSUE_COORDINATOR_POSITIONID
,ISSUES_RESPS.DESCRIPCION AS  ISSUE_COORDINATOR_POSITION
,ISSUES_RESPS.CODIGOUSUARIO AS  ISSUE_COORDINATOR_USERID
,ISSUES_RESPS.USUARIO AS  ISSUE_COORDINATOR_USER
,ISSUES_RESPS.DESCRIPCION + ' (' + ISNULL(ISSUES_RESPS.USUARIO,'N/A') + ')' AS ISSUE_COORDINATOR_FULL_DESC
,M.DESCRIPTION AS MODULE_DESC
,0 AS STAGE_NUMBER
,E.WF_SCHEDDATES_NODEDESCRIPTION AS STAGE_DESC
,E.WF_SCHEDDATES_DATE AS STAGE_DEADLINE
,E.WF_SCHEDDATES_DATE_REAL AS STAGE_ENDDATE
,CASE WHEN E.WF_SCHEDDATES_STARTDATE_REAL IS NULL THEN 0 ELSE 1 END AS  STAGE_L_STARTED
,CASE WHEN E.WF_SCHEDDATES_DONE =1 THEN 1 ELSE 0 END AS  STAGE_L_COMPLETED
,NODE_RESPS_POSITIONS.USUARIO AS STAGE_RESP_USER
,NODE_RESPS_POSITIONS.CODIGOUSUARIO AS STAGE_RESP_USERID
,NODE_RESPS_POSITIONS.DESCRIPCION AS STAGE_RESP_POSITION
,NODE_RESPS.POSITION_ID  AS STAGE_RESP_POSITIONID
,NODE_RESPS_POSITIONS.DESCRIPCION + ' (' + ISNULL(NODE_RESPS_POSITIONS.USUARIO,'N/A') + ')' AS STAGE_RESP_FULL_DESC
,N.AVA_STATE AS ISSUE_AVA_STATE
,N.AVA_PROY_DELAY_STATE AS ISSUE_AVA_PROY_DELAY_STATE
,CASE 
    WHEN AVA_OPTIONS!=0 THEN
        dbo.CONCAT5('<a style="cursor:pointer" IKballoonHeight="145" IKballoonExpr="NCAVA-', LTRIM(STR(N.CODIGO)) ,'"> <img src="Images/bs_ind_status_Data',N.AVA_STATE,'.png" </a>') 
    ELSE
        'N/A'
END AS ISSUE_AVA_STATE_IMG,
CASE 
    WHEN AVA_OPTIONS!=0 THEN
        dbo.CONCAT5('<a style="cursor:pointer" IKballoonHeight="145" IKballoonExpr="NCAVA-', LTRIM(STR(N.CODIGO)) ,'"> <img src="Images/bs_ind_status_Data',N.AVA_PROY_DELAY_STATE,'.png" </a>') 
    ELSE
        'N/A'
END AS ISSUE_AVA_PROY_DELAY_STATE_IMG   ,
0 AS L_STAGE_HAS_TASKS_DELAYED

INTO #TEMP_WF_SCHEDDATES

FROM WF_SCHEDDATES E 
JOIN NCMAINPROD N ON N.WF_ID=E.WF_ID
JOIN XML_MODULE_DEFINITIONS M ON M.MODULEID=N.TIPO
JOIN VISTA_ORGANIGRAMA ISSUES_RESPS ON ISSUES_RESPS.CODIGO=N.CODIGOCARGOADMINISTRADOR  
LEFT JOIN WF_NODE_RESPONSIBLE NODE_RESPS  ON NODE_RESPS.WF_ID=E.WF_ID AND NODE_RESPS.WF_XMLNODE_ID=E.WF_XMLNODE_ID
LEFT JOIN VISTA_ORGANIGRAMA NODE_RESPS_POSITIONS ON NODE_RESPS_POSITIONS.CODIGO=NODE_RESPS.POSITION_ID
WHERE E.WF_SCHEDDATES_ENABLED=1

END


IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'VISTA_NC_WF_ETAPAS'))
BEGIN



--DELETE FROM #TEMP_NON_WF_STAGES WHERE ISSUE_ID IN (SELECT DISTINCT CODIGO_NC FROM NC_WF_ETAPAS)
DELETE NON_WF_STAGES  FROM #TEMP_NON_WF_STAGES NON_WF_STAGES 
JOIN VISTA_NC_WF_ETAPAS ON VISTA_NC_WF_ETAPAS.STAGE_NUMBER=NON_WF_STAGES.STAGE_NUMBER AND VISTA_NC_WF_ETAPAS.ISSUE_ID=NON_WF_STAGES.ISSUE_ID 
--WHERE ISSUE_ID IN (SELECT DISTINCT CODIGO_NC FROM NC_WF_ETAPAS)

	SELECT 
	CONVERT(int,CONVERT(nvarchar(10),STAGE_RESP_USERID) + CONVERT(nvarchar(10),ISSUE_ID) + CONVERT(nvarchar(10), STAGE_NUMBER)) as ISSUES_STAGES_CUSTOM_ID
	,ISSUE_ID
	,MODULE_ID
	,ISSUE_DESC
	,ISSUE_CAT
	,ISSUE_CATID
	,ISSUE_STATUS
	,ISSUE_COORDINATOR_POSITIONID
	,ISSUE_COORDINATOR_POSITION
	,ISSUE_COORDINATOR_USERID
	,ISSUE_COORDINATOR_USER
	,ISSUE_COORDINATOR_POSITION + ' ('  + ISNULL(ISSUE_COORDINATOR_USER,'N/A') + ')' AS ISSUE_COORDINATOR_FULL_DESC
	,MODULE_DESC
	,STAGE_NUMBER
	,STAGE_DESC
	,STAGE_DEADLINE
	,STAGE_ENDDATE
	,STAGE_L_STARTED
	,STAGE_L_COMPLETED
	,STAGE_RESP_USER
	,STAGE_RESP_USERID
	,STAGE_RESP_POSITION
	,STAGE_RESP_POSITIONID
	,STAGE_RESP_POSITION + ' (' + ISNULL(STAGE_RESP_USER,'N/A') + ')' AS STAGE_RESP_FULL_DESC
	,ISSUE_AVA_STATE
	,ISSUE_AVA_PROY_DELAY_STATE
	,ISSUE_AVA_STATE_IMG
	,ISSUE_AVA_PROY_DELAY_STATE_IMG   
	,0 AS L_STAGE_HAS_TASKS_DELAYED

	INTO #TEMP_WF_STAGES
	FROM VISTA_NC_WF_ETAPAS
	
	
END



BEGIN TRY
	EXEC ('TRUNCATE TABLE '+ @tmp_table)
END TRY
BEGIN CATCH
END CATCH

--BEGIN TRY
	EXEC ('INSERT INTO '+ @tmp_table +' SELECT 1 AS WF_TYPE, * FROM #TEMP_NON_WF_STAGES')
--END TRY
--BEGIN CATCH
--END CATCH

--BEGIN TRY
	EXEC ('INSERT INTO '+ @tmp_table +' SELECT 2 AS WF_TYPE, * FROM #TEMP_WF_STAGES')
--END TRY
--BEGIN CATCH
--END CATCH

--BEGIN TRY
	EXEC ('INSERT INTO '+ @tmp_table +' SELECT 3 AS WF_TYPE, * FROM #TEMP_WF_SCHEDDATES')
--END TRY
--BEGIN CATCH
--END CATCH



IF @L_RETURN_DATA=1
BEGIN
/*
	IF  EXISTS (SELECT * FROM sys.objects WHERE object_id = OBJECT_ID(N'VISTA_NC_WF_ETAPAS'))
	BEGIN
		SELECT  1 AS WF_TYPE, * FROM #TEMP_NON_WF_STAGES
		UNION 
		SELECT 2 AS WF_TYPE, * FROM #TEMP_WF_STAGES
		UNION 
		SELECT 3 AS WF_TYPE, * FROM #TEMP_WF_SCHEDDATES
	END
	ELSE
	BEGIN
		SELECT  1 AS WF_TYPE, * FROM #TEMP_NON_WF_STAGES
	END	
*/
EXEC ('SELECT  * FROM ' +  @tmp_table)

END

RETURN
GO

GO
--SqlScripter----[dbo].[ik_IssuesClasses_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_IssuesClasses_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_IssuesClasses_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_IssuesClasses_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_ISSUESCLASSES_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


DECLARE @strSQL varchar(4000), @where varchar(100)

BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #TMP_SEC_LEVELS
END TRY
BEGIN CATCH
END CATCH

SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU
SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU
INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC



BEGIN TRY
	DROP TABLE #TMP_ISSUESCLASSES  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUESCLASSES (MODULEID INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUESCLASSES(MODULEID)
	SELECT XML_MODULE_DEFINITIONS.MODULEID FROM XML_MODULE_DEFINITIONS WHERE 1=0
END
ELSE IF  @IKCAT=4 
BEGIN
	INSERT INTO #TMP_ISSUESCLASSES(MODULEID)
	SELECT XML_MODULE_DEFINITIONS.MODULEID FROM XML_MODULE_DEFINITIONS 
END
ELSE
BEGIN
	INSERT INTO #TMP_ISSUESCLASSES(MODULEID)
	SELECT XML_MODULE_DEFINITIONS.MODULEID FROM XML_MODULE_DEFINITIONS 
	JOIN #TMP_SEC_LEVELS ON #TMP_SEC_LEVELS.CODIGOTIPONC=XML_MODULE_DEFINITIONS.MODULEID
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0			
END


EXEC ('INSERT INTO ' + @tmp_table + ' (MODULEID ) SELECT MODULEID FROM  #TMP_ISSUESCLASSES')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_IssuesIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_IssuesIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_IssuesIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_IssuesIds_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_ISSUES_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_ISSUES  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES (CODIGONC INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT CODIGO FROM NCMAINPROD WHERE 1=0
END
ELSE IF  @IKCAT=4 
BEGIN
	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT CODIGO FROM NCMAINPROD 
END
ELSE
BEGIN
		BEGIN TRY
			DROP TABLE #TMP_GROUPS
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #TMP_SEC_LEVELS
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU
		SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU
		INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC


		BEGIN TRY
			DROP TABLE #TMP_ISSUES_INVOLVED
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT VISTA_ASUNTOSINVOLUCRADOS.CODIGO AS CODIGONC INTO #TMP_ISSUES_INVOLVED FROM VISTA_ASUNTOSINVOLUCRADOS WHERE CODIGOUSUARIO=@IKCDU 
		INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC ) SELECT CODIGO FROM VISTA_ASUNTOSCOORDINADOS WHERE CODIGOUSUARIO=@IKCDU AND NOT CODIGO IN (SELECT CODIGONC FROM #TMP_ISSUES_INVOLVED )




	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT NC.CODIGO FROM #TMP_SEC_LEVELS 
		JOIN NCMAINPROD NC ON NC.TIPO=#TMP_SEC_LEVELS.CODIGOTIPONC 
		LEFT JOIN #TMP_ISSUES_INVOLVED ON #TMP_ISSUES_INVOLVED.CODIGONC = NC.CODIGO
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND	((#TMP_SEC_LEVELS.NIVELACCESO=2 AND NOT #TMP_ISSUES_INVOLVED.CODIGONC IS NULL) OR (#TMP_SEC_LEVELS.NIVELACCESO>2 ))
	ORDER BY CODIGOTIPONC, NIVELACCESO
END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGONC ) SELECT CODIGONC FROM  #TMP_ISSUES')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_IssuesIds_withCoordAccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_IssuesIds_withCoordAccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_IssuesIds_withCoordAccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_IssuesIds_withCoordAccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_ISSUES_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_ISSUES  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES (CODIGONC INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT CODIGO FROM NCMAINPROD WHERE 1=0
END
ELSE
BEGIN
		BEGIN TRY
			DROP TABLE #TMP_GROUPS
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #TMP_SEC_LEVELS
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU

		SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU

		INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) 
			SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC


		BEGIN TRY
			DROP TABLE #TMP_ISSUES_INVOLVED
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT VISTA_ASUNTOSINVOLUCRADOS.CODIGO AS CODIGONC INTO #TMP_ISSUES_INVOLVED FROM VISTA_ASUNTOSINVOLUCRADOS WHERE CODIGOUSUARIO=@IKCDU AND VISTA_ASUNTOSINVOLUCRADOS.NIVEL=3
		INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC ) SELECT CODIGO FROM VISTA_ASUNTOSCOORDINADOS WHERE CODIGOUSUARIO=@IKCDU AND NOT CODIGO IN (SELECT CODIGONC FROM #TMP_ISSUES_INVOLVED )




	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT NC.CODIGO FROM #TMP_SEC_LEVELS 
		JOIN NCMAINPROD NC ON NC.TIPO=#TMP_SEC_LEVELS.CODIGOTIPONC 
		LEFT JOIN #TMP_ISSUES_INVOLVED ON #TMP_ISSUES_INVOLVED.CODIGONC = NC.CODIGO
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND	((#TMP_SEC_LEVELS.NIVELACCESO>=2 AND NOT #TMP_ISSUES_INVOLVED.CODIGONC IS NULL) OR (#TMP_SEC_LEVELS.NIVELACCESO=5))
	ORDER BY CODIGOTIPONC, NIVELACCESO
END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGONC ) SELECT CODIGONC FROM  #TMP_ISSUES')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_IssuesIds_withCoordSupervAccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_IssuesIds_withCoordSupervAccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_IssuesIds_withCoordSupervAccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_IssuesIds_withCoordSupervAccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_ISSUES_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_ISSUES  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES (CODIGONC INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT CODIGO FROM NCMAINPROD WHERE 1=0
END
ELSE
BEGIN
		BEGIN TRY
			DROP TABLE #TMP_GROUPS
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #TMP_SEC_LEVELS
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU

		SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU

		INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) 
			SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC


		BEGIN TRY
			DROP TABLE #TMP_ISSUES_INVOLVED
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT VISTA_ASUNTOSINVOLUCRADOS.CODIGO AS CODIGONC INTO #TMP_ISSUES_INVOLVED FROM VISTA_ASUNTOSINVOLUCRADOS WHERE CODIGOUSUARIO=@IKCDU AND VISTA_ASUNTOSINVOLUCRADOS.NIVEL>=2
		INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC ) SELECT CODIGO FROM VISTA_ASUNTOSCOORDINADOS WHERE CODIGOUSUARIO=@IKCDU AND NOT CODIGO IN (SELECT CODIGONC FROM #TMP_ISSUES_INVOLVED )




	INSERT INTO #TMP_ISSUES(CODIGONC)
	SELECT NC.CODIGO FROM #TMP_SEC_LEVELS 
		JOIN NCMAINPROD NC ON NC.TIPO=#TMP_SEC_LEVELS.CODIGOTIPONC 
		LEFT JOIN #TMP_ISSUES_INVOLVED ON #TMP_ISSUES_INVOLVED.CODIGONC = NC.CODIGO
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND	((#TMP_SEC_LEVELS.NIVELACCESO=2 AND NOT #TMP_ISSUES_INVOLVED.CODIGONC IS NULL) OR (#TMP_SEC_LEVELS.NIVELACCESO>=4))
	ORDER BY CODIGOTIPONC, NIVELACCESO
END


EXEC ('INSERT INTO ' + @tmp_table + ' (CODIGONC ) SELECT CODIGONC FROM  #TMP_ISSUES')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_IssuesTasksIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_IssuesTasksIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_IssuesTasksIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_IssuesTasksIds_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_ISSUESTASKS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


DECLARE @strSQL varchar(4000), @where varchar(100)

BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #TMP_SEC_LEVELS
END TRY
BEGIN CATCH
END CATCH

SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU
SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU
INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC


BEGIN TRY
	DROP TABLE #TMP_ISSUES_INVOLVED
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES_INVOLVED(CODIGONC int, NIVEL int)

INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC, NIVEL ) 
SELECT CODIGO, 3 FROM VISTA_ASUNTOSCOORDINADOS WHERE CODIGOUSUARIO=@IKCDU AND NOT CODIGO IN (SELECT CODIGONC FROM #TMP_ISSUES_INVOLVED )

INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC, NIVEL ) 
SELECT VISTA_ASUNTOSINVOLUCRADOS.CODIGO AS CODIGONC,VISTA_ASUNTOSINVOLUCRADOS.NIVEL  
FROM VISTA_ASUNTOSINVOLUCRADOS WHERE CODIGOUSUARIO=@IKCDU 


CREATE TABLE #TMP_ISSUES_TASKS_INVOLVED(TASKID INT)
INSERT INTO #TMP_ISSUES_TASKS_INVOLVED
SELECT NCTAREASDESTINATARIOS.CODIGOTAREA FROM NCTAREASDESTINATARIOS
WHERE NCTAREASDESTINATARIOS.CODIGOCARGO IN (SELECT CARGOSUSUARIOS.CODIGOCARGO FROM CARGOSUSUARIOS WHERE CARGOSUSUARIOS.CODIGOUSUARIO=@IKCDU)


BEGIN TRY
	DROP TABLE #TMP_ISSUES_TASKS  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES_TASKS (TASKID INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT CODIGO FROM NCTAREAS WHERE 1=0
END
ELSE IF  @IKCAT=4 
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT CODIGO FROM NCTAREAS 
END
ELSE
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT DISTINCT VISTA_NCTAREAS.CODIGOTAREA 
	FROM VISTA_NCTAREAS
	JOIN #TMP_SEC_LEVELS ON #TMP_SEC_LEVELS.CODIGOTIPONC=VISTA_NCTAREAS.TIPONC
	LEFT JOIN #TMP_ISSUES_INVOLVED ON VISTA_NCTAREAS.CODIGONC=#TMP_ISSUES_INVOLVED.CODIGONC	
	LEFT JOIN #TMP_ISSUES_TASKS_INVOLVED ON #TMP_ISSUES_TASKS_INVOLVED.TASKID=VISTA_NCTAREAS.CODIGOTAREA
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND 
		(
			(#TMP_SEC_LEVELS.NIVELACCESO >=4)--ES SIEMPRE SUP O SIEMPRE COORD
			OR
			(#TMP_ISSUES_INVOLVED.NIVEL>=2) --ESTA INV. COMO SUPERVISOR O COORDINADOR 
			OR 
			(#TMP_ISSUES_INVOLVED.NIVEL=1 AND NOT #TMP_ISSUES_TASKS_INVOLVED.TASKID IS NULL)--ESTA INV. COMO INVOLUCRADO Y ES RESP.
		)
		
		
	
END

--RESTRICTED ACCESS: ASUNTOS EN LOS QUE ESTA INVOLUCRADO Y TAREAS EN LAS QUE ES REPOSABLE
--ALWAYS INVOL: ASUNTOS EN LOS QUE ESTA INVOLUCRADO Y TAREAS EN LAS QUE ES REPOSABLE
--ALWAYS SUP Y COORD: TODAS


EXEC ('INSERT INTO ' + @tmp_table + ' (TASKID ) SELECT TASKID FROM  #TMP_ISSUES_TASKS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_localized_select].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_localized_select]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_localized_select] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_localized_select]
@SELECTSTATEMENT varchar(8000), @DOTNET_SHORTDATEPATTERN varchar(10)  AS

	DECLARE @FORMATO varchar(3)
	DECLARE @LARGO int
	DECLARE @A int
	DECLARE @M int
	DECLARE @D int
	DECLARE @Y int
	DECLARE @CC varchar(1)
	DECLARE @TA varchar(1)

	SET @LARGO = LEN(@DOTNET_SHORTDATEPATTERN)
 	SET @A = 1
	SET @M = 0
	SET @D = 0
	SET @Y = 0
	SET @FORMATO = ''

	WHILE (@A <= @LARGO)
	BEGIN
		SET @CC =  UPPER(SUBSTRING(@DOTNET_SHORTDATEPATTERN, @A,1))
		SET @TA = ''
		IF (@CC = 'Y' AND @Y = 0)
			BEGIN
				SET @TA = 'y'
				SET @Y = 1
			END

		IF (@CC = 'M' AND @M = 0)
			BEGIN
				SET @TA = 'm'
				SET @M = 1
			END

		IF (@CC = 'D' AND @D = 0)
			BEGIN
				SET @TA = 'd'
				SET @D = 1
			END

		SET @FORMATO = @FORMATO + @TA
		
		SET @A = @A +1
	END

	SET DATEFORMAT @FORMATO
	EXEC(@SELECTSTATEMENT)
GO

GO
--SqlScripter----[dbo].[ik_maint_BS_INDIC_RECALC_LOGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_BS_INDIC_RECALC_LOGS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_BS_INDIC_RECALC_LOGS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_BS_INDIC_RECALC_LOGS]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)

AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_BS_INDICATORS_RECALCULATION_LOGS'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION


INSERT INTO BS_INDICATORS_RECALC_LOGS_OLD SELECT * FROM BS_INDICATORS_RECALC_LOGS WHERE CALC_TIME < @DELETE_DATE
DELETE FROM BS_INDICATORS_RECALC_LOGS WHERE CALC_TIME < @DELETE_DATE
SET @AFFECTED_RECORDS=@@ROWCOUNT
IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKERRORLOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKERRORLOG]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKERRORLOG] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKERRORLOG]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_BS_IKERRORLOG'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION

INSERT INTO IKERRORLOG_OLD SELECT * FROM IKERRORLOG WHERE  FECHA < @DELETE_DATE
DELETE FROM IKERRORLOG WHERE FECHA < @DELETE_DATE
SET @AFFECTED_RECORDS=@@ROWCOUNT
IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKFOROS_DOCS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKFOROS_DOCS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKFOROS_DOCS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKFOROS_DOCS]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_IKFOROSNOVEDADES_Documents'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION

INSERT INTO IKFOROSNOVEDADES_OLD 
SELECT * FROM IKFOROSNOVEDADES WHERE
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN DOCUMENTOS ON IKFOROSNOVEDADES.CODIGOFORO = DOCUMENTOS.CODIGOFORODESARROLLO
WHERE DOCUMENTOS.ESTADO = 3 AND FECHAOBSOLETO < @DELETE_DATE 
UNION 
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN DOCUMENTOS ON IKFOROSNOVEDADES.CODIGOFORO = DOCUMENTOS.CODIGOFOROCRITICAS
WHERE DOCUMENTOS.ESTADO = 3 AND FECHAOBSOLETO < @DELETE_DATE)


DELETE FROM IKFOROSNOVEDADES WHERE 
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN DOCUMENTOS ON IKFOROSNOVEDADES.CODIGOFORO = DOCUMENTOS.CODIGOFORODESARROLLO
WHERE DOCUMENTOS.ESTADO = 3 AND FECHAOBSOLETO < @DELETE_DATE 
UNION 
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN DOCUMENTOS ON IKFOROSNOVEDADES.CODIGOFORO = DOCUMENTOS.CODIGOFOROCRITICAS
WHERE DOCUMENTOS.ESTADO = 3 AND FECHAOBSOLETO < @DELETE_DATE)

SET @AFFECTED_RECORDS=@@ROWCOUNT

IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKFOROS_ISSUES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKFOROS_ISSUES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKFOROS_ISSUES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKFOROS_ISSUES]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_IKFOROSNOVEDADES_Issues'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION

INSERT INTO IKFOROSNOVEDADES_OLD 
SELECT * FROM IKFOROSNOVEDADES WHERE 
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN NCMAINPROD ON IKFOROSNOVEDADES.CODIGOFORO = NCMAINPROD.CODIGOFORO
WHERE ESTADO = 2 AND FECHAARCHIVO < @DELETE_DATE)


DELETE FROM IKFOROSNOVEDADES WHERE 
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN NCMAINPROD ON IKFOROSNOVEDADES.CODIGOFORO = NCMAINPROD.CODIGOFORO
WHERE ESTADO = 2 AND FECHAARCHIVO < @DELETE_DATE)

SET @AFFECTED_RECORDS=@@ROWCOUNT

IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKFOROS_TASKS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKFOROS_TASKS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKFOROS_TASKS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKFOROS_TASKS]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_IKFOROSNOVEDADES_Tasks'
SET @AFFECTED_RECORDS=0


BEGIN TRANSACTION

INSERT INTO IKFOROSNOVEDADES_OLD 
SELECT * FROM IKFOROSNOVEDADES WHERE 
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN NCTAREAS ON IKFOROSNOVEDADES.CODIGOFORO = NCTAREAS.CODIGOFORO
JOIN NCMAINPROD ON NCTAREAS.CODIGONC = NCMAINPROD.CODIGO 
WHERE NCMAINPROD.ESTADO = 2 AND FECHAARCHIVO < @DELETE_DATE )

DELETE FROM IKFOROSNOVEDADES WHERE 
CODIGO IN(
SELECT IKFOROSNOVEDADES.CODIGO FROM IKFOROSNOVEDADES 
JOIN NCTAREAS ON IKFOROSNOVEDADES.CODIGOFORO = NCTAREAS.CODIGOFORO
JOIN NCMAINPROD ON NCTAREAS.CODIGONC = NCMAINPROD.CODIGO 
WHERE NCMAINPROD.ESTADO = 2 AND FECHAARCHIVO < @DELETE_DATE )

SET @AFFECTED_RECORDS=@@ROWCOUNT

IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKNOTIFICACIONES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKNOTIFICACIONES]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKNOTIFICACIONES] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKNOTIFICACIONES]
(@Delete_Date As datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_IKNOTIFICACIONES'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION

INSERT INTO IKNOTIFICACIONES_OLD SELECT * FROM IKNOTIFICACIONES WHERE L_LEIDO = 1 AND FECHAALTA < @DELETE_DATE
DELETE FROM IKNOTIFICACIONES WHERE L_LEIDO = 1 AND FECHAALTA < @DELETE_DATE

SET @AFFECTED_RECORDS=@@ROWCOUNT

IF @@ERROR <> 0
BEGIN
	
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END

PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@Delete_Date)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKUSERLOGINS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKUSERLOGINS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKUSERLOGINS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKUSERLOGINS]
(@DELETE_DATE datetime,@AFFECTED_RECORDS int OUTPUT)
AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_BS_IKUSERLOGINS'
SET @AFFECTED_RECORDS=0

BEGIN TRANSACTION

INSERT INTO IKUSERLOGINS_OLD SELECT * FROM IKUSERLOGINS WHERE INPUTDATE < @DELETE_DATE
DELETE FROM IKUSERLOGINS WHERE INPUTDATE < @DELETE_DATE
SET @AFFECTED_RECORDS=@@ROWCOUNT

IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END
PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_maint_IKUSERLOGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_maint_IKUSERLOGS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_maint_IKUSERLOGS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_maint_IKUSERLOGS]
(@DELETE_DATE datetime, @AFFECTED_RECORDS int OUTPUT)

AS

DECLARE @ValidationName nvarchar(50)
SET @ValidationName = 'ik_delete_maint_BS_IKUSERLOGS'
SET @AFFECTED_RECORDS=0


BEGIN TRANSACTION

INSERT INTO IKUSERLOGS_OLD SELECT * FROM IKUSERLOGS WHERE INPUTDATE < @DELETE_DATE
DELETE FROM IKUSERLOGS WHERE INPUTDATE < @DELETE_DATE
SET @AFFECTED_RECORDS=@@ROWCOUNT
IF @@ERROR <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('%s: : FAILURE (%u)',16,1, @ValidationName)
	RETURN(-1)
END


PRINT @ValidationName + ': SUCCESS (' + ltrim(CONVERT(nvarchar(50),@DELETE_DATE)) + ')'
COMMIT TRANSACTION
RETURN(0)
GO

GO
--SqlScripter----[dbo].[ik_mt_Actions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_Actions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_Actions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_Actions]
(
	@IKCDU int
)  AS

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)

INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



	SELECT IKALERTS.*,IKALERTS_USERS_OPTIONS.ALERT_CLASS, IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED, NM.MENSAJES as CURRENTUSER_NEWMENSAJES, NM.ARCHIVOS as CURRENTUSER_NEWARCHIVOS, NM.RECORDATORIOS as CURRENTUSER_NEWRECORDATORIOS, NM.URGENTES as CURRENTUSER_NEWURGENTES,
	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END  + '</span>'  AS NEWMESSAGES,

	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  CASE WHEN ISNULL(NM.MENSAJES,0) >0  THEN ' <span class="middot">·</span> ' ELSE '' END  + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''		
	END + '</span>' AS NEWFILES,

	'<span class="forumnews">' + 
	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN ' <span class="middot">·</span> ' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END  + '</span>'  AS NEWREMINDERS,
	ISNULL(NM.LASTNEW,0) AS LASTNEW
	
	FROM IKALERTS 
	JOIN IKALERTS_USERS_OPTIONS ON IKALERTS_USERS_OPTIONS.IKALERTS_ID=IKALERTS.IKALERTS_ID AND IKALERTS_USERS_OPTIONS.USERID=@IKCDU
	
	LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=IKALERTS.FORUMID
	WHERE IKALERTS_USERS_OPTIONS.ALERT_L_ISPINNED=1
		
	 ORDER BY IKALERTS.DATE_DONE, DATE_EFFECTIVE
GO

GO
--SqlScripter----[dbo].[ik_mt_BSIndicators].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_BSIndicators]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_BSIndicators] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_BSIndicators]
(
		@IKCDU INT,
		@STRORDER varchar(50) 
	)

AS
	SET NOCOUNT ON

IF LEN(@STRORDER)=0
BEGIN
	SET @STRORDER='1'
END


DECLARE @IKCAT int
DECLARE @BSCAT int

SELECT 	@IKCAT=CATEGORIA, @BSCAT=PERMISOSBSPROC FROM USUARIOS WHERE CODIGO=@IKCDU

DECLARE @STRSQL VARCHAR(2000)


IF @IKCAT=0 OR @BSCAT=2
BEGIN
	SET @STRSQL='SELECT ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION , LOCATION,  BS_INDICATORSID, [DESCRIPTION], TIME_PERIOD, I.CATEGORY
		FROM VISTA_BS_INDICATORS I
		WHERE 1=0'
		EXEC (@STRSQL)
		RETURN
END
	
IF @IKCAT=4 OR @BSCAT=0 
BEGIN
		SET @STRSQL='SELECT DISTINCT ''I-'' + LTRIM(STR(I.BS_INDICATORSID)) + '' '' + I.LOCATION + '': '' + I.[DESCRIPTION] AS FULLDESCRIPTION  ,LOCATION, I.BS_INDICATORSID, I.[DESCRIPTION], I.TIME_PERIOD, I.CATEGORY
		FROM VISTA_BS_INDICATORS I JOIN VISTA_BS_INDICATORS_OPTIONS O ON O.BS_INDICATORSID=I.BS_INDICATORSID
		WHERE L_ACTIVE=1 AND O.SHOWINMYTASKS=1
		AND (I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1 AND USERID= ' + STR(@IKCDU) + ')
		OR I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=' + STR(@IKCDU) + ')))
		ORDER BY ' + @STRORDER
		EXEC (@STRSQL)
		RETURN
END
ELSE
BEGIN
	SET @STRSQL='SELECT DISTINCT ''I-'' + LTRIM(STR(I.BS_INDICATORSID)) + '' '' + I.LOCATION + '': '' + I.[DESCRIPTION] AS FULLDESCRIPTION  ,LOCATION, I.BS_INDICATORSID, I.[DESCRIPTION], I.TIME_PERIOD, I.CATEGORY
		FROM VISTA_BS_INDICATORS I JOIN VISTA_BS_INDICATORS_OPTIONS O ON O.BS_INDICATORSID=I.BS_INDICATORSID
		WHERE L_ACTIVE=1 AND O.SHOWINMYTASKS=1
		AND (I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1  AND SEC_LEVEL>0 AND USERID= ' + STR(@IKCDU) + ')
		OR I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1  AND SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=' + STR(@IKCDU) + ')))
		AND (NOT I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SEC_LEVEL=0 AND USERID= ' + STR(@IKCDU) + '))
		ORDER BY ' + @STRORDER
		EXEC (@STRSQL)
		RETURN

/*
		SET @STRSQL='SELECT ''I-'' + LTRIM(STR(BS_INDICATORSID)) + '' '' + LOCATION + '': '' + DESCRIPTION AS FULLDESCRIPTION , LOCATION , BS_INDICATORSID, [DESCRIPTION], TIME_PERIOD,  I.CATEGORY
		FROM VISTA_BS_INDICATORS I		
		WHERE L_ACTIVE=1 AND I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1 AND SEC_LEVEL>0 AND USERID= ' + STR(@IKCDU) + ')
		OR I.BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM VISTA_BS_INDICATORS_OPTIONS WHERE SHOWINMYTASKS=1 AND SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=' + STR(@IKCDU) + '))
		ORDER BY ' + @STRORDER
		EXEC @STRSQL
		RETURN 
*/
END





	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_mt_DocsTasksInProgress].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_DocsTasksInProgress]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_DocsTasksInProgress] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_DocsTasksInProgress]
(
		@IKCDU INT,
		@STRORDER varchar(50) = 'DOCCODE',
		@LANG varchar(10) = 'SP',
		@L_RETURN_RECORDS tinyint=1
	)

AS
SET NOCOUNT ON
DECLARE @COUNT INT

IF @STRORDER='' SET @STRORDER='DOCCODE'

DECLARE @DB_REQUERIRDISTRIBUCION varchar(100)
DECLARE @DB_REQUERIRAPROBACION varchar(100)
DECLARE @DB_REQUERIRREVISION varchar(100)
DECLARE @Loc_Next_Rev_Date_Reached varchar(100)

SET @DB_REQUERIRDISTRIBUCION = (SELECT TOP 1 DB_REQUERIRDISTRIBUCION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @DB_REQUERIRAPROBACION = (SELECT TOP 1 DB_REQUERIRAPROBACION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @DB_REQUERIRREVISION = (SELECT TOP 1 DB_REQUERIRREVISION FROM INTERNACIONAL WHERE DB_IDIOMA=@LANG)
SET @Loc_Next_Rev_Date_Reached = 'Loc_Next_Rev_Date_Reached'
	

SELECT *,

CASE
	WHEN ESTADO=0 OR ESTADO=1 THEN 'Images/Doc_Development.gif'
	WHEN ESTADO=2 THEN 'Images/Doc_Current.gif'
	WHEN ESTADO=3 THEN 'Images/Doc_Obsolete.gif'
END AS DOCICON,

CASE 
	WHEN ACCION = @DB_REQUERIRDISTRIBUCION THEN 'Images/IK_DISTRIBUCION.GIF'
	WHEN ACCION = @DB_REQUERIRAPROBACION THEN 'Images/IK_APROBACION.GIF'
	WHEN ACCION = @DB_REQUERIRREVISION THEN 'Images/IK_REVISION.GIF'
	WHEN ACCION = @Loc_Next_Rev_Date_Reached THEN 'Images/Task_Unsigned.gif'
END AS DOCTASKICON,

CASE 
	WHEN ACCION = @DB_REQUERIRDISTRIBUCION THEN '{LOC-Loc_Distribution}'
	WHEN ACCION = @DB_REQUERIRAPROBACION THEN '{LOC-Loc_Approval}'
	WHEN ACCION = @DB_REQUERIRREVISION THEN '{LOC-Loc_Revision}'
	WHEN ACCION = @Loc_Next_Rev_Date_Reached THEN '{LOC-Loc_Next_Rev_Date_Reached}'
END AS DOCTASKLOC,

CASE 
	WHEN FECHAVTO IS NULL THEN 'n/a'
	ELSE ''
END AS STRFECVTO,


CASE 
	WHEN FECHAVTO<GETDATE() THEN 'red'
	ELSE 'black'
END AS FECVTO_COLOR

INTO #ITASKS

 FROM (
 
SELECT CODIGOTAREA, CODIGODOCUMENTO AS DOCCODE, DESCRIPCIONDOC,ACCION, CARGOREQ,DOCUMENTOSESTADO AS ESTADO,CODIGOUSUARIO,CODIGOCARGO,NOMBRE,CODIGOISO,C_REVISION,REVISION,FECHAVENCIMIENTO AS FECHAVTO  
FROM VISTA_CONDOCTAREASUSUARIOS 

UNION ALL 

SELECT 0 AS CODIGOTAREA, CODIGO AS CODIGODOCUMENTO, CODIGOISO + ' - Rev.' + C_REVISION +  NOMBRE AS DESCRIPCIONDOC,'Loc_Next_Rev_Date_Reached' AS ACCION,'' AS CARGOREQ,ESTADO AS DOCUMENTOESTADO,USUARIORESPONSABLE AS CODIGOUSUARIO,0 AS CODIGOCARGO,NOMBRE,CODIGOISO,C_REVISION,REVISION,FECHAPROXREV AS FECHAVTO 
FROM DOCUMENTOS 

WHERE ESTADO=2 AND FECHAPROXREV <=GETDATE() AND 
	CODIGO NOT IN 
			(SELECT DO.CODIGO FROM DOCUMENTOS DO 
					JOIN  DOCUMENTOS DD ON DO.CODIGO=DD.CODIGOBASADOEN)

) AS ITASKS
            

WHERE (
	CODIGOUSUARIO=@IKCDU
	) 




SET @COUNT= (SELECT @@ROWCOUNT)
IF (@L_RETURN_RECORDS=1)
BEGIN
	SELECT * FROM #ITASKS

	ORDER BY
	CASE 
		WHEN @STRORDER='DOCCODE' THEN DOCCODE
	END,
	CASE 
		WHEN @STRORDER='NAME' THEN NOMBRE
		WHEN @STRORDER='CODIGOISO' THEN CODIGOISO
	END,
	CASE 
		WHEN @STRORDER='FECVTO' THEN FECHAVTO
	END

END

	
RETURN @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_DocsWithNews].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_DocsWithNews]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_DocsWithNews] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_DocsWithNews]
(
		@IKCDU INT,
		@STRORDER varchar(50) = 'DOCCODE',
		@L_RETURN_RECORDS tinyint=1
	)

AS
	SET NOCOUNT ON

DECLARE @COUNT INT

IF @STRORDER='' SET @STRORDER='DOCCODE'

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)
	


	INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)

	

SELECT *,

CASE 
		WHEN ISNULL(NMCANT,0) >0  AND ISNULL(NUCANT,0) >0  THEN CONVERT(varchar,NMCANT) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NMCANT,0) >0  THEN CONVERT(varchar,NMCANT) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END AS NEWMESSAGES,

	 
	CASE 
		WHEN ISNULL(NFCANT,0) > 0   THEN  '<BR>' + CONVERT(varchar,NFCANT) + ' {LOC-Loc_File_Files}'  
		ELSE ''
		
	END AS NEWFILES,

	CASE 
		WHEN ISNULL(NMCANT,0) >0 OR ISNULL(NFCANT,0) > 0  THEN '<BR>' + 
			CASE WHEN ISNULL(NUCANT,0) >0  AND ISNULL(NRCANT,0)>0 THEN CONVERT(varchar,NRCANT)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NRCANT,0)>0  THEN CONVERT(varchar,NRCANT) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NUCANT,0) >0  AND ISNULL(NRCANT,0)>0 THEN CONVERT(varchar,NRCANT)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NRCANT,0)>0 THEN CONVERT(varchar,NRCANT) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END AS NEWREMINDERS,




CASE
	WHEN ESTADO=0 OR ESTADO=1 THEN 'Images\Doc_Development.gif'
	WHEN ESTADO=2 THEN 'Images\Doc_Current.gif'
	WHEN ESTADO=3 THEN 'Images\Doc_Obsolete.gif'
END AS DOCICON,

CASE
	WHEN ESTADO=0 OR ESTADO=1 THEN '{LOC-Loc_Development}'
	WHEN ESTADO=2 THEN '{LOC-Loc_Current}'
	WHEN ESTADO=3 THEN '{LOC-Loc_Obsolete}'
END AS LOCSTATUS


INTO #ITASKS
 FROM (
SELECT CODIGO AS DOCCODE, ESTADO , NOMBRE, CODIGOISO, C_REVISION, REVISION, CODIGOFORODESARROLLO, CODIGOFOROCRITICAS ,
NM.MENSAJES AS NMCANT , NM.ARCHIVOS AS NFCANT , NM.RECORDATORIOS AS NRCANT, NM.URGENTES AS NUCANT,
'{LOC-Loc_Forum_Development}' as FORUM,
'DOCDEVFORUM' AS FORUMVIEW

,
ISNULL(NM.LASTNEW,0) AS LASTNEW
,D.CODIGOFORODESARROLLO AS CODIGOFORO
	

FROM DOCUMENTOS D

LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=D.CODIGOFORODESARROLLO


WHERE (
	(ISNULL(NM.MENSAJES,0) >0) OR (ISNULL(NM.ARCHIVOS,0) > 0) OR (ISNULL(NM.RECORDATORIOS,0)> 0)  
	) 


UNION 


SELECT CODIGO AS DOCCODE, ESTADO , NOMBRE, CODIGOISO, C_REVISION, REVISION, CODIGOFORODESARROLLO, CODIGOFOROCRITICAS ,
NM.MENSAJES AS NMCANT , NM.ARCHIVOS AS NFCANT , NM.RECORDATORIOS AS NRCANT, NM.URGENTES AS NUCANT,
'{LOC-Loc_Critics}' as FORUM,
'DOCCRITFORUM' AS FORUMVIEW
	
,
ISNULL(NM.LASTNEW,0) AS LASTNEW
,D.CODIGOFOROCRITICAS AS CODIGOFORO

FROM DOCUMENTOS D

LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=D.CODIGOFOROCRITICAS



WHERE (
	(ISNULL(NM.MENSAJES,0) >0) OR (ISNULL(NM.ARCHIVOS,0) > 0) OR (ISNULL(NM.RECORDATORIOS,0)> 0)  
	) 



) AS ITASKS


ORDER BY
CASE 
	WHEN @STRORDER='CODIGO' THEN DOCCODE
END,
CASE 
	WHEN @STRORDER='NAME' THEN NOMBRE
	WHEN @STRORDER='CODIGOISO' THEN CODIGOISO
END



SET @COUNT= (SELECT @@ROWCOUNT)
IF (@L_RETURN_RECORDS=1)
BEGIN
	SELECT * FROM #ITASKS
END

DROP TABLE #TMP_FOROS
	
RETURN @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_getBanner2Show].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_getBanner2Show]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_getBanner2Show] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_getBanner2Show]
(
	@IKCDU int
)

AS
SET NOCOUNT ON 


DECLARE curFNs CURSOR LOCAL FAST_FORWARD for 
SELECT FN_CALL, [CONTENT], [CONTENT_TYPE]
FROM TBL_MT_FNS_GETBANNER2SHOW
ORDER BY FN_EXECUTION_ORDER

DECLARE @FN_CALL nvarchar(1000)
DECLARE @CONTENT nvarchar(1000)
DECLARE @CONTENT_TYPE int

OPEN curFNs 

FETCH NEXT FROM curFNs INTO @FN_CALL, @CONTENT, @CONTENT_TYPE 

CREATE TABLE #TMP([CONTENT] nvarchar(1000), [CONTENT_TYPE] int )

WHILE @@FETCH_STATUS = 0
BEGIN

	DECLARE @STR_SQL nvarchar(4000)
	SET @STR_SQL = ''
	SET @STR_SQL = @STR_SQL + '		DECLARE @IKCDU int'
	SET @STR_SQL = @STR_SQL + '		SET @IKCDU = ' + STR(@IKCDU) 
	SET @STR_SQL = @STR_SQL + '		DECLARE @HOY datetime'
	SET @STR_SQL = @STR_SQL + '		SET @HOY = GETDATE()' 

	SET @STR_SQL = @STR_SQL + 'IF (SELECT ' + @FN_CALL + ')=1 '  
	SET @STR_SQL = @STR_SQL + ' BEGIN   '
	SET @STR_SQL = @STR_SQL + '		INSERT INTO #TMP SELECT ''' + @CONTENT + ''' AS [CONTENT], ' + STR(@CONTENT_TYPE) + ' AS CONTENT_TYPE '
	SET @STR_SQL = @STR_SQL + ' END   '

	--PRINT @STR_SQL
	EXEC (@STR_SQL)

	IF EXISTS(SELECT * FROM #TMP)
	BEGIN
		BREAK
	END

	FETCH NEXT FROM curFNs INTO @FN_CALL, @CONTENT, @CONTENT_TYPE 
END

CLOSE curFNs
DEALLOCATE curFNs

IF EXISTS(SELECT * FROM #TMP)
BEGIN 
	SELECT TOP 1 * FROM #TMP
END	
ELSE
BEGIN
	SELECT 'Loc_No_Tasks' AS CONTENT, 1 AS CONTENT_TYPE
END
	


/*
	IF (SELECT dbo.ik_mt_userHasNewsOnForums(@IKCDU))=1
	BEGIN
		SELECT 'bot_ik_novedades' AS CONTENT, 0 AS CONTENT_TYPE
		RETURN
	END

	IF (SELECT dbo.ik_mt_userHasNewsOnDocs(@IKCDU))=1
	BEGIN
		SELECT 'bot_ik_novedades' AS CONTENT, 0 AS CONTENT_TYPE
		RETURN
	END

	IF (SELECT dbo.ik_mt_userHasNewsOnAlerts(@IKCDU,GETDATE()))=1
	BEGIN
		SELECT 'bot_ik_novedades' AS CONTENT, 0 AS CONTENT_TYPE
		RETURN
	END
	
	
	IF (SELECT dbo.ik_mt_userHasPendingNCTasks(@IKCDU))=1
	BEGIN
		SELECT 'img_mytasks_pendingtasks' AS CONTENT, 0 AS CONTENT_TYPE
		RETURN
	END	

	IF (SELECT dbo.[ik_mt_userHasWFApprovalRequirementsInProgress](@IKCDU))=1
	BEGIN
		SELECT 'img_mytasks_pendingtasks' AS CONTENT, 0 AS CONTENT_TYPE
		RETURN
	END	
*/	

	
	RETURN
GO

GO
--SqlScripter----[dbo].[ik_mt_IssuesNotProcessed].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_IssuesNotProcessed]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_IssuesNotProcessed] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_IssuesNotProcessed]
(
		@IKCDU INT,
		@STRORDER varchar(50) = 'CODIGO',
		@L_RETURN_RECORDS tinyint=1
	)

AS
	SET NOCOUNT ON
	

DECLARE @COUNT INT

--SELECT * FROM (
SELECT CODIGO AS CODIGONC, DESCRIPCION, TIPO AS TIPONC ,
A.L_ASUNTOPRIORITARIO AS L_ASUNTOPRIORITARIO, A.ESTADO AS  ESTADO,
MD.[NAME] AS CLASSNAME, GD.[name] AS MODULENAME, GD.SMALLGIF AS NCICON
,
CASE 
	WHEN L_ASUNTOPRIORITARIO=1 THEN '<span class="CaptionVariableNicObligatoria" title="({LOC-Loc_With_Priority})">!</span>&nbsp;&nbsp;' + REPLACE(DESCRIPCION,'''', '&#39;')
	ELSE REPLACE(DESCRIPCION,'''', '&#39;')
END AS DESCRIPCIONNC

INTO #ITASKS

FROM VISTA_ASUNTOSCOORDINADOS A
JOIN XML_MODULE_DEFINITIONS MD 
	JOIN XML_MODULEGROUP_DEFINITIONS GD ON GD.MODULEGROUPID=MD.MODULEGROUPID	
ON A.TIPO=MD.MODULEID


WHERE ESTADO=0 AND CODIGOUSUARIO=@IKCDU 



--) AS ITASKS
SET @COUNT= (SELECT @@ROWCOUNT)
IF (@L_RETURN_RECORDS=1)
BEGIN
SELECT * FROM #ITASKS
	ORDER BY
	CASE 
		WHEN @STRORDER='CODIGO' THEN CODIGONC
		WHEN @STRORDER='TIPO' THEN TIPONC
	END,
	CASE 
		WHEN @STRORDER='DESCRIPCION' THEN DESCRIPCION
		WHEN @STRORDER='TIPO' THEN DESCRIPCION
	END


END

	
RETURN @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_IssuesWithNews].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_IssuesWithNews]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_IssuesWithNews] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_IssuesWithNews]
(
		@IKCDU INT,
		@STRORDER varchar(50) = 'CODIGO',
		@MODULEIDS_EXCLUDED nvarchar(1000)='',
		@MODULEIDS_INCLUDED nvarchar(1000)='',
		@L_RETURN_RECORDS tinyint=1
	)

AS
	SET NOCOUNT ON
	

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)
	


	INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)





DECLARE @COUNT INT

--SELECT * FROM (
SELECT DISTINCT A.CODIGO AS CODIGONC, A.TIPO AS TIPONC, A.DESCRIPCION,
A.L_ASUNTOPRIORITARIO AS L_ASUNTOPRIORITARIO, A.ESTADO AS  ESTADO,
MD.[NAME] AS CLASSNAME, GD.[name] AS MODULENAME, GD.SMALLGIF AS NCICON,A.CODIGOFORO
,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END AS NEWMESSAGES,

	 
	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  '<BR>' + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''
		
	END AS NEWFILES,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN '<BR>' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END AS NEWREMINDERS
	
,
CASE 
	WHEN L_ASUNTOPRIORITARIO=1 THEN '<span class="CaptionVariableNicObligatoria" title="({LOC-Loc_With_Priority})">!</span>&nbsp;&nbsp;' + REPLACE(DESCRIPCION,'''', '&#39;')
	ELSE REPLACE(DESCRIPCION,'''', '&#39;')
END AS DESCRIPCIONNC
,
ISNULL(NM.LASTNEW,0) AS LASTNEW

INTO #ITASKS

FROM VISTA_ASUNTOSINVOLUCRADOS A  
JOIN XML_MODULE_DEFINITIONS MD 
	JOIN XML_MODULEGROUP_DEFINITIONS GD ON GD.MODULEGROUPID=MD.MODULEGROUPID	
ON A.TIPO=MD.MODULEID

LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=A.CODIGOFORO




WHERE 
(@MODULEIDS_EXCLUDED='' OR	NOT A.TIPO IN (SELECT [VALUE] FROM ik_SplitIntoTable(@MODULEIDS_EXCLUDED,',')))
AND
(@MODULEIDS_INCLUDED='' OR	A.TIPO IN (SELECT [VALUE] FROM ik_SplitIntoTable(@MODULEIDS_INCLUDED,',')))

AND
A.CODIGOUSUARIO=@IKCDU AND 
(
 ( (ISNULL(NM.MENSAJES,0) >0) OR (ISNULL(NM.ARCHIVOS,0) > 0) OR (ISNULL(NM.RECORDATORIOS,0) > 0)  ) OR 
 ( L_ASUNTOPRIORITARIO=1 AND (ESTADO=0 OR ESTADO=1))

)

--) AS ITASKS

SET @COUNT= (SELECT @@ROWCOUNT)

IF (@L_RETURN_RECORDS=1)
BEGIN
	SELECT * FROM #ITASKS
	ORDER BY
	CASE 
		WHEN @STRORDER='CODIGO' THEN CODIGONC
		WHEN @STRORDER='TIPO' THEN TIPONC
	END,
	CASE 
		WHEN @STRORDER='DESCRIPCION' THEN DESCRIPCION
		WHEN @STRORDER='TIPO' THEN DESCRIPCION
	END
END



DROP TABLE #TMP_FOROS 
DROP TABLE #ITASKS

RETURN @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_NCTasksInProgress].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_NCTasksInProgress]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_NCTasksInProgress] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_NCTasksInProgress]
(
		@IKCDU int,
		@SHOW_HIDDEN_TASKS tinyint = 0,
		@STRORDER varchar(50) = 'FECVTO',
		@L_RETURN_RECORDS tinyint=1
	)

AS
	SET NOCOUNT ON
	


IF @STRORDER='' SET @STRORDER='FECVTO'

CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)
	


	INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



DECLARE @HIDDENTASKS_COUNT int

SELECT @HIDDENTASKS_COUNT=COUNT(NCTAREAS_CODIGO) 
FROM VISTA_NCTAREASUSUARIOSMYTASKS
WHERE
L_CUMPLIDA=0 
	AND NOT FECHA IS NULL 
	AND L_NOMOSTRAR=1
	AND CODIGOCARGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO= @IKCDU ) 


DECLARE @COUNT INT


--SELECT * FROM (

SELECT DISTINCT NCTAREAS_CODIGO AS NCTCODE, CODIGONC, NCTAREAS_DESCRIPCION, REPLACE(REPLACE(NCMAINPROD_DESCRIPCION, '''', '&#39;'),'"','&quot;') AS NCMAINPROD_DESCRIPCION , TIPO AS TIPONC, L_NOMOSTRAR, DIMFECVTO AS  FECVTO, CODIGOUSUARIOCOORDINADOR, TIPO_TAREA,

MD.[NAME] AS CLASSNAME, GD.[NAME] AS MODULENAME, GD.SMALLGIF AS NCICON,T.CODIGOFORO,
@HIDDENTASKS_COUNT AS HIDDENTASKS_COUNT,

CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END AS NEWMESSAGES,

	 
	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  '<BR>' + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''
		
	END AS NEWFILES,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN '<BR>' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END AS NEWREMINDERS,


CASE 
	WHEN TIPO_TAREA=2 THEN 'gainsboro'
	ELSE 'white'
END AS TASK_BGCOLOR,

CASE 
	WHEN DIMFECVTO<=GETDATE() THEN 'red'
	ELSE 'black'
END AS FECVTO_COLOR

,
ISNULL(NM.LASTNEW,0) AS LASTNEW

INTO #ITASKS

FROM VISTA_NCTAREASUSUARIOSMYTASKS T

JOIN XML_MODULE_DEFINITIONS MD 
	JOIN XML_MODULEGROUP_DEFINITIONS GD ON GD.MODULEGROUPID=MD.MODULEGROUPID	
ON TIPO=MD.MODULEID
LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=T.CODIGOFORO



WHERE  L_CUMPLIDA=0 
	AND NOT FECHA IS NULL 
	AND CODIGOCARGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO= @IKCDU ) 
	AND (
			( (ISNULL(NM.MENSAJES,0) >0) OR (ISNULL(NM.ARCHIVOS,0) > 0) OR (ISNULL(NM.RECORDATORIOS,0) > 0)  )  OR
			( L_NOMOSTRAR=0 OR @SHOW_HIDDEN_TASKS=1 OR (L_NOMOSTRAR=2 AND CODIGOUSUARIOCOORDINADOR<>@IKCDU)) OR
			( DIMFECVTO < GETDATE())
		)
		
--) AS ITASKS


SET @COUNT= (SELECT @@ROWCOUNT)



IF (@L_RETURN_RECORDS=1)
BEGIN
	SELECT * FROM #ITASKS

	ORDER BY
	CASE 
		WHEN @STRORDER='NCTCODE' THEN NCTCODE
		WHEN @STRORDER='NCPCODE' THEN CODIGONC
		WHEN @STRORDER='TIPO' THEN TIPONC
	END,
	CASE 
		WHEN @STRORDER='DESCRIPCION' THEN NCTAREAS_DESCRIPCION
		WHEN @STRORDER='TIPO' THEN NCTAREAS_DESCRIPCION
	END
	,
	CASE 
		WHEN @STRORDER='FECVTO' THEN FECVTO
	END

END

DROP TABLE #ITASKS
DROP TABLE #TMP_FOROS
	
RETURN @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_NCTasksWithNews].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_NCTasksWithNews]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_NCTasksWithNews] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_NCTasksWithNews]
(
		@IKCDU int,
		@L_JUST_COUNT int=0,
		@STRORDER varchar(50) = 'INIPREV',
		@L_RETURN_RECORDS tinyint=1
	)

AS
	SET NOCOUNT ON
DECLARE @COUNT INT

	CREATE TABLE #TMP_FOROS(CODIGOFORO int, MENSAJES int, URGENTES INT, ARCHIVOS INT, RECORDATORIOS INT, LASTNEW int)
	


	INSERT INTO #TMP_FOROS(CODIGOFORO , MENSAJES, URGENTES, ARCHIVOS, RECORDATORIOS) 
		SELECT IKFOROSNOVEDADES.CODIGOFORO, 
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO!=@IKCDU THEN 1 ELSE 0 END) AS MENSAJES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND GRADOURGENCIA=1 THEN 1 ELSE 0 END) AS URGENTES,  
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 2 THEN 1 ELSE 0 END) AS ARCHIVOS,
		SUM(CASE WHEN IKFOROSNOVEDADES.CODIGOTIPOPENDIENTE = 1 AND M.CODIGOUSUARIO=@IKCDU THEN 1 ELSE 0 END) AS RECORDATORIOS
	FROM IKFOROSNOVEDADES 
	LEFT JOIN IKFOROSMENSAJES M 
		ON M.CODIGO = IKFOROSNOVEDADES.CODIGOPENDIENTE 
	WHERE IKFOROSNOVEDADES.CODIGOUSUARIO=@IKCDU AND L_LEIDO=0
	GROUP BY IKFOROSNOVEDADES.CODIGOFORO


	
UPDATE #TMP_FOROS SET LASTNEW=
(SELECT TOP 1 CODIGO FROM IKFOROSNOVEDADES WHERE IKFOROSNOVEDADES.CODIGOFORO=#TMP_FOROS.CODIGOFORO AND CODIGOUSUARIO=@IKCDU ORDER BY CODIGO DESC)



IF @L_JUST_COUNT=0
BEGIN
	IF @STRORDER='' SET @STRORDER='INIPREV'






	SELECT * FROM (
	SELECT DISTINCT NCTAREAS_CODIGO AS NCTCODE, CODIGONC, NCTAREAS_DESCRIPCION, REPLACE(REPLACE(NCMAINPROD_DESCRIPCION, '''', '&#39;'),'"','&quot;') AS NCMAINPROD_DESCRIPCION, TIPO AS TIPONC, L_NOMOSTRAR, MANDARENFECHA, CODIGOUSUARIOCOORDINADOR, TIPO_TAREA ,
	MD.[NAME] AS CLASSNAME, GD.[NAME] AS MODULENAME, GD.SMALLGIF AS NCICON, NM.CODIGOFORO
	,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0  AND ISNULL(NM.URGENTES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}&nbsp;<span class="CaptionVariableNicObligatoria"  title="({LOC-Urgent})" >*</span>'  
		WHEN ISNULL(NM.MENSAJES,0) >0  THEN CONVERT(varchar,NM.MENSAJES) + ' {LOC-Loc_Message_Messages}'  
		ELSE ''
	END AS NEWMESSAGES,

	 
	CASE 
		WHEN ISNULL(NM.ARCHIVOS,0) > 0   THEN  '<BR>' + CONVERT(varchar,NM.ARCHIVOS) + ' {LOC-Loc_File_Files}'  
		ELSE ''
		
	END AS NEWFILES,

	CASE 
		WHEN ISNULL(NM.MENSAJES,0) >0 OR ISNULL(NM.ARCHIVOS,0) > 0  THEN '<BR>' + 
			CASE WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0  THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
		ELSE 
			CASE 
				WHEN ISNULL(NM.URGENTES,0) >0  AND ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS)+ ' {LOC-Loc_Reminders}&nbsp;<span class="CaptionVariableNicObligatoria" title="({LOC-Urgent})">*</span>'
				WHEN ISNULL(NM.RECORDATORIOS,0)>0 THEN CONVERT(varchar,NM.RECORDATORIOS) + ' {LOC-Loc_Reminders}'  
				ELSE ''
			END
	END AS NEWREMINDERS,

	CASE 
		WHEN TIPO_TAREA=2 THEN 'gainsboro'
		ELSE 'white'
	END AS TASK_BGCOLOR,

	CASE 
		WHEN MANDARENFECHA<=GETDATE() THEN 'red'
		ELSE 'black'
	END AS MANDARENFECHA_COLOR

,

ISNULL(NM.LASTNEW,0) AS LASTNEW

		
		

	FROM VISTA_NCTAREASUSUARIOSMYTASKS T 
	  
	JOIN XML_MODULE_DEFINITIONS MD 
		JOIN XML_MODULEGROUP_DEFINITIONS GD ON GD.MODULEGROUPID=MD.MODULEGROUPID	
	ON TIPO=MD.MODULEID
	LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=T.CODIGOFORO
	

	WHERE L_CUMPLIDA=0 AND FECHA IS NULL AND (MANDARENFECHA<=GETDATE() OR (SELECT COUNT(CODIGO) FROM IKFOROSNOVEDADES N WHERE CODIGOUSUARIO= @IKCDU AND L_LEIDO=0 AND N.CODIGOFORO=T.CODIGOFORO)>0 )AND CODIGOCARGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO= @IKCDU ) 


	) AS ITASKS

	ORDER BY
	CASE 
		WHEN @STRORDER='NCTCODE' THEN NCTCODE
		WHEN @STRORDER='NCPCODE' THEN CODIGONC
		WHEN @STRORDER='TIPO' THEN TIPONC
	END,
	CASE 
		WHEN @STRORDER='DESCRIPCION' THEN NCTAREAS_DESCRIPCION
		WHEN @STRORDER='TIPO' THEN NCTAREAS_DESCRIPCION
	END
	,
	CASE 
		WHEN @STRORDER='INIPREV' THEN MANDARENFECHA 
	END

		
	

END
ELSE
BEGIN


SELECT COUNT (NCTAREAS_CODIGO) AS CANT_NCTASKS, SUM(ISNULL(NMCANT,0)) + SUM(ISNULL(NFCANT,0)) + SUM(ISNULL(NRCANT,0)) AS CANTNEWS
INTO #ITASKS
 FROM (
	SELECT DISTINCT NCTAREAS_CODIGO AS NCTAREAS_CODIGO, NM.MENSAJES as NMCANT, NM.ARCHIVOS as NFCANT, NM.RECORDATORIOS as NRCANT 
		FROM VISTA_NCTAREASUSUARIOSMYTASKS T 
	  
	JOIN XML_MODULE_DEFINITIONS MD 
		JOIN XML_MODULEGROUP_DEFINITIONS GD ON GD.MODULEGROUPID=MD.MODULEGROUPID	
	ON TIPO=MD.MODULEID
	LEFT JOIN #TMP_FOROS NM ON NM.CODIGOFORO=T.CODIGOFORO


	WHERE L_CUMPLIDA=0 AND FECHA IS NULL AND (MANDARENFECHA<=GETDATE() OR (SELECT COUNT(CODIGO) FROM IKFOROSNOVEDADES N WHERE CODIGOUSUARIO= @IKCDU AND L_LEIDO=0 AND N.CODIGOFORO=T.CODIGOFORO)>0 )AND CODIGOCARGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO= @IKCDU ) 
	
) AS ITASKS

	
	SET @COUNT= (SELECT TOP 1 CANT_NCTASKS FROM #ITASKS)
	IF (@L_RETURN_RECORDS=1)
	BEGIN
		SELECT * FROM #ITASKS
	END

END

DROP TABLE #TMP_FOROS

RETURN  @COUNT
GO

GO
--SqlScripter----[dbo].[ik_mt_SVGs].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_mt_SVGs]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_mt_SVGs] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_mt_SVGs]
(
		@IKCDU INT
	)

AS
	SET NOCOUNT ON

DECLARE @IKCAT int
DECLARE @BSCAT int

SELECT 	@IKCAT=CATEGORIA, @BSCAT=PERMISOSBSPROC FROM USUARIOS WHERE CODIGO=@IKCDU




IF @IKCAT=0 OR @BSCAT=2
BEGIN
		SELECT SVG_TYPEIMG, BS_SVGID AS SVG_ID, [DESCRIPTION] AS SVGDRAWING_DESCRIPTION, SVG_TYPE AS SVGDRAWING_TYPE 
		FROM VISTA_SVG_DRAWINGS
		WHERE 1=0
		ORDER BY SVGDRAWING_DESCRIPTION
		RETURN
END
ELSE
BEGIN
		SELECT SVG_TYPEIMG, BS_SVGID AS SVG_ID, [DESCRIPTION] AS SVGDRAWING_DESCRIPTION, SVG_TYPE AS SVGDRAWING_TYPE 
		FROM VISTA_SVG_DRAWINGS
		WHERE BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SHOWINMYTASKS=1 AND SEC_LEVEL>0 AND USERID=@IKCDU) 
		OR BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SHOWINMYTASKS=1 AND SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU))
		ORDER BY SVGDRAWING_DESCRIPTION
END

	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_NC_Corte_Evolucion].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_NC_Corte_Evolucion]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_NC_Corte_Evolucion] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- ik_NC_Corte_Evolucion 'Loc_Type', '*', '*','*','*','*','*','1,2','1,2','*'
ALTER PROCEDURE [dbo].[ik_NC_Corte_Evolucion]
(
		@corte nvarchar(400) = 'Loc_Type',
		@filtro_caracter nvarchar(400) = '*',
		@filtro_area nvarchar(400)= '*',
		@filtro_proceso nvarchar(400)= '*',
		@filtro_causa1 nvarchar(400)= '*',
		@filtro_causa2 nvarchar(400)= '*',
		@filtro_causa3 nvarchar(400)= '*',
		@filtro_col_matriz nvarchar(400)= '*',
		@filtro_fila_matriz nvarchar(400)= '*',
		@filtro_contenido_matriz nvarchar(400)= '*'
	)

AS
SET NOCOUNT ON 
	


if @corte is null or len(@corte)=0
set @corte='Loc_Type'

DECLARE @ASTERISCO NVARCHAR(400)
SET @ASTERISCO = '*                                                                                                                                      '

DECLARE @CARACTER NVARCHAR(400)
if @filtro_caracter is null or len(@filtro_caracter)=0
set @filtro_caracter=@ASTERISCO

DECLARE @AREA NVARCHAR(400)
if @filtro_area is null or len(@filtro_area)=0
set @filtro_area=@ASTERISCO

DECLARE @PROCESO NVARCHAR(400)
if @filtro_proceso is null or len(@filtro_proceso)=0
set @filtro_proceso=@ASTERISCO

DECLARE @CAUSA1 NVARCHAR(400)
if @filtro_causa1 is null or len(@filtro_causa1)=0
set @filtro_causa1=@ASTERISCO

DECLARE @CAUSA2 NVARCHAR(400)
if @filtro_causa2 is null or len(@filtro_causa2)=0
set @filtro_causa2=@ASTERISCO

DECLARE @CAUSA3 NVARCHAR(400)
if @filtro_causa3 is null or len(@filtro_causa3)=0
set @filtro_causa3=@ASTERISCO


DECLARE @AREAPERDIDA NVARCHAR(400)
if @filtro_col_matriz is null or len(@filtro_col_matriz)=0
set @filtro_col_matriz=@ASTERISCO

DECLARE @CLASIFICACION NVARCHAR(400)
if @filtro_fila_matriz is null or len(@filtro_fila_matriz)=0
set @filtro_fila_matriz=@ASTERISCO
	
DECLARE @MATRIZ NVARCHAR(400)
if @filtro_contenido_matriz is null or len(@filtro_contenido_matriz)=0
set @filtro_contenido_matriz=@ASTERISCO



			
			CREATE TABLE #TablaT (
				CODIGO int,	
				DESCRIPCION nvarchar(4000),
				DESC_NIVEL1 nvarchar(4000),
				DESC_NIVEL2 nvarchar(4000)
			)

			DECLARE @CODIGO int
			DECLARE @PADRE INT
			DECLARE @DESCRIPCION NVARCHAR(4000)
			DECLARE @CODIGOH int
			DECLARE @NOMBRE NVARCHAR(400)
			DECLARE @NIVEL INT
	
		
			INSERT INTO #TablaT(CODIGO, DESCRIPCION, DESC_NIVEL1, DESC_NIVEL2) 
			SELECT  CODIGO, DESCRIPCION ,'No asignada', 'No asignada' FROM tbl_no_conformidades_causas WHERE NIVEL=3
			UNION
			SELECT CODIGO, 'No asignada','No asignada', DESCRIPCION FROM tbl_no_conformidades_causas WHERE NIVEL=2
			UNION
			SELECT CODIGO, 'No asignada' ,DESCRIPCION, 'No asignada' FROM tbl_no_conformidades_causas WHERE NIVEL=1
		
			DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
			SELECT CODIGO
			FROM tbl_no_conformidades_causas
			WHERE NIVEL = 3
			open CurNodos
			fetch next from CurNodos into @CODIGO
			while @@FETCH_STATUS = 0
			begin				
				SELECT @DESCRIPCION = DESCRIPCION
				FROM tbl_no_conformidades_causas
				WHERE CODIGO = (SELECT CODIGO_PADRE FROM tbl_no_conformidades_causas WHERE CODIGO = @CODIGO)
				UPDATE #TablaT
				SET DESC_NIVEL2 = @DESCRIPCION
				WHERE CODIGO = @CODIGO
				fetch next from CurNodos into @CODIGO
			end
			close CurNodos
			deallocate CurNodos
		
		
			DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
			SELECT CODIGO
			FROM tbl_no_conformidades_causas
			WHERE NIVEL = 2
			open CurNodos
			fetch next from CurNodos into @CODIGO
			while @@FETCH_STATUS = 0
			begin
				SELECT @DESCRIPCION = DESCRIPCION
				FROM tbl_no_conformidades_causas
				WHERE CODIGO = (SELECT CODIGO_PADRE FROM tbl_no_conformidades_causas WHERE CODIGO = @CODIGO)
				UPDATE #TablaT
				SET DESC_NIVEL1 = @DESCRIPCION
				WHERE CODIGO = @CODIGO
				fetch next from CurNodos into @CODIGO
			end
			close CurNodos
			deallocate CurNodos
			DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
			SELECT CODIGO 
			FROM tbl_no_conformidades_causas
			WHERE NIVEL = 3
			Open CurNodos
			fetch next from CurNodos into @CODIGO
			while @@FETCH_STATUS = 0
			begin
				SELECT @DESCRIPCION = DESC_NIVEL1
				FROM #TablaT
				WHERE CODIGO = (SELECT CODIGO_PADRE FROM tbl_no_conformidades_causas WHERE CODIGO = @CODIGO)
				UPDATE #TablaT
				SET DESC_NIVEL1 = @DESCRIPCION
				WHERE CODIGO = @CODIGO
				fetch next from CurNodos into @CODIGO
			end


DECLARE @str nvarchar(4000)

SELECT @str = ' '
IF  (@corte = 'Loc_Type') OR (@corte = 'Loc_Category')
		SET @str = @str + ' SELECT  V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2, V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
							FROM VAR_NOCONFORMIDADES_VIEW '

IF  (@corte = 'Usr_CausaPrimerNivel')  
		
		SET @str = @str + 'SELECT distinct #TablaT.DESC_NIVEL1 AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_CAUSAS_NOCONFORMIDADES 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGONC
			LEFT OUTER JOIN #TablaT ON VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGO_CAUSA = #TablaT.CODIGO  ' 

IF  (@corte = 'Usr_CausaSegundoNivel') 

		SET @str = @str + ' SELECT distinct V_DESCRIPCION AS CAUSA1, #TablaT.DESC_NIVEL2 AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F,
							V_DESCRIPCION AS MATRIZ, 
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_CAUSAS_NOCONFORMIDADES 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGONC
			LEFT OUTER JOIN #TablaT ON VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGO_CAUSA = #TablaT.CODIGO  ' 


IF (@corte = 'Usr_CausaTercerNivel')

	SET @str = @str + ' SELECT distinct V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							 #TablaT.DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_CAUSAS_NOCONFORMIDADES 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGONC
			LEFT OUTER JOIN #TablaT ON VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGO_CAUSA = #TablaT.CODIGO  ' 


IF (@corte = 'Usr_AreaResponsable') 
	
		SET @str = @str + ' SELECT  V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, TBL_AREA_CAUSAS.DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
		FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES
		ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES.CODIGONC
		LEFT OUTER JOIN TBL_AREA_CAUSAS ON  VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES.CODIGOAREA = TBL_AREA_CAUSAS.CODIGO '

IF (@corte = 'Usr_Proceso') 
	
		SET @str = @str + '  SELECT V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							PROC_NODES.DESCRIPTION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
			FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES.CODIGONC
			LEFT OUTER JOIN PROC_NODES 
			ON  VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES.CODIGO_PROCESO = PROC_NODES.PROC_NODESID '
		



IF (@corte = 'Usr_PerdidaConsecuencias') 
BEGIN
		CREATE TABLE #TablaC (
			CODIGO int,	
			DESCRIPCION nvarchar(4000),
		)

		INSERT INTO #TablaC(CODIGO, DESCRIPCION) 
		select DISTINCT varchild_registromatriz_noconformidades.codigoNC, tbl_consecuencias_columnas.DESCRIPCION
		from tbl_consecuencias_columnas
		left outer join tbl_tablasconsecuencias
		on tbl_consecuencias_columnas.codigo = tbl_tablasconsecuencias.codigo_cuadro_columna
		left outer join varchild_registromatriz_noconformidades
		on tbl_tablasconsecuencias.codigo = varchild_registromatriz_noconformidades.codigo_registro_matriz

		SET @str = @str + '  SELECT  V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, #TablaC.DESCRIPCION AS MATRIZ_C, V_DESCRIPCION  AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
		 FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN #TablaC
		ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = #TablaC.CODIGO'

END
IF (@corte = 'Usr_ClasificacionConsecuencias') 
BEGIN
		CREATE TABLE #TablaA (
			CODIGO int,	
			DESCRIPCION nvarchar(4000),
		)

		INSERT INTO #TablaA(CODIGO, DESCRIPCION) 
		select DISTINCT varchild_registromatriz_noconformidades.codigoNC, tbl_consecuencias_filas.DESCRIPCION
		from tbl_consecuencias_filas
		left outer join tbl_tablasconsecuencias
		on tbl_consecuencias_filas.codigo = tbl_tablasconsecuencias.codigo_cuadro_fila
		left outer join varchild_registromatriz_noconformidades
		on tbl_tablasconsecuencias.codigo = varchild_registromatriz_noconformidades.codigo_registro_matriz

		SET @str = @str + ' SELECT 	V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO,  V_DESCRIPCION AS MATRIZ_C, #TablaA.DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
		FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN #TablaA
		ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = #TablaA.CODIGO '

END
IF (@corte = 'Usr_Matriz') 
BEGIN
	SET @str = @str + ' SELECT 	V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C,  V_DESCRIPCION AS MATRIZ_F, 
							tbl_tablasconsecuencias.DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC,SIN_VIENE_DE_AUDIT,SIN_ORIGEN_NC,SIN_TIPO_NC
	FROM VAR_NOCONFORMIDADES_VIEW
	LEFT OUTER JOIN VARCHILD_REGISTROMATRIZ_NOCONFORMIDADES
	ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_REGISTROMATRIZ_NOCONFORMIDADES.CODIGONC
	LEFT OUTER JOIN tbl_tablasconsecuencias
	ON VARCHILD_REGISTROMATRIZ_NOCONFORMIDADES.CODIGO_REGISTRO_MATRIZ = tbl_tablasconsecuencias.CODIGO '

END


--- ************ FILTROS ************ ---	

SET @str = @str + ' WHERE 1=1 '

IF (@filtro_col_matriz <> '*')
BEGIN
		CREATE TABLE #TablaM (
			CODIGO_COL int,
			CODIGO int,	
			DESCRIPCION nvarchar(4000),
		)

		INSERT INTO #TablaM(CODIGO_COL, CODIGO, DESCRIPCION) 
		select DISTINCT tbl_consecuencias_columnas.CODIGO, varchild_registromatriz_noconformidades.codigoNC, tbl_consecuencias_columnas.DESCRIPCION
		from tbl_consecuencias_columnas
		left outer join tbl_tablasconsecuencias
		on tbl_consecuencias_columnas.codigo = tbl_tablasconsecuencias.codigo_cuadro_columna
		left outer join varchild_registromatriz_noconformidades
		on tbl_tablasconsecuencias.codigo = varchild_registromatriz_noconformidades.codigo_registro_matriz
		

		SET @str = @str + 'AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN  
				(	SELECT #TablaM.CODIGO 	
					FROM  #TablaM
					WHERE #TablaM.CODIGO_COL IN ( '+ @filtro_col_matriz +')
				) '

END

IF (@filtro_fila_matriz <> '*')
BEGIN
		CREATE TABLE #TablaFM (
			CODIGO_FILA int,
			CODIGO int,	
			DESCRIPCION nvarchar(4000),
		)

		INSERT INTO #TablaFM(CODIGO_FILA, CODIGO, DESCRIPCION) 
		select DISTINCT tbl_consecuencias_filas.CODIGO, varchild_registromatriz_noconformidades.codigoNC, tbl_consecuencias_filas.DESCRIPCION
		from tbl_consecuencias_filas
		left outer join tbl_tablasconsecuencias
		on tbl_consecuencias_filas.codigo = tbl_tablasconsecuencias.codigo_cuadro_fila
		left outer join varchild_registromatriz_noconformidades
		on tbl_tablasconsecuencias.codigo = varchild_registromatriz_noconformidades.codigo_registro_matriz
		
		SET @str = @str + 'AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
				 (  
					SELECT #TablaFM.CODIGO 
					FROM #TablaFM
					WHERE #TablaFM.CODIGO_FILA IN ('+ @filtro_fila_matriz + ')
				 ) '

END

IF (@filtro_caracter <> '*')
	SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CARACTER = ' + @filtro_caracter


IF (@filtro_area <> '*')
	SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
								( SELECT VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES.CODIGONC
							      FROM VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES
						          LEFT OUTER JOIN TBL_AREA_CAUSAS 
                                  ON  VARCHILD_AREAS_CAUSAS_NOCONFORMIDADES.CODIGOAREA = TBL_AREA_CAUSAS.CODIGO  
								  WHERE TBL_AREA_CAUSAS.CODIGO IN (' + @filtro_area	+ ')
		
						) '


IF (@filtro_proceso <> '*')
	SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
						(	SELECT VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES.CODIGONC
							FROM VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES 
							LEFT OUTER JOIN PROC_NODES 
							ON  VARCHILD_PROCESOSAFECTADOS_NOCONFORMIDADES.CODIGO_PROCESO = PROC_NODES.PROC_NODESID
							WHERE PROC_NODES.PROC_NODESID IN (' + @filtro_proceso + ')
						 ) '

IF (@filtro_contenido_matriz <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN
						(
							SELECT CODIGONC
							FROM VARCHILD_REGISTROMATRIZ_NOCONFORMIDADES
							LEFT OUTER JOIN tbl_tablasconsecuencias
							ON 	VARCHILD_REGISTROMATRIZ_NOCONFORMIDADES.CODIGO_REGISTRO_MATRIZ = tbl_tablasconsecuencias.CODIGO
							WHERE tbl_tablasconsecuencias.CODIGO IN (' + @filtro_contenido_matriz + ')
						)'

IF (@filtro_causa3 <> '*')
	
	SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN
						(
							SELECT CODIGONC
							FROM VARCHILD_CAUSAS_NOCONFORMIDADES
							LEFT OUTER JOIN TBL_NO_CONFORMIDADES_CAUSAS
							ON VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGO_CAUSA = TBL_NO_CONFORMIDADES_CAUSAS.CODIGO
							WHERE TBL_NO_CONFORMIDADES_CAUSAS.NIVEL = 3 
							AND TBL_NO_CONFORMIDADES_CAUSAS.CODIGO IN ( '+ @filtro_causa3 + ') 
						)'

IF (@filtro_causa2 <> '*')
	SET @str = @str + ' 	AND VAR_NOCONFORMIDADES_VIEW.CODIGONC 
							IN (SELECT CODIGONC
								FROM VARCHILD_CAUSAS_NOCONFORMIDADES
								WHERE CODIGO_CAUSA IN ( SELECT CODIGO FROM TBL_NO_CONFORMIDADES_CAUSAS
														WHERE CODIGO_PADRE IN ( '+ @filtro_causa2 +')				
														UNION 
														SELECT CODIGO 
														FROM TBL_NO_CONFORMIDADES_CAUSAS 
														WHERE DESCRIPCION IN ( SELECT DESCRIPCION 
													   							FROM 
																				TBL_NO_CONFORMIDADES_CAUSAS 
																				WHERE CODIGO IN (' + @filtro_causa2 + ')
																				AND (NIVEL = 2 OR NIVEL = 3)
														  					 )
											
													)
							)'


IF (@filtro_causa1 <> '*')
BEGIN  


	CREATE TABLE #TablaCausa(
				CODIGO int,	
				DESCRIPCION nvarchar(4000)
	)
			
	DECLARE @CODIGOC INT
	DECLARE @DESCC NVARCHAR(4000)
	
	INSERT INTO #TablaCausa(CODIGO, DESCRIPCION)
	SELECT CODIGO, DESCRIPCION FROM TBL_NO_CONFORMIDADES_CAUSAS WHERE CODIGO in (2) 

	DECLARE CurNodos1 CURSOR LOCAL FAST_FORWARD for 
	-- Estos son los de nivel 2
	SELECT CODIGO FROM TBL_NO_CONFORMIDADES_CAUSAS
	WHERE CODIGO_PADRE in (2) 
	open CurNodos1
	fetch next from CurNodos1 into @CODIGO
		while @@FETCH_STATUS = 0
			begin				
				INSERT INTO #TablaCausa(CODIGO, DESCRIPCION)
				SELECT CODIGO, DESCRIPCION 
				FROM tbl_no_conformidades_causas
				WHERE CODIGO = @CODIGO


				DECLARE CurNodos2 CURSOR LOCAL FAST_FORWARD for 
				-- Estos son los de nivel 3
				SELECT CODIGO FROM TBL_NO_CONFORMIDADES_CAUSAS
				WHERE CODIGO_PADRE = @CODIGO
				open CurNodos2
				fetch next from CurNodos2 into @CODIGO
				while @@FETCH_STATUS = 0
				begin	
					INSERT INTO #TablaCausa(CODIGO, DESCRIPCION)
					SELECT CODIGO, DESCRIPCION 			
					FROM tbl_no_conformidades_causas
					WHERE CODIGO = @CODIGO	
			
						fetch next from CurNodos2 into @CODIGO
				end
				close CurNodos2
				deallocate CurNodos2

				fetch next from CurNodos1 into @CODIGO
			end
	close CurNodos1
	deallocate CurNodos1

SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
						(	SELECT VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGONC
							FROM VARCHILD_CAUSAS_NOCONFORMIDADES
							LEFT OUTER JOIN #TablaCausa 
							ON VARCHILD_CAUSAS_NOCONFORMIDADES.CODIGO_CAUSA = #TablaCausa.CODIGO  
						)'
	
END		

EXEC (@str)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_NC_Corte_Evolucion_arbol].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ik_NC_Corte_Evolucion_arbol]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_NC_Corte_Evolucion_arbol] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_NC_Corte_Evolucion_arbol]
(
	@corte nvarchar(400) = 'Loc_Type',
	@filtro_caracter nvarchar(400) = '*',
	@filtro_area nvarchar(400)= '*',
	@filtro_proceso nvarchar(400)= '*',
	@filtro_causa nvarchar(400)= '*',
	@filtro_requisito nvarchar(400)= '*'
)
AS
	SET NOCOUNT ON 

	if @corte is null or len(@corte)=0
	set @corte='Loc_Type'

	DECLARE @ASTERISCO NVARCHAR(400)
	SET @ASTERISCO = '*                                                                                                                                      '

	DECLARE @CARACTER NVARCHAR(400)
	if @filtro_caracter is null or len(@filtro_caracter)=0
	set @filtro_caracter=@ASTERISCO

	DECLARE @AREA NVARCHAR(400)
	if @filtro_area is null or len(@filtro_area)=0
	set @filtro_area=@ASTERISCO

	DECLARE @PROCESO NVARCHAR(400)
	if @filtro_proceso is null or len(@filtro_proceso)=0
	set @filtro_proceso=@ASTERISCO

	DECLARE @CAUSA NVARCHAR(400)
	if @filtro_causa is null or len(@filtro_causa)=0
	set @filtro_causa=@ASTERISCO

	DECLARE @REQUISITO NVARCHAR(400)
	if @filtro_requisito is null or len(@filtro_requisito)=0
	set @filtro_requisito=@ASTERISCO
	
---------------------------------------Causas------------------------------------------------------------------------			
	CREATE TABLE #TablaT (
		CODIGO int,	
		DESCRIPCION nvarchar(4000),
		DESC_NIVEL1 nvarchar(4000),
		DESC_NIVEL2 nvarchar(4000)
	)

	DECLARE @CODIGO int
	DECLARE @PADRE INT
	DECLARE @DESCRIPCION NVARCHAR(4000)
	DECLARE @CODIGOH int
	DECLARE @NOMBRE NVARCHAR(400)
	DECLARE @NIVEL INT

	INSERT INTO #TablaT(CODIGO, DESCRIPCION, DESC_NIVEL1, DESC_NIVEL2) 
	SELECT  CODIGO, DESCRIPCION , 'N/A'			, 'N/A'			FROM TBL_NCCC_CAUSAS WHERE NIVEL=3
	UNION
	SELECT	CODIGO, 'N/A'		, 'N/A'			, DESCRIPCION	FROM TBL_NCCC_CAUSAS WHERE NIVEL=2
	UNION
	SELECT	CODIGO, 'N/A'		, DESCRIPCION	, 'N/A'			FROM TBL_NCCC_CAUSAS WHERE NIVEL=1

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_CAUSAS
	WHERE NIVEL = 3
	open CurNodos
	fetch next from CurNodos into @CODIGO
	while @@FETCH_STATUS = 0
	begin				
		SELECT @DESCRIPCION = DESCRIPCION
		FROM TBL_NCCC_CAUSAS
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_CAUSAS WHERE CODIGO = @CODIGO)
		UPDATE #TablaT
		SET DESC_NIVEL2 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodos into @CODIGO
	end
	close CurNodos
	deallocate CurNodos

	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_CAUSAS
	WHERE NIVEL = 2
	open CurNodos
	fetch next from CurNodos into @CODIGO
	while @@FETCH_STATUS = 0
	begin
		SELECT @DESCRIPCION = DESCRIPCION
		FROM TBL_NCCC_CAUSAS
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_CAUSAS WHERE CODIGO = @CODIGO)
		UPDATE #TablaT
		SET DESC_NIVEL1 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodos into @CODIGO
	end
	close CurNodos
	deallocate CurNodos
	DECLARE CurNodos CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO 
	FROM TBL_NCCC_CAUSAS
	WHERE NIVEL = 3
	Open CurNodos
	fetch next from CurNodos into @CODIGO
	while @@FETCH_STATUS = 0
	begin
		SELECT @DESCRIPCION = DESC_NIVEL1
		FROM #TablaT
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_CAUSAS WHERE CODIGO = @CODIGO)
		UPDATE #TablaT
		SET DESC_NIVEL1 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodos into @CODIGO
	end

---------------------------------------Requisitos Normativos------------------------------------------------------------------------
	CREATE TABLE #TablaReq (
		CODIGO int,	
		DESCRIPCION nvarchar(4000),
		DESC_NIVEL1 nvarchar(4000),
		DESC_NIVEL2 nvarchar(4000)
	)

	INSERT INTO #TablaReq(CODIGO, DESCRIPCION, DESC_NIVEL1, DESC_NIVEL2) 
	SELECT  CODIGO, DESCRIPCION , 'N/A'			, 'N/A'			FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE NIVEL=3
	UNION
	SELECT	CODIGO, 'N/A'		, 'N/A'			, DESCRIPCION	FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE NIVEL=2
	UNION
	SELECT	CODIGO, 'N/A'		, DESCRIPCION	, 'N/A'			FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE NIVEL=1

	DECLARE CurNodosReq CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_REQUISITOSNORMATIVOS
	WHERE NIVEL = 3
	open CurNodosReq
	fetch next from CurNodosReq into @CODIGO
	while @@FETCH_STATUS = 0
	begin				
		SELECT @DESCRIPCION = DESCRIPCION
		FROM TBL_NCCC_REQUISITOSNORMATIVOS
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO = @CODIGO)
		UPDATE #TablaReq
		SET DESC_NIVEL2 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodosReq into @CODIGO
	end
	close CurNodosReq
	deallocate CurNodosReq

	DECLARE CurNodosReq CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO
	FROM TBL_NCCC_REQUISITOSNORMATIVOS
	WHERE NIVEL = 2
	open CurNodosReq
	fetch next from CurNodosReq into @CODIGO
	while @@FETCH_STATUS = 0
	begin
		SELECT @DESCRIPCION = DESCRIPCION
		FROM TBL_NCCC_REQUISITOSNORMATIVOS
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO = @CODIGO)
		UPDATE #TablaReq
		SET DESC_NIVEL1 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodosReq into @CODIGO
	end
	close CurNodosReq
	deallocate CurNodosReq
	DECLARE CurNodosReq CURSOR LOCAL FAST_FORWARD for 
	SELECT CODIGO 
	FROM TBL_NCCC_REQUISITOSNORMATIVOS
	WHERE NIVEL = 3
	Open CurNodosReq
	fetch next from CurNodosReq into @CODIGO
	while @@FETCH_STATUS = 0
	begin
		SELECT @DESCRIPCION = DESC_NIVEL1
		FROM #TablaReq
		WHERE CODIGO = (SELECT CODIGO_PADRE FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO = @CODIGO)
		UPDATE #TablaReq
		SET DESC_NIVEL1 = @DESCRIPCION
		WHERE CODIGO = @CODIGO
		fetch next from CurNodosReq into @CODIGO
	end
--------------------------------------------------

	DECLARE @str nvarchar(4000)

	SELECT @str = ' '
	IF  (@corte = 'Loc_Type') OR (@corte = 'Loc_Category')
		SET @str = @str + ' SELECT V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2, V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3,  V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
							FROM VAR_NOCONFORMIDADES_VIEW '


	IF  (@corte = 'Usr_CausaPrimerNivel')  
		SET @str = @str + 'SELECT  distinct #TablaT.DESC_NIVEL1 AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_NCCC_CAUSAS 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_CAUSAS.CODIGONC
			LEFT OUTER JOIN #TablaT ON VARCHILD_NCCC_CAUSAS.CODIGO_CAUSA = #TablaT.CODIGO  ' 

	IF  (@corte = 'Usr_CausaSegundoNivel') 
		SET @str = @str + ' SELECT distinct V_DESCRIPCION AS CAUSA1, #TablaT.DESC_NIVEL2 AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3,  V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F,
							V_DESCRIPCION AS MATRIZ, 
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_NCCC_CAUSAS 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_CAUSAS.CODIGONC
			LEFT OUTER JOIN #TablaT ON VARCHILD_NCCC_CAUSAS.CODIGO_CAUSA = #TablaT.CODIGO  ' 

	IF (@corte = 'Usr_CausaTercerNivel')
		SET @str = @str + ' SELECT distinct V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
								 #TablaT.DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3,  V_DESCRIPCION AS AREA,
								V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
								V_DESCRIPCION AS MATRIZ,
								V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
								CARACTER, FECHADETECCION, TIPONC
				FROM VAR_NOCONFORMIDADES_VIEW
				LEFT OUTER JOIN VARCHILD_NCCC_CAUSAS 
				ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_CAUSAS.CODIGONC
				LEFT OUTER JOIN #TablaT ON VARCHILD_NCCC_CAUSAS.CODIGO_CAUSA = #TablaT.CODIGO  ' 


	IF  (@corte = 'Usr_RequisitoPrimerNivel')  
		SET @str = @str + 'SELECT distinct #TablaReq.DESC_NIVEL1 AS REQ1, V_DESCRIPCION AS REQ2,
							V_DESCRIPCION AS REQ3, V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_NCCC_REQNORMATIVOS 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_REQNORMATIVOS.CODIGONC
			LEFT OUTER JOIN #TablaReq ON VARCHILD_NCCC_REQNORMATIVOS.CODIGO_REQUISITO_NORMATIVO = #TablaReq.CODIGO  ' 

	IF  (@corte = 'Usr_RequisitoSegundoNivel') 
		SET @str = @str + ' SELECT distinct V_DESCRIPCION AS REQ1, #TablaReq.DESC_NIVEL2 AS REQ2,
							V_DESCRIPCION AS REQ3, V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F,
							V_DESCRIPCION AS MATRIZ, 
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
			FROM VAR_NOCONFORMIDADES_VIEW
			LEFT OUTER JOIN VARCHILD_NCCC_REQNORMATIVOS 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_REQNORMATIVOS.CODIGONC
			LEFT OUTER JOIN #TablaReq ON VARCHILD_NCCC_REQNORMATIVOS.CODIGO_REQUISITO_NORMATIVO = #TablaReq.CODIGO  ' 

	IF (@corte = 'Usr_RequisitoTercerNivel')
		SET @str = @str + ' SELECT distinct V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2,
								 #TablaReq.DESCRIPCION AS REQ3, V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
								V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS AREA,
								V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
								V_DESCRIPCION AS MATRIZ,
								V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
								CARACTER, FECHADETECCION, TIPONC
				FROM VAR_NOCONFORMIDADES_VIEW
				LEFT OUTER JOIN VARCHILD_NCCC_REQNORMATIVOS 
				ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_REQNORMATIVOS.CODIGONC
				LEFT OUTER JOIN #TablaReq ON VARCHILD_NCCC_REQNORMATIVOS.CODIGO_REQUISITO_NORMATIVO = #TablaReq.CODIGO  '
				
				
	IF (@corte = 'Usr_AreaResponsable') 
		SET @str = @str + ' SELECT  V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3,  TBL_AREA_CAUSAS.DESCRIPCION AS AREA,
							V_DESCRIPCION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
		FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN VARCHILD_NCCC_AREAS
		ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_AREAS.CODIGONC
		LEFT OUTER JOIN TBL_AREA_CAUSAS ON  VARCHILD_NCCC_AREAS.CODIGOAREA = TBL_AREA_CAUSAS.CODIGO '


	IF (@corte = 'Usr_Proceso') 
		SET @str = @str + '  SELECT V_DESCRIPCION AS CAUSA1, V_DESCRIPCION AS CAUSA2,
							V_DESCRIPCION AS CAUSA3, V_DESCRIPCION AS REQ1, V_DESCRIPCION AS REQ2, V_DESCRIPCION AS REQ3,  V_DESCRIPCION AS AREA,
							PROC_NODES.DESCRIPTION AS PROCESO, V_DESCRIPCION AS MATRIZ_C, V_DESCRIPCION AS MATRIZ_F, 
							V_DESCRIPCION AS MATRIZ,
							V_CODIGO, V_ESTADO, V_DESCRIPCION, V_CATEGORIADESC, VAR_NOCONFORMIDADES_VIEW.CODIGONC, 
							CARACTER, FECHADETECCION, TIPONC
			FROM VAR_NOCONFORMIDADES_VIEW LEFT OUTER JOIN VARCHILD_NCCC_PROCESOS 
			ON VAR_NOCONFORMIDADES_VIEW.CODIGONC = VARCHILD_NCCC_PROCESOS.CODIGONC
			LEFT OUTER JOIN PROC_NODES 
			ON  VARCHILD_NCCC_PROCESOS.CODIGO_PROCESO = PROC_NODES.PROC_NODESID '

--- ************ FILTROS ************ ---	

	SET @str = @str + ' WHERE 1=1 '

	IF (@filtro_caracter <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CARACTER = ' + @filtro_caracter

	IF (@filtro_area <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
									( SELECT VARCHILD_NCCC_AREAS.CODIGONC
									  FROM VARCHILD_NCCC_AREAS
									  LEFT OUTER JOIN TBL_AREA_CAUSAS 
									  ON  VARCHILD_NCCC_AREAS.CODIGOAREA = TBL_AREA_CAUSAS.CODIGO  
									  WHERE TBL_AREA_CAUSAS.CODIGO IN (' + @filtro_area	+ ')
			
							) '

	IF (@filtro_proceso <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN 
							(	SELECT VARCHILD_NCCC_PROCESOS.CODIGONC
								FROM VARCHILD_NCCC_PROCESOS 
								LEFT OUTER JOIN PROC_NODES 
								ON  VARCHILD_NCCC_PROCESOS.CODIGO_PROCESO = PROC_NODES.PROC_NODESID
								WHERE PROC_NODES.PROC_NODESID IN (' + @filtro_proceso + ')
							 ) '

	IF (@filtro_causa <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN
							(
								SELECT CODIGONC
								FROM VARCHILD_NCCC_CAUSAS
								WHERE VARCHILD_NCCC_CAUSAS.CODIGO_CAUSA IN ( '+ @filtro_causa + ')
							)'	

	IF (@filtro_requisito <> '*')
		SET @str = @str + ' AND VAR_NOCONFORMIDADES_VIEW.CODIGONC IN
							(
								SELECT CODIGONC
								FROM VARCHILD_NCCC_REQNORMATIVOS
								WHERE VARCHILD_NCCC_REQNORMATIVOS.CODIGO_REQUISITO_NORMATIVO IN ( '+ @filtro_requisito + ') 
							)'

	EXEC (@str)
	RETURN
GO

GO
--SqlScripter----[dbo].[ik_nc_forum_remove].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_nc_forum_remove]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_nc_forum_remove] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_nc_forum_remove]
@NCPCODE INT,
@CODIGOFORO INT,
@CODIGOUSUARIO INT,
@HISTORY_MESSAGE VARCHAR(1000),
@NOMBREUSUARIO VARCHAR(50) 
AS
BEGIN

   IF(SELECT C.CODIGOUSUARIO FROM NCMAINPROD N JOIN CARGOSUSUARIOS C
   ON C.CODIGOCARGO = N.CODIGOCARGOADMINISTRADOR
   WHERE N.CODIGO = @NCPCODE) <> @CODIGOUSUARIO
   begin
      DELETE FROM IKFOROSNOVEDADES
      WHERE L_LEIDO = 0 and CODIGOFORO = @CODIGOFORO and CODIGOUSUARIO = @CODIGOUSUARIO
      DELETE FROM IKFOROSSUSCRIPTORES
      WHERE CODIGOFORO = @CODIGOFORO and CODIGOUSUARIO = @CODIGOUSUARIO
      INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
   VALUES(@CODIGOUSUARIO,GetDate(),@HISTORY_MESSAGE,@NOMBREUSUARIO,1)
   end




END
GO

GO
--SqlScripter----[dbo].[IK_NCCC_EditStage].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[IK_NCCC_EditStage]') IS NULL EXEC('CREATE PROCEDURE [dbo].[IK_NCCC_EditStage] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[IK_NCCC_EditStage]
(
	@CODIGO_NC INT
	, @VAR_RESTRICTION_LEVEL INT 
	, @CODIGO_NCETAPAS INT
)
AS
IF ((SELECT COUNT(*) FROM NCMAINPROD WHERE CODIGO = @CODIGO_NC AND ETAPAS_CON_VENCIMIENTO = 1) > 0) 
BEGIN 
	IF (@VAR_RESTRICTION_LEVEL = 3) 
	BEGIN
		IF ((SELECT COUNT(*) FROM NCETAPAS WHERE CODIGONC = @CODIGO_NC  AND NCETAPAS.CODIGO= @CODIGO_NCETAPAS AND SYSTEM_INICIADA = 1) > 0) 
			SELECT '' AS INVISIBLE 
		ELSE 
			SELECT 'NOTAS_DE_CUMPLIMIENTO' AS INVISIBLE
	END
	IF (@VAR_RESTRICTION_LEVEL = 2) 
	BEGIN
		IF ((SELECT COUNT(*) FROM NCETAPAS WHERE CODIGONC = @CODIGO_NC  AND NCETAPAS.CODIGO= @CODIGO_NCETAPAS AND SYSTEM_INICIADA = 1) > 0) 
			SELECT 'CODIGO_CARGO_RESPONSABLE' AS INVISIBLE 
		ELSE 
			SELECT 'CODIGO_CARGO_RESPONSABLE,NOTAS_DE_CUMPLIMIENTO' AS INVISIBLE
	END
	IF (@VAR_RESTRICTION_LEVEL = 1) 
	BEGIN
		IF ((SELECT COUNT(*) FROM NCETAPAS WHERE CODIGONC = @CODIGO_NC AND NCETAPAS.CODIGO = @CODIGO_NCETAPAS AND SYSTEM_INICIADA = 1) > 0) 
			SELECT 'FECHA_VENCIMIENTO,CODIGO_CARGO_RESPONSABLE,DESCRIPCION' AS INVISIBLE 
		ELSE 
			SELECT 'FECHA_VENCIMIENTO,CODIGO_CARGO_RESPONSABLE,DESCRIPCION,NOTAS_DE_CUMPLIMIENTO' AS INVISIBLE 
		END 
	END
ELSE 
BEGIN 
	SELECT 'FECHA_VENCIMIENTO,CODIGO_CARGO_RESPONSABLE,NOTAS_DE_CUMPLIMIENTO' AS INVISIBLE 
END
GO

GO
--SqlScripter----[dbo].[IK_NCCC_GetEtapasResponsable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[IK_NCCC_GetEtapasResponsable]') IS NULL EXEC('CREATE PROCEDURE [dbo].[IK_NCCC_GetEtapasResponsable] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
-- IK_NCCC_GetEtapasResponsable 11362, 6
ALTER PROCEDURE [dbo].[IK_NCCC_GetEtapasResponsable]
(
	@CODIGO_USUARIO INT,
	@MODULE_ID INT
)
AS
BEGIN	
	SELECT 	DISTINCT  ETAPA AS CODIGO, DESCRIPCIONCORTA AS DESCRIPCION
	FROM	(
				SELECT 	T_NCETAPAS.ETAPA, T_NCETAPAS.DESCRIPCIONCORTA
				FROM	NC_WF_ETAPAS T1
							INNER JOIN NCETAPAS T_NCETAPAS
								ON T1.CODIGO_NCETAPAS = T_NCETAPAS.CODIGO
							LEFT OUTER JOIN VISTA_CARGOSUSUARIOS T2
								ON T1.CODIGO_CARGO_RESPONSABLE = T2.CODIGOCARGO
				WHERE	T_NCETAPAS.TIPO = @MODULE_ID AND T1.CODIGO_CARGO_RESPONSABLE IS NOT NULL AND T2.CODIGOUSUARIO = @CODIGO_USUARIO
			) T
	ORDER BY CODIGO
END
GO

GO
--SqlScripter----[dbo].[ik_ncFiles_getCategories].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_ncFiles_getCategories]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_ncFiles_getCategories] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_ncFiles_getCategories]
(
		@MODULEID int,
		@NCPCODE int,
		@NCTCODE int,
		@FILEID int,
		@IKCDU int,
		@IKCCUR int		
	)

AS
SET NOCOUNT ON 
	


SELECT * FROM NC_FILESCATEGORIES
WHERE 
CLASSES LIKE CONVERT(nvarchar(10),@MODULEID)--solo
OR
CLASSES LIKE CONVERT(nvarchar(10),@MODULEID) + ',%'--primero
OR 
CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) --ultimo
OR 
CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) + ',%' --medio
OR 
CLASSES IS NULL--todas las clases

/* VER SI HACE FALTA SELECCIONAR CATEGORIA ACTUAL
OR 
TASKSCATEGORIES_ID IN (SELECT TASKSCATEGORIES_ID FROM NCTAREAS WHERE CODIGO=@NCTCODE)--cat actual de la tarea
*/
ORDER BY [DESCRIPTION]
	
	
    
	 
RETURN
GO

GO
--SqlScripter----[dbo].[ik_nctasks_do_upd_casc_cond].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_nctasks_do_upd_casc_cond]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_nctasks_do_upd_casc_cond] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_nctasks_do_upd_casc_cond]
(
@TaskId int, @CheckMilestoneId int
)
AS

SET DATEFORMAT YMD

DECLARE @I INT, @MAXI INT, @CODIGO INT, @TIPO_TAREA INT, @CODIGOTAREACONDICIONAL INT, @CODIGOTAREACONTRIBUYE INT,  @CONTRIBUYE_ORIG INT
DECLARE @FECHALIMITE datetime
declare @startDate datetime
declare @endDate datetime
declare @msstartDate datetime
declare @msendDate datetime

BEGIN TRY
	CREATE TABLE #TMP_HITOS (CODIGO INT)
END TRY
BEGIN CATCH
END CATCH


CREATE TABLE #AUX (id INT IDENTITY(1,1), CODIGO INT, TIPO_TAREA INT, CODIGOTAREACONDICIONAL INT, CODIGOTAREACONTRIBUYE INT, CheckMilestoneId INT);

WITH LISTA (CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, CheckMilestoneId)
AS (
SELECT CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, @CheckMilestoneId FROM NCTAREAS WHERE CODIGO=@TaskId
   UNION ALL
   SELECT T.CODIGO, T.TIPO_TAREA, T.CODIGOTAREACONDICIONAL, T.CODIGOTAREACONTRIBUYE, -1 FROM NCTAREAS T INNER JOIN LISTA ON T.CODIGOTAREACONDICIONAL=LISTA.CODIGO 
   )
INSERT INTO #AUX SELECT  * FROM LISTA OPTION (MAXRECURSION 400);

SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)

WHILE @I <= @MAXI
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@I
	SET @FECHALIMITE = (SELECT FECHALIMITE FROM NCTAREAS  WHERE CODIGO =  @CODIGO)
	SET @I = @I+1

	UPDATE NCTAREAS
	SET MANDARENFECHA = @FECHALIMITE,
	FECHALIMITE =
		(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @FECHALIMITE+DIASVENCIMIENTO
			  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@FECHALIMITE,DIASVENCIMIENTO)
			  ELSE FECHALIMITE END)
	WHERE CODIGOTAREACONDICIONAL=@CODIGO

END



SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)

WHILE @MAXI >= @I
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@MAXI
	SET @MAXI = @MAXI-1
	
	if not @CODIGOTAREACONTRIBUYE is null
	begin
		IF (SELECT COUNT(*) FROM #TMP_HITOS WHERE #TMP_HITOS.CODIGO=@CODIGOTAREACONTRIBUYE)=0
		BEGIN
			INSERT INTO #TMP_HITOS(CODIGO) VALUES(@CODIGOTAREACONTRIBUYE)

			set @startDate = (SELECT MIN(MANDARENFECHA) FROM NCTAREAS T2 WHERE T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
			set @endDate  = (SELECT MAX(FECHALIMITE) FROM NCTAREAS T2 WHERE T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)

			if not @startDate is NULL and not @endDate is NULL 
			begin
				UPDATE NCTAREAS
				SET MANDARENFECHA = @startDate,
					FECHALIMITE = @endDate
				WHERE CODIGO=@CODIGOTAREACONTRIBUYE
				
				UPDATE NCTAREAS
				SET MANDARENFECHA = @endDate,
				FECHALIMITE =
					(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @endDate+DIASVENCIMIENTO
						  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@endDate,DIASVENCIMIENTO)
						  ELSE FECHALIMITE END)
				WHERE CODIGOTAREACONDICIONAL=@CODIGOTAREACONTRIBUYE

				exec dbo.ik_nctasks_do_upd_casc_cond @CODIGOTAREACONTRIBUYE,-1
			end
		END


	end
END



if @CheckMilestoneId <> -1 
begin
	set @CODIGOTAREACONTRIBUYE = @CheckMilestoneId

		set @startDate = (SELECT MIN(MANDARENFECHA) FROM NCTAREAS T2 WHERE
			T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
		set @endDate  = (SELECT MAX(FECHALIMITE) FROM NCTAREAS T2 WHERE
			T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
	
		set @msstartDate = (SELECT MANDARENFECHA FROM NCTAREAS WHERE
			CODIGO = @CODIGOTAREACONTRIBUYE)
		set @msendDate  = (SELECT FECHALIMITE FROM NCTAREAS WHERE
			CODIGO = @CODIGOTAREACONTRIBUYE)
			
		if not @startDate is NULL and not @endDate is NULL 
		begin
		UPDATE NCTAREAS
		SET MANDARENFECHA = @startDate,
			FECHALIMITE = @endDate
		WHERE CODIGO=@CODIGOTAREACONTRIBUYE
		exec dbo.ik_nctasks_do_upd_casc_cond @CODIGOTAREACONTRIBUYE,-1
		end
		else
		begin
		UPDATE NCTAREAS
		SET MANDARENFECHA = FECHALIMITE
		WHERE CODIGO=@CODIGOTAREACONTRIBUYE
		end
end





DROP TABLE #AUX

RETURN
GO

GO
--SqlScripter----[dbo].[ik_nctasks_getCategories].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_nctasks_getCategories]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_nctasks_getCategories] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_nctasks_getCategories]
(
		@MODULEID int,
		@NCPCODE int,
		@NCTCODE int,
		@IKCDU int,
		@IKCCUR int,
		@ISPROTOTYPE tinyint
	)

AS
SET NOCOUNT ON 
	

IF @ISPROTOTYPE=0
BEGIN
	SELECT * FROM TASKSCATEGORIES 
	WHERE 
	CLASSES LIKE CONVERT(nvarchar(10),@MODULEID)--solo
	OR
	CLASSES LIKE CONVERT(nvarchar(10),@MODULEID) + ',%'--primero
	OR 
	CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) --ultimo
	OR 
	CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) + ',%' --medio
	OR 
	CLASSES IS NULL--todas las clases
	OR 
	TASKSCATEGORIES_ID IN (SELECT TASKSCATEGORIES_ID FROM NCTAREAS WHERE CODIGO=@NCTCODE)--cat actual de la tarea

	ORDER BY [DESCRIPTION]
END
ELSE
BEGIN
	
	SELECT @MODULEID=VAR_TPROT.VAR_TPROT_CLASS FROM VAR_TPROT WHERE CODIGONC=@NCPCODE

	SELECT * FROM TASKSCATEGORIES 
	WHERE 
	CLASSES LIKE CONVERT(nvarchar(10),@MODULEID)--solo
	OR
	CLASSES LIKE CONVERT(nvarchar(10),@MODULEID) + ',%'--primero
	OR 
	CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) --ultimo
	OR 
	CLASSES LIKE '%, ' + CONVERT(nvarchar(10),@MODULEID) + ',%' --medio
	OR 
	CLASSES IS NULL--todas las clases
	OR 
	TASKSCATEGORIES_ID IN (SELECT TASKSCATEGORIES_ID FROM TPROT_TASK WHERE CODIGO=@NCTCODE)--cat actual de la tarea

	ORDER BY [DESCRIPTION]

END


	
	
RETURN
GO

GO
--SqlScripter----[dbo].[ik_nctasks_sim_upd_casc_cond].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_nctasks_sim_upd_casc_cond]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_nctasks_sim_upd_casc_cond] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_nctasks_sim_upd_casc_cond]
(
@TaskId int, @CheckMilestoneId int
)
AS
SET DATEFORMAT YMD

DECLARE @I INT, @MAXI INT, @CODIGO INT, @TIPO_TAREA INT, @CODIGOTAREACONDICIONAL INT, @CODIGOTAREACONTRIBUYE INT,  @CONTRIBUYE_ORIG INT
DECLARE @FECHALIMITE datetime
declare @startDate datetime
declare @endDate datetime


BEGIN TRY
	CREATE TABLE #TMP_HITOS (CODIGO INT)
END TRY
BEGIN CATCH
END CATCH


CREATE TABLE #AUX (id INT IDENTITY(1,1), CODIGO INT, TIPO_TAREA INT, CODIGOTAREACONDICIONAL INT, CODIGOTAREACONTRIBUYE INT, CheckMilestoneId INT);

WITH LISTA (CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, CheckMilestoneId)
AS (SELECT CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, @CheckMilestoneId FROM NCTAREAS WHERE CODIGO=@TaskId
   UNION ALL
   SELECT T.CODIGO, T.TIPO_TAREA, T.CODIGOTAREACONDICIONAL, T.CODIGOTAREACONTRIBUYE, -1 FROM NCTAREAS T INNER JOIN LISTA ON T.CODIGOTAREACONDICIONAL=LISTA.CODIGO
   )
INSERT INTO #AUX SELECT  * FROM LISTA  OPTION (MAXRECURSION 400);


SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)

WHILE @I <= @MAXI
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@I
	SET @FECHALIMITE = (SELECT PENDDATE FROM NCTAREAS  WHERE CODIGO =  @CODIGO)
	SET @I = @I+1
	
	

	UPDATE NCTAREAS
	SET PSTARTDATE = @FECHALIMITE,
	PENDDATE =
		(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @FECHALIMITE+DIASVENCIMIENTO
			  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@FECHALIMITE,DIASVENCIMIENTO)
			  ELSE DATEADD(d,DATEDIFF(d,MANDARENFECHA,FECHALIMITE),@FECHALIMITE) END)
	WHERE CODIGOTAREACONDICIONAL=@CODIGO

END

SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)
WHILE @MAXI >= @I
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@MAXI
	SET @MAXI = @MAXI-1


	if not @CODIGOTAREACONTRIBUYE is null
	begin


		IF (SELECT COUNT(*) FROM #TMP_HITOS WHERE #TMP_HITOS.CODIGO=@CODIGOTAREACONTRIBUYE)=0
		BEGIN
			INSERT INTO #TMP_HITOS(CODIGO) VALUES(@CODIGOTAREACONTRIBUYE)

			set @startDate = (SELECT MIN(PSTARTDATE) FROM NCTAREAS T2 WHERE
				T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)

			set @endDate  = (SELECT MAX(PENDDATE) FROM NCTAREAS T2 WHERE
				T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
		
			if not @startDate is NULL and not @endDate is NULL 
			begin
				UPDATE NCTAREAS
				SET PSTARTDATE = @startDate,
					PENDDATE = @endDate
				WHERE CODIGO=@CODIGOTAREACONTRIBUYE	

				UPDATE NCTAREAS
				SET PSTARTDATE =@endDate,
				PENDDATE =
					(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @endDate+DIASVENCIMIENTO
						  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@endDate,DIASVENCIMIENTO)
						  ELSE DATEADD(d,DATEDIFF(d,MANDARENFECHA,FECHALIMITE),@endDate) END)
				WHERE CODIGOTAREACONDICIONAL=@CODIGOTAREACONTRIBUYE


				exec dbo.ik_nctasks_sim_upd_casc_cond @CODIGOTAREACONTRIBUYE,-1
			end
		END
	end
END

RETURN
GO

GO
--SqlScripter----[dbo].[ik_nctasks_upd_casc_cond].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_nctasks_upd_casc_cond]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_nctasks_upd_casc_cond] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_nctasks_upd_casc_cond]
(
@TaskId int, @CheckMilestoneId int
)
AS

exec dbo.[ik_nctasks_do_upd_casc_cond] @TaskId, @CheckMilestoneId
declare @codIssue int;
set @codIssue = (SELECT CODIGONC FROM NCTAREAS WHERE CODIGO=@TaskId);
exec dbo.[ik_tasks_simulate] @codIssue

RETURN
GO

GO
--SqlScripter----[dbo].[IK_OBJETIVOSNUM_INGDATOS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[IK_OBJETIVOSNUM_INGDATOS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[IK_OBJETIVOSNUM_INGDATOS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[IK_OBJETIVOSNUM_INGDATOS]
(@CodIssue INT)  AS

DECLARE @FECHADESDE DATETIME
DECLARE @FECHAHASTA DATETIME
DECLARE @FECHAHASTAOBJ DATETIME
DECLARE @FECHAHASTADATOS DATETIME
DECLARE @MONTHS INT
DECLARE @C  INT


SET @FECHADESDE = ( SELECT FECHA_ESTADOINICIAL  FROM VAR_OBJETIVOSNUM_VIEW WHERE CODIGONC = @CodIssue)
SET @FECHAHASTADATOS = ( SELECT MAX(FECHA)   FROM VAR_DATOS_VIEW  WHERE CODIGO_OBJETIVO = @CodIssue )
SET @FECHAHASTAOBJ = ( SELECT MAX(FECHA_ESTADOESPERADO)   FROM VAR_OBJETIVOSNUM_VIEW  WHERE CODIGONC = @CodIssue )

IF @FECHAHASTAOBJ >=@FECHAHASTADATOS
	SET @FECHAHASTA = @FECHAHASTAOBJ
ELSE
	SET @FECHAHASTA = @FECHAHASTADATOS
	

SET @MONTHS = DATEDIFF(day,@FECHADESDE,@FECHAHASTA)
SET @C = 1



CREATE TABLE #OBJTMP ( FECHA DATETIME,CODIGO INT, VALOR FLOAT, TYPE VARCHAR(20) )

INSERT INTO  #OBJTMP SELECT  @FECHADESDE  AS FECHA, @CodIssue AS CODIGO_OBJETIVO, NULL  AS VALOR,'  ZZZ' as TYPE 

WHILE @C<= @MONTHS
BEGIN		
	INSERT INTO  #OBJTMP SELECT DATEADD(day,@C, @FECHADESDE) AS FECHA, @CodIssue AS CODIGO_OBJETIVO, NULL  AS VALOR,'  ZZZ' as TYPE 
	SET @C = @C + 1
	PRINT @C
END

INSERT INTO  #OBJTMP  SELECT FECHA_ESTADOINICIAL AS FECHA, V_CODIGO AS CODIGO_OBJETIVO, ESTADO_INICIAL AS VALOR, '  Projected' as TYPE 
  FROM VAR_OBJETIVOSNUM_VIEW WHERE V_CODIGO = @CodIssue 


INSERT INTO  #OBJTMP SELECT VAR_DATOS_VIEW.FECHA, VAR_DATOS_VIEW.CODIGO_OBJETIVO,VAR_DATOS_VIEW.VALOR, ' Actual' as TYPE  FROM VAR_DATOS_VIEW
 INNER JOIN VAR_OBJETIVOSNUM_VIEW ON VAR_OBJETIVOSNUM_VIEW.V_CODIGO = VAR_DATOS_VIEW.CODIGO_OBJETIVO 
 WHERE VAR_OBJETIVOSNUM_VIEW.FECHA_ESTADOINICIAL  <=  VAR_DATOS_VIEW.FECHA AND CODIGO_OBJETIVO =  @CodIssue AND
 VAR_OBJETIVOSNUM_VIEW.V_ESTADO <> 3


INSERT INTO  #OBJTMP SELECT FECHA_ESTADOESPERADO AS FECHA, V_CODIGO AS CODIGO_OBJETIVO, ESTADO_ESPERADO AS VALOR,'  Projected' as TYPE 
 FROM VAR_OBJETIVOSNUM_VIEW WHERE V_CODIGO =  @CodIssue

SELECT * FROM #OBJTMP ORDER BY FECHA, TYPE
GO

GO
--SqlScripter----[dbo].[ik_ORG_Composite2SinglePos].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_ORG_Composite2SinglePos]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_ORG_Composite2SinglePos] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_ORG_Composite2SinglePos]
(
		@CompositePositionNodeId int,
		@Cookie nvarchar(50) = '', @Success tinyint = 0 OUTPUT
	)

AS
	 SET NOCOUNT ON 


IF (SELECT COUNT(CODIGO) FROM ORGANIGRAMA WHERE CODIGO=@CompositePositionNodeId) = 0
BEGIN
	SET @Success = 0
	RAISERROR('@CompositePositionNodeId: CHECK: FAILURE (%u). NODE DOESN´T EXSIST.',16,1,@CompositePositionNodeId)
	RETURN(-2)
END


IF (SELECT TIPO FROM ORGANIGRAMA WHERE CODIGO=@CompositePositionNodeId) <> 5
BEGIN
	SET @Success = 0
	RAISERROR('ik_ORG_CompositePosition2Position: CHECK: FAILURE (%u). THE SPECIFIED NODE NOT BELONGS TO A COMPOSITE POSITION.',16,1,@CompositePositionNodeId)
	RETURN(-2)
END

DECLARE @LastError int
SET @LastError = 0

BEGIN TRANSACTION

DELETE WEBGROUPMEMBERS 
WHERE CODIGOUSUARIO=(SELECT CODIGOUSUARIO FROM CARGOSUSUARIOS WHERE CODIGOCARGO = @CompositePositionNodeId)
AND CODIGOGRUPO = (SELECT TOP 1 CODIGOUSUARIO AS CODIGOGRUPO FROM CARGOSUSUARIOS 
WHERE CODIGOCARGO = 
	(SELECT TOP 1 CODIGO FROM ORGANIGRAMA WHERE TIPO = 4 AND 
		DESCRIPCION LIKE (SELECT TOP 1 DESCRIPCION FROM ORGANIGRAMA WHERE CODIGO = (SELECT TOP 1 CODIGORAIZ FROM ORGANIGRAMA WHERE CODIGO=@CompositePositionNodeId))))



UPDATE ORGANIGRAMA SET 
TIPO=1, 
CODIGOPADRE=
(SELECT TOP 1 CODIGO FROM ORGANIGRAMA WHERE 
CODIGORAIZ=0 AND 
CODIGOPADRE=0 AND 
ORDEN=-100000) ,
CODIGORAIZ=
(SELECT TOP 1 CODIGO FROM ORGANIGRAMA WHERE 
CODIGORAIZ=0 AND 
CODIGOPADRE=0 AND 
ORDEN=-100000),
CAMINO = 'Organization\' + (SELECT TOP 1 DESCRIPCION FROM ORGANIGRAMA WHERE CODIGO=@CompositePositionNodeId )
WHERE CODIGO = @CompositePositionNodeId 


UPDATE TAREASREVISION SET CODIGOCARGOREQ = @CompositePositionNodeId
WHERE CARGOREQ LIKE (SELECT TOP 1 DESCRIPCION FROM ORGANIGRAMA WHERE CODIGO=@CompositePositionNodeId)
AND
CODIGOUSUARIO = (SELECT CODIGOUSUARIO FROM CARGOSUSUARIOS WHERE CODIGOCARGO = @CompositePositionNodeId)
AND ESTADO = 'V'



SELECT @LastError = @LastError + @@ERROR
IF @LastError <> 0
BEGIN
	ROLLBACK TRANSACTION
	RAISERROR('ik_ORG_CompositePosition2Position: FAILURE (%u)',16,1,@CompositePositionNodeId)
	SET @Success = 0


	RETURN(-1)
END
ELSE
BEGIN
	COMMIT TRANSACTION
	PRINT 'ik_ORG_CompositePosition2Position: SUCCESS (' + ltrim(str(@CompositePositionNodeId)) + ')'
	SET @Success = 1
	RETURN(0)
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_BSIndicators].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_BSIndicators]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_BSIndicators] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_BSIndicators]
@BS_INDICATORSID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on I-'+ LTRIM(STR(@BS_INDICATORSID)) +'. Level: ' + LTRIM(STR(BS_INDICATORS_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM 	 BS_INDICATORS_OPTIONS BS_INDICATORS_OPTIONS_TARGET
JOIN BS_INDICATORS_OPTIONS BS_INDICATORS_OPTIONS_SOURCE 
ON BS_INDICATORS_OPTIONS_TARGET.BS_INDICATORSID=BS_INDICATORS_OPTIONS_SOURCE.BS_INDICATORSID
AND BS_INDICATORS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_INDICATORS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_INDICATORS_OPTIONS_TARGET.SEC_LEVEL<BS_INDICATORS_OPTIONS_SOURCE.SEC_LEVEL
AND BS_INDICATORS_OPTIONS_SOURCE.BS_INDICATORSID=@BS_INDICATORSID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on I-'+ LTRIM(STR(@BS_INDICATORSID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_INDICATORS_OPTIONS 
WHERE 
BS_INDICATORSID=@BS_INDICATORSID 
AND USERID=@SOURCE_USERID 
AND NOT BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM BS_INDICATORS_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE BS_INDICATORS_OPTIONS_TARGET
SET 
BS_INDICATORS_OPTIONS_TARGET.SEC_LEVEL=BS_INDICATORS_OPTIONS_SOURCE.SEC_LEVEL
/*
,
BS_INDICATORS_OPTIONS_TARGET.SHOWINMYTASKS=BS_INDICATORS_OPTIONS_SOURCE.SHOWINMYTASKS,
BS_INDICATORS_OPTIONS_TARGET.NOTIFYSTATUSCHANGE=BS_INDICATORS_OPTIONS_SOURCE.NOTIFYSTATUSCHANGE,
BS_INDICATORS_OPTIONS_TARGET.NOTIFYTENDENCECHANGE=BS_INDICATORS_OPTIONS_SOURCE.NOTIFYTENDENCECHANGE
*/

FROM  BS_INDICATORS_OPTIONS BS_INDICATORS_OPTIONS_TARGET
JOIN BS_INDICATORS_OPTIONS BS_INDICATORS_OPTIONS_SOURCE 
ON BS_INDICATORS_OPTIONS_TARGET.BS_INDICATORSID=BS_INDICATORS_OPTIONS_SOURCE.BS_INDICATORSID
AND BS_INDICATORS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_INDICATORS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_INDICATORS_OPTIONS_TARGET.SEC_LEVEL<BS_INDICATORS_OPTIONS_SOURCE.SEC_LEVEL
AND BS_INDICATORS_OPTIONS_SOURCE.BS_INDICATORSID=@BS_INDICATORSID


INSERT INTO BS_INDICATORS_OPTIONS(USERID, BS_INDICATORSID, SEC_LEVEL, SHOWINMYTASKS, NOTIFYSTATUSCHANGE, NOTIFYTENDENCECHANGE) 
SELECT @TARGET_USERID,@BS_INDICATORSID, SEC_LEVEL ,  SHOWINMYTASKS, NOTIFYSTATUSCHANGE, NOTIFYTENDENCECHANGE
FROM BS_INDICATORS_OPTIONS 
WHERE 
BS_INDICATORSID=@BS_INDICATORSID 
AND USERID=@SOURCE_USERID 
AND NOT BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM BS_INDICATORS_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_BSStratNodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_BSStratNodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_BSStratNodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_BSStratNodes]
@BS_STRAT_NODESID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on S-'+ LTRIM(STR(@BS_STRAT_NODESID)) +'. Level: ' + LTRIM(STR(BS_STRAT_NODES_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_STRAT_NODES_OPTIONS BS_STRAT_NODES_OPTIONS_TARGET
JOIN BS_STRAT_NODES_OPTIONS BS_STRAT_NODES_OPTIONS_SOURCE 
ON BS_STRAT_NODES_OPTIONS_TARGET.BS_STRAT_NODESID=BS_STRAT_NODES_OPTIONS_SOURCE.BS_STRAT_NODESID
AND BS_STRAT_NODES_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_STRAT_NODES_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_STRAT_NODES_OPTIONS_TARGET.SEC_LEVEL<BS_STRAT_NODES_OPTIONS_SOURCE.SEC_LEVEL
AND BS_STRAT_NODES_OPTIONS_SOURCE.BS_STRAT_NODESID=@BS_STRAT_NODESID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on S-'+ LTRIM(STR(@BS_STRAT_NODESID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_STRAT_NODES_OPTIONS 
WHERE 
BS_STRAT_NODESID=@BS_STRAT_NODESID 
AND USERID=@SOURCE_USERID 
AND NOT BS_STRAT_NODESID IN (SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE BS_STRAT_NODES_OPTIONS_TARGET
SET 
BS_STRAT_NODES_OPTIONS_TARGET.SEC_LEVEL=BS_STRAT_NODES_OPTIONS_SOURCE.SEC_LEVEL
/*
,
BS_STRAT_NODES_OPTIONS_TARGET.SHOWINMYTASKS=BS_STRAT_NODES_OPTIONS_SOURCE.SHOWINMYTASKS
*/

FROM  BS_STRAT_NODES_OPTIONS BS_STRAT_NODES_OPTIONS_TARGET
JOIN BS_STRAT_NODES_OPTIONS BS_STRAT_NODES_OPTIONS_SOURCE 
ON BS_STRAT_NODES_OPTIONS_TARGET.BS_STRAT_NODESID=BS_STRAT_NODES_OPTIONS_SOURCE.BS_STRAT_NODESID
AND BS_STRAT_NODES_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_STRAT_NODES_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_STRAT_NODES_OPTIONS_TARGET.SEC_LEVEL<BS_STRAT_NODES_OPTIONS_SOURCE.SEC_LEVEL
AND BS_STRAT_NODES_OPTIONS_SOURCE.BS_STRAT_NODESID=@BS_STRAT_NODESID


INSERT INTO BS_STRAT_NODES_OPTIONS(USERID, BS_STRAT_NODESID, SEC_LEVEL, SHOWINMYTASKS) 
SELECT @TARGET_USERID,BS_STRAT_NODESID, SEC_LEVEL ,  SHOWINMYTASKS
FROM BS_STRAT_NODES_OPTIONS 
WHERE 
BS_STRAT_NODESID=@BS_STRAT_NODESID 
AND USERID=@SOURCE_USERID 
AND NOT BS_STRAT_NODESID IN (SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_BSStratPlans].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_BSStratPlans]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_BSStratPlans] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_BSStratPlans]
@BS_STRAT_PLANSID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on SP-'+ LTRIM(STR(@BS_STRAT_PLANSID)) +'. Level: ' + LTRIM(STR(BS_STRAT_PLANS_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM 	 BS_STRAT_PLANS_OPTIONS BS_STRAT_PLANS_OPTIONS_TARGET
JOIN BS_STRAT_PLANS_OPTIONS BS_STRAT_PLANS_OPTIONS_SOURCE 
ON BS_STRAT_PLANS_OPTIONS_TARGET.BS_STRAT_PLANSID=BS_STRAT_PLANS_OPTIONS_SOURCE.BS_STRAT_PLANSID
AND BS_STRAT_PLANS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_STRAT_PLANS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_STRAT_PLANS_OPTIONS_TARGET.SEC_LEVEL<BS_STRAT_PLANS_OPTIONS_SOURCE.SEC_LEVEL
AND BS_STRAT_PLANS_OPTIONS_SOURCE.BS_STRAT_PLANSID=@BS_STRAT_PLANSID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on SP-'+ LTRIM(STR(@BS_STRAT_PLANSID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_STRAT_PLANS_OPTIONS 
WHERE 
BS_STRAT_PLANSID=@BS_STRAT_PLANSID 
AND USERID=@SOURCE_USERID 
AND NOT BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE BS_STRAT_PLANS_OPTIONS_TARGET
SET 
BS_STRAT_PLANS_OPTIONS_TARGET.SEC_LEVEL=BS_STRAT_PLANS_OPTIONS_SOURCE.SEC_LEVEL
/*
,
BS_STRAT_PLANS_OPTIONS_TARGET.SHOWINMYTASKS=BS_STRAT_PLANS_OPTIONS_SOURCE.SHOWINMYTASKS
*/

FROM  BS_STRAT_PLANS_OPTIONS BS_STRAT_PLANS_OPTIONS_TARGET
JOIN BS_STRAT_PLANS_OPTIONS BS_STRAT_PLANS_OPTIONS_SOURCE 
ON BS_STRAT_PLANS_OPTIONS_TARGET.BS_STRAT_PLANSID=BS_STRAT_PLANS_OPTIONS_SOURCE.BS_STRAT_PLANSID
AND BS_STRAT_PLANS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_STRAT_PLANS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_STRAT_PLANS_OPTIONS_TARGET.SEC_LEVEL<BS_STRAT_PLANS_OPTIONS_SOURCE.SEC_LEVEL
AND BS_STRAT_PLANS_OPTIONS_SOURCE.BS_STRAT_PLANSID=@BS_STRAT_PLANSID


INSERT INTO BS_STRAT_PLANS_OPTIONS(USERID, BS_STRAT_PLANSID, SEC_LEVEL, SHOWINMYTASKS) 
SELECT @TARGET_USERID,BS_STRAT_PLANSID, SEC_LEVEL ,  SHOWINMYTASKS
FROM BS_STRAT_PLANS_OPTIONS 
WHERE 
BS_STRAT_PLANSID=@BS_STRAT_PLANSID 
AND USERID=@SOURCE_USERID 
AND NOT BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_Classes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_Classes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_Classes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_Classes]
@CODIGOTIPONC INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @TIPONC_DESC varchar(100)
SELECT @TIPONC_DESC=ISNULL([NAME],LTRIM(STR(@CODIGOTIPONC)))
FROM XML_MODULE_DEFINITIONS
WHERE MODULEID=@CODIGOTIPONC


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on Permission set on Module '+ @TIPONC_DESC  +'. Level: ' + LTRIM(STR(NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_TARGET
JOIN NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_SOURCE 
ON NCMODULESECURITYLEVELS_TARGET.CODIGOTIPONC=NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC
AND NCMODULESECURITYLEVELS_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND NCMODULESECURITYLEVELS_TARGET.NIVELACCESO<NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC=@CODIGOTIPONC
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on Module '+ @TIPONC_DESC  +'. Level: ' + LTRIM(STR(NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM NCMODULESECURITYLEVELS 
WHERE 
CODIGOTIPONC=@CODIGOTIPONC 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO =@TARGET_USERID)


UPDATE NCMODULESECURITYLEVELS_TARGET
SET 
NCMODULESECURITYLEVELS_TARGET.NIVELACCESO=NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO,
NCMODULESECURITYLEVELS_TARGET.L_PUEDENUEVOS=NCMODULESECURITYLEVELS_SOURCE.L_PUEDENUEVOS


FROM  NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_TARGET
JOIN NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_SOURCE 
ON NCMODULESECURITYLEVELS_TARGET.CODIGOTIPONC=NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC
AND NCMODULESECURITYLEVELS_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND NCMODULESECURITYLEVELS_TARGET.NIVELACCESO<NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC=@CODIGOTIPONC


INSERT INTO NCMODULESECURITYLEVELS(CODIGOUSUARIO, CODIGOTIPONC, NIVELACCESO, L_PUEDENUEVOS, CODIGOGRUPONC, L_ESGRUPO) 
SELECT @TARGET_USERID,CODIGOTIPONC, NIVELACCESO ,  L_PUEDENUEVOS,  CODIGOGRUPONC, L_ESGRUPO
FROM NCMODULESECURITYLEVELS 
WHERE 
CODIGOTIPONC=@CODIGOTIPONC 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_Diagrams].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_Diagrams]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_Diagrams] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_Diagrams]
@BS_SVGID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on SVG-'+ LTRIM(STR(@BS_SVGID)) +'. Level: ' + LTRIM(STR(BS_SVG_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_SVG_OPTIONS BS_SVG_OPTIONS_TARGET
JOIN BS_SVG_OPTIONS BS_SVG_OPTIONS_SOURCE 
ON BS_SVG_OPTIONS_TARGET.BS_SVGID=BS_SVG_OPTIONS_SOURCE.BS_SVGID
AND BS_SVG_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_SVG_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_SVG_OPTIONS_TARGET.SEC_LEVEL<BS_SVG_OPTIONS_SOURCE.SEC_LEVEL
AND BS_SVG_OPTIONS_SOURCE.BS_SVGID=@BS_SVGID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on SVG-'+ LTRIM(STR(@BS_SVGID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM BS_SVG_OPTIONS 
WHERE 
BS_SVGID=@BS_SVGID 
AND USERID=@SOURCE_USERID 
AND NOT BS_SVGID IN (SELECT BS_SVGID FROM BS_SVG_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE BS_SVG_OPTIONS_TARGET
SET 
BS_SVG_OPTIONS_TARGET.SEC_LEVEL=BS_SVG_OPTIONS_SOURCE.SEC_LEVEL
/*
,
BS_SVG_OPTIONS_TARGET.SHOWINMYTASKS=BS_SVG_OPTIONS_SOURCE.SHOWINMYTASKS
*/

FROM  BS_SVG_OPTIONS BS_SVG_OPTIONS_TARGET
JOIN BS_SVG_OPTIONS BS_SVG_OPTIONS_SOURCE 
ON BS_SVG_OPTIONS_TARGET.BS_SVGID=BS_SVG_OPTIONS_SOURCE.BS_SVGID
AND BS_SVG_OPTIONS_TARGET.USERID=@TARGET_USERID
AND BS_SVG_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND BS_SVG_OPTIONS_TARGET.SEC_LEVEL<BS_SVG_OPTIONS_SOURCE.SEC_LEVEL
AND BS_SVG_OPTIONS_SOURCE.BS_SVGID=@BS_SVGID


INSERT INTO BS_SVG_OPTIONS(USERID, BS_SVGID, SEC_LEVEL, SHOWINMYTASKS) 
SELECT @TARGET_USERID,BS_SVGID, SEC_LEVEL ,  SHOWINMYTASKS
FROM BS_SVG_OPTIONS 
WHERE 
BS_SVGID=@BS_SVGID 
AND USERID=@SOURCE_USERID 
AND NOT BS_SVGID IN (SELECT BS_SVGID FROM BS_SVG_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_DOC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_DOC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_DOC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_DOC]
@DOCCODE INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT PERMISOSDOC_SOURCE.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set for '+ @TARGET_TYPE_DESCRIPTION + ' U-'+ LTRIM(STR(@TARGET_USERID)) +' '+ @TARGET_USER_DESCRIPTION +'. Level: ' + LTRIM(STR(PERMISOSDOC_SOURCE.NIVELACCESO)) ,0,0
FROM 	 PERMISOSDOC PERMISOSDOC_TARGET
JOIN PERMISOSDOC PERMISOSDOC_SOURCE 
ON PERMISOSDOC_TARGET.CODIGODOCUMENTO=PERMISOSDOC_SOURCE.CODIGODOCUMENTO
AND PERMISOSDOC_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND PERMISOSDOC_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND PERMISOSDOC_TARGET.NIVELACCESO<PERMISOSDOC_SOURCE.NIVELACCESO
AND PERMISOSDOC_SOURCE.CODIGODOCUMENTO=@DOCCODE

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on document D-'+ LTRIM(STR(@DOCCODE)) +'. Level: ' + LTRIM(STR(PERMISOSDOC_SOURCE.NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM 	 PERMISOSDOC PERMISOSDOC_TARGET
JOIN PERMISOSDOC PERMISOSDOC_SOURCE 
ON PERMISOSDOC_TARGET.CODIGODOCUMENTO=PERMISOSDOC_SOURCE.CODIGODOCUMENTO
AND PERMISOSDOC_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND PERMISOSDOC_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND PERMISOSDOC_TARGET.NIVELACCESO<PERMISOSDOC_SOURCE.NIVELACCESO
AND PERMISOSDOC_SOURCE.CODIGODOCUMENTO=@DOCCODE
	

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set for '+ @TARGET_TYPE_DESCRIPTION + ' U-'+ LTRIM(STR(@TARGET_USERID)) +' '+ @TARGET_USER_DESCRIPTION +'. Level: ' + LTRIM(STR(NIVELACCESO)) ,0,0
FROM PERMISOSDOC 
WHERE 
CODIGODOCUMENTO=@DOCCODE 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGODOCUMENTO IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@TARGET_USERID)

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on document D-'+ LTRIM(STR(@DOCCODE)) +'. Level: ' + LTRIM(STR(NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM PERMISOSDOC 
WHERE 
CODIGODOCUMENTO=@DOCCODE 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGODOCUMENTO IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@TARGET_USERID)


UPDATE PERMISOSDOC_TARGET
SET PERMISOSDOC_TARGET.NIVELACCESO=PERMISOSDOC_SOURCE.NIVELACCESO
FROM  PERMISOSDOC PERMISOSDOC_TARGET
JOIN PERMISOSDOC PERMISOSDOC_SOURCE 
ON PERMISOSDOC_TARGET.CODIGODOCUMENTO=PERMISOSDOC_SOURCE.CODIGODOCUMENTO
AND PERMISOSDOC_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND PERMISOSDOC_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND PERMISOSDOC_TARGET.NIVELACCESO<PERMISOSDOC_SOURCE.NIVELACCESO
AND PERMISOSDOC_SOURCE.CODIGODOCUMENTO=@DOCCODE


INSERT INTO PERMISOSDOC(CODIGOUSUARIO, CODIGODOCUMENTO, NIVELACCESO) 
SELECT @TARGET_USERID,@DOCCODE, NIVELACCESO 
FROM PERMISOSDOC 
WHERE 
CODIGODOCUMENTO=@DOCCODE 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGODOCUMENTO IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_DocsGroups].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_DocsGroups]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_DocsGroups] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_DocsGroups]
@CODIGOGRUPO INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN



DECLARE @DOCGROUP_DESC varchar(100)
SELECT @DOCGROUP_DESC=ISNULL(DESCRIPCION,LTRIM(STR(@CODIGOGRUPO)))
FROM TBL_CATEGORIASDOCUMENTOS
WHERE CODIGO=@CODIGOGRUPO
--print isnull(@DOCGROUP_DESC,'es null')

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on Documents Group '+ @DOCGROUP_DESC  +'. Level: ' + LTRIM(STR(NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_TARGET
JOIN NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_SOURCE 
ON NCMODULESECURITYLEVELS_TARGET.CODIGOTIPONC=NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC
AND NCMODULESECURITYLEVELS_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND NCMODULESECURITYLEVELS_TARGET.NIVELACCESO>NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC=@CODIGOGRUPO+300000
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on Documents Group '+ @DOCGROUP_DESC  +'. Level: ' + LTRIM(STR(NIVELACCESO))  ,@HISTORIA_USUARIO,1
FROM NCMODULESECURITYLEVELS 
WHERE 
CODIGOTIPONC=@CODIGOGRUPO+300000 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO =@TARGET_USERID)


UPDATE NCMODULESECURITYLEVELS_TARGET
SET 
NCMODULESECURITYLEVELS_TARGET.NIVELACCESO=NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO
/*
,
NCMODULESECURITYLEVELS_TARGET.SHOWINMYTASKS=NCMODULESECURITYLEVELS_SOURCE.SHOWINMYTASKS
*/

FROM  NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_TARGET
JOIN NCMODULESECURITYLEVELS NCMODULESECURITYLEVELS_SOURCE 
ON NCMODULESECURITYLEVELS_TARGET.CODIGOTIPONC=NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC
AND NCMODULESECURITYLEVELS_TARGET.CODIGOUSUARIO=@TARGET_USERID
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOUSUARIO=@SOURCE_USERID
AND NCMODULESECURITYLEVELS_TARGET.NIVELACCESO>NCMODULESECURITYLEVELS_SOURCE.NIVELACCESO
AND NCMODULESECURITYLEVELS_SOURCE.CODIGOTIPONC=@CODIGOGRUPO+300000


INSERT INTO NCMODULESECURITYLEVELS(CODIGOUSUARIO, CODIGOTIPONC, NIVELACCESO, L_PUEDENUEVOS, CODIGOGRUPONC, L_ESGRUPO) 
SELECT @TARGET_USERID,CODIGOTIPONC, NIVELACCESO ,  L_PUEDENUEVOS,  CODIGOGRUPONC, L_ESGRUPO
FROM NCMODULESECURITYLEVELS 
WHERE 
CODIGOTIPONC=@CODIGOGRUPO+300000 
AND CODIGOUSUARIO=@SOURCE_USERID 
AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_ProcNodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_ProcNodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_ProcNodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_ProcNodes]
@PROC_NODESID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on P-'+ LTRIM(STR(@PROC_NODESID)) +'. Level: ' + LTRIM(STR(PROC_NODES_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM PROC_NODES_OPTIONS PROC_NODES_OPTIONS_TARGET
JOIN PROC_NODES_OPTIONS PROC_NODES_OPTIONS_SOURCE 
ON PROC_NODES_OPTIONS_TARGET.PROC_NODESID=PROC_NODES_OPTIONS_SOURCE.PROC_NODESID
AND PROC_NODES_OPTIONS_TARGET.USERID=@TARGET_USERID
AND PROC_NODES_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND PROC_NODES_OPTIONS_TARGET.SEC_LEVEL<PROC_NODES_OPTIONS_SOURCE.SEC_LEVEL
AND PROC_NODES_OPTIONS_SOURCE.PROC_NODESID=@PROC_NODESID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on P-'+ LTRIM(STR(@PROC_NODESID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM PROC_NODES_OPTIONS 
WHERE 
PROC_NODESID=@PROC_NODESID 
AND USERID=@SOURCE_USERID 
AND NOT PROC_NODESID IN (SELECT PROC_NODESID FROM PROC_NODES_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE PROC_NODES_OPTIONS_TARGET
SET 
PROC_NODES_OPTIONS_TARGET.SEC_LEVEL=PROC_NODES_OPTIONS_SOURCE.SEC_LEVEL
/*
,
PROC_NODES_OPTIONS_TARGET.SHOWINMYTASKS=PROC_NODES_OPTIONS_SOURCE.SHOWINMYTASKS
*/

FROM  PROC_NODES_OPTIONS PROC_NODES_OPTIONS_TARGET
JOIN PROC_NODES_OPTIONS PROC_NODES_OPTIONS_SOURCE 
ON PROC_NODES_OPTIONS_TARGET.PROC_NODESID=PROC_NODES_OPTIONS_SOURCE.PROC_NODESID
AND PROC_NODES_OPTIONS_TARGET.USERID=@TARGET_USERID
AND PROC_NODES_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND PROC_NODES_OPTIONS_TARGET.SEC_LEVEL<PROC_NODES_OPTIONS_SOURCE.SEC_LEVEL
AND PROC_NODES_OPTIONS_SOURCE.PROC_NODESID=@PROC_NODESID


INSERT INTO PROC_NODES_OPTIONS(USERID, PROC_NODESID, SEC_LEVEL, SHOWINMYTASKS) 
SELECT @TARGET_USERID,PROC_NODESID, SEC_LEVEL ,  SHOWINMYTASKS
FROM PROC_NODES_OPTIONS 
WHERE 
PROC_NODESID=@PROC_NODESID 
AND USERID=@SOURCE_USERID 
AND NOT PROC_NODESID IN (SELECT PROC_NODESID FROM PROC_NODES_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_perm_Copy_ProcPlans].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_perm_Copy_ProcPlans]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_perm_Copy_ProcPlans] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_perm_Copy_ProcPlans]
@PROC_PLANSID INT ,
@SOURCE_USERID INT,
@SOURCE_USER_DESCRIPTION VARCHAR(100),
@SOURCE_TYPE_DESCRIPTION VARCHAR(10),
@TARGET_USERID INT,
@TARGET_USER_DESCRIPTION VARCHAR(100),
@TARGET_TYPE_DESCRIPTION VARCHAR(10),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' '  + @SOURCE_USER_DESCRIPTION + ': Permission set on PP-'+ LTRIM(STR(@PROC_PLANSID)) +'. Level: ' + LTRIM(STR(PROC_PLANS_OPTIONS_SOURCE.SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM 	 PROC_PLANS_OPTIONS PROC_PLANS_OPTIONS_TARGET
JOIN PROC_PLANS_OPTIONS PROC_PLANS_OPTIONS_SOURCE 
ON PROC_PLANS_OPTIONS_TARGET.PROC_PLANSID=PROC_PLANS_OPTIONS_SOURCE.PROC_PLANSID
AND PROC_PLANS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND PROC_PLANS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND PROC_PLANS_OPTIONS_TARGET.SEC_LEVEL<PROC_PLANS_OPTIONS_SOURCE.SEC_LEVEL
AND PROC_PLANS_OPTIONS_SOURCE.PROC_PLANSID=@PROC_PLANSID
	

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @TARGET_USERID, GETDATE(), 'BATCH: Permission copy from  '+ @SOURCE_TYPE_DESCRIPTION + ' ' + @SOURCE_USER_DESCRIPTION + ': Permission set on PP-'+ LTRIM(STR(@PROC_PLANSID)) +'. Level: ' + LTRIM(STR(SEC_LEVEL))  ,@HISTORIA_USUARIO,1
FROM PROC_PLANS_OPTIONS 
WHERE 
PROC_PLANSID=@PROC_PLANSID 
AND USERID=@SOURCE_USERID 
AND NOT PROC_PLANSID IN (SELECT PROC_PLANSID FROM PROC_PLANS_OPTIONS WHERE USERID =@TARGET_USERID)


UPDATE PROC_PLANS_OPTIONS_TARGET
SET 
PROC_PLANS_OPTIONS_TARGET.SEC_LEVEL=PROC_PLANS_OPTIONS_SOURCE.SEC_LEVEL
/*
,
PROC_PLANS_OPTIONS_TARGET.SHOWINMYTASKS=PROC_PLANS_OPTIONS_SOURCE.SHOWINMYTASKS
*/

FROM  PROC_PLANS_OPTIONS PROC_PLANS_OPTIONS_TARGET
JOIN PROC_PLANS_OPTIONS PROC_PLANS_OPTIONS_SOURCE 
ON PROC_PLANS_OPTIONS_TARGET.PROC_PLANSID=PROC_PLANS_OPTIONS_SOURCE.PROC_PLANSID
AND PROC_PLANS_OPTIONS_TARGET.USERID=@TARGET_USERID
AND PROC_PLANS_OPTIONS_SOURCE.USERID=@SOURCE_USERID
AND PROC_PLANS_OPTIONS_TARGET.SEC_LEVEL<PROC_PLANS_OPTIONS_SOURCE.SEC_LEVEL
AND PROC_PLANS_OPTIONS_SOURCE.PROC_PLANSID=@PROC_PLANSID


INSERT INTO PROC_PLANS_OPTIONS(USERID, PROC_PLANSID, SEC_LEVEL, SHOWINMYTASKS) 
SELECT @TARGET_USERID,PROC_PLANSID, SEC_LEVEL ,  SHOWINMYTASKS
FROM PROC_PLANS_OPTIONS 
WHERE 
PROC_PLANSID=@PROC_PLANSID 
AND USERID=@SOURCE_USERID 
AND NOT PROC_PLANSID IN (SELECT PROC_PLANSID FROM PROC_PLANS_OPTIONS WHERE USERID =@TARGET_USERID)
                    
END
GO

GO
--SqlScripter----[dbo].[ik_PersonsIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_PersonsIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_PersonsIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_PersonsIds_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_PERSONS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


BEGIN TRY
	DROP TABLE #TMP_PERSONS  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_PERSONS (IKPERSONID INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_PERSONS(IKPERSONID)
	SELECT CODIGO FROM PERSONAS WHERE 1=0
END
ELSE IF  @IKCAT=4 
BEGIN
	INSERT INTO #TMP_PERSONS(IKPERSONID)
	SELECT CODIGO FROM PERSONAS
END
ELSE
BEGIN
		BEGIN TRY
			DROP TABLE #TMP_GROUPS
		END TRY
		BEGIN CATCH
		END CATCH

		BEGIN TRY
			DROP TABLE #TMP_SEC_LEVELS
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU
		SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU AND NCMODULESECURITYLEVELS.CODIGOTIPONC=98
		INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE NCMODULESECURITYLEVELS.CODIGOTIPONC=98 AND CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC

		
		BEGIN TRY
			DROP TABLE #TMP_PERSONS_INVOLVED
		END TRY
		BEGIN CATCH
		END CATCH

		SELECT @IKCDU AS IKPERSONID INTO #TMP_PERSONS_INVOLVED
		



	INSERT INTO #TMP_PERSONS(IKPERSONID)
	SELECT PE.CODIGO FROM #TMP_SEC_LEVELS 
		JOIN PERSONAS PE ON 98=#TMP_SEC_LEVELS.CODIGOTIPONC 
		LEFT JOIN #TMP_PERSONS_INVOLVED ON #TMP_PERSONS_INVOLVED.IKPERSONID = PE.CODIGO
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND	((#TMP_SEC_LEVELS.NIVELACCESO=2 AND NOT #TMP_PERSONS_INVOLVED.IKPERSONID IS NULL) OR (#TMP_SEC_LEVELS.NIVELACCESO>2 ))
	ORDER BY CODIGOTIPONC, NIVELACCESO
END


EXEC ('INSERT INTO ' + @tmp_table + ' (IKPERSONID ) SELECT IKPERSONID FROM  #TMP_PERSONS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_procNodesIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_procNodesIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_procNodesIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_procNodesIds_withaccess]
(
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_PROCNODES_WITH_ACCESS_IDS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD
SET NOCOUNT ON

BEGIN TRY
	CREATE TABLE #TMP_PROCNODES_WITH_ACCESS(PROC_NODESID int)
END TRY
BEGIN CATCH
END CATCH


CREATE TABLE #TMP_PROCPLANS_WITH_ACCESS (PROC_PLANSID int)		
EXEC dbo.[ik_procplansIds_withaccess] '','',@BSPROCCAT,@IKCAT, @IKCDU,'#TMP_PROCPLANS_WITH_ACCESS',0
		
CREATE TABLE #TMP_PROCNODES_WITHOUT_ACCESS (PROC_NODESID int)		

INSERT INTO #TMP_PROCNODES_WITHOUT_ACCESS (PROC_NODESID)
SELECT PROC_NODES_OPTIONS.PROC_NODESID FROM PROC_NODES_OPTIONS WHERE PROC_NODES_OPTIONS.SEC_LEVEL=0 AND USERID=@IKCDU

INSERT INTO #TMP_PROCNODES_WITHOUT_ACCESS (PROC_NODESID)
SELECT PROC_NODES_OPTIONS.PROC_NODESID FROM PROC_NODES_OPTIONS WHERE PROC_NODES_OPTIONS.SEC_LEVEL=0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU) AND NOT PROC_NODESID IN (SELECT PROC_NODES_OPTIONS.PROC_NODESID FROM PROC_NODES_OPTIONS WHERE PROC_NODES_OPTIONS.SEC_LEVEL>0 AND USERID=@IKCDU)


IF @IKCAT=0 OR @BSPROCCAT=2  
BEGIN
		INSERT INTO #TMP_PROCNODES_WITH_ACCESS
		SELECT PROC_NODESID FROM PROC_NODES WHERE 1=0 /*select nothing*/
END
ELSE IF @IKCAT=4 OR @BSPROCCAT=0 
BEGIN
		INSERT INTO #TMP_PROCNODES_WITH_ACCESS
		SELECT PROC_NODESID FROM PROC_NODES /*select all*/
END
ELSE /*Select only allowed docs*/		
BEGIN
		INSERT INTO #TMP_PROCNODES_WITH_ACCESS
		SELECT PROC_NODESID FROM PROC_NODES 
		JOIN #TMP_PROCPLANS_WITH_ACCESS ON #TMP_PROCPLANS_WITH_ACCESS.PROC_PLANSID=PROC_NODES.PROC_PLANSID
		WHERE NOT PROC_NODESID IN (SELECT #TMP_PROCNODES_WITHOUT_ACCESS.PROC_NODESID FROM #TMP_PROCNODES_WITHOUT_ACCESS)
END		


BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' SELECT * FROM #TMP_PROCNODES_WITH_ACCESS')
END TRY
BEGIN CATCH	
END CATCH


IF @L_RETURN_DATA = 1
BEGIN
	SELECT * FROM #TMP_PROCNODES_WITH_ACCESS
END



RETURN
GO

GO
--SqlScripter----[dbo].[ik_procnodesreldocs_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_procnodesreldocs_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_procnodesreldocs_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_procnodesreldocs_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000), @where varchar(100)


SET  @strDOC ='
CREATE TABLE #TMP_DOCS_WITH_ACCESS_IDS (CODIGODOC int, NIVELACCESO INT)
EXEC dbo.[ik_DocumentsIds_withaccess]  ' + CONVERT(nvarchar(5),@IKCDU) + '

CREATE TABLE #TMP_PROCNODES_WITH_ACCESS_IDS (PROC_NODESID int)		
EXEC dbo.[ik_procNodesIds_withaccess]  ' + CONVERT(nvarchar(5),@BSPROCCAT) + ',' + CONVERT(nvarchar(5),@IKCAT) + ', ' + CONVERT(nvarchar(5),@IKCDU) + ',''#TMP_PROCNODES_WITH_ACCESS_IDS'',0


SELECT 
DISTINCT PROC_PLANSID, PROCNODES_ID, PROCNODES_DESCRIPTION, PROCNODES_NODEIMG 
FROM VISTA_ALLRELS_DOCUMENTS_PROCNODE NODESDOCS
JOIN dbo.PROC_NODES NODES ON NODESDOCS.PROCNODES_ID=NODES.PROC_NODESID
JOIN #TMP_PROCNODES_WITH_ACCESS_IDS ON #TMP_PROCNODES_WITH_ACCESS_IDS.PROC_NODESID=NODESDOCS.PROCNODES_ID
JOIN #TMP_DOCS_WITH_ACCESS_IDS ON #TMP_DOCS_WITH_ACCESS_IDS.CODIGODOC=NODESDOCS.DOCUMENT_ID
'

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END

	EXEC (@strDOC+@where+@parameters+@sort)
END
ELSE
BEGIN
	EXEC (@strDOC)
END

--print @strDOC+@where+@parameters+@sort



RETURN
GO

GO
--SqlScripter----[dbo].[ik_procplans_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_procplans_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_procplans_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_procplans_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000), @where varchar(100)


SELECT @strDOC =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT *, ''Images/bs_megaproceso.gif'' AS ICONOPLAN FROM PROC_PLANS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT *, ''Images/bs_megaproceso.gif'' AS ICONOPLAN FROM PROC_PLANS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT *, ''Images/bs_megaproceso.gif'' AS ICONOPLAN FROM (
		SELECT * FROM PROC_PLANS		
		WHERE PROC_PLANSID IN (SELECT PROC_PLANSID FROM VISTA_PROCPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR PROC_PLANSID IN (SELECT PROC_PLANSID FROM VISTA_PROCPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END


EXEC (@strDOC+@where+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_procplansIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_procplansIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_procplansIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_procplansIds_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_PROCPLANS_WITH_ACCESS_IDS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT PROC_PLANSID FROM PROC_PLANS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT PROC_PLANSID FROM PROC_PLANS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT PROC_PLANSID FROM (
		SELECT * FROM PROC_PLANS		
		WHERE PROC_PLANSID IN (SELECT PROC_PLANSID FROM VISTA_PROCPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR PROC_PLANSID IN (SELECT PROC_PLANSID FROM VISTA_PROCPLANS_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END



BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' ' +  @strSQL+@where+@parameters+@sort)
END TRY
BEGIN CATCH	
END CATCH



IF @L_RETURN_DATA = 1
BEGIN
	EXEC (@strSQL+@where+@parameters+@sort)
END



RETURN
GO

GO
--SqlScripter----[dbo].[ik_PrototypeTasksIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_PrototypeTasksIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_PrototypeTasksIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_PrototypeTasksIds_withaccess]
(		
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_PROTOTYPETASKS_WITH_ACCESS_IDS'
	)

AS

SET NOCOUNT ON
SET DATEFORMAT YMD

DECLARE @IKCAT INT
SELECT @IKCAT=CATEGORIA FROM USUARIOS WHERE CODIGO=@IKCDU


DECLARE @strSQL varchar(4000), @where varchar(100)

BEGIN TRY
	DROP TABLE #TMP_GROUPS
END TRY
BEGIN CATCH
END CATCH

BEGIN TRY
	DROP TABLE #TMP_SEC_LEVELS
END TRY
BEGIN CATCH
END CATCH

SELECT CODIGOGRUPO INTO #TMP_GROUPS FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU
SELECT CODIGOTIPONC, NIVELACCESO INTO #TMP_SEC_LEVELS FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO=@IKCDU
INSERT INTO #TMP_SEC_LEVELS (CODIGOTIPONC, NIVELACCESO) SELECT CODIGOTIPONC, MAX(NIVELACCESO)  FROM NCMODULESECURITYLEVELS WHERE CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM #TMP_GROUPS) AND NOT CODIGOTIPONC IN (SELECT CODIGOTIPONC FROM #TMP_SEC_LEVELS ) GROUP BY CODIGOTIPONC


BEGIN TRY
	DROP TABLE #TMP_ISSUES_INVOLVED
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES_INVOLVED(CODIGONC int, NIVEL int)

INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC, NIVEL ) 
SELECT CODIGO, 3 FROM VISTA_ASUNTOSCOORDINADOS WHERE TIPO=99 AND CODIGOUSUARIO=@IKCDU AND NOT CODIGO IN (SELECT CODIGONC FROM #TMP_ISSUES_INVOLVED )

INSERT INTO #TMP_ISSUES_INVOLVED (CODIGONC, NIVEL ) 
SELECT VISTA_ASUNTOSINVOLUCRADOS.CODIGO AS CODIGONC,VISTA_ASUNTOSINVOLUCRADOS.NIVEL  
FROM VISTA_ASUNTOSINVOLUCRADOS WHERE TIPO=99 AND  CODIGOUSUARIO=@IKCDU 


CREATE TABLE #TMP_ISSUES_TASKS_INVOLVED(TASKID INT)
/*
INSERT INTO #TMP_ISSUES_TASKS_INVOLVED
SELECT NCTAREASDESTINATARIOS.CODIGOTAREA FROM NCTAREASDESTINATARIOS
WHERE NCTAREASDESTINATARIOS.CODIGOCARGO IN (SELECT CARGOSUSUARIOS.CODIGOCARGO FROM CARGOSUSUARIOS WHERE CARGOSUSUARIOS.CODIGOUSUARIO=@IKCDU)
*/

BEGIN TRY
	DROP TABLE #TMP_ISSUES_TASKS  
END TRY
BEGIN CATCH
END CATCH

CREATE TABLE #TMP_ISSUES_TASKS (TASKID INT)


IF @IKCAT=0   
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT CODIGO FROM TPROT_TASK WHERE 1=0
END
ELSE IF  @IKCAT=4 
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT CODIGO FROM TPROT_TASK 
END
ELSE
BEGIN
	INSERT INTO #TMP_ISSUES_TASKS(TASKID)
	SELECT DISTINCT TPROT_TASK.CODIGO
	FROM TPROT_TASK
	JOIN #TMP_SEC_LEVELS ON #TMP_SEC_LEVELS.CODIGOTIPONC=99
	LEFT JOIN #TMP_ISSUES_INVOLVED ON TPROT_TASK.CODIGONC=#TMP_ISSUES_INVOLVED.CODIGONC	
	LEFT JOIN #TMP_ISSUES_TASKS_INVOLVED ON #TMP_ISSUES_TASKS_INVOLVED.TASKID=TPROT_TASK.CODIGO
	WHERE 
		#TMP_SEC_LEVELS.NIVELACCESO > 0
		AND 
		(
			(#TMP_SEC_LEVELS.NIVELACCESO >=4)--ES SIEMPRE SUP O SIEMPRE COORD
			OR
			(#TMP_ISSUES_INVOLVED.NIVEL>=2) --ESTA INV. COMO SUPERVISOR O COORDINADOR 
			OR 
			(#TMP_ISSUES_INVOLVED.NIVEL=1 AND NOT #TMP_ISSUES_TASKS_INVOLVED.TASKID IS NULL)--ESTA INV. COMO INVOLUCRADO Y ES RESP.
		)
		
		
	
END

--RESTRICTED ACCESS: ASUNTOS EN LOS QUE ESTA INVOLUCRADO Y TAREAS EN LAS QUE ES REPOSABLE
--ALWAYS INVOL: ASUNTOS EN LOS QUE ESTA INVOLUCRADO Y TAREAS EN LAS QUE ES REPOSABLE
--ALWAYS SUP Y COORD: TODAS


EXEC ('INSERT INTO ' + @tmp_table + ' (TASKID ) SELECT TASKID FROM  #TMP_ISSUES_TASKS')


RETURN
GO

GO
--SqlScripter----[dbo].[ik_resp_ChangePositionDesc_nc].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_ChangePositionDesc_nc]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_ChangePositionDesc_nc] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_ChangePositionDesc_nc]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) 
AS
BEGIN



UPDATE NCINVOLUCRADOS
SET NOMBRECARGO=@POSITIONDESCRIPTION
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID

UPDATE NCTAREASDESTINATARIOS
SET NOMBRECARGO=@POSITIONDESCRIPTION
FROM NCTAREASDESTINATARIOS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
END
GO

GO
--SqlScripter----[dbo].[ik_resp_ChangePositionUser_nc].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_ChangePositionUser_nc]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_ChangePositionUser_nc] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_ChangePositionUser_nc]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50) 
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPCHANGEUSER nvarchar(max)
EXEC @LOC_RESPCHANGEUSER = TRANSLATE @LOC= 'Loc_RespChangeUser'

DECLARE @LOC_POSITION nvarchar(max)
EXEC @LOC_POSITION = TRANSLATE @LOC= 'Loc_Rank'

DECLARE @LOC_NEWUSERIS nvarchar(max)
EXEC @LOC_NEWUSERIS = TRANSLATE @LOC= 'Loc_NewUserIs'

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH + ': '+ @LOC_RESPCHANGEUSER+'. '+ @LOC_POSITION +' O-' + LTRIM(STR(@POSITIONID)) + ': '+@LOC_NEWUSERIS+': ' + @NEWUSERDESCRIPTION,CODIGOTAREA
FROM NCTAREASDESTINATARIOS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID

  
UPDATE NCTAREASDESTINATARIOS
 SET NOMBREUSUARIO=@NEWUSERDESCRIPTION
FROM NCTAREASDESTINATARIOS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_bsindicators].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_bsindicators]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_bsindicators] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_bsindicators]
@POSITIONID INT,
@NEWPOSITIONID INT ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN


   SELECT BS_INDICATORSID INTO #TEMP_INVOLVED FROM VISTA_REL_INDICATOR_ORG
   WHERE O_ID = @NEWPOSITIONID


INSERT INTO IKI_ORGCHART(IKI_MASTERID, O_ID, ROL, IKI_DATE, IKI_USER)
SELECT DISTINCT IKI_MASTERID ,@NEWPOSITIONID, ROL, GETDATE(), @HISTORIA_USUARIO
FROM VISTA_REL_INDICATOR_ORG
WHERE O_ID = @POSITIONID
and VISTA_REL_INDICATOR_ORG.BS_INDICATORSID NOT IN(SELECT BS_INDICATORSID FROM #TEMP_INVOLVED)



   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_BSStratNodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_BSStratNodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_BSStratNodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_BSStratNodes]
@POSITIONID INT,
@NEWPOSITIONID INT,
@BSSTRATPLANID INT ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN


   SELECT BS_STRAT_NODESID INTO #TEMP_INVOLVED FROM VISTA_REL_BSSTRATNODE_ORG
   WHERE O_ID = @NEWPOSITIONID


INSERT INTO IKI_ORGCHART(IKI_MASTERID, O_ID, ROL, IKI_DATE, IKI_USER)
SELECT DISTINCT IKI_MASTERID ,@NEWPOSITIONID, ROL, GETDATE(), @HISTORIA_USUARIO
FROM VISTA_REL_BSSTRATNODE_ORG
WHERE O_ID = @POSITIONID
and VISTA_REL_BSSTRATNODE_ORG.BS_STRAT_NODESID NOT IN(SELECT BS_STRAT_NODESID FROM #TEMP_INVOLVED)


   

   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_DistribGroups].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_DistribGroups]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_DistribGroups] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_DistribGroups]
@POSITIONID INT,
@NEWPOSITIONID INT 
AS
BEGIN

   SELECT IKPOSITIONSGROUPSTREEID INTO #TEMP_GROUPS FROM IKPOSITIONSGROUPS
   WHERE POSITIONID = @NEWPOSITIONID

INSERT INTO IKPOSITIONSGROUPS( IKPOSITIONSGROUPSTREEID, POSITIONID) 
SELECT IKPOSITIONSGROUPSTREEID, @NEWPOSITIONID 
FROM IKPOSITIONSGROUPS
/*
   UPDATE IKPOSITIONSGROUPS
   SET POSITIONID = @NEWPOSITIONID
*/
   WHERE POSITIONID = @POSITIONID
   and IKPOSITIONSGROUPSTREEID NOT IN(SELECT IKPOSITIONSGROUPSTREEID FROM #TEMP_GROUPS)


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_DOC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_DOC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_DOC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_DOC]
@ESTADODOC INT ,
@POSITIONID INT,
@POSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITIONID INT,
@NEWPOSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITION_USERNAME VARCHAR(100),
@NEWPOSITION_USERID INT,
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @IKCAT INT
DECLARE @IKPDO INT

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_PERMISSIONSETFORUSER nvarchar(max)
EXEC @LOC_PERMISSIONSETFORUSER = TRANSLATE @LOC= 'Loc_PermissionSetForUser'

DECLARE @LOC_LEVEL nvarchar(max)
EXEC @LOC_LEVEL = TRANSLATE @LOC= 'Loc_Level'

DECLARE @LOC_RESPCOPYFROMPOS nvarchar(max)
EXEC @LOC_RESPCOPYFROMPOS = TRANSLATE @LOC= 'Loc_RespCopyFromPos'

DECLARE @LOC_PERMISSIONSETONDOC nvarchar(max)
EXEC @LOC_PERMISSIONSETONDOC = TRANSLATE @LOC= 'Loc_PermissionSetOnDocument'

DECLARE @LOC_INCLUDEDIN nvarchar(max)
EXEC @LOC_INCLUDEDIN = TRANSLATE @LOC= 'Loc_IncludedIn'

DECLARE @LOC_REVISIONPROCESS nvarchar(max)
EXEC @LOC_REVISIONPROCESS = TRANSLATE @LOC= 'Loc_RevisionProcess'

DECLARE @LOC_APPROVALPROCESS nvarchar(max)
EXEC @LOC_APPROVALPROCESS = TRANSLATE @LOC='Loc_ApprovalProcess'

DECLARE @LOC_USERADDEDTODEVFORUM nvarchar(max)
EXEC @LOC_USERADDEDTODEVFORUM = TRANSLATE @LOC= 'Loc_UserAddedToDevForum'

DECLARE @LOC_MEMBERSHIPADDEDTODEVFORUM nvarchar(max)
EXEC @LOC_MEMBERSHIPADDEDTODEVFORUM = TRANSLATE @LOC= 'Loc_MembershipAddedToDevForum'

SELECT @IKCAT=CATEGORIA, @IKPDO=PERMISOSDOCUMENTOS FROM USUARIOS WHERE CODIGO=@NEWPOSITION_USERID



/*REVISION*/

SELECT CODIGODOCUMENTO INTO #TEMP_INVOLVED FROM APROBACIONES
WHERE INSTANCIA = 1 and CODIGOCARGO = @NEWPOSITIONID

IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
	SELECT DISTINCT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH+': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION + ': '+ @LOC_PERMISSIONSETFORUSER + LTRIM(STR(@NEWPOSITION_USERID)) +' '+ @NEWPOSITION_USERNAME  +'. '+ @LOC_LEVEL+': 300003' ,0,0
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=1
	AND CODIGOAPROBACION=0
	 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
	AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))

	INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
	SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION +  ': '+ @LOC_PERMISSIONSETONDOC + LTRIM(STR(CODIGODOCUMENTO)) +'. '+ @LOC_LEVEL +': 300003' ,@HISTORIA_USUARIO,1
		FROM APROBACIONES
		 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
		 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
		 and CODIGOCARGO=@POSITIONID
		 and INSTANCIA=1
		AND CODIGOAPROBACION=0
		 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
		AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))

END


INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH+': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_INCLUDEDIN + @LOC_REVISIONPROCESS+': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)


INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': ' + @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_USERADDEDTODEVFORUM + LTRIM(STR(@NEWPOSITION_USERID)) + ' '+ @NEWPOSITION_USERNAME ,0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)



IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO PERMISOSDOC(CODIGOUSUARIO,CODIGODOCUMENTO , NIVELACCESO)
	SELECT  @NEWPOSITION_USERID,CODIGODOCUMENTO, 300003
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=1
	AND CODIGOAPROBACION=0
	 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
	AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))
END

INSERT INTO IKFOROSSUSCRIPTORES(CODIGOCARGO, CARGO, CODIGOUSUARIO, USUARIO, USUARIOALTA, FECHAALTA, CODIGOFORO)
SELECT DISTINCT @NEWPOSITIONID, @NEWPOSITION_DESCRIPTION, @NEWPOSITION_USERID,@NEWPOSITION_USERNAME ,@HISTORIA_USUARIO,GETDATE(), CODIGOFORO
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


INSERT INTO APROBACIONES(CODIGODOCUMENTO, CODIGOCARGO, INSTANCIA, L_APRUEBA)
SELECT CODIGODOCUMENTO, @NEWPOSITIONID, INSTANCIA, L_APRUEBA
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)




DROP TABLE #TEMP_INVOLVED


/*APROBACION*/

SELECT CODIGODOCUMENTO INTO #TEMP_INVOLVED2 FROM APROBACIONES
WHERE INSTANCIA = 2 and CODIGOCARGO = @NEWPOSITIONID

IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
	SELECT DISTINCT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH+ ': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+@LOC_PERMISSIONSETFORUSER + LTRIM(STR(@NEWPOSITION_USERID)) +' '+ @NEWPOSITION_USERNAME  +'. '+ @LOC_LEVEL +': 300003' ,0,0
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=2
	AND CODIGOAPROBACION=0
	 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))

	INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
	SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_RESPCOPYFROMPOS+' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_PERMISSIONSETONDOC + LTRIM(STR(CODIGODOCUMENTO)) +'. '+ @LOC_LEVEL +': 300003' ,@HISTORIA_USUARIO,1
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=2
	AND CODIGOAPROBACION=0
	 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))

END

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_RESPCOPYFROMPOS+ ' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_USERADDEDTODEVFORUM + LTRIM(STR(@NEWPOSITION_USERID)) + ' ' + @NEWPOSITION_USERNAME ,0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH+ ': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_MEMBERSHIPADDEDTODEVFORUM + LTRIM(STR(CODIGODOCUMENTO))  ,@HISTORIA_USUARIO,1
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)



INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+@LOC_INCLUDEDIN + @LOC_APPROVALPROCESS+': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)


INSERT INTO PERMISOSDOC(CODIGOUSUARIO,CODIGODOCUMENTO , NIVELACCESO)
SELECT  DISTINCT @NEWPOSITION_USERID,CODIGODOCUMENTO, 300003
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))


INSERT INTO IKFOROSSUSCRIPTORES(CODIGOCARGO, CARGO, CODIGOUSUARIO, USUARIO, USUARIOALTA, FECHAALTA, CODIGOFORO)
SELECT DISTINCT @NEWPOSITIONID, @NEWPOSITION_DESCRIPTION, @NEWPOSITION_USERID,@NEWPOSITION_USERNAME ,@HISTORIA_USUARIO,GETDATE(), CODIGOFORO
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


INSERT INTO APROBACIONES(CODIGODOCUMENTO, CODIGOCARGO, INSTANCIA, L_APRUEBA)
SELECT CODIGODOCUMENTO, @NEWPOSITIONID, INSTANCIA, L_APRUEBA
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)







   DROP TABLE #TEMP_INVOLVED2


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_DOC_Dist].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_DOC_Dist]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_DOC_Dist] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_DOC_Dist]
@ESTADODOC INT ,
@POSITIONID INT,
@POSITION_DESCRIPTION VARCHAR(100),

@NEWPOSITIONID INT,
@NEWPOSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITION_USERNAME VARCHAR(100),
@NEWPOSITION_USERID INT,
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPCOPYFROMPOS nvarchar(max)
EXEC @LOC_RESPCOPYFROMPOS = TRANSLATE @LOC= 'Loc_RespCopyFromPos'

DECLARE @LOC_INCLUDEDINDISTRIBUTIONPROC nvarchar(max)
EXEC @LOC_INCLUDEDINDISTRIBUTIONPROC = TRANSLATE @LOC= 'Loc_IncludedInDistributionProc'


SELECT CODIGODOCUMENTO INTO #TEMP_INVOLVED FROM DISTRIBUCION
WHERE CODIGOCARGO = @NEWPOSITIONID

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+@LOC_RESPCOPYFROMPOS+' O-' + LTRIM(STR(@POSITIONID))+ ' ' + @POSITION_DESCRIPTION + ': '+ @LOC_INCLUDEDINDISTRIBUTIONPROC +': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM DISTRIBUCION
 INNER JOIN DOCUMENTOS ON DISTRIBUCION.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE 
DISTRIBUCION.L_SUBDISTRIBUIDOR=0 
AND DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
AND CODIGODISTRIBUCION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)



INSERT INTO DISTRIBUCION(CODIGODOCUMENTO, CODIGOCARGO, CODIGODISTRIBUIDOR, INSTRUCCIONES, ARCHIVOINSTRUCCIONES, L_SUBDISTRIBUIDOR, CODIGOGRUPO, TIPO_DISTRIBUCION)
SELECT CODIGODOCUMENTO, @NEWPOSITIONID,  CODIGODISTRIBUIDOR, INSTRUCCIONES, ARCHIVOINSTRUCCIONES, L_SUBDISTRIBUIDOR, CODIGOGRUPO, TIPO_DISTRIBUCION
FROM DISTRIBUCION
 INNER JOIN DOCUMENTOS ON DISTRIBUCION.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE 
DISTRIBUCION.L_SUBDISTRIBUIDOR=0
 AND DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 AND CODIGODISTRIBUCION=0
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)




END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_NC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_NC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_NC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_NC]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)

AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPCOPYFROMPOS nvarchar(max)
EXEC @LOC_RESPCOPYFROMPOS = TRANSLATE @LOC= 'Loc_RespCopyFromPos'

DECLARE @LOC_INVOLVEDADDED nvarchar(max)
EXEC @LOC_INVOLVEDADDED = TRANSLATE @LOC= 'Loc_Involved_added'


DECLARE @LOC_TASKRESPDADDED nvarchar(max)
EXEC @LOC_TASKRESPDADDED = TRANSLATE @LOC= 'Loc_TaskResponsibleAdded'

SELECT CODIGONC INTO #TEMP_INVOLVED FROM NCINVOLUCRADOS
WHERE CODIGOCARGO = @NEWPOSITIONID

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH+': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ': '+@LOC_INVOLVEDADDED + @NEWPOSITIONDESCRIPTION  + ' (' + @NEWUSERDESCRIPTION + ')',NCMAINPROD.ESTADO
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)





INSERT INTO NCINVOLUCRADOS(CODIGONC, CODIGOCARGO, INSTANCIA, NOMBRECARGO, TIPOOBJETO, CODIGOEXTERNO, NIVEL, INVOLMENT_METHOD)
SELECT CODIGONC, @NEWPOSITIONID, INSTANCIA, @NEWPOSITIONDESCRIPTION, TIPOOBJETO, CODIGOEXTERNO, NIVEL, INVOLMENT_METHOD
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)


SELECT CODIGOTAREA INTO #TEMP_NCTAREASDESTINATARIOS FROM NCTAREASDESTINATARIOS
WHERE CODIGOCARGO = @NEWPOSITIONID

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH + ': '+  @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ': '+ @LOC_TASKRESPDADDED + @NEWPOSITIONDESCRIPTION  + ' (' + @NEWUSERDESCRIPTION + ')' ,CODIGOTAREA,NCMAINPROD.ESTADO
FROM NCTAREASDESTINATARIOS
 INNER JOIN( NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
 and NCTAREASDESTINATARIOS.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)



INSERT INTO NCTAREASDESTINATARIOS(CODIGOTAREA, CODIGOCARGO, NOMBRECARGO, NOMBREUSUARIO, INVOLMENT_METHOD)
SELECT CODIGOTAREA, @NEWPOSITIONID, @NEWPOSITIONDESCRIPTION, @NEWUSERDESCRIPTION, INVOLMENT_METHOD
FROM NCTAREASDESTINATARIOS
 INNER JOIN( NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
 and NCTAREASDESTINATARIOS.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)



 
SELECT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TEMP_TASKSSTEPSRESPONSIBLES FROM  NCTASKSSTEPSRESPONSIBLES
  WHERE NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID = @NEWPOSITIONID

INSERT INTO NCTASKSSTEPSRESPONSIBLES(NCTASKSSTEPS_ID, RESPONSIBLE_RANKID)
SELECT DISTINCT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID, @NEWPOSITIONID 
FROM NCTASKSSTEPSRESPONSIBLES
	JOIN NCTASKSSTEPS ON NCTASKSSTEPS.NCTASKSSTEPS_ID=NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID
	JOIN NCTAREAS ON NCTAREAS.CODIGO=NCTASKSSTEPS.NCTASKID
	JOIN NCMAINPROD ON NCMAINPROD.CODIGO=NCTAREAS.CODIGONC
WHERE 
	NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 AND
	NCMAINPROD.TIPO=@MODULEID
  AND
	NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID
  AND
	NOT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES)



DROP TABLE #TEMP_INVOLVED
DROP TABLE #TEMP_NCTAREASDESTINATARIOS
DROP TABLE #TEMP_TASKSSTEPSRESPONSIBLES


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_NCWGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_NCWGS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_NCWGS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_NCWGS]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)

AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPCOPYFROMPOS nvarchar(max)
EXEC @LOC_RESPCOPYFROMPOS = TRANSLATE @LOC= 'Loc_RespCopyFromPos'

DECLARE @LOC_WORKGROUP nvarchar(max)
EXEC @LOC_WORKGROUP = TRANSLATE @LOC='Loc_WorkGroup'

DECLARE @LOC_UPDATED nvarchar(max)
EXEC @LOC_UPDATED = TRANSLATE @LOC='Loc_Updated'

DECLARE @LOC_ROLE nvarchar(max)
EXEC @LOC_ROLE = TRANSLATE @LOC='Loc_Rol'

DECLARE @LOC_MEMBERADDED nvarchar(max)
EXEC @LOC_MEMBERADDED = TRANSLATE @LOC='Loc_MemberAdded'

SELECT ISSUE_ID INTO #TEMP_IKROLES_NCINVOLUCRADOS FROM IKROLES_NCINVOLUCRADOS
WHERE POSITION_ID = @NEWPOSITIONID

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, ISSUE_STATUS)
SELECT ISSUE_ID, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_RESPCOPYFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ': '+ @LOC_WORKGROUP +' ''' + VISTA_IKROLES_NCINVOLUCRADOS.NCWORKGROUPS_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_ROLE +' ''' + VISTA_IKROLES_NCINVOLUCRADOS.IKROLES_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_MEMBERADDED+': ' + @NEWPOSITIONDESCRIPTION  ,NCMAINPROD.ESTADO
FROM VISTA_IKROLES_NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON VISTA_IKROLES_NCINVOLUCRADOS.ISSUE_ID=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and VISTA_IKROLES_NCINVOLUCRADOS.POSITION_ID=@POSITIONID
 and VISTA_IKROLES_NCINVOLUCRADOS.ISSUE_ID NOT IN (SELECT ISSUE_ID FROM #TEMP_IKROLES_NCINVOLUCRADOS)



INSERT INTO IKROLES_NCINVOLUCRADOS(ISSUE_ID, NCWORKGROUPS_ID, IKROLES_ID, POSITION_ID)
SELECT ISSUE_ID, NCWORKGROUPS_ID, IKROLES_ID, @NEWPOSITIONID
FROM IKROLES_NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON IKROLES_NCINVOLUCRADOS.ISSUE_ID=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and IKROLES_NCINVOLUCRADOS.POSITION_ID=@POSITIONID
 and IKROLES_NCINVOLUCRADOS.ISSUE_ID NOT IN (SELECT ISSUE_ID FROM #TEMP_IKROLES_NCINVOLUCRADOS)


DROP TABLE #TEMP_IKROLES_NCINVOLUCRADOS

END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_PROCNodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_PROCNodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_PROCNodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_PROCNodes]
@POSITIONID INT,
@NEWPOSITIONID INT,
@PROCPLANID INT ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN


   SELECT PROC_NODESID INTO #TEMP_INVOLVED FROM VISTA_REL_PROCNODE_ORG
   WHERE O_ID = @NEWPOSITIONID


INSERT INTO IKI_ORGCHART(IKI_MASTERID, O_ID, ROL, IKI_DATE, IKI_USER)
SELECT DISTINCT IKI_MASTERID ,@NEWPOSITIONID, ROL, GETDATE(), @HISTORIA_USUARIO
FROM VISTA_REL_PROCNODE_ORG
WHERE O_ID = @POSITIONID
and VISTA_REL_PROCNODE_ORG.PROC_NODESID NOT IN(SELECT PROC_NODESID FROM #TEMP_INVOLVED)


   

   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Copy_TPROT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Copy_TPROT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Copy_TPROT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Copy_TPROT]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWPOSITIONID INT 
AS
BEGIN


SELECT CODIGONC INTO #TEMP_INVOLVED FROM TPROT_INVOLVED
WHERE CODIGOCARGO = @NEWPOSITIONID


INSERT INTO TPROT_INVOLVED(CODIGONC, CODIGOCARGO, NIVEL, L_INCLUIR_EN_FORO)
SELECT TPROT_INVOLVED.CODIGONC, @NEWPOSITIONID , NIVEL, L_INCLUIR_EN_FORO
FROM TPROT_INVOLVED
 INNER JOIN VAR_TPROT_VIEW ON TPROT_INVOLVED.CODIGONC=VAR_TPROT_VIEW.CODIGONC
 WHERE VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 and VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
 and TPROT_INVOLVED.CODIGOCARGO=@POSITIONID
 and TPROT_INVOLVED.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)


   SELECT CODIGOTAREA INTO #TEMP_NCTAREASDESTINATARIOS FROM TPROT_RESPONSIBLE
   WHERE CODIGOCARGO = @NEWPOSITIONID



INSERT INTO  TPROT_RESPONSIBLE(CODIGOTAREA, CODIGOCARGO)
 SELECT CODIGOTAREA,@NEWPOSITIONID
FROM TPROT_RESPONSIBLE
 INNER JOIN( TPROT_TASK INNER JOIN VAR_TPROT_VIEW ON TPROT_TASK.CODIGONC=VAR_TPROT_VIEW.CODIGONC)
   ON TPROT_RESPONSIBLE.CODIGOTAREA = TPROT_TASK.CODIGO
 WHERE VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 and VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
 and TPROT_RESPONSIBLE.CODIGOCARGO=@POSITIONID
 and TPROT_RESPONSIBLE.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)




SELECT TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TEMP_TASKSSTEPSRESPONSIBLES FROM TPROT_TASKSSTEPSRESPONSIBLES
  WHERE TPROT_TASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID = @NEWPOSITIONID

INSERT INTO TPROT_TASKSSTEPSRESPONSIBLES(NCTASKSSTEPS_ID, RESPONSIBLE_RANKID)
SELECT DISTINCT TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID, @NEWPOSITIONID 
FROM TPROT_TASKSSTEPSRESPONSIBLES
	JOIN TPROT_TASKSSTEPS ON TPROT_TASKSSTEPS.NCTASKSSTEPS_ID=TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID
	JOIN TPROT_TASK ON TPROT_TASK.CODIGO=TPROT_TASKSSTEPS.NCTASKID
	JOIN VAR_TPROT_VIEW ON VAR_TPROT_VIEW.CODIGONC=TPROT_TASK.CODIGONC
WHERE 
	VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 AND
	VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
  AND
	TPROT_TASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID
  AND
	NOT TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES)




   DROP TABLE #TEMP_INVOLVED
   DROP TABLE #TEMP_NCTAREASDESTINATARIOS
   DROP TABLE #TEMP_TASKSSTEPSRESPONSIBLES
END
GO

GO
--SqlScripter----[dbo].[ik_resp_Remove_nc].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Remove_nc]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Remove_nc] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Remove_nc]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT ,
@POSITION_DESCRIPTION VARCHAR(100),
@POSITION_USER VARCHAR(100),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN


DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPREMOVE nvarchar(max)
EXEC @LOC_RESPREMOVE = TRANSLATE @LOC='Loc_RespRemove'

DECLARE @LOC_INVOLVEDREMOVED nvarchar(max)
EXEC @LOC_INVOLVEDREMOVED = TRANSLATE @LOC= 'Loc_Involved_removed'

DECLARE @LOC_TASKRESPONSIBLEREMOVED nvarchar(max)
EXEC @LOC_TASKRESPONSIBLEREMOVED = TRANSLATE @LOC='Loc_TaskResponsibleRemoved'

DECLARE @LOC_TASKSTEPEDITED nvarchar(max)
EXEC @LOC_TASKSTEPEDITED = TRANSLATE @LOC='Loc_TaskStepEdited'

SELECT * INTO #TMP_ONEPERSONTASKS FROM (
	SELECT CODIGONC,CODIGOTAREA FROM VISTA_FULLINVOLUCRADOSTAREA GROUP BY CODIGONC,VISTA_FULLINVOLUCRADOSTAREA.CODIGOTAREA HAVING COUNT(CODIGOTAREA)=1
) DATA
 WHERE CODIGOTAREA IN (SELECT CODIGOTAREA FROM VISTA_FULLINVOLUCRADOSTAREA WHERE CODIGOCARGO=@POSITIONID )


SELECT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TMP_ONEPERSONTASKSSTEPS  FROM NCTASKSSTEPSRESPONSIBLES GROUP BY NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID HAVING COUNT(NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID)=1





INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH+': '+ @LOC_RESPREMOVE +': '+ @LOC_INVOLVEDREMOVED + @POSITION_DESCRIPTION + ' (' + @POSITION_USER + ')',NCMAINPROD.ESTADO
FROM NCINVOLUCRADOS INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC = NCMAINPROD.CODIGO 
WHERE 
NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID
AND NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
and NCMAINPROD.TIPO = @MODULEID
and NCINVOLUCRADOS.CODIGOCARGO = @POSITIONID
   AND NOT NCINVOLUCRADOS.CODIGONC IN (
			SELECT #TMP_ONEPERSONTASKS.CODIGONC FROM #TMP_ONEPERSONTASKS
	)


INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(),  @LOC_BATCH+': '+ @LOC_RESPREMOVE +': '+ @LOC_TASKRESPONSIBLEREMOVED +  @POSITION_DESCRIPTION   + ' (' + @POSITION_USER + ')' ,CODIGOTAREA,NCMAINPROD.ESTADO
FROM NCTAREASDESTINATARIOS INNER JOIN(NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC = NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
WHERE 
NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
and NCMAINPROD.TIPO = @MODULEID
and NCTAREASDESTINATARIOS.CODIGOCARGO = @POSITIONID
and NOT NCTAREASDESTINATARIOS.CODIGOTAREA IN (SELECT #TMP_ONEPERSONTASKS.CODIGOTAREA FROM #TMP_ONEPERSONTASKS)

/*
INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_RESPREMOVE +': '+ @LOC_TASKSTEPEDITED +': TS-'+ LTRIM(STR(NCTASKSSTEPS.NCTASKSSTEPS_ID)) ,NCTASKID,NCMAINPROD.ESTADO
FROM NCTASKSSTEPS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID=NCTAREAS.CODIGO
 WHERE 
NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO<=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTASKSSTEPS.RESPONSIBLE_RANKID=@POSITIONID
 */

DELETE NCINVOLUCRADOS
FROM NCINVOLUCRADOS INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC = NCMAINPROD.CODIGO
WHERE 
NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID
AND NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
and NCMAINPROD.TIPO = @MODULEID
and NCINVOLUCRADOS.CODIGOCARGO = @POSITIONID
   AND NOT NCINVOLUCRADOS.CODIGONC IN (
			SELECT #TMP_ONEPERSONTASKS.CODIGONC FROM #TMP_ONEPERSONTASKS
	)

/*
UPDATE NCTASKSSTEPS
 SET RESPONSIBLE_RANKID=NULL
FROM NCTASKSSTEPS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID=NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO<=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTASKSSTEPS.RESPONSIBLE_RANKID=@POSITIONID
 */
 
SELECT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TEMP_TASKSSTEPSRESPONSIBLES 
FROM NCTASKSSTEPSRESPONSIBLES
JOIN NCTASKSSTEPS ON NCTASKSSTEPS.NCTASKSSTEPS_ID=NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID
JOIN NCTAREAS ON NCTAREAS.CODIGO=NCTASKSSTEPS.NCTASKID
JOIN NCMAINPROD ON NCMAINPROD.CODIGO=NCTAREAS.CODIGONC
WHERE
	NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 AND
	NCMAINPROD.TIPO=@MODULEID
  AND
	NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID
--AND NOT NCTASKSSTEPS.NCTASKSSTEPS_ID IN (SELECT #TMP_ONEPERSONTASKSSTEPS.NCTASKSSTEPS_ID FROM #TMP_ONEPERSONTASKSSTEPS)
AND NOT NCTASKSSTEPS.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM NCTASKSSTEPS JOIN #TMP_ONEPERSONTASKS ON #TMP_ONEPERSONTASKS.CODIGOTAREA = NCTASKSSTEPS.NCTASKID)

 INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_RESPREMOVE +': '+ @LOC_TASKSTEPEDITED +': TS-'+ LTRIM(STR(NCTASKSSTEPS.NCTASKSSTEPS_ID)) +': ' + @LOC_TASKSTEPEDITED ,NCTASKID,NCMAINPROD.ESTADO
FROM NCTASKSSTEPS
JOIN #TEMP_TASKSSTEPSRESPONSIBLES ON #TEMP_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID=NCTASKSSTEPS.NCTASKSSTEPS_ID
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID=NCTAREAS.CODIGO
 WHERE 
NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO<=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID



DELETE  NCTASKSSTEPSRESPONSIBLES 
FROM NCTASKSSTEPSRESPONSIBLES
JOIN NCTASKSSTEPS ON NCTASKSSTEPS.NCTASKSSTEPS_ID=NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID
JOIN #TEMP_TASKSSTEPSRESPONSIBLES  ON #TEMP_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID=NCTASKSSTEPS.NCTASKSSTEPS_ID
JOIN NCTAREAS ON NCTAREAS.CODIGO=NCTASKSSTEPS.NCTASKID
JOIN NCMAINPROD ON NCMAINPROD.CODIGO=NCTAREAS.CODIGONC
WHERE
	NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 AND
	NCMAINPROD.TIPO=@MODULEID
  AND
	NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID


UPDATE NCTASKSSTEPS SET NCTASKSSTEPS.RESPONSIBLES_MODE=0--PASO A MODO TODOS LOS PASOS QUE PUDIERAN QUEDAR SIN RESPONSABLE
WHERE NCTASKSSTEPS.NCTASKSSTEPS_ID IN (SELECT #TEMP_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES WHERE NOT #TEMP_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID FROM NCTASKSSTEPSRESPONSIBLES))


DELETE NCTAREASDESTINATARIOS
   FROM NCTAREASDESTINATARIOS INNER JOIN(NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC = NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
   WHERE NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
   and NCMAINPROD.TIPO = @MODULEID
   and NCTAREASDESTINATARIOS.CODIGOCARGO = @POSITIONID
	and NOT NCTAREASDESTINATARIOS.CODIGOTAREA IN (SELECT #TMP_ONEPERSONTASKS.CODIGOTAREA FROM #TMP_ONEPERSONTASKS)


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Remove_NCWGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Remove_NCWGS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Remove_NCWGS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Remove_NCWGS]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT ,
@POSITION_DESCRIPTION VARCHAR(100),
@POSITION_USER VARCHAR(100),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_RESPREMOVE nvarchar(max)
EXEC @LOC_RESPREMOVE = TRANSLATE @LOC='Loc_RespRemove'

DECLARE @LOC_WORKGROUP nvarchar(max)
EXEC @LOC_WORKGROUP = TRANSLATE @LOC='Loc_WorkGroup'

DECLARE @LOC_UPDATED nvarchar(max)
EXEC @LOC_UPDATED = TRANSLATE @LOC='Loc_Updated'

DECLARE @LOC_ROLE nvarchar(max)
EXEC @LOC_ROLE = TRANSLATE @LOC='Loc_Rol'

DECLARE @LOC_MEMBERREMOVED nvarchar(max)
EXEC @LOC_MEMBERREMOVED = TRANSLATE @LOC='Loc_MemberRemoved'

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT ISSUE_ID, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH+ ': '+ @LOC_RESPREMOVE +': '+@LOC_WORKGROUP+' ''' + VISTA_IKROLES_NCINVOLUCRADOS.NCWORKGROUPS_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_ROLE +' ' + VISTA_IKROLES_NCINVOLUCRADOS.IKROLES_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_MEMBERREMOVED +': ' + @POSITION_DESCRIPTION  ,NCMAINPROD.ESTADO
FROM VISTA_IKROLES_NCINVOLUCRADOS INNER JOIN NCMAINPROD ON VISTA_IKROLES_NCINVOLUCRADOS.ISSUE_ID = NCMAINPROD.CODIGO 
WHERE 
NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
and NCMAINPROD.TIPO = @MODULEID
and VISTA_IKROLES_NCINVOLUCRADOS.POSITION_ID = @POSITIONID


DELETE IKROLES_NCINVOLUCRADOS
FROM IKROLES_NCINVOLUCRADOS INNER JOIN NCMAINPROD ON IKROLES_NCINVOLUCRADOS.ISSUE_ID = NCMAINPROD.CODIGO
WHERE 
NCMAINPROD.ESTADO >= @ESTADO1 and NCMAINPROD.ESTADO <= @ESTADO2
and NCMAINPROD.TIPO = @MODULEID
and IKROLES_NCINVOLUCRADOS.POSITION_ID = @POSITIONID



END
GO

GO
--SqlScripter----[dbo].[ik_resp_Remove_tprot].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Remove_tprot]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Remove_tprot] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Remove_tprot]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT 
AS
BEGIN


   DELETE TPROT_RESPONSIBLE
   FROM TPROT_RESPONSIBLE INNER JOIN(TPROT_TASK INNER JOIN VAR_TPROT_VIEW ON TPROT_TASK.CODIGONC = VAR_TPROT_VIEW.CODIGONC)
   ON TPROT_RESPONSIBLE.CODIGOTAREA = TPROT_TASK.CODIGO
   WHERE VAR_TPROT_VIEW.V_ESTADO >= @ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <= @ESTADO2
   and VAR_TPROT_VIEW.VAR_TPROT_CLASS = @MODULEID
   and TPROT_RESPONSIBLE.CODIGOCARGO = @POSITIONID
  
   and NOT TPROT_RESPONSIBLE.CODIGOTAREA IN (SELECT TPROT_RESPONSIBLE.CODIGOTAREA FROM TPROT_RESPONSIBLE GROUP BY CODIGOTAREA HAVING COUNT(CODIGOTAREA)<=1)


   DELETE TPROT_INVOLVED
   FROM TPROT_INVOLVED INNER JOIN VAR_TPROT_VIEW ON TPROT_INVOLVED.CODIGONC = VAR_TPROT_VIEW.CODIGONC
   WHERE VAR_TPROT_VIEW.V_ESTADO >= @ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <= @ESTADO2
   and VAR_TPROT_VIEW.VAR_TPROT_CLASS = @MODULEID
   and TPROT_INVOLVED.CODIGOCARGO = @POSITIONID

   AND NOT TPROT_INVOLVED.CODIGONC IN (
			SELECT CODIGONC FROM VISTA_TPROT_RESPONSIBLE_TASK GROUP BY CODIGONC,CODIGOTAREA HAVING COUNT(CODIGOTAREA)<=1
	)


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_bsindicators].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_bsindicators]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_bsindicators] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_bsindicators]
@POSITIONID INT,
@NEWPOSITIONID INT,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN


   SELECT BS_INDICATORSID INTO #TEMP_INVOLVED FROM VISTA_REL_INDICATOR_ORG
   WHERE O_ID = @NEWPOSITIONID


   UPDATE VISTA_REL_INDICATOR_ORG
   SET O_ID = @NEWPOSITIONID
   WHERE O_ID = @POSITIONID
   and VISTA_REL_INDICATOR_ORG.BS_INDICATORSID NOT IN(SELECT BS_INDICATORSID FROM #TEMP_INVOLVED)



   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_bsstratnodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_bsstratnodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_bsstratnodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_bsstratnodes]
@POSITIONID INT,
@NEWPOSITIONID INT,
@BSSTRATPLANID INT 
AS
BEGIN


   SELECT BS_STRAT_NODESID INTO #TEMP_INVOLVED FROM VISTA_REL_BSSTRATNODE_ORG
   WHERE O_ID = @NEWPOSITIONID


   UPDATE VISTA_REL_BSSTRATNODE_ORG
   SET O_ID = @NEWPOSITIONID
   WHERE O_ID = @POSITIONID
   and BS_STRAT_PLANSID = @BSSTRATPLANID
   and VISTA_REL_BSSTRATNODE_ORG.BS_STRAT_NODESID NOT IN(SELECT BS_STRAT_NODESID FROM #TEMP_INVOLVED)



   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_DistribGroups].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_DistribGroups]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_DistribGroups] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_DistribGroups]
@POSITIONID INT,
@NEWPOSITIONID INT 
AS
BEGIN

   SELECT IKPOSITIONSGROUPSTREEID INTO #TEMP_GROUPS FROM IKPOSITIONSGROUPS
   WHERE POSITIONID = @NEWPOSITIONID


   UPDATE IKPOSITIONSGROUPS
   SET POSITIONID = @NEWPOSITIONID
   WHERE POSITIONID = @POSITIONID
   and IKPOSITIONSGROUPSTREEID NOT IN(SELECT IKPOSITIONSGROUPSTREEID FROM #TEMP_GROUPS)


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_DOC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_DOC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_DOC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_DOC]
@ESTADODOC INT ,
@POSITIONID INT,
@POSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITIONID INT,
@NEWPOSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITION_USERNAME VARCHAR(100),
@NEWPOSITION_USERID INT,
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_TRANSFERFROMPOS nvarchar(max)
EXEC @LOC_TRANSFERFROMPOS = TRANSLATE @LOC= 'Loc_RespTransferFromPos'

DECLARE @LOC_LEVEL nvarchar(max)
EXEC @LOC_LEVEL = TRANSLATE @LOC= 'Loc_Level'

DECLARE @LOC_PERMISSIONSETFORUSER nvarchar(max)
EXEC @LOC_PERMISSIONSETFORUSER = TRANSLATE @LOC= 'Loc_PermissionSetForUser'

DECLARE @LOC_PERMISSIONSETFONDOC nvarchar(max)
EXEC @LOC_PERMISSIONSETFONDOC = TRANSLATE @LOC= 'Loc_PermissionSetOnDocument'

DECLARE @LOC_INCLUDEDIN nvarchar(max)
EXEC @LOC_INCLUDEDIN = TRANSLATE @LOC= 'Loc_IncludedIn'

DECLARE @LOC_REVISIONPROCESS nvarchar(max)
EXEC @LOC_REVISIONPROCESS = TRANSLATE @LOC= 'Loc_RevisionProcess'

DECLARE @LOC_APPROVALPROCESS nvarchar(max)
EXEC @LOC_APPROVALPROCESS = TRANSLATE @LOC= 'Loc_ApprovalProcess'

DECLARE @LOC_USERADDEDTODEVFORUM nvarchar(max)
EXEC @LOC_USERADDEDTODEVFORUM = TRANSLATE @LOC= 'Loc_UserAddedToDevForum'

DECLARE @LOC_MEMBERSHIPADDEDTODEVFORUM nvarchar(max)
EXEC @LOC_MEMBERSHIPADDEDTODEVFORUM = TRANSLATE @LOC= 'Loc_MembershipAddedToDevForum'

DECLARE @IKCAT INT
DECLARE @IKPDO INT

SELECT @IKCAT=CATEGORIA, @IKPDO=PERMISOSDOCUMENTOS FROM USUARIOS WHERE CODIGO=@NEWPOSITION_USERID


SELECT DISTINCT CODIGODOCUMENTO INTO #TEMP_INVOLVED FROM APROBACIONES WHERE INSTANCIA = 1 and CODIGOCARGO = @NEWPOSITIONID
SELECT DISTINCT CODIGODOCUMENTO INTO #TEMP_PERMISOS FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID)


IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_PERMISSIONSETFORUSER + LTRIM(STR(@NEWPOSITION_USERID)) +' '+ @NEWPOSITION_USERNAME  +'. '+ @LOC_LEVEL +': 300003' ,0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0

AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
-- and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL
--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_PERMISSIONSETFONDOC + LTRIM(STR(APROBACIONES.CODIGODOCUMENTO)) +'. '+ @LOC_LEVEL +': 300003' ,@HISTORIA_USUARIO,1
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO


 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL
--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))

END

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_INCLUDEDIN +' '+ @LOC_REVISIONPROCESS +': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
  LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL


INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_USERADDEDTODEVFORUM + LTRIM(STR(@NEWPOSITION_USERID))+ ' ' + @NEWPOSITION_USERNAME ,0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_MEMBERSHIPADDEDTODEVFORUM + LTRIM(STR(APROBACIONES.CODIGODOCUMENTO))  ,@HISTORIA_USUARIO,1
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO PERMISOSDOC(CODIGOUSUARIO,CODIGODOCUMENTO , NIVELACCESO)
	SELECT  @NEWPOSITION_USERID,APROBACIONES.CODIGODOCUMENTO, 300003
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=1
	AND CODIGOAPROBACION=0
	AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
	 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
	 AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL
	--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))
END

INSERT INTO IKFOROSSUSCRIPTORES(CODIGOCARGO, CARGO, CODIGOUSUARIO, USUARIO, USUARIOALTA, FECHAALTA, CODIGOFORO)
SELECT DISTINCT @NEWPOSITIONID, @NEWPOSITION_DESCRIPTION, @NEWPOSITION_USERID,@NEWPOSITION_USERNAME ,@HISTORIA_USUARIO,GETDATE(), CODIGOFORO
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


UPDATE APROBACIONES
 SET CODIGOCARGO=@NEWPOSITIONID
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 LEFT JOIN  #TEMP_INVOLVED ON  #TEMP_INVOLVED.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=1
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)
 AND #TEMP_INVOLVED.CODIGODOCUMENTO IS NULL


   DROP TABLE #TEMP_INVOLVED



/*APROBACION*/

SELECT DISTINCT CODIGODOCUMENTO INTO #TEMP_INVOLVED2 FROM APROBACIONES WHERE INSTANCIA = 2 and CODIGOCARGO = @NEWPOSITIONID

IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
	SELECT DISTINCT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_PERMISSIONSETFORUSER + LTRIM(STR(@NEWPOSITION_USERID)) + ' '+ @NEWPOSITION_USERNAME  + '. '+ @LOC_LEVEL +': 300003' ,0,0
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=2
	AND CODIGOAPROBACION=0
	 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL
	--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))
	AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_PERMISSIONSETFONDOC + LTRIM(STR(APROBACIONES.CODIGODOCUMENTO)) +'. '+ @LOC_LEVEL +': 300003' ,@HISTORIA_USUARIO,1
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=2
	AND CODIGOAPROBACION=0
	 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL
	--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))
	AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL
END

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_INCLUDEDIN +' '+ @LOC_APPROVALPROCESS +': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL

INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT DISTINCT APROBACIONES.CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_USERADDEDTODEVFORUM + LTRIM(STR(@NEWPOSITION_USERID)) + ' '+ @NEWPOSITION_USERNAME ,0,0
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)

INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY, IK_PEOPLE_HISTORY_USER, IK_PEOPLE_HISTORY_ENTRY_TYPE)
SELECT DISTINCT @NEWPOSITION_USERID, GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION  + ': '+ @LOC_MEMBERSHIPADDEDTODEVFORUM + LTRIM(STR(APROBACIONES.CODIGODOCUMENTO))  ,@HISTORIA_USUARIO,1
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL
AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


IF @IKCAT!= 4 AND @IKPDO !=0
BEGIN
	INSERT INTO PERMISOSDOC(CODIGOUSUARIO,CODIGODOCUMENTO , NIVELACCESO)
	SELECT  DISTINCT @NEWPOSITION_USERID,APROBACIONES.CODIGODOCUMENTO, 300003
	FROM APROBACIONES
	 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN #TEMP_PERMISOS ON #TEMP_PERMISOS.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
	 and CODIGOCARGO=@POSITIONID
	 and INSTANCIA=2
	AND CODIGOAPROBACION=0
	 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL

	--AND CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE CODIGOUSUARIO =@NEWPOSITION_USERID OR CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO= @NEWPOSITION_USERID))
	AND #TEMP_PERMISOS.CODIGODOCUMENTO IS NULL
END

INSERT INTO IKFOROSSUSCRIPTORES(CODIGOCARGO, CARGO, CODIGOUSUARIO, USUARIO, USUARIOALTA, FECHAALTA, CODIGOFORO)
SELECT DISTINCT @NEWPOSITIONID, @NEWPOSITION_DESCRIPTION, @NEWPOSITION_USERID,@NEWPOSITION_USERNAME ,@HISTORIA_USUARIO,GETDATE(), CODIGOFORO
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
INNER JOIN IKFOROSSUSCRIPTORES ON IKFOROSSUSCRIPTORES.CODIGOFORO=DOCUMENTOS.CODIGOFORODESARROLLO
	 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO

 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and APROBACIONES.CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL

AND NOT CODIGOFORO IN (SELECT CODIGOFORO FROM IKFOROSSUSCRIPTORES WHERE CODIGOUSUARIO=@NEWPOSITION_USERID)


UPDATE APROBACIONES
 SET CODIGOCARGO=@NEWPOSITIONID
FROM APROBACIONES
 INNER JOIN DOCUMENTOS ON APROBACIONES.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
	 LEFT JOIN  #TEMP_INVOLVED2 ON  #TEMP_INVOLVED2.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE DOCUMENTOS.ESTADO=@ESTADODOC
 and CODIGOCARGO=@POSITIONID
 and INSTANCIA=2
AND CODIGOAPROBACION=0
 --and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED2)
	 AND #TEMP_INVOLVED2.CODIGODOCUMENTO IS NULL



   DROP TABLE #TEMP_INVOLVED2


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_DOC_Dist].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_DOC_Dist]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_DOC_Dist] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_DOC_Dist]
@ESTADODOC INT ,
@POSITIONID INT,
@POSITION_DESCRIPTION VARCHAR(100),

@NEWPOSITIONID INT,
@NEWPOSITION_DESCRIPTION VARCHAR(100),
@NEWPOSITION_USERNAME VARCHAR(100),
@HISTORIA_USUARIO VARCHAR(100)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_TRANSFERFROMPOS nvarchar(max)
EXEC @LOC_TRANSFERFROMPOS = TRANSLATE @LOC= 'Loc_RespTransferFromPos'

DECLARE @LOC_INCLUDEDINDISTRB nvarchar(max)
EXEC @LOC_INCLUDEDINDISTRB = TRANSLATE @LOC= 'Loc_IncludedInDistributionProc'

   SELECT CODIGODOCUMENTO INTO #TEMP_INVOLVED FROM DISTRIBUCION
   WHERE CODIGOCARGO = @NEWPOSITIONID


INSERT INTO DOCUMENTOSHISTORIA(CODIGODOCUMENTO, NOMBREUSUARIO, FECHA, TAREA, CODIGOPROCESO, CODIGOTAREAREVISION)
SELECT CODIGODOCUMENTO, @HISTORIA_USUARIO , GETDATE(), @LOC_BATCH+ ': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITION_DESCRIPTION + ': '+ @LOC_INCLUDEDINDISTRB +': ' + @NEWPOSITION_DESCRIPTION + ' (' + @NEWPOSITION_USERNAME + ')',0,0
FROM DISTRIBUCION
 INNER JOIN DOCUMENTOS ON DISTRIBUCION.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE 
DOCUMENTOS.ESTADO=@ESTADODOC
and CODIGODISTRIBUCION=0
 and CODIGOCARGO=@POSITIONID
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)



UPDATE DISTRIBUCION
 SET CODIGOCARGO=@NEWPOSITIONID
FROM DISTRIBUCION
 INNER JOIN DOCUMENTOS ON DISTRIBUCION.CODIGODOCUMENTO=DOCUMENTOS.CODIGO
 WHERE 
DOCUMENTOS.ESTADO=@ESTADODOC
and CODIGODISTRIBUCION=0
 and CODIGOCARGO=@POSITIONID
 and CODIGODOCUMENTO NOT IN (SELECT CODIGODOCUMENTO FROM #TEMP_INVOLVED)

   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_NC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_NC]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_NC] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_NC]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) ,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_TRANSFERFROMPOS nvarchar(max)
EXEC @LOC_TRANSFERFROMPOS = TRANSLATE @LOC= 'Loc_RespTransferFromPos'

DECLARE @LOC_INVOLVEDADDED nvarchar(max)
EXEC @LOC_INVOLVEDADDED = TRANSLATE @LOC= 'Loc_Involved_added'

DECLARE @LOC_TASKRESPONSIBLEADDED nvarchar(max)
EXEC @LOC_TASKRESPONSIBLEADDED = TRANSLATE @LOC= 'Loc_TaskResponsibleAdded'

DECLARE @LOC_TASKSTEPEDITED nvarchar(max)
EXEC @LOC_TASKSTEPEDITED = TRANSLATE @LOC= 'Loc_TaskStepEdited'

DECLARE @LOC_RESPCHANGEDTO nvarchar(max)
EXEC @LOC_RESPCHANGEDTO = TRANSLATE @LOC= 'Loc_RespChangedTo'

   SELECT CODIGONC INTO #TEMP_INVOLVED FROM NCINVOLUCRADOS
   WHERE CODIGOCARGO = @NEWPOSITIONID
   
INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': ' +@LOC_INVOLVEDADDED + @NEWPOSITIONDESCRIPTION  + ' (' + @NEWUSERDESCRIPTION + ')',NCMAINPROD.ESTADO
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)

   
UPDATE NCINVOLUCRADOS
 SET CODIGOCARGO=@NEWPOSITIONID,
	NOMBRECARGO=@NEWPOSITIONDESCRIPTION
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)




  
SELECT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TEMP_TASKSSTEPSRESPONSIBLES FROM  NCTASKSSTEPSRESPONSIBLES
  WHERE NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID = @NEWPOSITIONID



SELECT CODIGOTAREA INTO #TEMP_NCTAREASDESTINATARIOS FROM NCTAREASDESTINATARIOS
WHERE CODIGOCARGO = @NEWPOSITIONID

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': '+ @LOC_TASKRESPONSIBLEADDED + @NEWPOSITIONDESCRIPTION   + ' (' + @NEWUSERDESCRIPTION + ')' ,CODIGOTAREA,NCMAINPROD.ESTADO
FROM NCTAREASDESTINATARIOS
 INNER JOIN( NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
 and NCTAREASDESTINATARIOS.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)

INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, CODIGOTAREA,ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': '+ @LOC_TASKSTEPEDITED +': TS-'+ LTRIM(STR(NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID)) +' '+ @LOC_RESPCHANGEDTO +': ' + @NEWPOSITIONDESCRIPTION   + ' (' + @NEWUSERDESCRIPTION + ')' ,NCTASKID ,NCMAINPROD.ESTADO
FROM NCTASKSSTEPSRESPONSIBLES
JOIN NCTASKSSTEPS ON NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID=NCTASKSSTEPS.NCTASKSSTEPS_ID
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID = NCTAREAS.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
  AND NOT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES)


UPDATE NCTAREASDESTINATARIOS
 SET CODIGOCARGO=@NEWPOSITIONID,
 NOMBRECARGO=@NEWPOSITIONDESCRIPTION,
 NOMBREUSUARIO=@NEWUSERDESCRIPTION
FROM NCTAREASDESTINATARIOS
 INNER JOIN( NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
 and NCTAREASDESTINATARIOS.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)


UPDATE NCTASKSSTEPSRESPONSIBLES
 SET RESPONSIBLE_RANKID=@NEWPOSITIONID
FROM NCTASKSSTEPSRESPONSIBLES
JOIN NCTASKSSTEPS ON NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID=NCTASKSSTEPS.NCTASKSSTEPS_ID
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID = NCTAREAS.CODIGO
 WHERE  NCMAINPROD.CODIGOCARGOADMINISTRADOR!=@POSITIONID AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID
 AND NOT NCTASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES)

DROP TABLE #TEMP_INVOLVED
DROP TABLE #TEMP_NCTAREASDESTINATARIOS

/*
EXEC dbo.[ik_resp_Trans_WF] 
@MODULEID,
@ESTADO1 ,
@ESTADO2 ,
@POSITIONID ,
@POSITIONDESCRIPTION  ,
@NEWPOSITIONID ,
@NEWPOSITIONDESCRIPTION ,
@NEWUSERDESCRIPTION ,
@HISTORIA_USUARIO 

*/

DECLARE @POSITION_USER nvarchar(100)
SELECT @POSITION_USER=USUARIO FROM VISTA_CARGOSUSUARIOS WHERE CODIGOCARGO=@POSITIONID

EXEC dbo.[ik_resp_Remove_nc]
@MODULEID,
@ESTADO1 ,
@ESTADO2 ,
@POSITIONID ,
@POSITIONDESCRIPTION  ,
@POSITION_USER,
@HISTORIA_USUARIO 



END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_NCCoord].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_NCCoord]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_NCCoord] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_NCCoord]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) ,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_TRANSFERFROMPOS nvarchar(max)
EXEC @LOC_TRANSFERFROMPOS = TRANSLATE @LOC= 'Loc_RespTransferFromPos'

DECLARE @LOC_INVOLVEDADDED nvarchar(max)
EXEC @LOC_INVOLVEDADDED = TRANSLATE @LOC= 'Loc_Involved_added'

DECLARE @LOC_COORDINATORCHANGED nvarchar(max)
EXEC @LOC_COORDINATORCHANGED = TRANSLATE @LOC= 'Loc_CoordinatorChanged'

SELECT CODIGONC INTO #TEMP_INVOLVED FROM NCINVOLUCRADOS
WHERE CODIGOCARGO = @NEWPOSITIONID



INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, ISSUE_STATUS)
SELECT CODIGONC, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': '+ @LOC_INVOLVEDADDED + @NEWPOSITIONDESCRIPTION  ,NCMAINPROD.ESTADO
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE 
CODIGOCARGOADMINISTRADOR=@POSITIONID
AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)


INSERT INTO NCINVOLUCRADOS(CODIGONC, CODIGOCARGO, INSTANCIA, NOMBRECARGO, TIPOOBJETO, CODIGOEXTERNO, NIVEL, INVOLMENT_METHOD)
SELECT CODIGONC, @NEWPOSITIONID, INSTANCIA, @NEWPOSITIONDESCRIPTION, TIPOOBJETO, CODIGOEXTERNO, 3, INVOLMENT_METHOD
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE 
CODIGOCARGOADMINISTRADOR=@POSITIONID
AND NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)



INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION, ISSUE_STATUS)
SELECT CODIGO, @HISTORIA_USUARIO ,GETDATE(),  @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': '+ @LOC_COORDINATORCHANGED +': ' + @NEWPOSITIONDESCRIPTION  ,NCMAINPROD.ESTADO
FROM NCMAINPROD 
WHERE CODIGOCARGOADMINISTRADOR=@POSITIONID
AND ESTADO >=@ESTADO1 AND ESTADO<=@ESTADO2 AND TIPO=@MODULEID

UPDATE NCMAINPROD SET
CODIGOCARGOADMINISTRADOR=@NEWPOSITIONID,
CARGOADMINISTRADOR=@NEWPOSITIONDESCRIPTION
WHERE CODIGOCARGOADMINISTRADOR=@POSITIONID
AND ESTADO >=@ESTADO1 AND ESTADO<=@ESTADO2 AND TIPO=@MODULEID


UPDATE NCINVOLUCRADOS
SET NIVEL=3
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@NEWPOSITIONID
 AND CODIGOCARGOADMINISTRADOR=@NEWPOSITIONID

   
DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_NCWGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_NCWGS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_NCWGS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_NCWGS]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) ,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN

DECLARE @LOC_BATCH nvarchar(max)
EXEC @LOC_BATCH = TRANSLATE @LOC= 'Loc_Batch'

DECLARE @LOC_TRANSFERFROMPOS nvarchar(max)
EXEC @LOC_TRANSFERFROMPOS = TRANSLATE @LOC= 'Loc_RespTransferFromPos'

DECLARE @LOC_WORKGROUP nvarchar(max)
EXEC @LOC_WORKGROUP = TRANSLATE @LOC= 'Loc_WorkGroup'

DECLARE @LOC_UPDATED nvarchar(max)
EXEC @LOC_UPDATED = TRANSLATE @LOC= 'Loc_Updated'

DECLARE @LOC_ROL nvarchar(max)
EXEC @LOC_ROL = TRANSLATE @LOC= 'Loc_Rol'

DECLARE @LOC_MEMBERADDED nvarchar(max)
EXEC @LOC_MEMBERADDED = TRANSLATE @LOC= 'Loc_MemberAdded'

SELECT ISSUE_ID INTO #TEMP_IKROLES_NCINVOLUCRADOS FROM IKROLES_NCINVOLUCRADOS
WHERE POSITION_ID = @NEWPOSITIONID


INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT ISSUE_ID, @HISTORIA_USUARIO ,GETDATE(), @LOC_BATCH +': '+ @LOC_TRANSFERFROMPOS +' O-' + LTRIM(STR(@POSITIONID)) + '  ' + @POSITIONDESCRIPTION + ': '+ @LOC_WORKGROUP +' ''' + VISTA_IKROLES_NCINVOLUCRADOS.NCWORKGROUPS_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_ROL +' ''' + VISTA_IKROLES_NCINVOLUCRADOS.IKROLES_DESC + ''' '+ @LOC_UPDATED +'. '+ @LOC_MEMBERADDED +': ' + @NEWPOSITIONDESCRIPTION  ,NCMAINPROD.ESTADO
FROM VISTA_IKROLES_NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON VISTA_IKROLES_NCINVOLUCRADOS.ISSUE_ID=NCMAINPROD.CODIGO
 WHERE  NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and VISTA_IKROLES_NCINVOLUCRADOS.POSITION_ID=@POSITIONID
 and VISTA_IKROLES_NCINVOLUCRADOS.ISSUE_ID NOT IN (SELECT ISSUE_ID FROM #TEMP_IKROLES_NCINVOLUCRADOS)

   
UPDATE IKROLES_NCINVOLUCRADOS
 SET POSITION_ID=@NEWPOSITIONID
FROM IKROLES_NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON IKROLES_NCINVOLUCRADOS.ISSUE_ID=NCMAINPROD.CODIGO
 WHERE  NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and IKROLES_NCINVOLUCRADOS.POSITION_ID=@POSITIONID
 and IKROLES_NCINVOLUCRADOS.ISSUE_ID NOT IN (SELECT ISSUE_ID FROM #TEMP_IKROLES_NCINVOLUCRADOS)



DECLARE @POSITION_USER nvarchar(100)
SELECT @POSITION_USER=USUARIO FROM VISTA_CARGOSUSUARIOS WHERE CODIGOCARGO=@POSITIONID

EXEC dbo.[ik_resp_Remove_NCWGS]
@MODULEID,
@ESTADO1 ,
@ESTADO2 ,
@POSITIONID ,
@POSITIONDESCRIPTION  ,
@POSITION_USER,
@HISTORIA_USUARIO 



END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_PROCNodes].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_PROCNodes]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_PROCNodes] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_PROCNodes]
@POSITIONID INT,
@NEWPOSITIONID INT,
@PROCPLANID INT 
AS
BEGIN


   SELECT PROC_NODESID INTO #TEMP_INVOLVED FROM VISTA_REL_PROCNODE_ORG
   WHERE O_ID = @NEWPOSITIONID


   UPDATE VISTA_REL_PROCNODE_ORG
   SET O_ID = @NEWPOSITIONID
   WHERE O_ID = @POSITIONID
   and PROC_PLANSID = @PROCPLANID
   and VISTA_REL_PROCNODE_ORG.PROC_NODESID NOT IN(SELECT PROC_NODESID FROM #TEMP_INVOLVED)



   DROP TABLE #TEMP_INVOLVED


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_TPROT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_TPROT]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_TPROT] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_TPROT]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWPOSITIONID INT 
AS
BEGIN


   SELECT CODIGONC INTO #TEMP_INVOLVED FROM TPROT_INVOLVED
   WHERE CODIGOCARGO = @NEWPOSITIONID

SELECT TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID INTO #TEMP_TASKSSTEPSRESPONSIBLES FROM  TPROT_TASKSSTEPSRESPONSIBLES
  WHERE TPROT_TASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID = @NEWPOSITIONID




UPDATE TPROT_INVOLVED
 SET CODIGOCARGO=@NEWPOSITIONID
FROM TPROT_INVOLVED
 INNER JOIN VAR_TPROT_VIEW ON TPROT_INVOLVED.CODIGONC=VAR_TPROT_VIEW.CODIGONC
 WHERE VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 and VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
 and TPROT_INVOLVED.CODIGOCARGO=@POSITIONID
 and TPROT_INVOLVED.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)


   SELECT CODIGOTAREA INTO #TEMP_NCTAREASDESTINATARIOS FROM TPROT_RESPONSIBLE
   WHERE CODIGOCARGO = @NEWPOSITIONID



UPDATE TPROT_RESPONSIBLE
 SET CODIGOCARGO=@NEWPOSITIONID
FROM TPROT_RESPONSIBLE
 INNER JOIN( TPROT_TASK INNER JOIN VAR_TPROT_VIEW ON TPROT_TASK.CODIGONC=VAR_TPROT_VIEW.CODIGONC)
   ON TPROT_RESPONSIBLE.CODIGOTAREA = TPROT_TASK.CODIGO

 WHERE VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 and VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
 and TPROT_RESPONSIBLE.CODIGOCARGO=@POSITIONID
 and TPROT_RESPONSIBLE.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)

UPDATE TPROT_TASKSSTEPSRESPONSIBLES
SET RESPONSIBLE_RANKID=@NEWPOSITIONID
FROM TPROT_TASKSSTEPSRESPONSIBLES
JOIN TPROT_TASKSSTEPS ON TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID=TPROT_TASKSSTEPS.NCTASKSSTEPS_ID
 INNER JOIN (TPROT_TASK INNER JOIN VAR_TPROT_VIEW ON TPROT_TASK.CODIGONC=VAR_TPROT_VIEW.CODIGONC)
   ON TPROT_TASKSSTEPS.NCTASKID = TPROT_TASK.CODIGO
 
 WHERE VAR_TPROT_VIEW.V_ESTADO >=@ESTADO1 and VAR_TPROT_VIEW.V_ESTADO <=@ESTADO2
 and VAR_TPROT_VIEW.VAR_TPROT_CLASS=@MODULEID
 and TPROT_TASKSSTEPSRESPONSIBLES.RESPONSIBLE_RANKID=@POSITIONID
  AND NOT TPROT_TASKSSTEPSRESPONSIBLES.NCTASKSSTEPS_ID IN (SELECT NCTASKSSTEPS_ID FROM #TEMP_TASKSSTEPSRESPONSIBLES)

   DROP TABLE #TEMP_INVOLVED
   DROP TABLE #TEMP_NCTAREASDESTINATARIOS

END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_WF].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_WF]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_WF] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_WF]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) ,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN

SELECT WF_ID INTO #TEMP_WFS
FROM NCMAINPROD
WHERE 
NOT WF_ID IS NULL 
AND TIPO=@MODULEID 
AND NCMAINPROD.ESTADO >=@ESTADO1 AND 
NCMAINPROD.ESTADO <=@ESTADO2


INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT NCMAINPROD.CODIGO, @HISTORIA_USUARIO ,GETDATE(), 'BATCH: Resp. Transfer from Postition O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ': WF Roles edited. Responsible Changed to ' + @NEWPOSITIONDESCRIPTION  + ' (' + @NEWUSERDESCRIPTION + ')',NCMAINPROD.ESTADO
FROM NCMAINPROD JOIN 
#TEMP_WFS ON NCMAINPROD.WF_ID=#TEMP_WFS.WF_ID
WHERE #TEMP_WFS.WF_ID IN(SELECT WF_ID FROM dbo.ik_wf_getPositionRelatedWFs(@POSITIONID))


UPDATE WF_NODE_ROL SET WF_NODE_ROL_MEMBERS=CONVERT(nvarchar(10),@NEWPOSITIONID)
FROM WF_NODE_ROL
JOIN #TEMP_WFS WFS ON WFS.WF_ID=WF_NODE_ROL.WF_ID
WHERE 
WF_NODE_ROL_MEMBERS LIKE CONVERT(nvarchar(10),@POSITIONID)--solo

UPDATE WF_NODE_ROL SET WF_NODE_ROL_MEMBERS=REPLACE(WF_NODE_ROL_MEMBERS,CONVERT(nvarchar(10),@POSITIONID) + ',', CONVERT(nvarchar(10), @NEWPOSITIONID) + ',')
FROM WF_NODE_ROL
JOIN #TEMP_WFS WFS ON WFS.WF_ID=WF_NODE_ROL.WF_ID WHERE 
WF_NODE_ROL_MEMBERS LIKE CONVERT(nvarchar(10),@POSITIONID) + ',%' --primero

UPDATE WF_NODE_ROL SET WF_NODE_ROL_MEMBERS=REPLACE(WF_NODE_ROL_MEMBERS, ',' + CONVERT(nvarchar(10),@POSITIONID) , ',' + CONVERT(nvarchar(10), @NEWPOSITIONID) )
FROM WF_NODE_ROL
JOIN #TEMP_WFS WFS ON WFS.WF_ID=WF_NODE_ROL.WF_ID WHERE 
WF_NODE_ROL_MEMBERS LIKE '%,' + CONVERT(nvarchar(10),@POSITIONID)  --ultimo

UPDATE WF_NODE_ROL SET WF_NODE_ROL_MEMBERS=REPLACE(WF_NODE_ROL_MEMBERS, ',' + CONVERT(nvarchar(10),@POSITIONID) + ','  , ',' + CONVERT(nvarchar(10), @NEWPOSITIONID)+  ','  )
FROM WF_NODE_ROL
JOIN #TEMP_WFS WFS ON WFS.WF_ID=WF_NODE_ROL.WF_ID WHERE 
WF_NODE_ROL_MEMBERS LIKE '%,' + CONVERT(nvarchar(10),@POSITIONID) + ',%'  --medio



END
GO

GO
--SqlScripter----[dbo].[ik_resp_Trans_WF_Approvals].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Trans_WF_Approvals]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Trans_WF_Approvals] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Trans_WF_Approvals]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@WF_APPROVAL_RECORDS_STATUS_ID INT,

@POSITIONID INT,
@POSITIONDESCRIPTION VARCHAR(200) ,
@USERDESCRIPTION VARCHAR(50) ,

@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) ,
@HISTORIA_USUARIO VARCHAR(50)
AS
BEGIN

SELECT WF_ID INTO #TEMP_WFS
FROM VISTA_WF_APPROVAL_RECORDS
WHERE 
MODULEID=@MODULEID 
AND ISSUE_STATUS >=@ESTADO1 AND 
ISSUE_STATUS <=@ESTADO2 AND
WF_APPROVAL_RECORDS_STATUS_ID = @WF_APPROVAL_RECORDS_STATUS_ID


INSERT INTO HISTORIAASUNTOS(CODIGONC, USUARIO, FECHA, DESCRIPCION,ISSUE_STATUS)
SELECT NCMAINPROD.CODIGO, @HISTORIA_USUARIO ,GETDATE(), 'BATCH: Resp. Transfer from Postition O-' + LTRIM(STR(@POSITIONID)) + ' ' + @POSITIONDESCRIPTION + ' (' + @USERDESCRIPTION + ') : WF Approvals edited. Responsible Changed to ' + @NEWPOSITIONDESCRIPTION  + ' (' + @NEWUSERDESCRIPTION + ')',NCMAINPROD.ESTADO
FROM NCMAINPROD JOIN 
#TEMP_WFS ON NCMAINPROD.WF_ID=#TEMP_WFS.WF_ID
--WHERE #TEMP_WFS.WF_ID IN(SELECT WF_ID FROM dbo.ik_wf_getPositionRelatedWFs(@POSITIONID))


DECLARE @POSITION_USERID INT
SELECT @POSITION_USERID=CODIGOUSUARIO FROM VISTA_CARGOSUSUARIOS WHERE CODIGOCARGO=@POSITIONID


DECLARE @NEWUSERID  INT
SELECT @NEWUSERID=CODIGOUSUARIO FROM VISTA_CARGOSUSUARIOS WHERE CODIGOCARGO=@NEWPOSITIONID

IF (NOT @NEWUSERID IS NULL AND NOT @POSITION_USERID IS NULL)
BEGIN

DELETE FROM WF_APPROVAL_RECORDS	--borro los que tenga pendientes en el mismo nodo donde ya está el nuevo cargo/usuario
WHERE 
IKPERSON_ID =@POSITION_USERID
AND WF_APPROVAL_RECORDS_STATUS_ID = @WF_APPROVAL_RECORDS_STATUS_ID 
AND WF_APPROVAL_RECORDS_STATUS_ID !=3 -- APROBADOS
AND WF_APPROVAL_RECORDS_STATUS_ID !=4 --NO APROBADOS
AND WF_NODE_ID IN (SELECT WF_NODE_ID FROM WF_NODE JOIN #TEMP_WFS ON #TEMP_WFS.WF_ID=WF_NODE.WF_ID)
AND WF_NODE_ID IN (SELECT WF_NODE_ID FROM WF_APPROVAL_RECORDS	WHERE IKPERSON_ID=@NEWUSERID)

UPDATE WF_APPROVAL_RECORDS	--actualizo los que no han sido ya aprobados/desaprobados para que le queden al nuevo cargo/usuario
	SET IKPERSON_ID=@NEWUSERID
WHERE 
IKPERSON_ID =@POSITION_USERID
AND WF_APPROVAL_RECORDS_STATUS_ID = @WF_APPROVAL_RECORDS_STATUS_ID 
AND WF_APPROVAL_RECORDS_STATUS_ID !=3 -- APROBADOS
AND WF_APPROVAL_RECORDS_STATUS_ID !=4 --NO APROBADOS
AND WF_NODE_ID IN (SELECT WF_NODE_ID FROM WF_NODE JOIN #TEMP_WFS ON #TEMP_WFS.WF_ID=WF_NODE.WF_ID)

END


END
GO

GO
--SqlScripter----[dbo].[ik_resp_Transfer].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_resp_Transfer]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_resp_Transfer] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_resp_Transfer]
@MODULEID INT,
@ESTADO1 INT,
@ESTADO2 INT,
@POSITIONID INT,
@NEWPOSITIONID INT,
@NEWPOSITIONDESCRIPTION VARCHAR(200),
@NEWUSERDESCRIPTION VARCHAR(50) 
AS
BEGIN


   SELECT CODIGONC INTO #TEMP_INVOLVED FROM NCINVOLUCRADOS
   WHERE CODIGOCARGO = @NEWPOSITIONID


   
UPDATE NCINVOLUCRADOS
 SET CODIGOCARGO=@NEWPOSITIONID,
	NOMBRECARGO=@NEWPOSITIONDESCRIPTION
FROM NCINVOLUCRADOS
 INNER JOIN NCMAINPROD ON NCINVOLUCRADOS.CODIGONC=NCMAINPROD.CODIGO
 
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCINVOLUCRADOS.CODIGOCARGO=@POSITIONID
 and NCINVOLUCRADOS.CODIGONC NOT IN (SELECT CODIGONC FROM #TEMP_INVOLVED)


SELECT CODIGOTAREA INTO #TEMP_NCTAREASDESTINATARIOS FROM NCTAREASDESTINATARIOS
WHERE CODIGOCARGO = @NEWPOSITIONID


UPDATE NCTAREASDESTINATARIOS
 SET CODIGOCARGO=@NEWPOSITIONID,
 NOMBRECARGO=@NEWPOSITIONDESCRIPTION,
 NOMBREUSUARIO=@NEWUSERDESCRIPTION
FROM NCTAREASDESTINATARIOS
 INNER JOIN( NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTAREASDESTINATARIOS.CODIGOTAREA = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTAREASDESTINATARIOS.CODIGOCARGO=@POSITIONID
 and NCTAREASDESTINATARIOS.CODIGOTAREA NOT IN (SELECT CODIGOTAREA FROM #TEMP_NCTAREASDESTINATARIOS)


UPDATE NCTASKSSTEPS
 SET RESPONSIBLE_RANKID=@NEWPOSITIONID
FROM NCTASKSSTEPS
 INNER JOIN (NCTAREAS INNER JOIN NCMAINPROD ON NCTAREAS.CODIGONC=NCMAINPROD.CODIGO) ON NCTASKSSTEPS.NCTASKID = NCTAREAS.CODIGO
 WHERE NCMAINPROD.ESTADO >=@ESTADO1 and NCMAINPROD.ESTADO <=@ESTADO2
 and NCMAINPROD.TIPO=@MODULEID
 and NCTASKSSTEPS.RESPONSIBLE_RANKID=@POSITIONID


DROP TABLE #TEMP_INVOLVED
DROP TABLE #TEMP_NCTAREASDESTINATARIOS

END
GO

GO
--SqlScripter----[dbo].[ik_rpt_Loc_DistributionGroups].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_rpt_Loc_DistributionGroups]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_rpt_Loc_DistributionGroups] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_rpt_Loc_DistributionGroups]
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

    -- Insert statements for procedure here
	SELECT     
dbo.IKPOSITIONSGROUPSTREE.PATH_STR, IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID, DISTRIBUCION.TIPO_DISTRIBUCION,DOCUMENTOS.ESTADO, POSTREE.POSITIONID
FROM      
dbo.IKPOSITIONSGROUPSTREE
LEFT JOIN DISTRIBUCION ON DISTRIBUCION.CODIGOGRUPO=dbo.IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID
LEFT JOIN VISTA_POSITIONSINGROUPTREE POSTREE ON POSTREE.IKPOSITIONSGROUPSTREEID=dbo.IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID
LEFT JOIN VISTA_DOCUMENTOS DOCUMENTOS ON (DOCUMENTOS.CODIGO=DISTRIBUCION.CODIGODOCUMENTO OR DOCUMENTOS.CODIGODISTRIBUCION=DISTRIBUCION.CODIGODOCUMENTO )

   order by PATH_STR
END
GO

GO
--SqlScripter----[dbo].[ik_rpt_Loc_DistributionGroupsDocuments].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_rpt_Loc_DistributionGroupsDocuments]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_rpt_Loc_DistributionGroupsDocuments] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_rpt_Loc_DistributionGroupsDocuments]
@GROUPID INT
AS
BEGIN
	SET NOCOUNT ON;

	SELECT 
IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID,
DISTRIBUCION.TIPO_DISTRIBUCION,
DOCUMENTOS.CODIGO AS CODIGODOCUMENTO,
DOCUMENTOS.NOMBRE, 
DOCUMENTOS.ESTADO, 
DOCUMENTOS.TIPO_DESCRIPCION, 
DOCUMENTOS.CODIGOISO, 
DOCUMENTOS.C_REVISION

FROM      
dbo.IKPOSITIONSGROUPSTREE   
LEFT JOIN DISTRIBUCION ON DISTRIBUCION.CODIGOGRUPO=dbo.IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID
LEFT JOIN VISTA_DOCUMENTOS DOCUMENTOS ON (DOCUMENTOS.CODIGO=DISTRIBUCION.CODIGODOCUMENTO OR DOCUMENTOS.CODIGODISTRIBUCION=DISTRIBUCION.CODIGODOCUMENTO )

WHERE DISTRIBUCION.TIPO_DISTRIBUCION IS NOT NULL AND IKPOSITIONSGROUPSTREE.IKPOSITIONSGROUPSTREEID = @GROUPID

ORDER BY DOCUMENTOS.NOMBRE, CODIGOISO


 
END
GO

GO
--SqlScripter----[dbo].[ik_search_global_groups_only].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_search_global_groups_only]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_search_global_groups_only] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_search_global_groups_only]
@IKLANG nvarchar(10),
	@STR2SEARCH nvarchar(2000),
	@IKCDU int,
	@L_SEARCH_EXACT INT = 1,
	@ENTITIES_TYPES nvarchar(1000)='*',
	@L_SEARCH_IN_FILES tinyint = 1,
	@LINKED_SERVER nvarchar(500)='FTIndexISOKEY' ,
	@IDX_CATALOG nvarchar(500)='localhost.isokey..SCOPE()',
	@tmp_table nvarchar(500) = '#TMP_SEARCH_GLOBAL_GROUPS',
	@L_RETURN_DATA int = 1
AS

SET NOCOUNT ON

DECLARE @PageNumber AS INT, @RowspPage AS INT
SET @PageNumber = 1
SET @RowspPage = 100000



CREATE TABLE #TMP_SEARCH_GLOBAL(
	[RANK] int, 
	[ENTITY_IKURL] nvarchar(100), 	
	[ENTITY_GROUP_ID] nvarchar(100), 
	[ENTITY_ID] int,
	[ENTITY_TYPE_DESC] nvarchar(2000),  
	[ENTITY_DESC] nvarchar(MAX), 
	[ENTITY_ICON] nvarchar(1000) , 
	[ENTITY_GROUP_DESC] nvarchar(3000), 
	[ENTITY_GROUP_ICON] nvarchar(1000),
	[ENTITY_LOCATION] nvarchar(MAX)
)

EXEC dbo.[ik_search_global] @IKLANG, @PageNumber,@RowspPage, @STR2SEARCH, @IKCDU,@L_SEARCH_EXACT,@ENTITIES_TYPES, @L_SEARCH_IN_FILES,@LINKED_SERVER,@IDX_CATALOG, '#TMP_SEARCH_GLOBAL',0


CREATE TABLE #TMP_SEARCH_RESULTS([ORDEN] int, [CANT] int, [ENTITY_GROUP_ID] nvarchar(50), ENTITY_GROUP_DESC nvarchar(500), ENTITY_GROUP_ICON nvarchar(500) )


INSERT INTO #TMP_SEARCH_RESULTS(ORDEN, CANT, ENTITY_GROUP_DESC, ENTITY_GROUP_ID,ENTITY_GROUP_ICON)

SELECT 
1 AS [ORDEN],
COUNT(*) AS CANT,
MAX(#TMP_SEARCH_GLOBAL.ENTITY_GROUP_DESC) AS ENTITY_GROUP_DESC,
#TMP_SEARCH_GLOBAL.ENTITY_GROUP_ID,
MAX(#TMP_SEARCH_GLOBAL.ENTITY_GROUP_ICON) AS ENTITY_GROUP_ICON

 FROM #TMP_SEARCH_GLOBAL
 GROUP BY #TMP_SEARCH_GLOBAL.ENTITY_GROUP_ID--,#TMP_SEARCH_GLOBAL.ENTITY_GROUP_DESC,#TMP_SEARCH_GLOBAL.ENTITY_GROUP_ICON
 ORDER BY 1 DESC
 


IF (SELECT COUNT(*) FROM #TMP_SEARCH_RESULTS)>1--SI HAY MAS DE UN GRUPO, CREO EL GRUPO TODOS. 
BEGIN
	INSERT INTO #TMP_SEARCH_RESULTS(ORDEN, CANT, ENTITY_GROUP_DESC, ENTITY_GROUP_ID,ENTITY_GROUP_ICON)
	SELECT 
	0 AS [ORDEN],
	COUNT(*) AS CANT,
	'Loc_All2' AS ENTITY_GROUP_DESC,
	'*' as ENTITY_GROUP_ID,
	'Images/gradhat.png' as ENTITY_TYPE_IMG
	 FROM #TMP_SEARCH_GLOBAL
END



BEGIN TRY
	EXEC ('TRUNCATE TABLE '+ @tmp_table +'; INSERT INTO ' + @tmp_table + ' SELECT * FROM #TMP_SEARCH_RESULTS ORDER BY #TMP_SEARCH_RESULTS.[CANT] DESC, #TMP_SEARCH_RESULTS.ENTITY_TYPE_DESC ASC ')
END TRY
BEGIN CATCH
END CATCH

IF @L_RETURN_DATA=1
BEGIN
	SELECT * FROM #TMP_SEARCH_RESULTS ORDER BY #TMP_SEARCH_RESULTS.[CANT] DESC, #TMP_SEARCH_RESULTS.ENTITY_GROUP_DESC
END

DROP TABLE #TMP_SEARCH_RESULTS

RETURN
GO

GO
--SqlScripter----[dbo].[ik_search_terms_matches].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_search_terms_matches]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_search_terms_matches] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_search_terms_matches]
@IKLANG nvarchar(10),
	@STR2SEARCH nvarchar(2000),
	@tmp_table nvarchar(500) = '#TMP_TERMS',
	@L_RETURN_DATA int = 1
AS


DECLARE @LANG nvarchar(100)

IF (@IKLANG = 'SP' OR @IKLANG = 'ES')
BEGIN
	SET @LANG='Spanish'
END

IF (@IKLANG = 'EN')
BEGIN
	SET @LANG='English'
END

IF (@IKLANG = 'PT')
BEGIN
	SET @LANG='Portuguese'
END




DECLARE @STR2SEARCH_CLEAN nvarchar(500)

SET @STR2SEARCH_CLEAN = LTRIM(@STR2SEARCH)
SET @STR2SEARCH_CLEAN = RTRIM(@STR2SEARCH_CLEAN)
SET @STR2SEARCH_CLEAN = '"' + REPLACE(@STR2SEARCH_CLEAN,'"','') + '"'

DECLARE @LCID int
SELECT @LCID=LCID FROM sys.fulltext_languages WHERE [NAME]=@LANG


CREATE TABLE #TMP_MATCHES(display_term nvarchar(max))

BEGIN TRY	
		IF ( OBJECT_ID('sys.dm_fts_parser') IS NOT NULL)
		BEGIN
			INSERT INTO #TMP_MATCHES
			SELECT display_term FROM sys.dm_fts_parser (@STR2SEARCH_CLEAN, @LCID, 0, 0)	WHERE special_term = 'Exact Match'  AND NOT display_term like 'nn%'
		END
		ELSE
		BEGIN
			DECLARE @TMP_STR nvarchar(500)
			SET @TMP_STR = REPLACE(@STR2SEARCH, ' ', '|')
			INSERT INTO #TMP_MATCHES
			SELECT [VALUE] FROM dbo.ik_SplitIntoTable(@TMP_STR,'|')
		END
END TRY
BEGIN CATCH
END CATCH




BEGIN TRY
	DECLARE @QUERY nvarchar(max)
	SET @QUERY = 'TRUNCATE TABLE '+ @tmp_table +'; INSERT INTO ' + @tmp_table + 
	' SELECT display_term FROM #TMP_MATCHES'
	EXEC (@QUERY)
END TRY
BEGIN CATCH
END CATCH

IF @L_RETURN_DATA=1
BEGIN	
	BEGIN TRY	
		SELECT display_term FROM #TMP_MATCHES
	END TRY
	BEGIN CATCH
	END CATCH
END





RETURN
GO

GO
--SqlScripter----[dbo].[ik_set_BS_INDICATORS_OPTIONS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_set_BS_INDICATORS_OPTIONS]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_set_BS_INDICATORS_OPTIONS] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_set_BS_INDICATORS_OPTIONS]
@BS_INDICATORSID INT,
@USERID INT,
@SEC_LEVEL SMALLINT,
@SHOWINMYTASKS SMALLINT,
@NOTIFYSTATUSCHANGE SMALLINT,
@NOTIFYTENDENCECHANGE SMALLINT 
AS
BEGIN

   DECLARE @NEWID INT
   IF ISNULL((SELECT COUNT(*) FROM BS_INDICATORS_OPTIONS WHERE USERID = @USERID and BS_INDICATORSID = @BS_INDICATORSID),0) = 0
   begin
INSERT INTO BS_INDICATORS_OPTIONS(BS_INDICATORSID, USERID, SEC_LEVEL, SHOWINMYTASKS, NOTIFYSTATUSCHANGE, NOTIFYTENDENCECHANGE)
  VALUES(@BS_INDICATORSID,@USERID,@SEC_LEVEL,@SHOWINMYTASKS,@NOTIFYSTATUSCHANGE,@NOTIFYTENDENCECHANGE)
  
      select   @NEWID = BS_INDICATORS_OPTIONSID  FROM BS_INDICATORS_OPTIONS WHERE (BS_INDICATORS_OPTIONSID = @@IDENTITY)
   end
   ELSE
      SET @NEWID = -1


   select   @NEWID


END
GO

GO
--SqlScripter----[dbo].[ik_setNCModuleSecLevel].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_setNCModuleSecLevel]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_setNCModuleSecLevel] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_setNCModuleSecLevel]
@CODIGOTIPONC INT, @CODIGOUSUARIO INT, @NIVELACCESO INT, @L_PUEDENUEVOS INT 
AS
BEGIN

   DECLARE @SWVNCMODULESECURITYLEVELSvar0  INT

   select   @SWVNCMODULESECURITYLEVELSvar0 = COUNT(*)  FROM NCMODULESECURITYLEVELS
   WHERE CODIGOTIPONC = @CODIGOTIPONC and CODIGOUSUARIO = @CODIGOUSUARIO

   IF @SWVNCMODULESECURITYLEVELSvar0 > 0
      UPDATE NCMODULESECURITYLEVELS
      SET NIVELACCESO = @NIVELACCESO WHERE CODIGOTIPONC = @CODIGOTIPONC and CODIGOUSUARIO = @CODIGOUSUARIO
   ELSE
      INSERT INTO NCMODULESECURITYLEVELS(CODIGOTIPONC,CODIGOUSUARIO,NIVELACCESO,L_PUEDENUEVOS)
     VALUES(@CODIGOTIPONC,@CODIGOUSUARIO,@NIVELACCESO,@L_PUEDENUEVOS)
   


END
GO

GO
--SqlScripter----[dbo].[ik_SetTaskTotalSavedDelay].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_SetTaskTotalSavedDelay]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_SetTaskTotalSavedDelay] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_SetTaskTotalSavedDelay]
@TASKID INT 
AS
BEGIN

   DECLARE @TOT_DELAY INT

   SET @TOT_DELAY =(SELECT SUM(DELAY) FROM TASKSDELAYS WHERE NCTASKID = @TASKID)

   IF @TOT_DELAY IS NULL
      SET @TOT_DELAY = 0


   UPDATE NCTAREAS  SET TOT_DELAY = @TOT_DELAY WHERE CODIGO = @TASKID



END
GO

GO
--SqlScripter----[dbo].[ik_surveys_withaccess].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_surveys_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_surveys_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_surveys_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@IKPDO int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strDOC varchar(4000), @where varchar(100)


SELECT @strDOC =
CASE	
	WHEN  @IKCAT=0 OR @IKPDO=2  THEN
		'SELECT * FROM DOCUMENTOS WHERE CODIGO = 0' /*select nothing*/
	WHEN @IKCAT=4 OR @IKPDO=0 THEN
		'SELECT DOCUMENTOS.*,
		''ICONOESTADO'' = CASE
			WHEN (DOCUMENTOS.ESTADO=1) THEN ''Images/Doc_Development.gif''
			WHEN (DOCUMENTOS.ESTADO=2) THEN ''Images/Doc_Current.gif''
			ELSE ''Images/Doc_Obsolete.gif''
		END,
		''DOCCODE=''+LTRIM(STR(DOCUMENTOS.CODIGO))+''&STATUS=''+LTRIM(STR(DOCUMENTOS.ESTADO)) AS _URL_DATA,
		TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + LTRIM(STR(DOCUMENTOS.REVISION)) AS CODIGOREV,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + LTRIM(STR(DOCUMENTOS.REVISION))  + '' - '' + DOCUMENTOS.NOMBRE  AS NOMBRECOMPLETO, 
		 ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
		SURVEYDEFINITIONS.TITULO,
		SURVEYDEFINITIONS.TIPOSURVEY,
		SURVEYDEFINITIONS.STARTED,
		SURVEYDEFINITIONS.DURATION,
		SURVEYDEFINITIONS.ENDED,
		SURVEYDEFINITIONS.L_READYTOSTART,
		SURVEYDEFINITIONS.SURVEY_UID,
		''SURVEYTYPE'' = CASE
			WHEN (SURVEYDEFINITIONS.TIPOSURVEY=1) THEN ''Loc_Anonymous''
			WHEN (SURVEYDEFINITIONS.TIPOSURVEY=2) THEN ''Loc_AnonymousCookies''			
			ELSE ''Loc_WithAuthentication''			
		END,
		''SURVEYSTATUS'' = CASE
			WHEN (SURVEYDEFINITIONS.ESTADO=1) THEN ''Loc_Not_Started''
			WHEN (SURVEYDEFINITIONS.ESTADO=2) THEN ''Loc_HasStarted''			
			ELSE ''Loc_Stage_Finished''			
		END

				
		 FROM DOCUMENTOS 
			JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO 
			JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
			JOIN SURVEYDEFINITIONS ON DOCUMENTOS.CODIGOSURVEY=SURVEYDEFINITIONS.CODIGO
			' /*select all*/
		
	ELSE /*Select only allowed docs*/
		 		'SELECT DOCUMENTOS.*,
		''ICONOESTADO'' = CASE
			WHEN (DOCUMENTOS.ESTADO=1) THEN ''Images/Doc_Development.gif''
			WHEN (DOCUMENTOS.ESTADO=2) THEN ''Images/Doc_Current.gif''
			ELSE ''Images/Doc_Obsolete.gif''
		END,
		''DOCCODE=''+LTRIM(STR(CODIGODOCUMENTO))+''&STATUS=''+LTRIM(STR(DOCUMENTOS.ESTADO)) AS _URL_DATA,
		TIPOSDOCUMENTOS.DESCRIPCION AS TIPO_DESCRIPCION,
  	        DOCUMENTOS.CODIGOISO + '' Rev.'' + LTRIM(STR(DOCUMENTOS.REVISION)) AS CODIGOREV,
		 DOCUMENTOS.CODIGOISO + '' Rev.'' + LTRIM(STR(DOCUMENTOS.REVISION))  + '' - '' + DOCUMENTOS.NOMBRE  AS NOMBRECOMPLETO, 
		 ESTADOSPROCESOS.DESCRIPCIONESTADO AS ESTADOPROCESO,
		SURVEYDEFINITIONS.TITULO,
		SURVEYDEFINITIONS.TIPOSURVEY,
		SURVEYDEFINITIONS.STARTED,
		SURVEYDEFINITIONS.DURATION,
		SURVEYDEFINITIONS.ENDED,
		SURVEYDEFINITIONS.L_READYTOSTART,
		SURVEYDEFINITIONS.SURVEY_UID,
		''SURVEYTYPE'' = CASE
			WHEN (SURVEYDEFINITIONS.TIPOSURVEY=1) THEN ''Loc_Anonymous''
			WHEN (SURVEYDEFINITIONS.TIPOSURVEY=2) THEN ''Loc_AnonymousCookies''			
			ELSE ''Loc_WithAuthentication''			
		END,
		''SURVEYSTATUS'' = CASE
			WHEN (SURVEYDEFINITIONS.ESTADO=1) THEN ''Loc_Not_Started''
			WHEN (SURVEYDEFINITIONS.ESTADO=2) THEN ''Loc_HasStarted''			
			ELSE ''Loc_Stage_Finished''			
		END


		 		 FROM  (
			SELECT PERMISOSDOC.CODIGODOCUMENTO  FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
			WHERE 
				(DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ') ' + 
				'OR (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ') ' + 

			' UNION

			SELECT PERMISOSDOC.CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO 
			WHERE 
				( (DOCUMENTOS.ESTADO=2 AND PERMISOSDOC.NIVELACCESO > 300000 AND PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) + '))
				 OR
				 (DOCUMENTOS.ESTADO=1 AND PERMISOSDOC.NIVELACCESO > 300002 AND PERMISOSDOC.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) + ')) 
				)
			AND
				PERMISOSDOC.CODIGODOCUMENTO NOT IN 
				( SELECT CODIGODOCUMENTO FROM PERMISOSDOC JOIN DOCUMENTOS ON DOCUMENTOS.CODIGO = PERMISOSDOC.CODIGODOCUMENTO WHERE (DOCUMENTOS.ESTADO=2  AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO=300000) OR (DOCUMENTOS.ESTADO=1  AND CODIGOUSUARIO=' + LTRIM(STR(@IKCDU)) + ' AND NIVELACCESO<300003))
			)D JOIN DOCUMENTOS 
					JOIN TIPOSDOCUMENTOS ON DOCUMENTOS.CODIGOTIPO = TIPOSDOCUMENTOS.CODIGO ON D.CODIGODOCUMENTO = DOCUMENTOS.CODIGO 
					JOIN ESTADOSPROCESOS ON ESTADOSPROCESOS.CODIGOESTADO = DOCUMENTOS.PROCESO
					JOIN SURVEYDEFINITIONS ON DOCUMENTOS.CODIGOSURVEY=SURVEYDEFINITIONS.CODIGO
				
			'	
							
		
END		

SET @where = ''
IF NOT (@IKCAT=0 OR @IKPDO=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY DOCUMENTOS.CODIGO'
	END
END
 

EXEC (@strDOC+@where+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_svgs_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_svgs_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_svgs_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_svgs_withaccess]
(
		@parameters varchar(8000) =  '', /*WHERE CONDITIONS WITHOUT WHERE CLAUSE*/
		@sort nvarchar(100), /*WITHOUT CLAUSE ORDER BY*/
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT * FROM VISTA_SVG_DRAWINGS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT * FROM VISTA_SVG_DRAWINGS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT * FROM (
		SELECT * FROM VISTA_SVG_DRAWINGS		
		WHERE BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

SET @where = ''
IF NOT (@IKCAT=0 OR @BSPROCCAT=2)
BEGIN
	IF @parameters <> ''
	BEGIN
		SET @where = ' WHERE '
	END

	IF @sort <> ''
	BEGIN
		SET @sort = ' ORDER BY ' + @sort
	END
	ELSE
	BEGIN
		SET @sort = ' ORDER BY [DESCRIPTION]'
	END
END


EXEC (@strSQL+@where+@parameters+@sort)

RETURN
GO

GO
--SqlScripter----[dbo].[ik_svgsIds_withaccess].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_svgsIds_withaccess]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_svgsIds_withaccess] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_svgsIds_withaccess]
(
		@BSPROCCAT int,
		@IKCAT int,
		@IKCDU int,
		@tmp_table nvarchar(500) = '#TMP_SVG_WITH_ACCESS_IDS',
		@L_RETURN_DATA int = 1
	)

AS

SET DATEFORMAT YMD

DECLARE @strSQL varchar(4000), @where varchar(100)


SELECT @strSQL =
CASE	
	WHEN  @IKCAT=0 OR @BSPROCCAT=2  THEN
		'SELECT BS_SVGID FROM VISTA_SVG_DRAWINGS WHERE 1=0' /*select nothing*/
	WHEN @IKCAT=4 OR @BSPROCCAT=0 THEN
		'SELECT BS_SVGID FROM VISTA_SVG_DRAWINGS' /*select all*/
	ELSE /*Select only allowed docs*/
		
		'SELECT BS_SVGID FROM (
		SELECT * FROM VISTA_SVG_DRAWINGS		
		WHERE BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SEC_LEVEL>0 AND USERID='+ LTRIM(STR(@IKCDU)) +')
		OR BS_SVGID IN (SELECT BS_SVGID FROM VISTA_BS_SVG_OPTIONS WHERE SEC_LEVEL>0 AND USERID IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO='+ LTRIM(STR(@IKCDU)) +'))
		) AS SEC
		' 

END		

BEGIN TRY
	EXEC ('TRUNCATE TABLE ' + @tmp_table + '; ' + 'INSERT INTO '+ @tmp_table + ' ' +  @strSQL)
END TRY
BEGIN CATCH	
END CATCH



IF @L_RETURN_DATA = 1
BEGIN
	EXEC (@strSQL)
END




RETURN
GO

GO
--SqlScripter----[dbo].[ik_tasks_deadline].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_deadline]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_deadline] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_deadline]
(@Deadline datetime, @L_ShowStartDeadline tinyint)  AS

--EXEC ik_tasks_internal 1,null,@Deadline,@L_ShowStartDeadline,null

if @L_ShowStartDeadline=0
begin
	SELECT
	CODIGO, 
	MANDARENFECHA AS INICIO,
	FECHALIMITE AS FIN,
	DURACION AS DURACION_DIAS,
	DURACION_STR AS DURACION,
	DIASVENCIMIENTO AS DIAS,
	DESCRIPCION,
	CUMPLIMIENTO,
	L_CUMPLIDA AS CUMPLIDA,
	0 AS INCONSISTENTE,
	0 AS DESVIACION, 
	FECHA AS INICIOREAL,
	DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
	ETAPA,
	0 AS MORA, 
	CASE WHEN FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
	CODIGONC,
	FECHALIMITE AS FECHAVENCIMIENTO,
	URLIMAGEN AS URLIMAGENETAPA,
	MODULEID,
	DESCRIPCIONNC,
	L_WORKINGDAYS,
	TOT_DELAY,
	TIPO_TAREA,
	FECHALIMITE AS FECHA_WO_DELAYS,
	0 AS PERCDONE,
	0 AS PERCTOTAL
	FROM VISTA_TAREASETAPASIMPLE 
	WHERE L_CUMPLIDA=0 AND FECHALIMITE=@Deadline
	ORDER BY CODIGO
end
else
begin
	SELECT
	CODIGO, 
	MANDARENFECHA AS INICIO,
	FECHALIMITE AS FIN,
	DURACION AS DURACION_DIAS,
	DURACION_STR AS DURACION,
	DIASVENCIMIENTO AS DIAS,
	DESCRIPCION,
	CUMPLIMIENTO,
	L_CUMPLIDA AS CUMPLIDA,
	0 AS INCONSISTENTE,
	0 AS DESVIACION, 
	FECHA AS INICIOREAL,
	DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
	ETAPA,
	0 AS MORA, 
	CASE WHEN FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
	CODIGONC,
	FECHALIMITE AS FECHAVENCIMIENTO,
	URLIMAGEN AS URLIMAGENETAPA,
	MODULEID,
	DESCRIPCIONNC,
	L_WORKINGDAYS,
	TOT_DELAY,
	TIPO_TAREA,
	FECHALIMITE AS FECHA_WO_DELAYS,
	0 AS PERCDONE,
	0 AS PERCTOTAL
	FROM VISTA_TAREASETAPASIMPLE 
	WHERE L_CUMPLIDA=0 AND FECHA IS NULL AND MANDARENFECHA=@Deadline
end
GO

GO
--SqlScripter----[dbo].[ik_tasks_issues].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_issues]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_issues] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_issues]
(@CodIssue int)  AS

SET DATEFORMAT YMD

DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME


SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA=MAX(CASE WHEN FECHALIMITE>CUMPLIMIENTO OR CUMPLIMIENTO IS NULL THEN FECHALIMITE ELSE CUMPLIMIENTO END) 
FROM NCTAREAS
WHERE NCTAREAS.CODIGONC=@CodIssue


SELECT
V.NC_AVA_OPTIONS,
V.AVA_WEIGHT_MODE,
V.AVA_WEIGHT_PERC,
V.AVA_OPTIONS,
V.AVA_REAL_PERC,
V.AVA_PRED_PERC,
@PRIMERAFECHA AS PRIMERAFECHA,
@ULTIMAFECHA AS ULTIMAFECHA,
V.CODIGO, 
V.MANDARENFECHA AS INICIO,
V.FECHALIMITE AS FIN,
V.DURACION AS DURACION_DIAS,
V.DURACION_STR AS DURACION,
V.DIASVENCIMIENTO AS DIAS,
V.DESCRIPCION,
V.CUMPLIMIENTO,
V.L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
V.FECHA AS INICIOREAL,
V.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
V.ETAPA,
CASE WHEN (V.MANDARENFECHA<GETDATE()) AND (V.FECHA IS NULL) THEN 1
	 WHEN (V.FECHA IS NOT NULL) AND (V.L_CUMPLIDA=0) AND (V.FECHALIMITE<GETDATE()) THEN 1
ELSE 0 END AS MORA,

CASE WHEN V.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
V.CODIGONC,
V.FECHALIMITE AS FECHAVENCIMIENTO,
V.URLIMAGEN AS URLIMAGENETAPA,
V.MODULEID,
V.DESCRIPCIONNC,
V.L_WORKINGDAYS,
V.TOT_DELAY,
V.TIPO_TAREA,
V.CODIGOTAREACONDICIONAL,
V.CODIGOTAREACONTRIBUYE,
V.FECHALIMITE AS FECHA_WO_DELAYS,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE L_DONE=1 AND NCTASKID=V.CODIGO) AS PERCDONE,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE NCTASKID=V.CODIGO) AS PERCTOTAL,
CASE WHEN NOT H.CODIGO IS NULL THEN 1
     WHEN V.TIPO_TAREA=2 THEN 2
     ELSE 3
END AS ORDER2

FROM VISTA_TAREASETAPASIMPLE V LEFT JOIN NCTAREAS H ON V.CODIGOTAREACONTRIBUYE = H.CODIGO
WHERE V.CODIGONC=@CodIssue
AND V.L_CUMPLIDA <> 2

ORDER BY 
(CASE WHEN H.CODIGO IS NULL THEN V.MANDARENFECHA ELSE H.MANDARENFECHA END),
(CASE WHEN H.CODIGO IS NULL THEN V.CODIGO ELSE H.CODIGO END),
ORDER2,
(CASE WHEN V.TIPO_TAREA=1 THEN V.MANDARENFECHA ELSE V.FECHALIMITE END)
GO

GO
--SqlScripter----[dbo].[ik_tasks_issues_custom_gantt].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_issues_custom_gantt]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_issues_custom_gantt] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_issues_custom_gantt]
(
	@tasksIdsXML XML, 	
	@L_SHOWPROJECTED tinyint=0,
	@Projection_Calc_TTL int = 30,
	@DaysDiff INT = 0,
	@StartDate datetime = null
)  

AS

SET DATEFORMAT YMD

CREATE TABLE #TMP_TASKS_IDS(RecordId int)

exec dbo.ik_TMP_TBL_IDS_fromXML @tasksIdsXML, '#TMP_TASKS_IDS', 0



DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME


IF (NOT @StartDate IS NULL)
BEGIN
	SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END)
	FROM NCTAREAS
	JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=NCTAREAS.CODIGO

	SET @DaysDiff = DATEDIFF(DAY,@PRIMERAFECHA,@StartDate)

END



--DELETE FROM NCTAREAS_PROJECTION_CALC WHERE DATEDIFF(minute,LAST_TASKS_PROJECTION_CALC,GETDATE())>@Projection_Calc_TTL





IF (@L_SHOWPROJECTED=1 OR @DaysDiff!=0)
BEGIN

			SELECT
			V.NC_AVA_OPTIONS,
			V.AVA_WEIGHT_MODE,
			V.AVA_WEIGHT_PERC,
			V.AVA_OPTIONS,
			V.AVA_REAL_PERC,
			V.AVA_PRED_PERC,
			GETDATE() AS PRIMERAFECHA,
			GETDATE() AS ULTIMAFECHA,
			V.CODIGO, 
			V.MANDARENFECHA AS INICIO,
			V.FECHALIMITE AS FIN,
			V.DURACION AS DURACION_DIAS,
			V.DURACION_STR AS DURACION,
			V.DIASVENCIMIENTO AS DIAS,
			V.DESCRIPCION,
			V.CUMPLIMIENTO,
			V.L_CUMPLIDA AS CUMPLIDA,
			0 AS INCONSISTENTE,
			0 AS DESVIACION, 
			V.FECHA AS INICIOREAL,
			V.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
			V.ETAPA,
			CASE WHEN (V.MANDARENFECHA<GETDATE()) AND (V.FECHA IS NULL) THEN 1
				 WHEN (V.FECHA IS NOT NULL) AND (V.L_CUMPLIDA=0) AND (V.FECHALIMITE<GETDATE()) THEN 1
			ELSE 0 END AS MORA,

			CASE WHEN V.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
			V.CODIGONC,
			V.FECHALIMITE AS FECHAVENCIMIENTO,
			V.URLIMAGEN AS URLIMAGENETAPA,
			V.MODULEID,
			V.DESCRIPCIONNC,
			V.L_WORKINGDAYS,
			V.TOT_DELAY,
			V.TIPO_TAREA,
			V.CODIGOTAREACONDICIONAL,
			V.CODIGOTAREACONTRIBUYE,
			V.FECHALIMITE AS FECHA_WO_DELAYS,
			V.PSTARTDATE,
			V.PENDDATE,
			(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
			WHERE L_DONE=1 AND NCTASKID=V.CODIGO) AS PERCDONE,
			(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
			WHERE NCTASKID=V.CODIGO) AS PERCTOTAL,
			CASE WHEN NOT H.CODIGO IS NULL THEN 1
				 WHEN V.TIPO_TAREA=2 THEN 2
				 ELSE 3
			END AS ORDER2

			INTO #TEMP_TASKS

			FROM VISTA_TAREASETAPASIMPLE V LEFT JOIN NCTAREAS H ON V.CODIGOTAREACONTRIBUYE = H.CODIGO
			WHERE 1=0


			
			IF (@DaysDiff != 0)
			BEGIN
				BEGIN TRANSACTION

					UPDATE NCTAREAS
					SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA),
					FECHALIMITE = DATEADD(d,@DaysDiff,FECHALIMITE)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=2


					UPDATE NCTAREAS
					SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=1
					--AND OPCIONENVIO=2


					UPDATE NCTAREAS
					SET FECHALIMITE =
						(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN MANDARENFECHA+DIASVENCIMIENTO
							  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(MANDARENFECHA,DIASVENCIMIENTO)
							  ELSE DATEADD(d,@DaysDiff,FECHALIMITE) END)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=1
					--AND OPCIONENVIO=2


			END

			DECLARE CURTASKSISSUES CURSOR LOCAL FAST_FORWARD FOR 
			SELECT DISTINCT CODIGONC FROM NCTAREAS
			JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=NCTAREAS.CODIGO
			--AND NOT CODIGONC IN (SELECT CODIGONC FROM NCTAREAS_PROJECTION_CALC)

			DECLARE @CODIGONC INT

			OPEN CURTASKSISSUES

			FETCH NEXT FROM CURTASKSISSUES INTO @CODIGONC
			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO #TEMP_TASKS
				EXEC DBO.ik_tasks_simulate @CODIGONC
				
				--INSERT INTO NCTAREAS_PROJECTION_CALC(CODIGONC, LAST_TASKS_PROJECTION_CALC)
				--VALUES (@CODIGONC, GETDATE())
				

				FETCH NEXT FROM CURTASKSISSUES INTO @CODIGONC
			END
 
			CLOSE CURTASKSISSUES
			DEALLOCATE CURTASKSISSUES
END

/*
SELECT @PRIMERAFECHA = MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX(CASE WHEN FECHALIMITE>CUMPLIMIENTO OR CUMPLIMIENTO IS NULL THEN FECHALIMITE ELSE CUMPLIMIENTO END) 
FROM NCTAREAS
WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)

*/

SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX([dbo].[DATEMAX](PENDDATE,
						 [dbo].[DATEMAX](CUMPLIMIENTO,FECHALIMITE)
					  ))

FROM NCTAREAS
JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=NCTAREAS.CODIGO
--WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)


SELECT
NC_AVA_OPTIONS,
AVA_WEIGHT_MODE,
AVA_WEIGHT_PERC,
AVA_OPTIONS,
AVA_REAL_PERC,
AVA_PRED_PERC,
@PRIMERAFECHA AS PRIMERAFECHA,
@ULTIMAFECHA AS ULTIMAFECHA,
CODIGO, 
MANDARENFECHA AS INICIO,
FECHALIMITE AS FIN,
DURACION AS DURACION_DIAS,
DURACION_STR AS DURACION,
DIASVENCIMIENTO AS DIAS,
DESCRIPCION,
CUMPLIMIENTO,
L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
FECHA AS INICIOREAL,
DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
ETAPA,
0 AS MORA, 
CASE WHEN FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
CODIGONC,
FECHALIMITE AS FECHAVENCIMIENTO,
URLIMAGEN AS URLIMAGENETAPA,
MODULEID,
DESCRIPCIONNC,
L_WORKINGDAYS,
TOT_DELAY,
TIPO_TAREA,
CODIGOTAREACONDICIONAL,
CODIGOTAREACONTRIBUYE,
PSTARTDATE,
PENDDATE,
FECHALIMITE AS FECHA_WO_DELAYS,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE L_DONE=1 AND NCTASKID=VISTA_TAREASETAPASIMPLE.CODIGO) AS PERCDONE,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE NCTASKID=VISTA_TAREASETAPASIMPLE.CODIGO) AS PERCTOTAL


FROM VISTA_TAREASETAPASIMPLE 
JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=VISTA_TAREASETAPASIMPLE.CODIGO
WHERE
-- CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)
--AND 
L_CUMPLIDA <> 2
ORDER BY (CASE WHEN TIPO_TAREA=1 THEN MANDARENFECHA ELSE FECHALIMITE END),TIPO_TAREA DESC


IF (@DaysDiff != 0)
BEGIN
	ROLLBACK TRANSACTION
END
GO

GO
--SqlScripter----[dbo].[ik_tasks_issues_mytasks_gantt].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_issues_mytasks_gantt]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_issues_mytasks_gantt] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_issues_mytasks_gantt]
(@ColTasks varchar(6000))  AS

if @ColTasks='' set @ColTasks='0'


DECLARE @TMP_TASKSIDS TABLE(TASKSID INT)
INSERT INTO @TMP_TASKSIDS(TASKSID)
SELECT [VALUE] FROM dbo.ik_SplitIntoTable(@ColTasks,',')


DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME

SELECT @PRIMERAFECHA = MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX(CASE WHEN FECHALIMITE>CUMPLIMIENTO OR CUMPLIMIENTO IS NULL THEN FECHALIMITE ELSE CUMPLIMIENTO END) 
FROM NCTAREAS
WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)


SELECT
NC_AVA_OPTIONS,
AVA_WEIGHT_MODE,
AVA_WEIGHT_PERC,
AVA_OPTIONS,
AVA_REAL_PERC,
AVA_PRED_PERC,
@PRIMERAFECHA AS PRIMERAFECHA,
@ULTIMAFECHA AS ULTIMAFECHA,
CODIGO, 
MANDARENFECHA AS INICIO,
FECHALIMITE AS FIN,
DURACION AS DURACION_DIAS,
DURACION_STR AS DURACION,
DIASVENCIMIENTO AS DIAS,
DESCRIPCION,
CUMPLIMIENTO,
L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
FECHA AS INICIOREAL,
DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
ETAPA,
0 AS MORA, 
CASE WHEN FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
CODIGONC,
FECHALIMITE AS FECHAVENCIMIENTO,
URLIMAGEN AS URLIMAGENETAPA,
MODULEID,
DESCRIPCIONNC,
L_WORKINGDAYS,
TOT_DELAY,
TIPO_TAREA,
CODIGOTAREACONDICIONAL,
CODIGOTAREACONTRIBUYE,
FECHALIMITE AS FECHA_WO_DELAYS,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE L_DONE=1 AND NCTASKID=VISTA_TAREASETAPASIMPLE.CODIGO) AS PERCDONE,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE NCTASKID=VISTA_TAREASETAPASIMPLE.CODIGO) AS PERCTOTAL


FROM VISTA_TAREASETAPASIMPLE 
WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)
AND L_CUMPLIDA <> 2
ORDER BY (CASE WHEN TIPO_TAREA=1 THEN MANDARENFECHA ELSE FECHALIMITE END),TIPO_TAREA DESC
GO

GO
--SqlScripter----[dbo].[ik_tasks_issues_with_simulated].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_issues_with_simulated]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_issues_with_simulated] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_issues_with_simulated]
(@CodIssue int)  AS

DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME


SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX([dbo].[DATEMAX](PENDDATE,
						 [dbo].[DATEMAX](CUMPLIMIENTO,FECHALIMITE)
					  ))

FROM NCTAREAS
WHERE NCTAREAS.CODIGONC=@CodIssue



SELECT
V.NC_AVA_OPTIONS,
V.AVA_WEIGHT_MODE,
V.AVA_WEIGHT_PERC,
V.AVA_OPTIONS,
V.AVA_REAL_PERC,
V.AVA_PRED_PERC,
@PRIMERAFECHA AS PRIMERAFECHA,
@ULTIMAFECHA AS ULTIMAFECHA,
V.CODIGO, 
V.MANDARENFECHA AS INICIO,
V.FECHALIMITE AS FIN,
V.DURACION AS DURACION_DIAS,
V.DURACION_STR AS DURACION,
V.DIASVENCIMIENTO AS DIAS,
V.DESCRIPCION,
V.CUMPLIMIENTO,
V.L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
V.FECHA AS INICIOREAL,
V.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
V.ETAPA,
CASE WHEN (V.MANDARENFECHA<GETDATE()) AND (V.FECHA IS NULL) THEN 1
	 WHEN (V.FECHA IS NOT NULL) AND (V.L_CUMPLIDA=0) AND (V.FECHALIMITE<GETDATE()) THEN 1
ELSE 0 END AS MORA,

CASE WHEN V.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
V.CODIGONC,
V.FECHALIMITE AS FECHAVENCIMIENTO,
V.URLIMAGEN AS URLIMAGENETAPA,
V.MODULEID,
V.DESCRIPCIONNC,
V.L_WORKINGDAYS,
V.TOT_DELAY,
V.TIPO_TAREA,
V.CODIGOTAREACONDICIONAL,
V.CODIGOTAREACONTRIBUYE,
V.FECHALIMITE AS FECHA_WO_DELAYS,
V.PSTARTDATE,
V.PENDDATE,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE L_DONE=1 AND NCTASKID=V.CODIGO) AS PERCDONE,
(SELECT SUM(PERC_ACCOMPLISHMENT) FROM NCTASKSSTEPS
WHERE NCTASKID=V.CODIGO) AS PERCTOTAL,
CASE WHEN NOT H.CODIGO IS NULL THEN 1
     WHEN V.TIPO_TAREA=2 THEN 2
     ELSE 3
END AS ORDER2

FROM VISTA_TAREASETAPASIMPLE V LEFT JOIN NCTAREAS H ON V.CODIGOTAREACONTRIBUYE = H.CODIGO
WHERE V.CODIGONC=@CodIssue
AND V.L_CUMPLIDA <> 2

ORDER BY 
(CASE WHEN H.CODIGO IS NULL THEN V.MANDARENFECHA ELSE H.MANDARENFECHA END),
(CASE WHEN H.CODIGO IS NULL THEN V.CODIGO ELSE H.CODIGO END),ORDER2,
(CASE WHEN V.TIPO_TAREA=1 THEN V.MANDARENFECHA ELSE V.FECHALIMITE END)
GO

GO
--SqlScripter----[dbo].[ik_tasks_prot_upd_casc_cond].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_prot_upd_casc_cond]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_prot_upd_casc_cond] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_prot_upd_casc_cond]
(
@TaskId int, @CheckMilestoneId int
)
AS
SET DATEFORMAT YMD

DECLARE @I INT, @MAXI INT, @CODIGO INT, @TIPO_TAREA INT, @CODIGOTAREACONDICIONAL INT, @CODIGOTAREACONTRIBUYE INT,  @CONTRIBUYE_ORIG INT
DECLARE @FECHALIMITE datetime
declare @startDate datetime
declare @endDate datetime
declare @msstartDate datetime
declare @msendDate datetime

BEGIN TRY
	CREATE TABLE #TMP_HITOS (CODIGO INT)
END TRY
BEGIN CATCH
END CATCH


CREATE TABLE #AUX (id INT IDENTITY(1,1), CODIGO INT, TIPO_TAREA INT, CODIGOTAREACONDICIONAL INT, CODIGOTAREACONTRIBUYE INT, CheckMilestoneId INT);

WITH LISTA (CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, CheckMilestoneId)
AS (
SELECT CODIGO, TIPO_TAREA, CODIGOTAREACONDICIONAL, CODIGOTAREACONTRIBUYE, @CheckMilestoneId FROM TPROT_TASK WHERE CODIGO=@TaskId
   UNION ALL
SELECT T.CODIGO, T.TIPO_TAREA, T.CODIGOTAREACONDICIONAL, T.CODIGOTAREACONTRIBUYE, -1 FROM TPROT_TASK T INNER JOIN LISTA ON T.CODIGOTAREACONDICIONAL=LISTA.CODIGO
)
INSERT INTO #AUX SELECT  * FROM LISTA  OPTION (MAXRECURSION 400);

SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)

WHILE @I <= @MAXI
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@I
	SET @FECHALIMITE = (SELECT FECHALIMITE FROM TPROT_TASK  WHERE CODIGO =  @CODIGO)
	SET @I = @I+1

	UPDATE TPROT_TASK
	SET MANDARENFECHA = @FECHALIMITE,
	FECHALIMITE =
		(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @FECHALIMITE+DIASVENCIMIENTO
			  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@FECHALIMITE,DIASVENCIMIENTO)
			  ELSE FECHALIMITE END)
	WHERE CODIGOTAREACONDICIONAL=@CODIGO

END

SET @I=1
SET @MAXI = (SELECT max(ID) FROM #AUX)

WHILE @MAXI >= @I
BEGIN
	SELECT @CODIGO=CODIGO, @TIPO_TAREA=TIPO_TAREA, @CODIGOTAREACONDICIONAL=CODIGOTAREACONDICIONAL, @CODIGOTAREACONTRIBUYE=CODIGOTAREACONTRIBUYE, @CheckMilestoneId=CheckMilestoneId FROM #AUX WHERE ID=@MAXI
	SET @MAXI = @MAXI-1

	if not @CODIGOTAREACONTRIBUYE is null
	begin
		IF (SELECT COUNT(*) FROM #TMP_HITOS WHERE #TMP_HITOS.CODIGO=@CODIGOTAREACONTRIBUYE)=0
		BEGIN
			INSERT INTO #TMP_HITOS(CODIGO) VALUES(@CODIGOTAREACONTRIBUYE)

			set @startDate = (SELECT MIN(MANDARENFECHA) FROM TPROT_TASK T2 WHERE T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
			set @endDate  = (SELECT MAX(FECHALIMITE) FROM TPROT_TASK T2 WHERE T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
			
			if not @startDate is NULL and not @endDate is NULL 
			begin
				UPDATE TPROT_TASK
				SET MANDARENFECHA = @startDate,
					FECHALIMITE = @endDate
				WHERE CODIGO=@CODIGOTAREACONTRIBUYE

				UPDATE TPROT_TASK
				SET MANDARENFECHA = @endDate,
				FECHALIMITE =
					(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN @endDate+DIASVENCIMIENTO
							WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(@endDate,DIASVENCIMIENTO)
							ELSE FECHALIMITE END)
				WHERE CODIGOTAREACONDICIONAL=@CODIGO

				EXEC dbo.[ik_tasks_prot_upd_casc_cond] @CODIGOTAREACONTRIBUYE,-1
			end
		END
	end
END


IF @CheckMilestoneId <> -1 
BEGIN
	if @CONTRIBUYE_ORIG IS NULL OR @CheckMilestoneId<>@CONTRIBUYE_ORIG
	begin
		set @CODIGOTAREACONTRIBUYE = @CheckMilestoneId

		set @startDate = (SELECT MIN(MANDARENFECHA) FROM TPROT_TASK T2 WHERE T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
		set @endDate  = (SELECT MAX(FECHALIMITE) FROM TPROT_TASK T2 WHERE	T2.CODIGOTAREACONTRIBUYE = @CODIGOTAREACONTRIBUYE)
		
		if not @startDate is NULL and not @endDate is NULL 
		begin
			UPDATE TPROT_TASK
			SET MANDARENFECHA = @startDate,
				FECHALIMITE = @endDate
			WHERE CODIGO=@CODIGOTAREACONTRIBUYE
		end
		else
		begin
			UPDATE TPROT_TASK
			SET MANDARENFECHA = FECHALIMITE
			WHERE CODIGO=@CODIGOTAREACONTRIBUYE
		end
	end
END


DROP TABLE #AUX

RETURN
GO

GO
--SqlScripter----[dbo].[ik_tasks_prototype_issues].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_prototype_issues]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_prototype_issues] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_prototype_issues]
(@CodIssue int)  AS

SET DATEFORMAT YMD

DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME

SELECT @PRIMERAFECHA=MIN(MANDARENFECHA) ,
       @ULTIMAFECHA=MAX(FECHALIMITE) 
FROM TPROT_TASK
WHERE TPROT_TASK.CODIGONC=@CodIssue


SELECT
0 AS NC_AVA_OPTIONS,
0 AS AVA_WEIGHT_MODE,
0 AS AVA_WEIGHT_PERC,
0 AS AVA_OPTIONS,
0 AS AVA_REAL_PERC,
0 AS AVA_PRED_PERC,

@PRIMERAFECHA AS PRIMERAFECHA ,
@ULTIMAFECHA AS ULTIMAFECHA ,
TPROT_TASK.CODIGO, 
TPROT_TASK.MANDARENFECHA AS INICIO,
TPROT_TASK.FECHALIMITE AS FIN,
TPROT_TASK.DURACION AS DURACION_DIAS,
TPROT_TASK.DURACION_STR AS DURACION,
TPROT_TASK.DIASVENCIMIENTO AS DIAS,
TPROT_TASK.DESCRIPCION,
TPROT_TASK.CUMPLIMIENTO,
TPROT_TASK.L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
TPROT_TASK.FECHA AS INICIOREAL,
NCDEFINICIONETAPAS.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
TPROT_TASK.ETAPA,
0 AS MORA, 
CASE WHEN TPROT_TASK.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
TPROT_TASK.CODIGONC,
TPROT_TASK.FECHALIMITE AS FECHAVENCIMIENTO,
NCDEFINICIONETAPAS.URLIMAGEN AS URLIMAGENETAPA,
NCMAINPROD.TIPO AS MODULEID,
NCMAINPROD.DESCRIPCION AS DESCRIPCIONNC,
TPROT_TASK.L_WORKINGDAYS,
0 AS TOT_DELAY,
TPROT_TASK.TIPO_TAREA,
TPROT_TASK.CODIGOTAREACONDICIONAL,
TPROT_TASK.CODIGOTAREACONTRIBUYE,
TPROT_TASK.FECHALIMITE AS FECHA_WO_DELAYS,
0 AS PERCDONE,
0 AS PERCTOTAL,
CASE WHEN NOT H.CODIGO IS NULL THEN 1
     WHEN TPROT_TASK.TIPO_TAREA=2 THEN 2
     ELSE 3
END AS ORDER2


FROM TPROT_TASK
LEFT JOIN 
TPROT_TASK H ON TPROT_TASK.CODIGOTAREACONTRIBUYE = H.CODIGO
INNER JOIN
NCMAINPROD ON TPROT_TASK.CODIGONC = NCMAINPROD.CODIGO
INNER JOIN 
VAR_TPROT ON TPROT_TASK.CODIGONC = VAR_TPROT.CODIGONC
INNER JOIN 
NCDEFINICIONETAPAS ON VAR_TPROT.VAR_TPROT_CLASS = NCDEFINICIONETAPAS.TIPO AND 
TPROT_TASK.ETAPA = NCDEFINICIONETAPAS.ETAPA 

WHERE TPROT_TASK.CODIGONC=@CodIssue
AND TPROT_TASK.L_CUMPLIDA <> 2

ORDER BY 
(CASE WHEN H.CODIGO IS NULL THEN TPROT_TASK.MANDARENFECHA ELSE H.MANDARENFECHA END),
(CASE WHEN H.CODIGO IS NULL THEN TPROT_TASK.CODIGO ELSE H.CODIGO END),
ORDER2,
(CASE WHEN TPROT_TASK.TIPO_TAREA=1 THEN TPROT_TASK.MANDARENFECHA ELSE TPROT_TASK.FECHALIMITE END)
GO

GO
--SqlScripter----[dbo].[ik_tasks_prototype_simulate].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_prototype_simulate]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_prototype_simulate] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_prototype_simulate]
(@CodIssue int, @DaysDiff int = 0)  AS


SET DATEFORMAT YMD

IF (@DaysDiff != 0 )
BEGIN
	BEGIN TRANSACTION
END

UPDATE TPROT_TASK
SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA),
FECHALIMITE = DATEADD(d,@DaysDiff,FECHALIMITE)
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=2


UPDATE TPROT_TASK
SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA)
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2


UPDATE TPROT_TASK
SET FECHALIMITE =
	(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN MANDARENFECHA+DIASVENCIMIENTO
	      WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(MANDARENFECHA,DIASVENCIMIENTO)
		  ELSE DATEADD(d,@DaysDiff,FECHALIMITE) END)
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2


declare CurTasks CURSOR LOCAL FAST_FORWARD for 
SELECT CODIGO
FROM TPROT_TASK 
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2
ORDER BY MANDARENFECHA

declare @CODIGO int

open CurTasks

fetch next from CurTasks into @CODIGO

while @@FETCH_STATUS = 0
begin
	exec dbo.ik_tasks_prot_upd_casc_cond @CODIGO,-1
	fetch next from CurTasks into @CODIGO
end
 
close CurTasks
deallocate CurTasks

exec ik_tasks_prototype_issues @CodIssue

IF (@DaysDiff != 0 )
BEGIN
	ROLLBACK TRANSACTION
END


RETURN
GO

GO
--SqlScripter----[dbo].[ik_tasks_simulate].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tasks_simulate]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tasks_simulate] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tasks_simulate]
(@CodIssue int)  AS

SET DATEFORMAT YMD

BEGIN TRANSACTION

/*INICIALIZACION DE TAREAS*/
UPDATE NCTAREAS 
SET PENDDATE = FECHALIMITE, PSTARTDATE=MANDARENFECHA 
WHERE 
TIPO_TAREA=1 
AND CODIGONC=@CodIssue 
AND L_CUMPLIDA = 0

/*INICIALIZACION DE HITOS*/
UPDATE NCTAREAS 
SET PENDDATE = FECHALIMITE, PSTARTDATE=FECHALIMITE
WHERE 
TIPO_TAREA=2 
AND CODIGONC=@CodIssue 
AND L_CUMPLIDA = 0


/*  TAREAS CUMPLIDAS */
UPDATE NCTAREAS
SET PSTARTDATE  = FECHA, PENDDATE = CUMPLIMIENTO
WHERE 
CODIGONC=@CodIssue
AND L_CUMPLIDA = 1


/*  TAREAS INICIADAS NO CUMPLIDAS */
UPDATE NCTAREAS
SET PSTARTDATE  = FECHA,
    PENDDATE = DATEADD(d,DATEDIFF(d, MANDARENFECHA, FECHALIMITE),FECHA)
WHERE 
CODIGONC=@CodIssue
AND L_CUMPLIDA = 0
AND TIPO_TAREA = 1
AND NOT FECHA IS NULL

UPDATE NCTAREAS
SET PENDDATE = GETDATE()
WHERE 
CODIGONC=@CodIssue
AND L_CUMPLIDA = 0
AND TIPO_TAREA = 1
AND NOT FECHA IS NULL
AND PENDDATE < GETDATE()


/*  TAREAS NO INICIADAS CON FECHA FIJA DE INICIO */
UPDATE NCTAREAS
SET PSTARTDATE = MANDARENFECHA
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2
AND FECHA IS NULL

UPDATE NCTAREAS
SET PSTARTDATE = GETDATE()
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2
AND FECHA IS NULL
AND PSTARTDATE < GETDATE()

UPDATE NCTAREAS
SET PENDDATE =
	(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN PSTARTDATE+DIASVENCIMIENTO
	      WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(PSTARTDATE,DIASVENCIMIENTO)
		  ELSE DATEADD(d,DATEDIFF(d,MANDARENFECHA,FECHALIMITE),PSTARTDATE) END)
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2
AND FECHA IS NULL


/* CONDICIONALES */
declare CurTasks CURSOR LOCAL FAST_FORWARD for 
SELECT CODIGO
FROM NCTAREAS
WHERE CODIGONC=@CodIssue
AND TIPO_TAREA=1
AND OPCIONENVIO=2
ORDER BY PSTARTDATE

declare @CODIGO int

open CurTasks

fetch next from CurTasks into @CODIGO

while @@FETCH_STATUS = 0
begin
	exec dbo.ik_nctasks_sim_upd_casc_cond @CODIGO,-1
	fetch next from CurTasks into @CODIGO
end
 
close CurTasks
deallocate CurTasks

COMMIT TRANSACTION

exec ik_tasks_issues_with_simulated @CodIssue

RETURN
GO

GO
--SqlScripter----[dbo].[ik_taskStep_create].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_taskStep_create]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_taskStep_create] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_taskStep_create]
@DESCRIPTION VARCHAR(100),
@REMARKS varchar(8000),
@PERC_ACCOMPLISHMENT INT,
@USER_CREATE VARCHAR(50),
@NCTASKID INT,
@RESPONSIBLES_MODE INT,
@L_ISMANDATORY SMALLINT,
@ResponsiblesIdsXML XML, 
@ResponsiblesRolesIdsXML XML,
@NCTASKSSTEPS_ID INT OUT 
AS
BEGIN

   DECLARE @ON INT

   SET @ON = ISNULL((SELECT MAX(ORDER_NUMBER)+1 FROM NCTASKSSTEPS WHERE NCTASKID = @NCTASKID),1)

   INSERT INTO NCTASKSSTEPS(DESCRIPTION, REMARKS, PERC_ACCOMPLISHMENT, USER_CREATE, DATE_CREATE, NCTASKID,
      L_DONE, RESPONSIBLES_MODE, ORDER_NUMBER, L_ISMANDATORY)
VALUES(@DESCRIPTION,@REMARKS,@PERC_ACCOMPLISHMENT,@USER_CREATE,GetDate(),@NCTASKID,
      0,@RESPONSIBLES_MODE, @ON, @L_ISMANDATORY)



   select   @NCTASKSSTEPS_ID=NCTASKSSTEPS_ID FROM NCTASKSSTEPS WHERE (NCTASKSSTEPS_ID = @@IDENTITY)

IF (@RESPONSIBLES_MODE != 0 ) 
BEGIN
	CREATE TABLE #TMP_POSITIONS_IDS(RecordId int)

	EXEC dbo.ik_TMP_TBL_IDS_fromXML @ResponsiblesIdsXML, '#TMP_POSITIONS_IDS', 0

	INSERT INTO NCTASKSSTEPSRESPONSIBLES(NCTASKSSTEPS_ID, RESPONSIBLE_RANKID)
	SELECT @NCTASKSSTEPS_ID, #TMP_POSITIONS_IDS.RecordId  FROM #TMP_POSITIONS_IDS


	CREATE TABLE #TMP_ROLES_IDS(RecordId int)

	EXEC dbo.ik_TMP_TBL_IDS_fromXML @ResponsiblesRolesIdsXML, '#TMP_ROLES_IDS', 0


	--INSERT INTO IKROLES_NCTASKSSTEPS (NCTASKSSTEPS_ID, IKROLES_ID, NCWORKGROUPS_ID)
	--SELECT DISTINCT @NCTASKSSTEPS_ID, #TMP_ROLES_IDS.RecordId, (SELECT NCWORKGROUPS_ID FROM IKROLES_NCTAREAS WHERE NCTASK_ID=@NCTASKID AND IKROLES_ID=#TMP_ROLES_IDS.RecordId) FROM #TMP_ROLES_IDS
	
END





END
GO

GO
--SqlScripter----[dbo].[ik_taskStepTPROT_create].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_taskStepTPROT_create]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_taskStepTPROT_create] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_taskStepTPROT_create]
@DESCRIPTION VARCHAR(100),
@REMARKS varchar(8000),
@PERC_ACCOMPLISHMENT INT,
@USER_CREATE VARCHAR(50),
@NCTASKID INT,
@RESPONSIBLES_MODE INT,
@L_ISMANDATORY SMALLINT ,
@ResponsiblesIdsXML XML, 
@ResponsiblesRolesIdsXML XML, 
@NCTASKSSTEPS_ID INT OUT 
AS
BEGIN

   DECLARE @ON INT

   SET @ON = ISNULL((SELECT MAX(ORDER_NUMBER)+1 FROM TPROT_TASKSSTEPS WHERE NCTASKID = @NCTASKID),1)

   INSERT INTO TPROT_TASKSSTEPS(DESCRIPTION, REMARKS, PERC_ACCOMPLISHMENT, USER_CREATE, DATE_CREATE, NCTASKID,
      L_DONE, RESPONSIBLES_MODE, ORDER_NUMBER, L_ISMANDATORY)
VALUES(@DESCRIPTION,@REMARKS,@PERC_ACCOMPLISHMENT,@USER_CREATE,GetDate(),@NCTASKID,
      0,@RESPONSIBLES_MODE, @ON, @L_ISMANDATORY)



   select   @NCTASKSSTEPS_ID=NCTASKSSTEPS_ID FROM TPROT_TASKSSTEPS WHERE (NCTASKSSTEPS_ID = @@IDENTITY)

   
IF (@RESPONSIBLES_MODE != 0 ) 
BEGIN
	CREATE TABLE #TMP_POSITIONS_IDS(RecordId int)

	EXEC dbo.ik_TMP_TBL_IDS_fromXML @ResponsiblesIdsXML, '#TMP_POSITIONS_IDS', 0

	INSERT INTO TPROT_TASKSSTEPSRESPONSIBLES(NCTASKSSTEPS_ID, RESPONSIBLE_RANKID)
	SELECT @NCTASKSSTEPS_ID, #TMP_POSITIONS_IDS.RecordId  FROM #TMP_POSITIONS_IDS

	CREATE TABLE #TMP_ROLES_IDS(RecordId int)

	EXEC dbo.ik_TMP_TBL_IDS_fromXML @ResponsiblesRolesIdsXML, '#TMP_ROLES_IDS', 0

	INSERT INTO IKROLES_TPROT_TASKSSTEPS (NCTASKSSTEPS_ID, IKROLES_ID, NCWORKGROUPS_ID)
	SELECT @NCTASKSSTEPS_ID, #TMP_ROLES_IDS.RecordId, 1  FROM #TMP_ROLES_IDS

END

	

END
GO

GO
--SqlScripter----[dbo].[ik_TMP_TBL_IDS_fromXML].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_TMP_TBL_IDS_fromXML]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_TMP_TBL_IDS_fromXML] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_TMP_TBL_IDS_fromXML]
(
	@ValidXMLInput XML, 	
	@tmp_table nvarchar(500) = '#TMP_OXML_TMP_TBL_IDS',
	@L_RETURN_DATA int = 0
)

AS BEGIN
       
       SELECT Col.value('@ID','INT') AS RecordId INTO #TMP_TBL_IDS_FRON_XML 
       FROM @ValidXMLInput.nodes('//records/record') Tab(Col)


	   
	   BEGIN TRY
		   DECLARE @QUERY nvarchar(3000)
		   SET @QUERY = '
		   INSERT INTO ' + @tmp_table + ' 
		   SELECT * FROM #TMP_TBL_IDS_FRON_XML'
		   EXEC (@QUERY) 
		END TRY
	   BEGIN CATCH
	   END CATCH
	   


	   IF @L_RETURN_DATA=1
	   BEGIN
		SELECT * FROM #TMP_TBL_IDS_FRON_XML 
	   END

	   DROP TABLE #TMP_TBL_IDS_FRON_XML
	   
 

END
GO

GO
--SqlScripter----[dbo].[ik_tprottasks_issues_custom_gantt].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_tprottasks_issues_custom_gantt]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_tprottasks_issues_custom_gantt] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_tprottasks_issues_custom_gantt]
(
	@tasksIdsXML XML, 	
	@DaysDiff INT = 0,
	@StartDate datetime = null
)  

AS

SET DATEFORMAT YMD

CREATE TABLE #TMP_TASKS_IDS(RecordId int)

exec dbo.ik_TMP_TBL_IDS_fromXML @tasksIdsXML, '#TMP_TASKS_IDS', 0



DECLARE @PRIMERAFECHA DATETIME
DECLARE @ULTIMAFECHA DATETIME


IF (NOT @StartDate IS NULL)
BEGIN
	SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END)
	FROM TPROT_TASK
	JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=TPROT_TASK.CODIGO

	SET @DaysDiff = DATEDIFF(DAY,@PRIMERAFECHA,@StartDate)

END



--DELETE FROM NCTAREAS_PROJECTION_CALC WHERE DATEDIFF(minute,LAST_TASKS_PROJECTION_CALC,GETDATE())>@Projection_Calc_TTL





IF ( @DaysDiff!=0)
BEGIN


			SELECT
			0 AS NC_AVA_OPTIONS,
			0 AS AVA_WEIGHT_MODE,
			0 AS AVA_WEIGHT_PERC,
			0 AS AVA_OPTIONS,
			0 AS AVA_REAL_PERC,
			0 AS AVA_PRED_PERC,

			@PRIMERAFECHA AS PRIMERAFECHA ,
			@ULTIMAFECHA AS ULTIMAFECHA ,
			TPROT_TASK.CODIGO, 
			TPROT_TASK.MANDARENFECHA AS INICIO,
			TPROT_TASK.FECHALIMITE AS FIN,
			TPROT_TASK.DURACION AS DURACION_DIAS,
			TPROT_TASK.DURACION_STR AS DURACION,
			TPROT_TASK.DIASVENCIMIENTO AS DIAS,
			TPROT_TASK.DESCRIPCION,
			TPROT_TASK.CUMPLIMIENTO,
			TPROT_TASK.L_CUMPLIDA AS CUMPLIDA,
			0 AS INCONSISTENTE,
			0 AS DESVIACION, 
			TPROT_TASK.FECHA AS INICIOREAL,
			NCDEFINICIONETAPAS.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
			TPROT_TASK.ETAPA,
			0 AS MORA, 
			CASE WHEN TPROT_TASK.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
			TPROT_TASK.CODIGONC,
			TPROT_TASK.FECHALIMITE AS FECHAVENCIMIENTO,
			NCDEFINICIONETAPAS.URLIMAGEN AS URLIMAGENETAPA,
			NCMAINPROD.TIPO AS MODULEID,
			NCMAINPROD.DESCRIPCION AS DESCRIPCIONNC,
			TPROT_TASK.L_WORKINGDAYS,
			0 AS TOT_DELAY,
			TPROT_TASK.TIPO_TAREA,
			TPROT_TASK.CODIGOTAREACONDICIONAL,
			TPROT_TASK.CODIGOTAREACONTRIBUYE,
			TPROT_TASK.FECHALIMITE AS FECHA_WO_DELAYS,
			0 AS PERCDONE,
			0 AS PERCTOTAL,
			CASE WHEN NOT H.CODIGO IS NULL THEN 1
					WHEN TPROT_TASK.TIPO_TAREA=2 THEN 2
					ELSE 3
			END AS ORDER2

			INTO #TEMP_TASKS

			FROM TPROT_TASK
			LEFT JOIN 
			TPROT_TASK H ON TPROT_TASK.CODIGOTAREACONTRIBUYE = H.CODIGO
			INNER JOIN
			NCMAINPROD ON TPROT_TASK.CODIGONC = NCMAINPROD.CODIGO
			INNER JOIN 
			VAR_TPROT ON TPROT_TASK.CODIGONC = VAR_TPROT.CODIGONC
			INNER JOIN 
			NCDEFINICIONETAPAS ON VAR_TPROT.VAR_TPROT_CLASS = NCDEFINICIONETAPAS.TIPO AND 
			TPROT_TASK.ETAPA = NCDEFINICIONETAPAS.ETAPA 
			WHERE 1=0


			
			IF (@DaysDiff != 0)
			BEGIN
				BEGIN TRANSACTION

					UPDATE TPROT_TASK
					SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA),
					FECHALIMITE = DATEADD(d,@DaysDiff,FECHALIMITE)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=2


					UPDATE TPROT_TASK
					SET MANDARENFECHA = DATEADD(d,@DaysDiff,MANDARENFECHA)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=1
					--AND OPCIONENVIO=2


					UPDATE TPROT_TASK
					SET FECHALIMITE =
						(CASE WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=0 THEN MANDARENFECHA+DIASVENCIMIENTO
							  WHEN OPCIONVENCIMIENTO = 1 AND L_WORKINGDAYS=1 THEN dbo.ik_AddWorkingDays(MANDARENFECHA,DIASVENCIMIENTO)
							  ELSE DATEADD(d,@DaysDiff,FECHALIMITE) END)
					WHERE CODIGO IN (SELECT #TMP_TASKS_IDS.RecordId FROM #TMP_TASKS_IDS)
					AND TIPO_TAREA=1
					--AND OPCIONENVIO=2


			END

			DECLARE CURTASKSISSUES CURSOR LOCAL FAST_FORWARD FOR 
			SELECT DISTINCT CODIGONC FROM TPROT_TASK
			JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=TPROT_TASK.CODIGO
			--AND NOT CODIGONC IN (SELECT CODIGONC FROM NCTAREAS_PROJECTION_CALC)

			DECLARE @CODIGONC INT

			OPEN CURTASKSISSUES

			FETCH NEXT FROM CURTASKSISSUES INTO @CODIGONC
			WHILE @@FETCH_STATUS = 0
			BEGIN
				INSERT INTO #TEMP_TASKS
				EXEC DBO.ik_tasks_prototype_simulate @CODIGONC
				
				--INSERT INTO NCTAREAS_PROJECTION_CALC(CODIGONC, LAST_TASKS_PROJECTION_CALC)
				--VALUES (@CODIGONC, GETDATE())
				

				FETCH NEXT FROM CURTASKSISSUES INTO @CODIGONC
			END
 
			CLOSE CURTASKSISSUES
			DEALLOCATE CURTASKSISSUES
END

/*
SELECT @PRIMERAFECHA = MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX(CASE WHEN FECHALIMITE>CUMPLIMIENTO OR CUMPLIMIENTO IS NULL THEN FECHALIMITE ELSE CUMPLIMIENTO END) 
FROM NCTAREAS
WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)

*/

SELECT @PRIMERAFECHA=MIN(CASE WHEN MANDARENFECHA<FECHA OR FECHA IS NULL THEN MANDARENFECHA ELSE FECHA END) ,
       @ULTIMAFECHA = MAX([dbo].[DATEMAX](CUMPLIMIENTO,FECHALIMITE))

FROM TPROT_TASK
JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=TPROT_TASK.CODIGO
--WHERE CODIGO IN (SELECT TASKSID FROM @TMP_TASKSIDS)



SELECT
0 AS NC_AVA_OPTIONS,
0 AS AVA_WEIGHT_MODE,
0 AS AVA_WEIGHT_PERC,
0 AS AVA_OPTIONS,
0 AS AVA_REAL_PERC,
0 AS AVA_PRED_PERC,

@PRIMERAFECHA AS PRIMERAFECHA ,
@ULTIMAFECHA AS ULTIMAFECHA ,
TPROT_TASK.CODIGO, 
TPROT_TASK.MANDARENFECHA AS INICIO,
TPROT_TASK.FECHALIMITE AS FIN,
TPROT_TASK.DURACION AS DURACION_DIAS,
TPROT_TASK.DURACION_STR AS DURACION,
TPROT_TASK.DIASVENCIMIENTO AS DIAS,
TPROT_TASK.DESCRIPCION,
TPROT_TASK.CUMPLIMIENTO,
TPROT_TASK.L_CUMPLIDA AS CUMPLIDA,
0 AS INCONSISTENTE,
0 AS DESVIACION, 
TPROT_TASK.FECHA AS INICIOREAL,
NCDEFINICIONETAPAS.DESCRIPCIONCORTA AS DESCRIPCIONETAPA,
TPROT_TASK.ETAPA,
0 AS MORA, 
CASE WHEN TPROT_TASK.FECHA IS NULL THEN 0 ELSE 1 END AS INICIADA,
TPROT_TASK.CODIGONC,
TPROT_TASK.FECHALIMITE AS FECHAVENCIMIENTO,
NCDEFINICIONETAPAS.URLIMAGEN AS URLIMAGENETAPA,
NCMAINPROD.TIPO AS MODULEID,
NCMAINPROD.DESCRIPCION AS DESCRIPCIONNC,
TPROT_TASK.L_WORKINGDAYS,
0 AS TOT_DELAY,
TPROT_TASK.TIPO_TAREA,
TPROT_TASK.CODIGOTAREACONDICIONAL,
TPROT_TASK.CODIGOTAREACONTRIBUYE,
TPROT_TASK.FECHALIMITE AS FECHA_WO_DELAYS,
0 AS PERCDONE,
0 AS PERCTOTAL,
CASE WHEN NOT H.CODIGO IS NULL THEN 1
     WHEN TPROT_TASK.TIPO_TAREA=2 THEN 2
     ELSE 3
END AS ORDER2


FROM TPROT_TASK
JOIN #TMP_TASKS_IDS ON #TMP_TASKS_IDS.RecordId=TPROT_TASK.CODIGO

LEFT JOIN 
TPROT_TASK H ON TPROT_TASK.CODIGOTAREACONTRIBUYE = H.CODIGO
INNER JOIN
NCMAINPROD ON TPROT_TASK.CODIGONC = NCMAINPROD.CODIGO
INNER JOIN 
VAR_TPROT ON TPROT_TASK.CODIGONC = VAR_TPROT.CODIGONC
INNER JOIN 
NCDEFINICIONETAPAS ON VAR_TPROT.VAR_TPROT_CLASS = NCDEFINICIONETAPAS.TIPO AND 
TPROT_TASK.ETAPA = NCDEFINICIONETAPAS.ETAPA 

WHERE 
TPROT_TASK.L_CUMPLIDA <> 2

ORDER BY 
(CASE WHEN H.CODIGO IS NULL THEN TPROT_TASK.MANDARENFECHA ELSE H.MANDARENFECHA END),
(CASE WHEN H.CODIGO IS NULL THEN TPROT_TASK.CODIGO ELSE H.CODIGO END),
ORDER2,
(CASE WHEN TPROT_TASK.TIPO_TAREA=1 THEN TPROT_TASK.MANDARENFECHA ELSE TPROT_TASK.FECHALIMITE END)


IF (@DaysDiff != 0)
BEGIN
	ROLLBACK TRANSACTION
END
GO

GO
--SqlScripter----[dbo].[ik_updateIKPOSGTREE_pathint].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_updateIKPOSGTREE_pathint]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_updateIKPOSGTREE_pathint] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_updateIKPOSGTREE_pathint]
@IKPOSITIONSGROUPSTREEID INT 
AS
BEGIN

   DECLARE @Path VARCHAR(1000)
   SET @Path =(SELECT PATH_INT
   FROM IKPOSITIONSGROUPSTREE
   WHERE IKPOSITIONSGROUPSTREEID =(SELECT PARENTID
      FROM IKPOSITIONSGROUPSTREE
      WHERE IKPOSITIONSGROUPSTREEID = @IKPOSITIONSGROUPSTREEID))

	IF (LEN(@Path))>0 
	BEGIN
		UPDATE IKPOSITIONSGROUPSTREE
	   SET PATH_INT = dbo.CONCAT3(@Path,',',LTRIM(STR(IKPOSITIONSGROUPSTREEID)))
	   WHERE IKPOSITIONSGROUPSTREEID = @IKPOSITIONSGROUPSTREEID
	END
	ELSE
	BEGIN
	UPDATE IKPOSITIONSGROUPSTREE
	   SET PATH_INT = @IKPOSITIONSGROUPSTREEID
	   WHERE IKPOSITIONSGROUPSTREEID = @IKPOSITIONSGROUPSTREEID
	END
   

END
GO

GO
--SqlScripter----[dbo].[ik_users_FA_CAN_LOGIN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_users_FA_CAN_LOGIN]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_users_FA_CAN_LOGIN] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_users_FA_CAN_LOGIN]
(@LoginName nvarchar(50) = '')
AS

IF CHARINDEX('''',@LoginName)>0
BEGIN
	SELECT 0 AS RESULT
	RETURN
END

DECLARE @LGroup tinyint
SET @LGroup = (SELECT L_GRUPO FROM USUARIOS WHERE LOGINNAME=@LoginName)
IF (@LGroup = 1)
BEGIN
	SELECT 0 AS RESULT
	RETURN
END

DECLARE @LDeleted tinyint
SET @LDeleted = (SELECT L_DELETED FROM USUARIOS WHERE LOGINNAME=@LoginName)
IF (@LDeleted = 1)
BEGIN
	SELECT 0 AS RESULT
	RETURN
END



DECLARE @UserLevel datetime
SET @UserLevel = (SELECT CATEGORIA FROM USUARIOS WHERE LOGINNAME=@LoginName)


IF (@UserLevel = 0)
BEGIN
	SELECT 0 AS RESULT
END
ELSE
BEGIN
	SELECT 1 AS RESULT
END




DECLARE @CadDate datetime
SET @CadDate = (SELECT FECHACADUCIDAD FROM USUARIOS WHERE LOGINNAME=@LoginName)


IF (@CadDate is null)
BEGIN
	SELECT 1 AS RESULT
END
ELSE
BEGIN
	IF (@CadDate <= getdate())
	BEGIN
		SELECT 0 AS RESULT
	END
	ELSE
	BEGIN
		SELECT 1 AS RESULT
	END
END
GO

GO
--SqlScripter----[dbo].[ik_users_set_WEBPASSWORD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_users_set_WEBPASSWORD]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_users_set_WEBPASSWORD] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_users_set_WEBPASSWORD]
(@LoginName nvarchar(50) = '', @MD5Password nvarchar(512))
AS

DECLARE @LGroup tinyint
SET @LGroup = (SELECT L_GRUPO FROM USUARIOS WHERE LOGINNAME=@LoginName)
IF (@LGroup = 1)
BEGIN
	RAISERROR('FAILURE: Cannot change the password of a User Group',16,1)
	RETURN
END


UPDATE USUARIOS SET WEBPASSWORD=@MD5Password, L_MUSTCHANGEPASSWORD=0 WHERE LOGINNAME=@LoginName
GO

GO
--SqlScripter----[dbo].[ik_usr_getDocsDistrib_GrantA].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usr_getDocsDistrib_GrantA]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usr_getDocsDistrib_GrantA] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usr_getDocsDistrib_GrantA]
@USERID INT 
AS
BEGIN

--   EXECUTE ik_usr_getDistributedDocuments @USERID,1
SELECT * FROM
dbo.fn_usr_getDocsDistrib(@USERID,1)

--   select * FROM #DOC_TBL 
WHERE
   NOT CODIGO IN(SELECT CODIGODOCUMENTO FROM PERMISOSDOC WHERE NIVELACCESO >= 300002
      and CODIGOUSUARIO = @USERID)
   and NOT CODIGO IN(SELECT CODIGODOCUMENTO FROM PERMISOSDOC
      WHERE NIVELACCESO >= 300002 and CODIGOUSUARIO IN(SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO = @USERID))

END
GO

GO
--SqlScripter----[dbo].[ik_usr_getDocsDistrib_not_run].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usr_getDocsDistrib_not_run]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usr_getDocsDistrib_not_run] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usr_getDocsDistrib_not_run]
@USERID INT 
AS
BEGIN
  
  SELECT * FROM dbo.fn_usr_getDocsDistrib(@USERID,0)
 WHERE TIPO_DISTRIBUCION <> 4

END
GO

GO
--SqlScripter----[dbo].[ik_usr_getDocsDistribPolicies].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usr_getDocsDistribPolicies]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usr_getDocsDistribPolicies] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usr_getDocsDistribPolicies]
@USERID INT,
@STRDOCSIDS VARCHAR(8000),
@STRDOCSIDS_HEREDAN VARCHAR(8000) 
AS
BEGIN

IF @STRDOCSIDS_HEREDAN =  ''
   begin
      select * FROM dbo.fn_usr_getDocsDistribPolicies(@USERID)
      WHERE CODIGODOC IN(SELECT [VALUE] FROM dbo.ik_SplitIntoTable(@STRDOCSIDS,','))
   end
ELSE
   begin


      select * FROM dbo.fn_usr_getDocsDistribPolicies(@USERID)
      WHERE CODIGODOC IN(SELECT [VALUE] FROM  dbo.ik_SplitIntoTable(@STRDOCSIDS,','))
      or CODIGODOC IN(SELECT [VALUE] FROM  ik_SplitIntoTable(@STRDOCSIDS_HEREDAN,','))
   end



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_DocGroupsByPerm].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_DocGroupsByPerm]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_DocGroupsByPerm] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_DocGroupsByPerm]
@CODIGOUSUARIO INT, 
@NIVELACCESO INT 
AS
BEGIN


   IF (@NIVELACCESO = -1)
      select DISTINCT  M.DESCRIPCION, M.CODIGO,
		CASE 
			WHEN L_PUEDENUEVOS=1 THEN M.CAMINO + ' (New Allowed)'
			ELSE M.CAMINO
		END AS CAMINO,
	'Images/OpenedFolder.gif' AS SMALLGIF ,M.ORDEN
		FROM TBL_CATEGORIASDOCUMENTOS M
      JOIN NCMODULESECURITYLEVELS P ON P.CODIGOTIPONC = M.CODIGO+300000
      WHERE CODIGOUSUARIO = @CODIGOUSUARIO
      ORDER BY M.ORDEN
   ELSE
      select DISTINCT  M.DESCRIPCION, M.CODIGO,
		CASE 
			WHEN L_PUEDENUEVOS=1 THEN M.CAMINO + ' (New Allowed)'
			ELSE M.CAMINO
		END AS CAMINO,
	'Images/OpenedFolder.gif' AS SMALLGIF ,M.ORDEN
		FROM TBL_CATEGORIASDOCUMENTOS M
      JOIN NCMODULESECURITYLEVELS P ON P.CODIGOTIPONC = M.CODIGO+300000
      WHERE NIVELACCESO = @NIVELACCESO AND CODIGOUSUARIO = @CODIGOUSUARIO
      ORDER BY M.ORDEN


END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_DocsByStatusAndGAndP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_DocsByStatusAndGAndP]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndGAndP] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndGAndP]
@CODIGOUSUARIO INT,
@ESTADO_DOCUMENTO INT,
@NIVELACCESO INT,
@CODIGOCATEGORIA INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')
   IF (@NIVELACCESO = -1)
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif' END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO and D.CODIGO IN(SELECT CODIGODOCUMENTO FROM DOCUMENTOSCATEGORIAS WHERE CODIGOCATEGORIA = @CODIGOCATEGORIA)
      ORDER BY CODIGOISO,C_REVISION
   ELSE
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif' END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO and P.NIVELACCESO = @NIVELACCESO and D.CODIGO IN(SELECT CODIGODOCUMENTO FROM DOCUMENTOSCATEGORIAS WHERE CODIGOCATEGORIA = @CODIGOCATEGORIA)
      ORDER BY CODIGOISO,C_REVISION




END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_DocsByStatusAndPerm].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_DocsByStatusAndPerm]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndPerm] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndPerm]
@CODIGOUSUARIO INT, @ESTADO_DOCUMENTO INT, @NIVELACCESO INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')
   IF (@NIVELACCESO = -1)
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,
   CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif'
      END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO
      ORDER BY CODIGOISO,C_REVISION
   ELSE
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif' END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO and P.NIVELACCESO = @NIVELACCESO
      ORDER BY CODIGOISO,C_REVISION




END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_DocsByStatusAndTAndP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_DocsByStatusAndTAndP]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndTAndP] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_DocsByStatusAndTAndP]
@CODIGOUSUARIO INT,
@ESTADO_DOCUMENTO INT,
@NIVELACCESO INT,
@CODIGOTIPO INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')
   IF (@NIVELACCESO = -1)
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif' END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO and D.CODIGOTIPO = @CODIGOTIPO
      ORDER BY CODIGOISO,C_REVISION
   ELSE
      select   D.CODIGO,D.NOMBRE,D.CODIGOISO,D.C_REVISION,CASE WHEN ESTADO = 1 THEN 'Images/Doc_Development.gif' WHEN ESTADO = 2 THEN 'Images/Doc_Current.gif' END AS ICONOESTADO
      FROM DOCUMENTOS D JOIN PERMISOSDOC P ON P.CODIGODOCUMENTO = D.CODIGO and P.CODIGOUSUARIO = @CODIGOUSUARIO
      WHERE D.ESTADO = @ESTADO_DOCUMENTO and D.CODIGOTIPO = @CODIGOTIPO and P.NIVELACCESO = @NIVELACCESO
      ORDER BY CODIGOISO,C_REVISION




END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_IndicatorsByPerm].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_IndicatorsByPerm]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_IndicatorsByPerm] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_IndicatorsByPerm]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT,
@BSPROCCAT INT,
@IKCAT INT,
@IKCDU INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   DECLARE @SWfunc_IK_BSINDICATORS_WITHACCESS_par01 VARCHAR(255)
   DECLARE @SWfunc_IK_BSINDICATORS_WITHACCESS_par11 VARCHAR(255)
   IF (@SEC_LEVEL = -1)
   begin
      set @SWfunc_IK_BSINDICATORS_WITHACCESS_par01 = 'BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM BS_INDICATORS_OPTIONS WHERE USERID='+ LTRIM(@CODIGOUSUARIO)+')'
      EXECUTE ik_bsindicators_withaccess @SWfunc_IK_BSINDICATORS_WITHACCESS_par01,'DESCRIPTION',@BSPROCCAT,
      @IKCAT,@IKCDU
   end
ELSE
   begin
      set @SWfunc_IK_BSINDICATORS_WITHACCESS_par11 = 'BS_INDICATORSID IN (SELECT BS_INDICATORSID FROM BS_INDICATORS_OPTIONS WHERE SEC_LEVEL='+ LTRIM(@SEC_LEVEL)+' AND USERID='+ LTRIM(@CODIGOUSUARIO)+')'
      EXECUTE ik_bsindicators_withaccess @SWfunc_IK_BSINDICATORS_WITHACCESS_par11,'DESCRIPTION',@BSPROCCAT,
      @IKCAT,@IKCDU
   end



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_ModulesByPermissions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_ModulesByPermissions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_ModulesByPermissions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_ModulesByPermissions]
@CODIGOUSUARIO INT, @NIVELACCESO INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   IF (@NIVELACCESO = -1)
      select DISTINCT  M.MODULEID,M.DESCRIPTION,G.SMALLGIF FROM XML_MODULE_DEFINITIONS M
      JOIN XML_MODULEGROUP_DEFINITIONS G ON G.MODULEGROUPID = M.MODULEGROUPID
      JOIN NCMODULESECURITYLEVELS P ON P.CODIGOTIPONC = M.MODULEID
      WHERE CODIGOUSUARIO = @CODIGOUSUARIO
      ORDER BY M.DESCRIPTION
   ELSE
      select DISTINCT  M.MODULEID,M.DESCRIPTION,G.SMALLGIF FROM XML_MODULE_DEFINITIONS M
      JOIN XML_MODULEGROUP_DEFINITIONS G ON G.MODULEGROUPID = M.MODULEGROUPID
      JOIN NCMODULESECURITYLEVELS P ON P.CODIGOTIPONC = M.MODULEID
      WHERE NIVELACCESO = @NIVELACCESO and CODIGOUSUARIO = @CODIGOUSUARIO
      ORDER BY M.DESCRIPTION




END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_PNByPermission].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_PNByPermission]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_PNByPermission] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_PNByPermission]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   IF (@SEC_LEVEL = -1)
      select   NODEIMG,PROC_NODESID,DESCRIPTION FROM VISTA_PROC_NODES
      WHERE PROC_NODESID IN(SELECT PROC_NODESID FROM PROC_NODES_OPTIONS WHERE USERID = @CODIGOUSUARIO)
      ORDER BY DESCRIPTION
   ELSE
      select   NODEIMG,PROC_NODESID,DESCRIPTION FROM VISTA_PROC_NODES
      WHERE PROC_NODESID IN(SELECT PROC_NODESID FROM PROC_NODES_OPTIONS WHERE SEC_LEVEL = @SEC_LEVEL and USERID = @CODIGOUSUARIO)
      ORDER BY DESCRIPTION



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_PPByPermission].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_PPByPermission]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_PPByPermission] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_PPByPermission]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT,
@BSPROCCAT INT,
@IKCAT INT,
@IKCDU INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   DECLARE @SWfunc_IK_PROCPLANS_WITHACCESS_par01 VARCHAR(255)
   DECLARE @SWfunc_IK_PROCPLANS_WITHACCESS_par11 VARCHAR(255)
   IF (@SEC_LEVEL = -1)
   begin
      set @SWfunc_IK_PROCPLANS_WITHACCESS_par01 = 'PROC_PLANSID IN (SELECT PROC_PLANSID FROM PROC_PLANS_OPTIONS WHERE USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')')
      EXECUTE ik_procplans_withaccess @SWfunc_IK_PROCPLANS_WITHACCESS_par01,'DESCRIPTION',@BSPROCCAT,@IKCAT,
      @IKCDU
   end
ELSE
   begin
      set @SWfunc_IK_PROCPLANS_WITHACCESS_par11 = 'PROC_PLANSID IN (SELECT PROC_PLANSID FROM PROC_PLANS_OPTIONS WHERE SEC_LEVEL='+convert(VARCHAR,convert(VARCHAR,@SEC_LEVEL)+' AND USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')'))
      EXECUTE ik_procplans_withaccess @SWfunc_IK_PROCPLANS_WITHACCESS_par11,'DESCRIPTION',@BSPROCCAT,@IKCAT,
      @IKCDU
   end



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_SNByPermission].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_SNByPermission]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_SNByPermission] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_SNByPermission]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   IF (@SEC_LEVEL = -1)
      select   NODEIMG,BS_STRAT_NODESID,DESCRIPTION FROM VISTA_BS_STRAT_NODES
      WHERE BS_STRAT_NODESID IN(SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE USERID = @CODIGOUSUARIO)
      ORDER BY DESCRIPTION
   ELSE
      select   NODEIMG,BS_STRAT_NODESID,DESCRIPTION FROM VISTA_BS_STRAT_NODES
      WHERE BS_STRAT_NODESID IN(SELECT BS_STRAT_NODESID FROM BS_STRAT_NODES_OPTIONS WHERE SEC_LEVEL = @SEC_LEVEL and USERID = @CODIGOUSUARIO)
      ORDER BY DESCRIPTION



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_SPByPermission].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_SPByPermission]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_SPByPermission] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_SPByPermission]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT,
@BSPROCCAT INT,
@IKCAT INT,
@IKCDU INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   DECLARE @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par01 VARCHAR(255)
   DECLARE @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par11 VARCHAR(255)
   IF (@SEC_LEVEL = -1)
   begin
      set @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par01 = 'BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS_OPTIONS WHERE USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')')
      EXECUTE ik_bsstratplans_withaccess @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par01,'DESCRIPTION',@BSPROCCAT,
      @IKCAT,@IKCDU
   end
ELSE
   begin
      set @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par11 = 'BS_STRAT_PLANSID IN (SELECT BS_STRAT_PLANSID FROM BS_STRAT_PLANS_OPTIONS WHERE SEC_LEVEL='+convert(VARCHAR,convert(VARCHAR,@SEC_LEVEL)+' AND USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')'))
      EXECUTE ik_bsstratplans_withaccess @SWfunc_IK_BSSTRATPLANS_WITHACCESS_par11,'DESCRIPTION',@BSPROCCAT,
      @IKCAT,@IKCDU
   end



END
GO

GO
--SqlScripter----[dbo].[ik_usrIns_SVGByPermission].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_usrIns_SVGByPermission]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_usrIns_SVGByPermission] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_usrIns_SVGByPermission]
@CODIGOUSUARIO INT,
@SEC_LEVEL INT,
@BSPROCCAT INT,
@IKCAT INT,
@IKCDU INT 
AS
BEGIN

-- EXEC ('SET NOCOUNT ON')

   DECLARE @SWfunc_IK_SVGS_WITHACCESS_par01 VARCHAR(255)
   DECLARE @SWfunc_IK_SVGS_WITHACCESS_par11 VARCHAR(255)
   IF (@SEC_LEVEL = -1)
   begin
      set @SWfunc_IK_SVGS_WITHACCESS_par01 = 'BS_SVGID IN (SELECT BS_SVGID FROM BS_SVG_OPTIONS WHERE USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')')
      EXECUTE ik_svgs_withaccess @SWfunc_IK_SVGS_WITHACCESS_par01,'DESCRIPTION',@BSPROCCAT,@IKCAT,
      @IKCDU
   end
ELSE
   begin
      set @SWfunc_IK_SVGS_WITHACCESS_par11 = 'BS_SVGID IN (SELECT BS_SVGID FROM BS_SVG_OPTIONS WHERE SEC_LEVEL='+convert(VARCHAR,convert(VARCHAR,@SEC_LEVEL)+' AND USERID='+convert(VARCHAR,convert(VARCHAR,@CODIGOUSUARIO)+')'))
      EXECUTE ik_svgs_withaccess @SWfunc_IK_SVGS_WITHACCESS_par11,'DESCRIPTION',@BSPROCCAT,@IKCAT,
      @IKCDU
   end



END
GO

GO
--SqlScripter----[dbo].[ik_wf_checkApprovalFinished].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_checkApprovalFinished]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_checkApprovalFinished] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_checkApprovalFinished]
@WF_NODE_ID INT
AS
BEGIN

IF ( SELECT COUNT(*) FROM VISTA_WF_APPROVAL_REQUIREMENTS WHERE WF_NODE_ID=@WF_NODE_ID AND NOT WF_APPROVAL_REQUIREMENTS_STARTDATE IS NULL AND WF_APPROVAL_REQUIREMENTS_ENDDATE IS NULL) >0
BEGIN
		DECLARE @WF_APPROVAL_REQUIREMENTS_DESCRIPTION nvarchar(1000)
		SELECT @WF_APPROVAL_REQUIREMENTS_DESCRIPTION=WF_APPROVAL_REQUIREMENTS_DESCRIPTION FROM WF_APPROVAL_REQUIREMENTS
		WHERE WF_NODE_ID=@WF_NODE_ID
		SELECT ''''+ @WF_APPROVAL_REQUIREMENTS_DESCRIPTION + ''' {LOC:Usr_NoFinalizado}' AS RESULT

END
ELSE
BEGIN
	SELECT 'OK' AS RESULT
END


END
GO

GO
--SqlScripter----[dbo].[ik_wf_checkApprovalRequirementsAllAproved].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_checkApprovalRequirementsAllAproved]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_checkApprovalRequirementsAllAproved] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_checkApprovalRequirementsAllAproved]
@WF_NODE_ID INT
AS
BEGIN

	IF EXISTS( SELECT * FROM WF_APPROVAL_RECORDS WHERE WF_APPROVAL_RECORDS.WF_APPROVAL_RECORDS_STATUS_ID != 3 AND WF_NODE_ID=@WF_NODE_ID)
	BEGIN
		DECLARE @WF_APPROVAL_REQUIREMENTS_DESCRIPTION nvarchar(1000)
		SELECT @WF_APPROVAL_REQUIREMENTS_DESCRIPTION=WF_APPROVAL_REQUIREMENTS_DESCRIPTION FROM WF_APPROVAL_REQUIREMENTS
		WHERE WF_NODE_ID=@WF_NODE_ID
		SELECT ''''+ @WF_APPROVAL_REQUIREMENTS_DESCRIPTION + ''' {LOC:Usr_NoEstaAprobado}' AS RESULT
	END
	ELSE
	BEGIN
		SELECT 'OK' AS RESULT
	END
END
GO

GO
--SqlScripter----[dbo].[ik_wf_checkApprovalRequirementsExist].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_checkApprovalRequirementsExist]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_checkApprovalRequirementsExist] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_checkApprovalRequirementsExist]
@WF_NODE_ID INT
AS
BEGIN
IF ( SELECT COUNT(*) FROM WF_APPROVAL_RECORDS WHERE WF_NODE_ID=@WF_NODE_ID) =0
BEGIN
	DECLARE @WF_APPROVAL_REQUIREMENTS_DESCRIPTION nvarchar(1000)
	SELECT @WF_APPROVAL_REQUIREMENTS_DESCRIPTION=WF_APPROVAL_REQUIREMENTS_DESCRIPTION FROM WF_APPROVAL_REQUIREMENTS
	WHERE WF_NODE_ID=@WF_NODE_ID
	SELECT ''''+ @WF_APPROVAL_REQUIREMENTS_DESCRIPTION + ''' {LOC:Usr_SinAprobadores}' AS RESULT
	
END
ELSE
BEGIN
	SELECT 'OK' AS RESULT
END

END
GO

GO
--SqlScripter----[dbo].[ik_wf_checkApprovalsFinished].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_checkApprovalsFinished]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_checkApprovalsFinished] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_checkApprovalsFinished]
@WF_ID INT
AS
BEGIN

IF ( SELECT COUNT(*) FROM VISTA_WF_APPROVAL_REQUIREMENTS WHERE WF_ID=@WF_ID AND NOT WF_APPROVAL_REQUIREMENTS_STARTDATE IS NULL AND WF_APPROVAL_REQUIREMENTS_ENDDATE IS NULL) >0
BEGIN
	SELECT '{LOC:Usr_NoSePuedeDetenerWF_RequerimientoSinFinalizar}' AS RESULT
END
ELSE
BEGIN
	SELECT 'OK' AS RESULT
END


END
GO

GO
--SqlScripter----[dbo].[ik_wf_checkApprovalsRequirementsNotApproved].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_checkApprovalsRequirementsNotApproved]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_checkApprovalsRequirementsNotApproved] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_checkApprovalsRequirementsNotApproved]
@WF_NODE_ID INT
AS
BEGIN

IF EXISTS( SELECT * FROM WF_APPROVAL_RECORDS WHERE WF_APPROVAL_RECORDS.WF_APPROVAL_RECORDS_STATUS_ID = 4 AND WF_NODE_ID=@WF_NODE_ID)
BEGIN
	SELECT 'OK' AS RESULT
END
ELSE
BEGIN
	IF ( SELECT COUNT(*) FROM WF_APPROVAL_RECORDS WHERE WF_NODE_ID=@WF_NODE_ID) =0
	BEGIN
		SELECT 'NOTOK' AS RESULT
	END
	ELSE
	BEGIN
		IF EXISTS( SELECT * FROM WF_APPROVAL_RECORDS WHERE WF_APPROVAL_RECORDS.WF_APPROVAL_RECORDS_STATUS_ID != 3 AND WF_NODE_ID=@WF_NODE_ID)
		BEGIN
			SELECT 'NOTOK' AS RESULT
		END
		ELSE
		BEGIN
			SELECT 'OK' AS RESULT
		END
	END
END

END
GO

GO
--SqlScripter----[dbo].[ik_wf_setWFNodeResponsiblePositions].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_setWFNodeResponsiblePositions]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_setWFNodeResponsiblePositions] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_setWFNodeResponsiblePositions]
(
		@WF_ID int,
		@WF_XMLNODE_ID nvarchar(100) ,
		@WF_NODE_ROL_NAME nvarchar(1000) 
	)

AS
	SET NOCOUNT ON 

DELETE FROM [WF_NODE_RESPONSIBLE]  WHERE [WF_ID]=@WF_ID AND [WF_XMLNODE_ID]=@WF_XMLNODE_ID ;

INSERT INTO [WF_NODE_RESPONSIBLE] ([WF_ID],[WF_XMLNODE_ID],[POSITION_ID])
select DISTINCT @WF_ID ,@WF_XMLNODE_ID, POSITIONID  
from dbo.ik_wf_getRolesMembers(@WF_ID)
WHERE WF_ROL_NAME IN (SELECT [Value] from dbo.ik_SplitIntoTable(@WF_NODE_ROL_NAME, ','))

RETURN
GO

GO
--SqlScripter----[dbo].[ik_wf_setWFNodesPredictedDates].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_setWFNodesPredictedDates]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_setWFNodesPredictedDates] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_setWFNodesPredictedDates]
(
		@WF_ID int,
		@FROMDATE datetime		
	)

AS
SET NOCOUNT ON 
SET DATEFORMAT YMD

IF (SELECT dbo.ik_getWorkingDays(@FROMDATE,@FROMDATE+1))=0
BEGIN
	SET @FROMDATE=GETDATE()+1
END
IF (SELECT dbo.ik_getWorkingDays(@FROMDATE,@FROMDATE+1))=0
BEGIN
	SET @FROMDATE=GETDATE()+1
END


DECLARE @RESULT_DATES TABLE(
	WF_XMLNODE_ID nvarchar(100), 
	WF_SCHEDDATES_STARTDATE_CALC datetime, 
	WF_SCHEDDATES_ENDDATE_CALC datetime
)	

DECLARE	@WF_SCHEDDATES_STARTDATE_REAL datetime
DECLARE	@WF_SCHEDDATES_DATE_REAL datetime
DECLARE	@WF_SCHEDDATES_NODEPARALLEL nvarchar(100)
DECLARE @WF_SCHEDDATES_DAYSFROMSTART int
DECLARE @WF_NODE_STATE int
DECLARE @WF_XMLNODE_ID varchar(100)

DECLARE @LASTPARALLEL nvarchar(100)
SET @LASTPARALLEL=''

DECLARE @LAST_PARALLEL_ENDDATE datetime
SET @LAST_PARALLEL_ENDDATE=NULL


DECLARE @LAST_NODE_ENDDATE datetime
SET @LAST_NODE_ENDDATE=@FROMDATE

DECLARE @LAST_NODE_STARTDATE datetime
SET @LAST_NODE_STARTDATE=@FROMDATE

DECLARE @MAX_PARALLEL_ENDDATE datetime
SET @MAX_PARALLEL_ENDDATE=NULL

DECLARE curNodeDates CURSOR FOR
SELECT 
	D.WF_SCHEDDATES_STARTDATE_REAL,
	D.WF_SCHEDDATES_DATE_REAL,
	D.WF_SCHEDDATES_NODEPARALLEL,
	D.WF_SCHEDDATES_DAYSFROMSTART,
	N.WF_NODE_STATE,
	D.WF_XMLNODE_ID

FROM WF_SCHEDDATES D 
LEFT JOIN WF_NODE N ON N.WF_ID=D.WF_ID AND D.WF_XMLNODE_ID=N.WF_NODE_XMLNODE_ID
WHERE D.WF_ID=@WF_ID AND D.WF_SCHEDDATES_ENABLED=1
ORDER BY D.WF_SCHEDDATES_ID

BEGIN TRAN

OPEN curNodeDates
FETCH NEXT FROM curNodeDates INTO 
	@WF_SCHEDDATES_STARTDATE_REAL,
	@WF_SCHEDDATES_DATE_REAL,
	@WF_SCHEDDATES_NODEPARALLEL,
	@WF_SCHEDDATES_DAYSFROMSTART,
	@WF_NODE_STATE,
	@WF_XMLNODE_ID
	
WHILE @@FETCH_STATUS = 0
BEGIN

	IF @WF_SCHEDDATES_NODEPARALLEL = ''--Single node
	BEGIN
	
		IF @LASTPARALLEL<>''
		BEGIN
			SET @LAST_NODE_ENDDATE=@MAX_PARALLEL_ENDDATE
			SET @LASTPARALLEL=''
		END
		
		SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE
		SET @LAST_NODE_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_ENDDATE,@WF_SCHEDDATES_DAYSFROMSTART))		
		UPDATE WF_SCHEDDATES SET 
			WF_SCHEDDATES_STARTDATE= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))) ,
			WF_SCHEDDATES_DATE= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_ENDDATE))) 			
		WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

		
		PRINT 'SINGLE NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_NODE_ENDDATE)
		
	END
	ELSE
	BEGIN
		IF @WF_SCHEDDATES_NODEPARALLEL = @LASTPARALLEL--Mismo parallel q anterior
		BEGIN
			SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE
			SET @LAST_PARALLEL_ENDDATE =  (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_ENDDATE,@WF_SCHEDDATES_DAYSFROMSTART))						
			
			UPDATE WF_SCHEDDATES SET 
				WF_SCHEDDATES_STARTDATE= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))),
				WF_SCHEDDATES_DATE=CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_PARALLEL_ENDDATE )))
			WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

			PRINT 'SAME PARALLEL NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_PARALLEL_ENDDATE)
			SET @LASTPARALLEL=@WF_SCHEDDATES_NODEPARALLEL 
			
			IF @LAST_PARALLEL_ENDDATE>@MAX_PARALLEL_ENDDATE
			BEGIN
				SET @MAX_PARALLEL_ENDDATE=@LAST_PARALLEL_ENDDATE				
			END
		END
		ELSE --Nuevo parallel
		BEGIN
			IF 	@LASTPARALLEL<>''
			BEGIN
				SET @LAST_NODE_ENDDATE=@MAX_PARALLEL_ENDDATE
			END
			
			SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE
			SET @LAST_PARALLEL_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_ENDDATE,@WF_SCHEDDATES_DAYSFROMSTART))

			UPDATE WF_SCHEDDATES SET 
				WF_SCHEDDATES_STARTDATE= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))),
				WF_SCHEDDATES_DATE=CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_PARALLEL_ENDDATE )))
			WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

			
			SET @MAX_PARALLEL_ENDDATE=@LAST_PARALLEL_ENDDATE

			PRINT 'FIRST PARALLEL NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_PARALLEL_ENDDATE)				
			
			SET @LASTPARALLEL=@WF_SCHEDDATES_NODEPARALLEL 
		END
	END
	


	FETCH NEXT FROM curNodeDates INTO 
		@WF_SCHEDDATES_STARTDATE_REAL,
		@WF_SCHEDDATES_DATE_REAL,
		@WF_SCHEDDATES_NODEPARALLEL,
		@WF_SCHEDDATES_DAYSFROMSTART,
		@WF_NODE_STATE,
		@WF_XMLNODE_ID

END


CLOSE curNodeDates
DEALLOCATE curNodeDates


COMMIT TRAN	 
RETURN
GO

GO
--SqlScripter----[dbo].[ik_wf_setWFNodesProyTMPDates].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_setWFNodesProyTMPDates]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_setWFNodesProyTMPDates] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_setWFNodesProyTMPDates]
(
@WF_ID int,
@FROMDATE datetime		
)
AS

SET NOCOUNT ON 
SET DATEFORMAT YMD


IF (SELECT dbo.ik_getWorkingDays(@FROMDATE,@FROMDATE+1))=0
BEGIN
	SET @FROMDATE=GETDATE()+1
END
IF (SELECT dbo.ik_getWorkingDays(@FROMDATE,@FROMDATE+1))=0
BEGIN
	SET @FROMDATE=GETDATE()+1
END



DECLARE @HOY datetime
SET @HOY=GETDATE()

IF (SELECT dbo.ik_getWorkingDays(@HOY,@HOY+1))=0
BEGIN
	SET @HOY=GETDATE()+1
END

IF (SELECT dbo.ik_getWorkingDays(@HOY,@HOY+1))=0
BEGIN
	SET @HOY=GETDATE()+1
END


DECLARE @RESULT_DATES TABLE(
	WF_XMLNODE_ID nvarchar(100), 
	WF_SCHEDDATES_STARTDATE_CALC datetime, 
	WF_SCHEDDATES_ENDDATE_CALC datetime
)	

DECLARE	@WF_SCHEDDATES_STARTDATE_REAL datetime
DECLARE	@WF_SCHEDDATES_DATE_REAL datetime
DECLARE	@WF_SCHEDDATES_NODEPARALLEL nvarchar(100)
DECLARE @WF_SCHEDDATES_DAYSFROMSTART int
DECLARE @WF_NODE_STATE int
DECLARE @WF_XMLNODE_ID varchar(100)

DECLARE @LASTPARALLEL nvarchar(100)
SET @LASTPARALLEL=''

DECLARE @LAST_PARALLEL_ENDDATE datetime
SET @LAST_PARALLEL_ENDDATE=NULL


DECLARE @LAST_NODE_ENDDATE datetime
SET @LAST_NODE_ENDDATE=@FROMDATE

DECLARE @LAST_NODE_STARTDATE datetime
SET @LAST_NODE_STARTDATE=@FROMDATE

DECLARE @MAX_PARALLEL_ENDDATE datetime
SET @MAX_PARALLEL_ENDDATE=NULL

DECLARE curNodeDates CURSOR FOR
SELECT 
	D.WF_SCHEDDATES_STARTDATE_REAL,
	D.WF_SCHEDDATES_DATE_REAL,
	D.WF_SCHEDDATES_NODEPARALLEL,
	D.WF_SCHEDDATES_DAYSFROMSTART,
	N.WF_NODE_STATE,
	D.WF_XMLNODE_ID

FROM WF_SCHEDDATES D 
LEFT JOIN WF_NODE N ON N.WF_ID=D.WF_ID AND D.WF_XMLNODE_ID=N.WF_NODE_XMLNODE_ID
WHERE D.WF_ID=@WF_ID AND D.WF_SCHEDDATES_ENABLED=1
ORDER BY D.WF_SCHEDDATES_ID

BEGIN TRAN

OPEN curNodeDates
FETCH NEXT FROM curNodeDates INTO 
	@WF_SCHEDDATES_STARTDATE_REAL,
	@WF_SCHEDDATES_DATE_REAL,
	@WF_SCHEDDATES_NODEPARALLEL,
	@WF_SCHEDDATES_DAYSFROMSTART,
	@WF_NODE_STATE,
	@WF_XMLNODE_ID
	
WHILE @@FETCH_STATUS = 0
BEGIN

	IF @WF_SCHEDDATES_NODEPARALLEL = ''--Single node
	BEGIN
	
		IF @LASTPARALLEL<>''
		BEGIN
			SET @LAST_NODE_ENDDATE=@MAX_PARALLEL_ENDDATE
			SET @LASTPARALLEL=''
		END
		
		
		IF @WF_NODE_STATE IS NULL OR @WF_NODE_STATE <=2 OR @WF_NODE_STATE =6 --Nodo no creado o sin iniciar
		BEGIN
			SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE

			IF DATEDIFF(day,@HOY,@LAST_NODE_STARTDATE)<0
			BEGIN
				SET @LAST_NODE_STARTDATE=@HOY
			END
			
			SET @LAST_NODE_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_STARTDATE,@WF_SCHEDDATES_DAYSFROMSTART))
		END

		IF @WF_NODE_STATE >2 AND @WF_NODE_STATE <=4 --Nodo creado iniciado, sin finalizar
		BEGIN
			SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
			SET @LAST_NODE_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@WF_SCHEDDATES_STARTDATE_REAL,@WF_SCHEDDATES_DAYSFROMSTART))
			
			IF DATEDIFF(day,@HOY,@LAST_NODE_ENDDATE)<0
			BEGIN
				SET @LAST_NODE_ENDDATE = @HOY
			END
		END
		IF @WF_NODE_STATE =5 --Nodo creado finalizado
		BEGIN
			SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
			SET @LAST_NODE_ENDDATE = @WF_SCHEDDATES_DATE_REAL
		END
		
		UPDATE WF_SCHEDDATES SET 
			WF_SCHEDDATES_STARTDATE_PROYECTED_TMP= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))) ,
			WF_SCHEDDATES_DATE_PROYECTED_TMP= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_ENDDATE))) 			
		WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

		
		PRINT 'SINGLE NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_NODE_ENDDATE)
		
	END
	ELSE
	BEGIN
		IF @WF_SCHEDDATES_NODEPARALLEL = @LASTPARALLEL--Mismo parallel q anterior
		BEGIN
			IF @WF_NODE_STATE IS NULL OR @WF_NODE_STATE <=2 OR @WF_NODE_STATE =6 --Nodo no creado o sin iniciar
			BEGIN
				SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE
				IF DATEDIFF(day,@HOY,@LAST_NODE_STARTDATE)<0
				BEGIN
					SET @LAST_NODE_STARTDATE=@HOY
				END

				SET @LAST_PARALLEL_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_ENDDATE,@WF_SCHEDDATES_DAYSFROMSTART))
			END
			IF @WF_NODE_STATE >2 AND @WF_NODE_STATE <=4 --Nodo creado iniciado, sin finalizar
			BEGIN
				SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
				SET @LAST_PARALLEL_ENDDATE =  (SELECT dbo.ik_AddWorkingDays(@WF_SCHEDDATES_STARTDATE_REAL,@WF_SCHEDDATES_DAYSFROMSTART))
				
				IF DATEDIFF(day,@HOY,@LAST_PARALLEL_ENDDATE)<0
				BEGIN
					SET @LAST_PARALLEL_ENDDATE = @HOY
				END
			END
			IF @WF_NODE_STATE =5 --Nodo creado finalizado
			BEGIN
				SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
				SET @LAST_PARALLEL_ENDDATE = @WF_SCHEDDATES_DATE_REAL
			END
			
			
			UPDATE WF_SCHEDDATES SET 
				WF_SCHEDDATES_STARTDATE_PROYECTED_TMP= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))),
				WF_SCHEDDATES_DATE_PROYECTED_TMP=CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_PARALLEL_ENDDATE )))
			WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

			PRINT 'SAME PARALLEL NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_PARALLEL_ENDDATE)
			SET @LASTPARALLEL=@WF_SCHEDDATES_NODEPARALLEL 
			
			IF @LAST_PARALLEL_ENDDATE>@MAX_PARALLEL_ENDDATE
			BEGIN
				SET @MAX_PARALLEL_ENDDATE=@LAST_PARALLEL_ENDDATE				
			END
		END
		ELSE --Nuevo parallel
		BEGIN
			IF 	@LASTPARALLEL<>''
			BEGIN
				SET @LAST_NODE_ENDDATE=@MAX_PARALLEL_ENDDATE
			END
			
			IF @WF_NODE_STATE IS NULL OR @WF_NODE_STATE <=2 OR @WF_NODE_STATE =6 --Nodo no creado o sin iniciar
			BEGIN
				SET @LAST_NODE_STARTDATE=@LAST_NODE_ENDDATE
				IF DATEDIFF(day,@HOY,@LAST_NODE_STARTDATE)<0
				BEGIN
					SET @LAST_NODE_STARTDATE=@HOY
				END

				SET @LAST_PARALLEL_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@LAST_NODE_ENDDATE,@WF_SCHEDDATES_DAYSFROMSTART))
			END
			IF @WF_NODE_STATE >2 AND @WF_NODE_STATE <=4 --Nodo creado iniciado, sin finalizar
			BEGIN
				SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
				SET @LAST_PARALLEL_ENDDATE = (SELECT dbo.ik_AddWorkingDays(@WF_SCHEDDATES_STARTDATE_REAL,@WF_SCHEDDATES_DAYSFROMSTART))
				IF DATEDIFF(day,@HOY,@LAST_PARALLEL_ENDDATE)<0
				BEGIN
					SET @LAST_PARALLEL_ENDDATE = @HOY
				END

			END
			IF @WF_NODE_STATE =5 --Nodo creado finalizado
			BEGIN
				SET @LAST_NODE_STARTDATE=@WF_SCHEDDATES_STARTDATE_REAL
				SET @LAST_PARALLEL_ENDDATE = @WF_SCHEDDATES_DATE_REAL
			END

			UPDATE WF_SCHEDDATES SET 
				WF_SCHEDDATES_STARTDATE_PROYECTED_TMP= CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_NODE_STARTDATE))),
				WF_SCHEDDATES_DATE_PROYECTED_TMP=CONVERT(DATETIME, FLOOR(CONVERT(FLOAT, @LAST_PARALLEL_ENDDATE )))
			WHERE WF_ID=@WF_ID AND WF_XMLNODE_ID=@WF_XMLNODE_ID

			
			SET @MAX_PARALLEL_ENDDATE=@LAST_PARALLEL_ENDDATE

			PRINT 'FIRST PARALLEL NODE: '	+ @WF_XMLNODE_ID + ' : ENDDATE: ' + CONVERT(varchar(100),@LAST_PARALLEL_ENDDATE)				
			
			SET @LASTPARALLEL=@WF_SCHEDDATES_NODEPARALLEL 
		END
	END
	


	FETCH NEXT FROM curNodeDates INTO 
		@WF_SCHEDDATES_STARTDATE_REAL,
		@WF_SCHEDDATES_DATE_REAL,
		@WF_SCHEDDATES_NODEPARALLEL,
		@WF_SCHEDDATES_DAYSFROMSTART,
		@WF_NODE_STATE,
		@WF_XMLNODE_ID

END


CLOSE curNodeDates
DEALLOCATE curNodeDates


COMMIT TRAN	 
RETURN
GO

GO
--SqlScripter----[dbo].[ik_wf_unEndNode].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_unEndNode]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_unEndNode] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_unEndNode]
@WF_NODE_ID INT
AS
BEGIN

	UPDATE WF_NODE SET WF_NODE_STATE=4,WF_NODE_ENDDATE=NULL WHERE WF_NODE_ID=@WF_NODE_ID 
    SELECT 'OK' AS RESULT

END
GO

GO
--SqlScripter----[dbo].[ik_wf_unStartNode].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_unStartNode]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ik_wf_unStartNode] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ik_wf_unStartNode]
@WF_NODE_ID INT
AS
BEGIN

	UPDATE WF_NODE SET WF_NODE_STATE=2,WF_NODE_STARTDATE=NULL  WHERE WF_NODE_ID=@WF_NODE_ID
	DELETE FROM WF_APPROVAL_RECORDS WHERE WF_NODE_ID=@WF_NODE_ID
	DELETE FROM WF_APPROVAL_REQUIREMENTS WHERE WF_NODE_ID=@WF_NODE_ID
	SELECT 'OK' AS RESULT

END
GO

GO
--SqlScripter----[dbo].[ikReplaceUsuario].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[ikReplaceUsuario]') IS NULL EXEC('CREATE PROCEDURE [dbo].[ikReplaceUsuario] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[ikReplaceUsuario]
(
@VIEJOUSUARIO nvarchar(50),
@NUEVOUSUARIO nvarchar(50)

)

 AS

DECLARE @IKVER NVARCHAR(10)
SET @IKVER='6.5'

IF (SELECT COUNT(*) FROM IK_PEOPLE WHERE USUARIO=@NUEVOUSUARIO) <> 0
BEGIN
	RAISERROR('ikReplaceUsuario Validation error: user %s already exists',16,1,@NUEVOUSUARIO)
	RETURN(-2)
END

IF (SELECT COUNT(*) FROM IK_PEOPLE WHERE USUARIO=@VIEJOUSUARIO) <> 1
BEGIN
	RAISERROR('ikReplaceUsuario Validation error: user %s not exists',16,1,@VIEJOUSUARIO)
	RETURN(-2)
END

DECLARE @CODIGOUSUARIO INT
DECLARE @I INT
DECLARE @NOMBRE nvarchar(50)
DECLARE @APELLIDO nvarchar(50)

SET @CODIGOUSUARIO = (SELECT CODIGO FROM IK_PEOPLE WHERE USUARIO=@VIEJOUSUARIO)
SET @I = CHARINDEX(' ',@NUEVOUSUARIO)
SET @NOMBRE = LEFT(@NUEVOUSUARIO, @I-1)
SET @APELLIDO = RIGHT(@NUEVOUSUARIO, LEN(@NUEVOUSUARIO)-@I)


BEGIN TRANSACTION

UPDATE IK_PEOPLE SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE IK_PEOPLE SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE DATOSUSUARIOS SET APELLIDOS=@APELLIDO, NOMBRES=@NOMBRE WHERE CODIGOUSUARIO=@CODIGOUSUARIO

UPDATE ALMACEN_ARCHIVOS SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE ARCHIVOS SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NC_FILES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NC_TASKFILES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE AUDITORIAS SET INPUTUSUARIO=@NUEVOUSUARIO WHERE INPUTUSUARIO=@VIEJOUSUARIO

UPDATE AUDITORIASARCHIVOS SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE BS_INDICATORS SET INPUTUSER=@NUEVOUSUARIO WHERE INPUTUSER=@VIEJOUSUARIO

UPDATE BS_INDICATORSDATA SET INPUTUSER=@NUEVOUSUARIO WHERE INPUTUSER=@VIEJOUSUARIO

UPDATE BS_INDICATORS_DATA_ARCHIVED SET USER_CREATE=@NUEVOUSUARIO WHERE USER_CREATE=@VIEJOUSUARIO

UPDATE BS_INDICATORS_DATA_ARCHIVED_RE SET INPUTUSER=@NUEVOUSUARIO WHERE INPUTUSER=@VIEJOUSUARIO

UPDATE BS_IND_ASSESMENTS SET ASSESMENT_USER=@NUEVOUSUARIO WHERE ASSESMENT_USER=@VIEJOUSUARIO

UPDATE BS_SVG SET LOCK_USERNAME=@NUEVOUSUARIO WHERE LOCK_USERNAME=@VIEJOUSUARIO

UPDATE BS_SVG SET LAST_USER=@NUEVOUSUARIO WHERE LAST_USER=@VIEJOUSUARIO

UPDATE CRITICAS SET NOMBREUSUARIO=@NUEVOUSUARIO WHERE NOMBREUSUARIO=@VIEJOUSUARIO

UPDATE CRITICAS SET CORRIGENOMBRE=@NUEVOUSUARIO WHERE CORRIGENOMBRE=@VIEJOUSUARIO

UPDATE DOCUMENTOSHISTORIA SET NOMBREUSUARIO=@NUEVOUSUARIO WHERE NOMBREUSUARIO=@VIEJOUSUARIO

UPDATE DOCUMENTOS_CHANGELOG SET LASTUSER=@NUEVOUSUARIO WHERE LASTUSER=@VIEJOUSUARIO

UPDATE HISTORIAASUNTOS SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO


UPDATE IKALERTS SET USERNAME_SOURCE=@NUEVOUSUARIO WHERE USERNAME_SOURCE=@VIEJOUSUARIO
UPDATE IKALERTS SET USER_DONE=@NUEVOUSUARIO WHERE USER_DONE=@VIEJOUSUARIO
UPDATE IKALERTS SET USER_ARCHIVED=@NUEVOUSUARIO WHERE USER_ARCHIVED=@VIEJOUSUARIO
UPDATE IKALERTS SET USER_LASTEDIT=@NUEVOUSUARIO WHERE USER_LASTEDIT=@VIEJOUSUARIO

UPDATE IKALERTS_TARGETS SET USERNAME_TARGET=@NUEVOUSUARIO WHERE USERNAME_TARGET=@VIEJOUSUARIO
UPDATE IKALERTS_HISTORY SET USER_IN=@NUEVOUSUARIO WHERE USER_IN=@VIEJOUSUARIO


UPDATE IKERRORLOG SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE IKFILES SET UPLOAD_USER=@NUEVOUSUARIO WHERE UPLOAD_USER=@VIEJOUSUARIO

UPDATE IKFOROSARCHIVOS SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE IKFOROSMENSAJES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE IKFOROSNOVEDADES SET USUARIOLECTURA=@NUEVOUSUARIO WHERE USUARIOLECTURA=@VIEJOUSUARIO

UPDATE IKFOROSSUSCRIPTORES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE IKFOROSSUSCRIPTORES SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE IKI_BSINDICATORS SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_BSSTRATPLANS SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_DOCUMENTS SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_FILES SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_ISSUES SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_ORGCHART SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_PROCPLANS SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_SVGDRAWINGS SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_PROCNODES SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKI_IKPEOPLE SET IKI_USER=@NUEVOUSUARIO WHERE IKI_USER=@VIEJOUSUARIO

UPDATE IKNOTIFICACIONES SET DESTINATARIO=@NUEVOUSUARIO WHERE DESTINATARIO=@VIEJOUSUARIO

UPDATE IKUSERLOGINS SET USERNAME=@NUEVOUSUARIO WHERE USERNAME=@VIEJOUSUARIO

UPDATE IKUSERLOGS SET USERNAME=@NUEVOUSUARIO WHERE USERNAME=@VIEJOUSUARIO

UPDATE NCCOSTOS SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE NCINTERRELACIONES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NC_FILES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NC_TASKFILES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NCINTERRELACIONES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NCMAINPROD SET INPUTUSUARIO=@NUEVOUSUARIO WHERE INPUTUSUARIO=@VIEJOUSUARIO

UPDATE NCMAINPROD SET USUARIOPROCESAMIENTO=@NUEVOUSUARIO WHERE USUARIOPROCESAMIENTO=@VIEJOUSUARIO

UPDATE NCMAINPROD SET USUARIORECHAZO=@NUEVOUSUARIO WHERE USUARIORECHAZO=@VIEJOUSUARIO

UPDATE NCMAINPROD SET USUARIOARCHIVO=@NUEVOUSUARIO WHERE USUARIOARCHIVO=@VIEJOUSUARIO

UPDATE NCMAINPROD SET USUARIOULTMODIFICACION=@NUEVOUSUARIO WHERE USUARIOULTMODIFICACION=@VIEJOUSUARIO

--UPDATE NCRESPUESTAS SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE NCTAREAS SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE NCTAREAS SET USUARIOBAJA=@NUEVOUSUARIO WHERE USUARIOBAJA=@VIEJOUSUARIO

UPDATE NCTAREAS SET USUARIOCUMPLIMIENTO=@NUEVOUSUARIO WHERE USUARIOCUMPLIMIENTO=@VIEJOUSUARIO

UPDATE NCTAREAS SET USUARIOINICIO=@NUEVOUSUARIO WHERE USUARIOINICIO=@VIEJOUSUARIO

UPDATE NC_TASKFILES SET USUARIO=@NUEVOUSUARIO WHERE USUARIO=@VIEJOUSUARIO

UPDATE NCTAREASDESTINATARIOS SET NOMBREUSUARIO=@NUEVOUSUARIO WHERE NOMBREUSUARIO=@VIEJOUSUARIO

UPDATE NCTASKSSTEPS SET USER_DONE=@NUEVOUSUARIO WHERE USER_DONE=@VIEJOUSUARIO

UPDATE NCTASKSSTEPS SET USER_CREATE=@NUEVOUSUARIO WHERE USER_CREATE=@VIEJOUSUARIO

UPDATE SURVEYDEFINITIONS SET INPUTUSUARIO=@NUEVOUSUARIO WHERE INPUTUSUARIO=@VIEJOUSUARIO

UPDATE SURVEYUSERS SET NOMBRE=@NUEVOUSUARIO WHERE NOMBRE=@VIEJOUSUARIO AND NOT CODIGOUSUARIOIK IS NULL

UPDATE TAREASREVISION SET NOMBREUSUARIO=@NUEVOUSUARIO WHERE NOMBREUSUARIO=@VIEJOUSUARIO

UPDATE TASKSDELAYS SET USER_UPDATE=@NUEVOUSUARIO WHERE USER_UPDATE=@VIEJOUSUARIO

UPDATE TPROT_TASK SET USUARIOALTA=@NUEVOUSUARIO WHERE USUARIOALTA=@VIEJOUSUARIO

UPDATE TPROT_TASK SET USUARIOBAJA=@NUEVOUSUARIO WHERE USUARIOBAJA=@VIEJOUSUARIO

UPDATE TPROT_TASK SET USUARIOCUMPLIMIENTO=@NUEVOUSUARIO WHERE USUARIOCUMPLIMIENTO=@VIEJOUSUARIO

UPDATE TPROT_TASK SET USUARIOINICIO=@NUEVOUSUARIO WHERE USUARIOINICIO=@VIEJOUSUARIO

UPDATE TPROT_TASKSSTEPS SET USER_DONE=@NUEVOUSUARIO WHERE USER_DONE=@VIEJOUSUARIO

UPDATE TPROT_TASKSSTEPS SET USER_CREATE=@NUEVOUSUARIO WHERE USER_CREATE=@VIEJOUSUARIO

UPDATE SS_REPORTS_WO SET USERNAME=@NUEVOUSUARIO WHERE USERNAME=@VIEJOUSUARIO


UPDATE ORGANIGRAMA SET 
	DESCRIPCION=REPLACE(ORGANIGRAMA.DESCRIPCION, '('+CMI.DESCRIPCIONDOCUMENTO+') '+@VIEJOUSUARIO, '('+CMI.DESCRIPCIONDOCUMENTO+') '+@NUEVOUSUARIO),
	CAMINO=REPLACE(ORGANIGRAMA.CAMINO, '('+CMI.DESCRIPCIONDOCUMENTO+') '+@VIEJOUSUARIO, '('+CMI.DESCRIPCIONDOCUMENTO+') '+@NUEVOUSUARIO)
FROM ORGANIGRAMA JOIN ORGANIGRAMA CM ON ORGANIGRAMA.CODIGOPADRE=CM.CODIGO
JOIN ORGANIGRAMA CMI ON CM.VIRTUAL=CMI.CODIGO
WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

UPDATE NCINVOLUCRADOS SET NOMBRECARGO=ORGANIGRAMA.DESCRIPCION FROM NCINVOLUCRADOS JOIN ORGANIGRAMA ON NCINVOLUCRADOS.CODIGOCARGO=ORGANIGRAMA.CODIGO
WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

UPDATE NCTAREASDESTINATARIOS SET NOMBRECARGO=ORGANIGRAMA.DESCRIPCION FROM NCTAREASDESTINATARIOS JOIN ORGANIGRAMA ON NCTAREASDESTINATARIOS.CODIGOCARGO=ORGANIGRAMA.CODIGO
WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

UPDATE TAREASREVISION SET CARGOREQ='('+ORGANIGRAMA.DESCRIPCIONDOCUMENTO+') '+@NUEVOUSUARIO FROM TAREASREVISION JOIN ORGANIGRAMA ON TAREASREVISION.CODIGOCARGOREQ=ORGANIGRAMA.CODIGO
WHERE ORGANIGRAMA.TIPO=4 AND TAREASREVISION.CODIGOUSUARIO=@CODIGOUSUARIO

UPDATE IKFOROSSUSCRIPTORES SET CARGO=ORGANIGRAMA.DESCRIPCION FROM IKFOROSSUSCRIPTORES JOIN ORGANIGRAMA ON IKFOROSSUSCRIPTORES.CODIGOCARGO=ORGANIGRAMA.CODIGO
WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

--IKFOROSMENSAJES no se toca pq el campo CARGO tiene solo la denominacion del cargo individual (no incluye al usuario)
--UPDATE IKFOROSMENSAJES SET CARGO=ORGANIGRAMA.DESCRIPCION FROM IKFOROSMENSAJES JOIN ORGANIGRAMA ON IKFOROSMENSAJES.CODIGOCARGO=ORGANIGRAMA.CODIGO
--WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

--IKFOROSARCHIVOS no se toca pq el campo CARGO tiene solo la denominacion del cargo individual (no incluye al usuario)
--UPDATE IKFOROSARCHIVOS SET CARGO=ORGANIGRAMA.DESCRIPCION FROM IKFOROSARCHIVOS JOIN ORGANIGRAMA ON IKFOROSARCHIVOS.CODIGOCARGO=ORGANIGRAMA.CODIGO
--WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

--NCMAINPROD no se toca porque los cargos multiples no pueden ser coordinadores
--UPDATE NCMAINPROD SET CARGOADMINISTRADOR=ORGANIGRAMA.DESCRIPCION FROM NCMAINPROD JOIN ORGANIGRAMA ON NCMAINPROD.CODIGOCARGOADMINISTRADOR=ORGANIGRAMA.CODIGO
--WHERE ORGANIGRAMA.TIPO=5 AND ORGANIGRAMA.CODIGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@CODIGOUSUARIO)

UPDATE AUDITORS SET AUDITORS_DESCRIPTION=REPLACE(AUDITORS_DESCRIPTION, '('+@VIEJOUSUARIO+')', '('+@NUEVOUSUARIO+')') WHERE AUDITORS_AUDITORTYPE=1

UPDATE AUDITEDS SET AUDITEDS_DESCRIPTION=REPLACE(AUDITEDS_DESCRIPTION, '('+@VIEJOUSUARIO+')', '('+@NUEVOUSUARIO+')')

-- 6.5 

UPDATE WF_EXTRADATA SET WF_EXTRADATA_LAST_USER=@NUEVOUSUARIO WHERE WF_EXTRADATA_LAST_USER=@VIEJOUSUARIO

UPDATE WF_FLAGS SET WF_FLAGS_LAST_USER=@NUEVOUSUARIO WHERE WF_FLAGS_LAST_USER=@VIEJOUSUARIO

UPDATE WF_SCHEDTEMPLATES SET WF_SCHEDTEMPLATES_INPUTUSER=@NUEVOUSUARIO WHERE WF_SCHEDTEMPLATES_INPUTUSER=@VIEJOUSUARIO

UPDATE WF_APPROVAL_RECORDS SET WF_APPROVAL_RECORDS_APPROVEDBYUSER=@NUEVOUSUARIO WHERE WF_APPROVAL_RECORDS_APPROVEDBYUSER=@VIEJOUSUARIO


INSERT INTO IK_PEOPLE_HISTORY(IK_PEOPLE_ID, IK_PEOPLE_HISTORY_DATE, IK_PEOPLE_HISTORY_ENTRY,IK_PEOPLE_HISTORY_USER,IK_PEOPLE_HISTORY_ENTRY_TYPE )
VALUES (@CODIGOUSUARIO, GETDATE(), 'ikReplaceUsuario: User atributes updated (USUARIO): '''+ @VIEJOUSUARIO + ''' changed to ''' +  @NUEVOUSUARIO + '''' , SYSTEM_USER, 1)

COMMIT TRANSACTION
PRINT 'ikReplaceUsuario '+@IKVER+': SUCCESS (' + @VIEJOUSUARIO + ' TO ' + @NUEVOUSUARIO + ')'
RETURN(0)
GO

GO
--SqlScripter----[dbo].[NCCC_CheckDeleteRecordTree].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[NCCC_CheckDeleteRecordTree]') IS NULL EXEC('CREATE PROCEDURE [dbo].[NCCC_CheckDeleteRecordTree] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[NCCC_CheckDeleteRecordTree]
(
	@VARTABLE_NAME NVARCHAR(50),
	@CODIGO_REGISTRO INT
)
AS
	DECLARE @ENCONTRE TINYINT
	DECLARE @CODIGO_AUX INT
	
	SET @ENCONTRE = 0

	CREATE TABLE #TEMP_ISSUES (CODIGONC int)
	
	IF (@VARTABLE_NAME = 'TBL_NCCC_CAUSAS')
	BEGIN
		-- tomo la subrama a partir del registro @CODIGO_REGISTRO y cuento cuantas referencias hay a esos registros
		;WITH TREE(CODIGO)
		AS (
			SELECT CODIGO FROM TBL_NCCC_CAUSAS WHERE CODIGO=@CODIGO_REGISTRO
			UNION ALL
			SELECT TB.CODIGO FROM TBL_NCCC_CAUSAS TB JOIN TREE ON TB.CODIGO_PADRE=TREE.CODIGO
			)
		
		
		INSERT INTO #TEMP_ISSUES
		SELECT DISTINCT CODIGONC 
		FROM TREE JOIN VARCHILD_NCCC_CAUSAS VC ON TREE.CODIGO=VC.CODIGO_CAUSA

	END

	IF (@VARTABLE_NAME = 'TBL_AREA_CAUSAS')
	Begin
		;WITH TREE(CODIGO)
		AS (
			SELECT CODIGO FROM TBL_AREA_CAUSAS WHERE CODIGO=@CODIGO_REGISTRO
			UNION ALL
			SELECT TB.CODIGO FROM TBL_AREA_CAUSAS TB JOIN TREE ON TB.CODIGO_PADRE=TREE.CODIGO
			)
		
		
		INSERT INTO #TEMP_ISSUES
		SELECT DISTINCT CODIGONC 
		FROM TREE JOIN VARCHILD_NCCC_AREAS VC ON TREE.CODIGO=VC.CODIGOAREA
	End

	IF (@VARTABLE_NAME = 'TBL_NCCC_REQUISITOSNORMATIVOS')
	Begin
		;WITH TREE(CODIGO)
		AS (
			SELECT CODIGO FROM TBL_NCCC_REQUISITOSNORMATIVOS WHERE CODIGO=@CODIGO_REGISTRO
			UNION ALL
			SELECT TB.CODIGO FROM TBL_NCCC_REQUISITOSNORMATIVOS TB JOIN TREE ON TB.CODIGO_PADRE=TREE.CODIGO
			)
		
		
		INSERT INTO #TEMP_ISSUES
		SELECT DISTINCT CODIGONC 
		FROM TREE JOIN VARCHILD_NCCC_REQNORMATIVOS VC ON TREE.CODIGO=VC.CODIGO_REQUISITO_NORMATIVO
	End
	
--	IF (@ENCONTRE = 0) SELECT * FROM NCMAINPROD WHERE CODIGO = -999
--	ELSE SELECT @ENCONTRE
	
	SELECT @ENCONTRE= COUNT(*) FROM #TEMP_ISSUES

		IF (@ENCONTRE > 0) 
		BEGIN			

				DECLARE @Output varchar(max)
				SELECT TOP 50 @Output = coalesce(@Output + ',' , '') + 'N-' + CONVERT(NVARCHAR,CODIGONC)
				FROM #TEMP_ISSUES
				DECLARE @MESSAGE varchar(max) = 'El registro no se puede eliminar ya que hay asuntos que dependen del mismo: ' + @Output

				RAISERROR(@MESSAGE,16,1,@Output)
		END

RETURN
GO

GO
--SqlScripter----[dbo].[org_ChangeRootDescription].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[org_ChangeRootDescription]') IS NULL EXEC('CREATE PROCEDURE [dbo].[org_ChangeRootDescription] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[org_ChangeRootDescription]
@ORG_CHART_ID int ,
@NEW_ORG_CHART_DESC nvarchar(100)
AS
BEGIN


DECLARE @CURRENT_ORG_CHART_DESC nvarchar(100)
SET @CURRENT_ORG_CHART_DESC='N/A'

SELECT 
@CURRENT_ORG_CHART_DESC=ISNULL(DESCRIPCION,'N/A')
FROM ORGANIGRAMA 
WHERE 
CODIGO=@ORG_CHART_ID
AND CODIGORAIZ=0
AND CODIGOPADRE=0
AND TIPO=0

SET @NEW_ORG_CHART_DESC=RTRIM(LTRIM(@NEW_ORG_CHART_DESC))

IF @NEW_ORG_CHART_DESC=''
BEGIN
	RAISERROR('org_ChangeRootDescription: VALIDATION: FAILURE. INVALID @NEW_ORG_CHART_DESC: (%u)',16,1,@ORG_CHART_ID)
	RETURN
END

IF @CURRENT_ORG_CHART_DESC='N/A'
BEGIN
	RAISERROR('org_ChangeRootDescription: VALIDATION: FAILURE. INVALID @ORG_CHART_ID: (%u)',16,1,@ORG_CHART_ID)
	RETURN
END

IF @NEW_ORG_CHART_DESC=@CURRENT_ORG_CHART_DESC
BEGIN
	RETURN 
END

BEGIN TRAN

--ACTUALIZO LA RAIZ
UPDATE ORGANIGRAMA SET 
DESCRIPCION=@NEW_ORG_CHART_DESC,
CAMINO=@NEW_ORG_CHART_DESC
WHERE CODIGO=@ORG_CHART_ID

--ACTUALIZO LOS CAMINOS A ACTUALIZAR CON UNA MARCA, PARA EVITAR REEMPLAZOS DE DESCRIPCIONES DE NIVELES INFERIORES
UPDATE ORGANIGRAMA SET 
CAMINO='###'+ CAMINO
WHERE 
CODIGORAIZ=@ORG_CHART_ID

--ACTUALIZO LOS CAMINOS CON LA DESCRIPCION FINAL
UPDATE ORGANIGRAMA SET 
CAMINO=REPLACE(CAMINO, '###' + @CURRENT_ORG_CHART_DESC , @NEW_ORG_CHART_DESC )
WHERE 
CODIGORAIZ=@ORG_CHART_ID



COMMIT TRAN

END
GO

GO
--SqlScripter----[dbo].[RetornaSector].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[RetornaSector]') IS NULL EXEC('CREATE PROCEDURE [dbo].[RetornaSector] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[RetornaSector]
(@CodPar int)  AS -- versin de prueba para subreportes
 -- el cursor que lee los nodos (optimizado para leer hacia adelante)
 declare Cur CURSOR FAST_FORWARD for select CODIGO from ORGANIGRAMA where CODIGO= @CodPar
 declare @Codigo int -- variable para implementar el loop
 declare @Sector varchar(50) -- resultado de la llamada al SP que obtiene el sector
 declare @Superior varchar(50)
 
-- crear tabla temporal
create table #Jerarquia ( CODIGO int, SECTOR varchar(50) , SUPERIOR  varchar(50) ) 
 
open Cur
while 1=1 begin
 fetch next from Cur into @Codigo
 if @@FETCH_STATUS <> 0 break
 exec GetSector @Codigo,@Sector OUTPUT

 insert into #Jerarquia values(@Codigo,@Sector ,@Superior)
end
 
close Cur
deallocate Cur
 
-- retorno del conjunto de resultados
select * from #Jerarquia
GO

GO
--SqlScripter----[dbo].[RetornaSuperior].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[RetornaSuperior]') IS NULL EXEC('CREATE PROCEDURE [dbo].[RetornaSuperior] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[RetornaSuperior]
(@CodPar int)  AS -- versin de prueba para subreportes
 -- el cursor que lee los nodos (optimizado para leer hacia adelante)
 declare Cur CURSOR FAST_FORWARD for select CODIGO from ORGANIGRAMA where CODIGO= @CodPar
 declare @Codigo int -- variable para implementar el loop
 declare @Sector varchar(50) -- resultado de la llamada al SP que obtiene el sector
 declare @Superior varchar(50)
 
-- crear tabla temporal
create table #Jerarquia ( CODIGO int, SECTOR varchar(50) , SUPERIOR  varchar(50) ) 
 
open Cur
while 1=1 begin
 fetch next from Cur into @Codigo
 if @@FETCH_STATUS <> 0 break
  exec GetSuperior @Codigo, @Superior OUTPUT
 insert into #Jerarquia values(@Codigo,@Sector ,@Superior)
end
 
close Cur
deallocate Cur
 
-- retorno del conjunto de resultados
select * from #Jerarquia
GO

GO
--SqlScripter----[dbo].[sys_CrossTab].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[sys_CrossTab]') IS NULL EXEC('CREATE PROCEDURE [dbo].[sys_CrossTab] AS PRINT ''TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED''')
GO
ALTER PROCEDURE [dbo].[sys_CrossTab]
@SQLSource 			varchar(8000),
		@ColFieldID			varchar(8000),
		@ColFieldName		varchar(8000),
		@ColFieldOrder		varchar(8000),
		@CalcFieldName		varchar(8000),
		@RowFieldNames		varchar(8000),
		@TempTableName		varchar(200) = null,
		@CalcOperation		varchar(50) = 'sum',		
		@Debug				bit = 0,
		@SourceFilter		varchar(8000) = null,
        @NumColOrdering     bit = 0,
        @RowTotals          varchar(100) = null,
        @ColTotals          varchar(100) = null,
        @OrderBy            varchar(8000) = null,
        @CalcFieldType      varchar(100) = 'int'
as


/*-----------------------------------------------------------------------------------------
' Procedure : sys_CrossTab
' DateTime  : 11 May 2006 17:59:56
' Author    : Keith Fletcher
' Ver       : 1.5
' Purpose   : Generate a cross-tab result set on a given SQL source
' To Check  :
' Changes   : KF - 23 May 2006 - Added a parameter to order the columns in the crosstab (Ver 1.1)
' Changes   : KF - 24 Aug 2006 - Added a parameter for the where clause of the source (Ver 1.2)
' Changes   : KF - 05 Oct 2006 - Added alpha/num column ordering, row and column totals (Ver 1.3)
' Changes   : KF - 06 Oct 2006 - Added CalcFieldType (Ver 1.4)
' Changes   : KF - 16 Mar 2007 - Touched up the code comments (Ver 1.5)
'-----------------------------------------------------------------------------------------*/



/*
-- Start of debugging stuff
declare		@SQLSource 			varchar(8000)
declare		@ColFieldID			varchar(8000)
declare		@ColFieldName		varchar(8000)
declare		@ColFieldOrder		varchar(8000)
declare		@CalcFieldName		varchar(8000)
declare		@RowFieldNames		varchar(8000)
declare		@TempTableName		varchar(200)
declare		@CalcOperation		varchar(50)
declare		@Debug				bit
declare		@SourceFilter		varchar(8000)
declare     @NumColOrdering     bit
declare     @RowTotals          varchar(100)
declare     @ColTotals          varchar(100)
declare     @OrderBy            varchar(8000)
declare     @CalcFieldType      varchar(100)


set		@SQLSource			= 'Northwind..[Order Details] Ord inner join Northwind..Products Prd on Ord.ProductID = Prd.ProductID'
set		@ColFieldID 		= 'Ord.ProductID'
set		@ColFieldName 		= 'Prd.ProductName'
set		@ColFieldOrder		= 'Prd.ProductName'
set		@CalcFieldName		= 'Quantity'
set		@RowFieldNames		= 'OrderID'
set		@TempTableName		= '#CrossTab'
set		@CalcOperation		= 'sum'		
set		@Debug				= 1
set		@SourceFilter		= null
set     @NumColOrdering     = 0
set     @RowTotals          = 'RowTotal'
set     @ColTotals          = 'ColTotal'
set     @OrderBy            = null
set     @CalcFieldType      = 'int'
-- End of debugging stuff
*/



set nocount on


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Variable declaration


-- These are all my 'buffer' variables used to build up the SQL queries. If you wish to have a query that's
-- culture-aware, you'll need to change these to nvarchars. You'll also need to set the maximum size to
-- 4000 (@MaxVarSize)

declare     @MaxVarSize     int
set         @MaxVarSize     = 8000

declare	@SQLCase1	varchar(8000)	declare	@SQLCase2	varchar(8000)	declare	@SQLCase3	varchar(8000)
declare	@SQLCase4	varchar(8000)	declare	@SQLCase5	varchar(8000)	declare	@SQLCase6	varchar(8000)
declare	@SQLCase7	varchar(8000)	declare	@SQLCase8	varchar(8000)	declare	@SQLCase9	varchar(8000)
declare	@SQLCase10	varchar(8000)	declare	@SQLCase11	varchar(8000)	declare	@SQLCase12	varchar(8000)
declare	@SQLCase13	varchar(8000)	declare	@SQLCase14	varchar(8000)	declare	@SQLCase15	varchar(8000)
declare	@SQLCase16	varchar(8000)	declare	@SQLCase17	varchar(8000)	declare	@SQLCase18	varchar(8000)
declare	@SQLCase19	varchar(8000)	declare	@SQLCase20	varchar(8000)	declare	@SQLCase21	varchar(8000)
declare	@SQLCase22	varchar(8000)	declare	@SQLCase23	varchar(8000)	declare	@SQLCase24	varchar(8000)
declare	@SQLCase25	varchar(8000)	declare	@SQLCase26	varchar(8000)	declare	@SQLCase27	varchar(8000)
declare	@SQLCase28	varchar(8000)	declare	@SQLCase29	varchar(8000)	declare	@SQLCase30	varchar(8000)
declare	@SQLCase31	varchar(8000)	declare	@SQLCase32	varchar(8000)	declare	@SQLCase33	varchar(8000)
declare	@SQLCase34	varchar(8000)	declare	@SQLCase35	varchar(8000)	declare	@SQLCase36	varchar(8000)
declare	@SQLCase37	varchar(8000)	declare	@SQLCase38	varchar(8000)	declare	@SQLCase39	varchar(8000)
declare	@SQLCase40	varchar(8000)	declare	@SQLCase41	varchar(8000)	declare	@SQLCase42	varchar(8000)
declare	@SQLCase43	varchar(8000)	declare	@SQLCase44	varchar(8000)	declare	@SQLCase45	varchar(8000)
declare	@SQLCase46	varchar(8000)	declare	@SQLCase47	varchar(8000)	declare	@SQLCase48	varchar(8000)
declare	@SQLCase49	varchar(8000)	declare	@SQLCase50	varchar(8000)  

declare		@SQLCaseLine	varchar(8000)
declare 	@SQLCaseLevel	tinyint
declare 	@SQLCaseLen		int

declare	@SQLCol1	varchar(8000)	declare	@SQLCol2	varchar(8000)	declare	@SQLCol3	varchar(8000)
declare	@SQLCol4	varchar(8000)	declare	@SQLCol5	varchar(8000)	declare	@SQLCol6	varchar(8000)
declare	@SQLCol7	varchar(8000)	declare	@SQLCol8	varchar(8000)	declare	@SQLCol9	varchar(8000)
declare	@SQLCol10	varchar(8000)	declare	@SQLCol11	varchar(8000)	declare	@SQLCol12	varchar(8000)
declare	@SQLCol13	varchar(8000)	declare	@SQLCol14	varchar(8000)	declare	@SQLCol15	varchar(8000)
declare	@SQLCol16	varchar(8000)	declare	@SQLCol17	varchar(8000)	declare	@SQLCol18	varchar(8000)
declare	@SQLCol19	varchar(8000)	declare	@SQLCol20	varchar(8000)	declare	@SQLCol21	varchar(8000)
declare	@SQLCol22	varchar(8000)	declare	@SQLCol23	varchar(8000)	declare	@SQLCol24	varchar(8000)
declare	@SQLCol25	varchar(8000)	declare	@SQLCol26	varchar(8000)	declare	@SQLCol27	varchar(8000)
declare	@SQLCol28	varchar(8000)	declare	@SQLCol29	varchar(8000)	declare	@SQLCol30	varchar(8000)
declare	@SQLCol31	varchar(8000)	declare	@SQLCol32	varchar(8000)	declare	@SQLCol33	varchar(8000)
declare	@SQLCol34	varchar(8000)	declare	@SQLCol35	varchar(8000)	declare	@SQLCol36	varchar(8000)
declare	@SQLCol37	varchar(8000)	declare	@SQLCol38	varchar(8000)	declare	@SQLCol39	varchar(8000)
declare	@SQLCol40	varchar(8000)	declare	@SQLCol41	varchar(8000)	declare	@SQLCol42	varchar(8000)
declare	@SQLCol43	varchar(8000)	declare	@SQLCol44	varchar(8000)	declare	@SQLCol45	varchar(8000)
declare	@SQLCol46	varchar(8000)	declare	@SQLCol47	varchar(8000)	declare	@SQLCol48	varchar(8000)
declare	@SQLCol49	varchar(8000)	declare	@SQLCol50	varchar(8000)

declare		@SQLColLine		varchar(8000)
declare 	@SQLColLevel	tinyint
declare 	@SQLColLen		int

declare	@SQLTot1	varchar(8000)	declare	@SQLTot2	varchar(8000)	declare	@SQLTot3	varchar(8000)
declare	@SQLTot4	varchar(8000)	declare	@SQLTot5	varchar(8000)	declare	@SQLTot6	varchar(8000)
declare	@SQLTot7	varchar(8000)	declare	@SQLTot8	varchar(8000)	declare	@SQLTot9	varchar(8000)
declare	@SQLTot10	varchar(8000)	declare	@SQLTot11	varchar(8000)	declare	@SQLTot12	varchar(8000)
declare	@SQLTot13	varchar(8000)	declare	@SQLTot14	varchar(8000)	declare	@SQLTot15	varchar(8000)
declare	@SQLTot16	varchar(8000)	declare	@SQLTot17	varchar(8000)	declare	@SQLTot18	varchar(8000)
declare	@SQLTot19	varchar(8000)	declare	@SQLTot20	varchar(8000)	declare	@SQLTot21	varchar(8000)
declare	@SQLTot22	varchar(8000)	declare	@SQLTot23	varchar(8000)	declare	@SQLTot24	varchar(8000)
declare	@SQLTot25	varchar(8000)	declare	@SQLTot26	varchar(8000)	declare	@SQLTot27	varchar(8000)
declare	@SQLTot28	varchar(8000)	declare	@SQLTot29	varchar(8000)	declare	@SQLTot30	varchar(8000)
declare	@SQLTot31	varchar(8000)	declare	@SQLTot32	varchar(8000)	declare	@SQLTot33	varchar(8000)
declare	@SQLTot34	varchar(8000)	declare	@SQLTot35	varchar(8000)	declare	@SQLTot36	varchar(8000)
declare	@SQLTot37	varchar(8000)	declare	@SQLTot38	varchar(8000)	declare	@SQLTot39	varchar(8000)
declare	@SQLTot40	varchar(8000)	declare	@SQLTot41	varchar(8000)	declare	@SQLTot42	varchar(8000)
declare	@SQLTot43	varchar(8000)	declare	@SQLTot44	varchar(8000)	declare	@SQLTot45	varchar(8000)
declare	@SQLTot46	varchar(8000)	declare	@SQLTot47	varchar(8000)	declare	@SQLTot48	varchar(8000)
declare	@SQLTot49	varchar(8000)	declare	@SQLTot50	varchar(8000)

declare		@SQLTotLine		varchar(8000)
declare 	@SQLTotLevel	tinyint
declare 	@SQLTotLen		int

declare	@SQLIns1	varchar(8000)	declare	@SQLIns2	varchar(8000)	declare	@SQLIns3	varchar(8000)
declare	@SQLIns4	varchar(8000)	declare	@SQLIns5	varchar(8000)	declare	@SQLIns6	varchar(8000)
declare	@SQLIns7	varchar(8000)	declare	@SQLIns8	varchar(8000)	declare	@SQLIns9	varchar(8000)
declare	@SQLIns10	varchar(8000)	declare	@SQLIns11	varchar(8000)	declare	@SQLIns12	varchar(8000)
declare	@SQLIns13	varchar(8000)	declare	@SQLIns14	varchar(8000)	declare	@SQLIns15	varchar(8000)
declare	@SQLIns16	varchar(8000)	declare	@SQLIns17	varchar(8000)	declare	@SQLIns18	varchar(8000)
declare	@SQLIns19	varchar(8000)	declare	@SQLIns20	varchar(8000)	declare	@SQLIns21	varchar(8000)
declare	@SQLIns22	varchar(8000)	declare	@SQLIns23	varchar(8000)	declare	@SQLIns24	varchar(8000)
declare	@SQLIns25	varchar(8000)	declare	@SQLIns26	varchar(8000)	declare	@SQLIns27	varchar(8000)
declare	@SQLIns28	varchar(8000)	declare	@SQLIns29	varchar(8000)	declare	@SQLIns30	varchar(8000)

declare		@SQLInsLine		varchar(8000)
declare 	@SQLInsLevel	tinyint
declare 	@SQLInsLen		int

declare	@SQLTtC1	varchar(8000)	declare	@SQLTtC2	varchar(8000)	declare	@SQLTtC3	varchar(8000)
declare	@SQLTtC4	varchar(8000)	declare	@SQLTtC5	varchar(8000)	declare	@SQLTtC6	varchar(8000)
declare	@SQLTtC7	varchar(8000)	declare	@SQLTtC8	varchar(8000)	declare	@SQLTtC9	varchar(8000)
declare	@SQLTtC10	varchar(8000)	declare	@SQLTtC11	varchar(8000)	declare	@SQLTtC12	varchar(8000)
declare	@SQLTtC13	varchar(8000)	declare	@SQLTtC14	varchar(8000)	declare	@SQLTtC15	varchar(8000)
declare	@SQLTtC16	varchar(8000)	declare	@SQLTtC17	varchar(8000)	declare	@SQLTtC18	varchar(8000)
declare	@SQLTtC19	varchar(8000)	declare	@SQLTtC20	varchar(8000)	declare	@SQLTtC21	varchar(8000)
declare	@SQLTtC22	varchar(8000)	declare	@SQLTtC23	varchar(8000)	declare	@SQLTtC24	varchar(8000)
declare	@SQLTtC25	varchar(8000)	declare	@SQLTtC26	varchar(8000)	declare	@SQLTtC27	varchar(8000)
declare	@SQLTtC28	varchar(8000)	declare	@SQLTtC29	varchar(8000)	declare	@SQLTtC30	varchar(8000)

declare		@SQLTtCLine		varchar(8000)
declare 	@SQLTtCLevel	tinyint
declare 	@SQLTtCLen		int


declare		@ColID			varchar(100)
declare		@ColName		varchar(200)
declare		@ColTotal		varchar(100)
declare     @GrandTotal     varchar(100)
declare		@ColNo			int

declare		@StrippedRowFieldNames	varchar(8000)
declare     @CalcScript     varchar(100)

declare		@NewLine		char(2)

declare		@AddWhere		varchar(8000)
declare     @AddOrder       varchar(8000)


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Variable initialisation


set	@SQLCase1	= ''	set	@SQLCase2	= ''	set	@SQLCase3	= ''	set	@SQLCase4	= ''
set	@SQLCase5	= ''	set	@SQLCase6	= ''	set	@SQLCase7	= ''	set	@SQLCase8	= ''
set	@SQLCase9	= ''	set	@SQLCase10	= ''	set	@SQLCase11	= ''	set	@SQLCase12	= ''
set	@SQLCase13	= ''	set	@SQLCase14	= ''	set	@SQLCase15	= ''	set	@SQLCase16	= ''
set	@SQLCase17	= ''	set	@SQLCase18	= ''	set	@SQLCase19	= ''	set	@SQLCase20	= ''
set	@SQLCase21	= ''	set	@SQLCase22	= ''	set	@SQLCase23	= ''	set	@SQLCase24	= ''
set	@SQLCase25	= ''	set	@SQLCase26	= ''	set	@SQLCase27	= ''	set	@SQLCase28	= ''
set	@SQLCase29	= ''	set	@SQLCase30	= ''	set	@SQLCase31	= ''	set	@SQLCase32	= ''
set	@SQLCase33	= ''	set	@SQLCase34	= ''	set	@SQLCase35	= ''	set	@SQLCase36	= ''
set	@SQLCase37	= ''	set	@SQLCase38	= ''	set	@SQLCase39	= ''	set	@SQLCase40	= ''
set	@SQLCase41	= ''	set	@SQLCase42	= ''	set	@SQLCase43	= ''	set	@SQLCase44	= ''
set	@SQLCase45	= ''	set	@SQLCase46	= ''	set	@SQLCase47	= ''	set	@SQLCase48	= ''
set	@SQLCase49	= ''	set	@SQLCase50	= ''

set		@SQLCaseLine		= ''
set		@SQLCaseLevel		= 1
set		@SQLCaseLen		    = 0

set	@SQLCol1	= ''	set	@SQLCol2	= ''	set	@SQLCol3	= ''	set	@SQLCol4	= ''
set	@SQLCol5	= ''	set	@SQLCol6	= ''	set	@SQLCol7	= ''	set	@SQLCol8	= ''
set	@SQLCol9	= ''	set	@SQLCol10	= ''	set	@SQLCol11	= ''	set	@SQLCol12	= ''
set	@SQLCol13	= ''	set	@SQLCol14	= ''	set	@SQLCol15	= ''	set	@SQLCol16	= ''
set	@SQLCol17	= ''	set	@SQLCol18	= ''	set	@SQLCol19	= ''	set	@SQLCol20	= ''
set	@SQLCol21	= ''	set	@SQLCol22	= ''	set	@SQLCol23	= ''	set	@SQLCol24	= ''
set	@SQLCol25	= ''	set	@SQLCol26	= ''	set	@SQLCol27	= ''	set	@SQLCol28	= ''
set	@SQLCol29	= ''	set	@SQLCol30	= ''	set	@SQLCol31	= ''	set	@SQLCol32	= ''
set	@SQLCol33	= ''	set	@SQLCol34	= ''	set	@SQLCol35	= ''	set	@SQLCol36	= ''
set	@SQLCol37	= ''	set	@SQLCol38	= ''	set	@SQLCol39	= ''	set	@SQLCol40	= ''
set	@SQLCol41	= ''	set	@SQLCol42	= ''	set	@SQLCol43	= ''	set	@SQLCol44	= ''
set	@SQLCol45	= ''	set	@SQLCol46	= ''	set	@SQLCol47	= ''	set	@SQLCol48	= ''
set	@SQLCol49	= ''	set	@SQLCol50	= ''	

set		@SQLColLine		    = ''
set		@SQLColLevel		= 1
set		@SQLColLen		    = 0

set	@SQLTot1	= ''	set	@SQLTot2	= ''	set	@SQLTot3	= ''	set	@SQLTot4	= ''
set	@SQLTot5	= ''	set	@SQLTot6	= ''	set	@SQLTot7	= ''	set	@SQLTot8	= ''
set	@SQLTot9	= ''	set	@SQLTot10	= ''	set	@SQLTot11	= ''	set	@SQLTot12	= ''
set	@SQLTot13	= ''	set	@SQLTot14	= ''	set	@SQLTot15	= ''	set	@SQLTot16	= ''
set	@SQLTot17	= ''	set	@SQLTot18	= ''	set	@SQLTot19	= ''	set	@SQLTot20	= ''
set	@SQLTot21	= ''	set	@SQLTot22	= ''	set	@SQLTot23	= ''	set	@SQLTot24	= ''
set	@SQLTot25	= ''	set	@SQLTot26	= ''	set	@SQLTot27	= ''	set	@SQLTot28	= ''
set	@SQLTot29	= ''	set	@SQLTot30	= ''	set	@SQLTot31	= ''	set	@SQLTot32	= ''
set	@SQLTot33	= ''	set	@SQLTot34	= ''	set	@SQLTot35	= ''	set	@SQLTot36	= ''
set	@SQLTot37	= ''	set	@SQLTot38	= ''	set	@SQLTot39	= ''	set	@SQLTot40	= ''
set	@SQLTot41	= ''	set	@SQLTot42	= ''	set	@SQLTot43	= ''	set	@SQLTot44	= ''
set	@SQLTot45	= ''	set	@SQLTot46	= ''	set	@SQLTot47	= ''	set	@SQLTot48	= ''
set	@SQLTot49	= ''	set	@SQLTot50	= ''	

set		@SQLTotLine		    = ''
set		@SQLTotLevel		= 1
set		@SQLTotLen		    = 0

set	@SQLIns1	= ''	set	@SQLIns2	= ''	set	@SQLIns3	= ''	set	@SQLIns4	= ''
set	@SQLIns5	= ''	set	@SQLIns6	= ''	set	@SQLIns7	= ''	set	@SQLIns8	= ''
set	@SQLIns9	= ''	set	@SQLIns10	= ''	set	@SQLIns11	= ''	set	@SQLIns12	= ''
set	@SQLIns13	= ''	set	@SQLIns14	= ''	set	@SQLIns15	= ''	set	@SQLIns16	= ''
set	@SQLIns17	= ''	set	@SQLIns18	= ''	set	@SQLIns19	= ''	set	@SQLIns20	= ''
set	@SQLIns21	= ''	set	@SQLIns22	= ''	set	@SQLIns23	= ''	set	@SQLIns24	= ''
set	@SQLIns25	= ''	set	@SQLIns26	= ''	set	@SQLIns27	= ''	set	@SQLIns28	= ''
set	@SQLIns29	= ''	set	@SQLIns30	= ''	

set		@SQLInsLine		    = ''
set		@SQLInsLevel		= 1
set		@SQLInsLen		    = 0

set	@SQLTtC1	= ''	set	@SQLTtC2	= ''	set	@SQLTtC3	= ''	set	@SQLTtC4	= ''
set	@SQLTtC5	= ''	set	@SQLTtC6	= ''	set	@SQLTtC7	= ''	set	@SQLTtC8	= ''
set	@SQLTtC9	= ''	set	@SQLTtC10	= ''	set	@SQLTtC11	= ''	set	@SQLTtC12	= ''
set	@SQLTtC13	= ''	set	@SQLTtC14	= ''	set	@SQLTtC15	= ''	set	@SQLTtC16	= ''
set	@SQLTtC17	= ''	set	@SQLTtC18	= ''	set	@SQLTtC19	= ''	set	@SQLTtC20	= ''
set	@SQLTtC21	= ''	set	@SQLTtC22	= ''	set	@SQLTtC23	= ''	set	@SQLTtC24	= ''
set	@SQLTtC25	= ''	set	@SQLTtC26	= ''	set	@SQLTtC27	= ''	set	@SQLTtC28	= ''
set	@SQLTtC29	= ''	set	@SQLTtC30	= ''	

set		@SQLTtCLine		    = ''
set		@SQLTtCLevel		= 1
set		@SQLTtCLen		    = 0


set		@ColNo			    = 1

set		@StrippedRowFieldNames	= @RowFieldNames

set		@NewLine		    = char(13) + char(10)


if			@SourceFilter is null
	set			@AddWhere = ''
else
	set			@AddWhere = ' and ' + @SourceFilter

if			@OrderBy is null
	set			@AddOrder = ''
else
	set			@AddOrder = ' order by ' + @OrderBy


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Get the column names and ID's

-- We want to collect a list of all the columns that we need to create for the cross tab.
-- This is done by doing a select on our source data, and inserting the first occurence 
-- of each data item that we find in the field pointed to by @ColFieldID. While we're at
-- it, we might as well put the column in the correct display order.

create		table #Columns		(ColID		varchar(100),
					            ColName		varchar(200),
                                ColOrderNum bigint identity(1,1))


-- Add a field to keep a running total of the column values. This needs to be added 
-- dynamically, as we don't know the data type of this field upfront.
exec    ('alter table #Columns add ColTotal ' + @CalcFieldType)


-- If we need to calculate the column totals, build the command that we need to calculate
-- it. Both the aggregate type and the data type are not known, so we do it dynamically. 
-- If we don't need to calculate column totals, we'll set it to null.
if      @ColTotals is not null 
    set     @CalcScript     = @CalcOperation + '(cast(' + @CalcFieldName  + ' as ' + @CalcFieldType + '))'
else
    set     @CalcScript     = '0'


-- Here's were it all comes together. We create an INSERT statement that adds all of the 
-- column ID's and names to our temp table. We trim the fields and calculate the column
-- totals. This is the first hit on our source data.

-- We're not worried about the ordering of the columns...
if		@ColFieldOrder is null
	exec	('insert into #Columns (ColID, ColName, ColTotal) select ltrim(rtrim(isnull(cast(' 
            + @ColFieldID + ' as varchar(100)), ''''))), ltrim(rtrim(isnull(cast(' 
            + @ColFieldName + ' as varchar(100)), ''''))), ' + @CalcScript + ' from ' + @SQLSource 
            + ' where 1=1 ' + @AddWhere + ' group by ' + @ColFieldID + ', ' + @ColFieldName)

else
begin
-- We are concerned with column ordering, and they must be sorted alphanumerically
    if      @NumColOrdering = 0
	    exec	('insert into #Columns (ColID, ColName, ColTotal) select ltrim(rtrim(isnull(cast(' 
                + @ColFieldID + ' as varchar(100)), ''''))), ltrim(rtrim(isnull(cast(' + @ColFieldName + 
			    ' as varchar(100)), ''''))), ' + @CalcScript + ' from ' + @SQLSource + ' where 1=1 ' 
                + @AddWhere + ' group by ' + @ColFieldID + ', ' + @ColFieldName + ', ' + @ColFieldOrder
                + ' order by cast(ltrim(rtrim(isnull(' + @ColFieldOrder + ' , ''''))) as varchar(100))')
    else
-- We are concerned with column ordering, and they must be sorted numerically
	    exec	('insert into #Columns (ColID, ColName, ColTotal)select ltrim(rtrim(isnull(cast(' 
                + @ColFieldID + ' as varchar(100)), ''''))), ltrim(rtrim(isnull(cast(' + @ColFieldName + 
			    ' as varchar(100)), ''''))), ' + @CalcScript + ' from ' + @SQLSource + ' where 1=1 ' 
                + @AddWhere + ' group by ' + @ColFieldID + ', ' + @ColFieldName + ', ' + @ColFieldOrder
                + ' order by cast(isnull(' + @ColFieldOrder + ' , 0) as decimal(24,8))')
end


-- If we've enabled both column and row totals, we'll need to add one extra cell to the 
-- bottom corner that holds the grand total.
if  @ColTotals is not null and
    @RowTotals is not null
    set     @GrandTotal = 'cast(' + (select cast(sum(ColTotal) as varchar(100)) from #Columns) + ' as ' + @CalcFieldType + ')'
set     @GrandTotal = isnull(@GrandTotal, '')

-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Strip the table names and/or aliases from the row fields


-- Things start to get interesting now. If we've used a portion of a SELECT statement as 
-- our source data, it is possible that some of the fields in the @RowFieldNames param
-- are prefixed with either the table name or table alias. We need to strip these out, 
-- so that we're left with the bare field name.

declare		@StrippedField		varchar(200)
declare 	@Index 			int
declare 	@Index2			int
declare		@LastIndex		int
declare		@DeAliasedField		varchar(200)

set		@LastIndex		= 1
set		@Index			= 9000
set		@StrippedRowFieldNames 	= ''
set		@DeAliasedField		= ''

-- Loop through each row field
while		@Index > 0
begin

	set		@Index			= charindex(',', @RowFieldNames, @LastIndex)	

	if	@Index = 0
		set @StrippedField = ltrim(rtrim(substring(@RowFieldNames, @LastIndex, len(@RowFieldNames))))
	else
		set @StrippedField = ltrim(rtrim(substring(@RowFieldNames, @LastIndex, @Index - @LastIndex)))


	-- Strip the alias for the outer query
	set 		@Index2		= charindex('.', @StrippedField)
	if 		@Index2 > 0
		set @DeAliasedField = substring(@StrippedField, @Index2 + 1, len(@StrippedField)) 
	else
		set @DeAliasedField = @StrippedField

    -- Append the stripped field name to our SELECT field list. Insert comma's where appropriate
	set @StrippedRowFieldNames = @StrippedRowFieldNames + case len(@StrippedRowFieldNames) when 0 then '' else ',' end + @DeAliasedField 


    -- If the output of the cross tab is to be inserted into a given temp table, we'll need 
    -- to add the fields from @RowFieldNames into the temp table. This is also the start of
    -- the 'debugging' outputs.
	if		@TempTableName is not null
	begin
		if 	@Debug = 1
			print	'alter table ' + @TempTableName + ' add [' + @DeAliasedField + '] varchar(100)'
		exec		('alter table ' + @TempTableName + ' add [' + @DeAliasedField + '] varchar(100)')
	end

	set		@LastIndex		= @Index + 1
end


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Define column cursor


-- Right, we're now in the heart and soul of the stored procedure. Here we're going to
-- define a cursor that handles each column (already populated in the #Columns table)
-- in turn, and builds the CASE statement to catch the values that should be considered
-- when calculating that column.

-- Standard cursor declaration stuff
declare			curColCursor 	cursor read_only for
select 			ColID, ColName, cast(ColTotal as varchar(100)) ColTotal
from			#Columns
order by		ColOrderNum
 
open			curColCursor

fetch next
from 			curColCursor 
into			@ColID, @ColName, @ColTotal

while 	(@@fetch_status <> -1)
begin
	if 		(@@fetch_status <> -2)
	begin

		-- If the field name is empty, we'll add a generic name for it. This would have 
        -- happened if we're using a @ColFieldName mapping, and a field name was not
        -- found that linked to the @ColFieldID. These generic field names will run in
        -- sequence; Field1, Field2 etc.
		if @ColName = '' 
			set	@ColName = 'Field ' + cast(@ColNo as varchar(50))


		-- Add the column to the temp table
		if		@TempTableName is not null
		begin
			if 		@Debug = 1
				print 		'alter table ' + @TempTableName + ' add [' + @ColName + '] ' + @CalcFieldType
			exec		('alter table ' + @TempTableName + ' add [' + @ColName + '] ' + @CalcFieldType)
		end


		-- Build the case statement for this column. This will form part of the 'inner' SELECT
		set	@SQLCaseLine = ', cast(case when ' + @ColFieldID + ' = ''' + cast(@ColID as varchar(50)) + 
					''' then isnull(' + @CalcOperation + '(' + @CalcFieldName + '), 0) else 0 end as ' + 
                    @CalcFieldType + ')  [' + @ColName + ']' + @NewLine

        -- Build the statement to combine the individual entries into a proper cross tab. This
        -- forms the SELECT field list of the 'outer' SELECT.
		set 	@SQLColLine = ', sum([' + @ColName + ']) [' + @ColName + '] ' + @NewLine

        -- Build up the column totals query
        if      @ColTotals is not null
		    set 	@SQLTtCLine = ', cast(' + @ColTotal + ' as ' + @CalcFieldType + ')'

        -- Build up the row totals query
        if      @RowTotals is not null
        begin
            if      (@SQLTotLen + @SQLTotLevel) > 1
                set     @SQLTotLine = ' + sum([' + @ColName + '])' + @NewLine
            else
                set     @SQLTotLine = ' sum([' + @ColName + '])' + @NewLine
        end
        
        /*
        if      @RowTotals is not null
            set     @SQLTotLine = ' + sum([' + @ColName + '])' + @NewLine
        */

        -- If we're saving the cross tab to a temp table, build up the temp
        -- table INSERT query
		if	@TempTableName is not null
			set 	@SQLInsLine = ', [' + @ColName + '] ' + @NewLine


		-- Varchar's have a maximum length of 8000, and nvarchar's of 4000 (in SQL 2000, at least).
        -- If we have a large number of columns, we'll exceed that length very quickly. Seeing that
        -- we can't append all of this to a TEXT field, and have sp_executesql run from a TEXT type,
        -- we'll need to find another workaround. I've basically declared a collection of varchar's
        -- (I'm sure you didn't miss those at the beginning of the proc!). We'll keep appending data
        -- to the variable we're currently working with, and once we're about to exceed it's capacity,
        -- we'll switch to the next one in line. At the end, we concatenate all the strings together
        -- and run it as one BIG statement. If you have inordinately large queries, and find that you
        -- are running out of space, you'll need to add a few more of these 'buffer' variables. I
        -- think that if you look at the code closely enough you'll figure out how to add a few more.

        -- NB:!! If you want to use nvarchar's instead if varchars, you'll need to set @MaxVarSize
        -- down to 4000. You should then also prefix all the strings with a 'N.
		if	len(@SQLCaseLine) + @SQLCaseLen > @MaxVarSize
		begin
			set	@SQLCaseLine = '--*** Line ' + cast(@SQLCaseLevel as varchar(50)) + @NewLine + @SQLCaseLine
			set	@SQLCaseLevel = @SQLCaseLevel + 1

			if 	@SQLCaseLevel > 50
				raiserror ('Case level was too high (ran out of variables). %d', 16, 1, @SQLCaseLevel)

			set	@SQLCaseLen = 0
		end
		if	len(@SQLColLine) + @SQLColLen > @MaxVarSize
		begin
			set	@SQLColLevel = @SQLColLevel + 1

			if 	@SQLColLevel > 50
				raiserror ('Col level was too high (ran out of variables). %d', 16, 1, @SQLColLevel)

			set	@SQLColLen = 0
		end
		if	len(@SQLTotLine) + @SQLTotLen > @MaxVarSize
		begin
			set	@SQLTotLevel = @SQLTotLevel + 1

			if 	@SQLTotLevel > 50
				raiserror ('Tot level was too high (ran out of variables). %d', 16, 1, @SQLTotLevel)

			set	@SQLTotLen = 0
		end
		if	len(@SQLTtCLine) + @SQLTtCLen > @MaxVarSize
		begin
			set	@SQLTtCLevel = @SQLTtCLevel + 1

			if 	@SQLTtCLevel > 50
				raiserror ('Tot level was too high (ran out of variables). %d', 16, 1, @SQLTtCLevel)

			set	@SQLTtCLen = 0
		end
		if	@TempTableName is not null
		begin
			if	len(@SQLInsLine) + @SQLInsLen > @MaxVarSize
			begin
				set	@SQLInsLevel = @SQLInsLevel + 1
	
				if 	@SQLInsLevel > 30
					raiserror ('Ins level was too high (ran out of variables). %d', 16, 1, @SQLInsLevel)
	
				set	@SQLInsLen = 0
			end	
		end

        -- Keep a running count of how full our current variable is
		set	@SQLCaseLen = @SQLCaseLen + len(@SQLCaseLine)	
		set	@SQLColLen = @SQLColLen + len(@SQLColLine)	
		set	@SQLTotLen = @SQLTotLen + len(@SQLTotLine)	
		set	@SQLTtCLen = @SQLTtCLen + len(@SQLTtCLine)	
		if	@TempTableName is not null
			set	@SQLInsLen = @SQLInsLen + len(@SQLInsLine)	


		-- Add the line to the appropriate column variable
		if		@SQLCaseLevel = 1	set	@SQLCase1 	= @SQLCase1 + @SQLCaseLine
		else if		@SQLCaseLevel = 2	set	@SQLCase2 	= @SQLCase2 + @SQLCaseLine
		else if		@SQLCaseLevel = 3	set	@SQLCase3 	= @SQLCase3 + @SQLCaseLine
		else if		@SQLCaseLevel = 4	set	@SQLCase4 	= @SQLCase4 + @SQLCaseLine
		else if		@SQLCaseLevel = 5	set	@SQLCase5 	= @SQLCase5 + @SQLCaseLine
		else if		@SQLCaseLevel = 6	set	@SQLCase6 	= @SQLCase6 + @SQLCaseLine
		else if		@SQLCaseLevel = 7	set	@SQLCase7 	= @SQLCase7 + @SQLCaseLine
		else if		@SQLCaseLevel = 8	set	@SQLCase8 	= @SQLCase8 + @SQLCaseLine
		else if		@SQLCaseLevel = 9	set	@SQLCase9 	= @SQLCase9 + @SQLCaseLine
		else if		@SQLCaseLevel = 10	set	@SQLCase10 	= @SQLCase10 + @SQLCaseLine
		else if		@SQLCaseLevel = 11	set	@SQLCase11 	= @SQLCase11 + @SQLCaseLine
		else if		@SQLCaseLevel = 12	set	@SQLCase12 	= @SQLCase12 + @SQLCaseLine
		else if		@SQLCaseLevel = 13	set	@SQLCase13 	= @SQLCase13 + @SQLCaseLine
		else if		@SQLCaseLevel = 14	set	@SQLCase14 	= @SQLCase14 + @SQLCaseLine
		else if		@SQLCaseLevel = 15	set	@SQLCase15 	= @SQLCase15 + @SQLCaseLine
		else if		@SQLCaseLevel = 16	set	@SQLCase16 	= @SQLCase16 + @SQLCaseLine
		else if		@SQLCaseLevel = 17	set	@SQLCase17 	= @SQLCase17 + @SQLCaseLine
		else if		@SQLCaseLevel = 18	set	@SQLCase18 	= @SQLCase18 + @SQLCaseLine
		else if		@SQLCaseLevel = 19	set	@SQLCase19 	= @SQLCase19 + @SQLCaseLine
		else if		@SQLCaseLevel = 20	set	@SQLCase20 	= @SQLCase20 + @SQLCaseLine
		else if		@SQLCaseLevel = 21	set	@SQLCase21 	= @SQLCase21 + @SQLCaseLine
		else if		@SQLCaseLevel = 22	set	@SQLCase22 	= @SQLCase22 + @SQLCaseLine
		else if		@SQLCaseLevel = 23	set	@SQLCase23 	= @SQLCase23 + @SQLCaseLine
		else if		@SQLCaseLevel = 24	set	@SQLCase24 	= @SQLCase24 + @SQLCaseLine
		else if		@SQLCaseLevel = 25	set	@SQLCase25 	= @SQLCase25 + @SQLCaseLine
		else if		@SQLCaseLevel = 26	set	@SQLCase26 	= @SQLCase26 + @SQLCaseLine
		else if		@SQLCaseLevel = 27	set	@SQLCase27 	= @SQLCase27 + @SQLCaseLine
		else if		@SQLCaseLevel = 28	set	@SQLCase28 	= @SQLCase28 + @SQLCaseLine
		else if		@SQLCaseLevel = 29	set	@SQLCase29 	= @SQLCase29 + @SQLCaseLine
		else if		@SQLCaseLevel = 30	set	@SQLCase30 	= @SQLCase30 + @SQLCaseLine
		else if		@SQLCaseLevel = 31	set	@SQLCase31 	= @SQLCase31 + @SQLCaseLine
		else if		@SQLCaseLevel = 32	set	@SQLCase32 	= @SQLCase32 + @SQLCaseLine
		else if		@SQLCaseLevel = 33	set	@SQLCase33 	= @SQLCase33 + @SQLCaseLine
		else if		@SQLCaseLevel = 34	set	@SQLCase34 	= @SQLCase34 + @SQLCaseLine
		else if		@SQLCaseLevel = 35	set	@SQLCase35 	= @SQLCase35 + @SQLCaseLine
		else if		@SQLCaseLevel = 36	set	@SQLCase36 	= @SQLCase36 + @SQLCaseLine
		else if		@SQLCaseLevel = 37	set	@SQLCase37 	= @SQLCase37 + @SQLCaseLine
		else if		@SQLCaseLevel = 38	set	@SQLCase38 	= @SQLCase38 + @SQLCaseLine
		else if		@SQLCaseLevel = 39	set	@SQLCase39 	= @SQLCase39 + @SQLCaseLine
		else if		@SQLCaseLevel = 40	set	@SQLCase40 	= @SQLCase40 + @SQLCaseLine
		else if		@SQLCaseLevel = 41	set	@SQLCase41 	= @SQLCase41 + @SQLCaseLine
		else if		@SQLCaseLevel = 42	set	@SQLCase42 	= @SQLCase42 + @SQLCaseLine
		else if		@SQLCaseLevel = 43	set	@SQLCase43 	= @SQLCase43 + @SQLCaseLine
		else if		@SQLCaseLevel = 44	set	@SQLCase44 	= @SQLCase44 + @SQLCaseLine
		else if		@SQLCaseLevel = 45	set	@SQLCase45 	= @SQLCase45 + @SQLCaseLine
		else if		@SQLCaseLevel = 46	set	@SQLCase46 	= @SQLCase46 + @SQLCaseLine
		else if		@SQLCaseLevel = 47	set	@SQLCase47 	= @SQLCase47 + @SQLCaseLine
		else if		@SQLCaseLevel = 48	set	@SQLCase48 	= @SQLCase48 + @SQLCaseLine
		else if		@SQLCaseLevel = 49	set	@SQLCase49 	= @SQLCase49 + @SQLCaseLine
		else if		@SQLCaseLevel = 50	set	@SQLCase50 	= @SQLCase50 + @SQLCaseLine



		if		@SQLColLevel = 1	set	@SQLCol1 	= @SQLCol1 + @SQLColLine
		else if		@SQLColLevel = 2	set	@SQLCol2 	= @SQLCol2 + @SQLColLine
		else if		@SQLColLevel = 3	set	@SQLCol3 	= @SQLCol3 + @SQLColLine
		else if		@SQLColLevel = 4	set	@SQLCol4 	= @SQLCol4 + @SQLColLine
		else if		@SQLColLevel = 5	set	@SQLCol5 	= @SQLCol5 + @SQLColLine
		else if		@SQLColLevel = 6	set	@SQLCol6 	= @SQLCol6 + @SQLColLine
		else if		@SQLColLevel = 7	set	@SQLCol7 	= @SQLCol7 + @SQLColLine
		else if		@SQLColLevel = 8	set	@SQLCol8 	= @SQLCol8 + @SQLColLine
		else if		@SQLColLevel = 9	set	@SQLCol9 	= @SQLCol9 + @SQLColLine
		else if		@SQLColLevel = 10	set	@SQLCol10 	= @SQLCol10 + @SQLColLine
		else if		@SQLColLevel = 11	set	@SQLCol11 	= @SQLCol11 + @SQLColLine
		else if		@SQLColLevel = 12	set	@SQLCol12 	= @SQLCol12 + @SQLColLine
		else if		@SQLColLevel = 13	set	@SQLCol13 	= @SQLCol13 + @SQLColLine
		else if		@SQLColLevel = 14	set	@SQLCol14 	= @SQLCol14 + @SQLColLine
		else if		@SQLColLevel = 15	set	@SQLCol15 	= @SQLCol15 + @SQLColLine
		else if		@SQLColLevel = 16	set	@SQLCol16 	= @SQLCol16 + @SQLColLine
		else if		@SQLColLevel = 17	set	@SQLCol17 	= @SQLCol17 + @SQLColLine
		else if		@SQLColLevel = 18	set	@SQLCol18 	= @SQLCol18 + @SQLColLine
		else if		@SQLColLevel = 19	set	@SQLCol19 	= @SQLCol19 + @SQLColLine
		else if		@SQLColLevel = 20	set	@SQLCol20 	= @SQLCol20 + @SQLColLine
		else if		@SQLColLevel = 21	set	@SQLCol21 	= @SQLCol21 + @SQLColLine
		else if		@SQLColLevel = 22	set	@SQLCol22 	= @SQLCol22 + @SQLColLine
		else if		@SQLColLevel = 23	set	@SQLCol23 	= @SQLCol23 + @SQLColLine
		else if		@SQLColLevel = 24	set	@SQLCol24 	= @SQLCol24 + @SQLColLine
		else if		@SQLColLevel = 25	set	@SQLCol25 	= @SQLCol25 + @SQLColLine
		else if		@SQLColLevel = 26	set	@SQLCol26 	= @SQLCol26 + @SQLColLine
		else if		@SQLColLevel = 27	set	@SQLCol27 	= @SQLCol27 + @SQLColLine
		else if		@SQLColLevel = 28	set	@SQLCol28 	= @SQLCol28 + @SQLColLine
		else if		@SQLColLevel = 29	set	@SQLCol29 	= @SQLCol29 + @SQLColLine
		else if		@SQLColLevel = 30	set	@SQLCol30 	= @SQLCol30 + @SQLColLine
		else if		@SQLColLevel = 31	set	@SQLCol31 	= @SQLCol31 + @SQLColLine
		else if		@SQLColLevel = 32	set	@SQLCol32 	= @SQLCol32 + @SQLColLine
		else if		@SQLColLevel = 33	set	@SQLCol33 	= @SQLCol33 + @SQLColLine
		else if		@SQLColLevel = 34	set	@SQLCol34 	= @SQLCol34 + @SQLColLine
		else if		@SQLColLevel = 35	set	@SQLCol35 	= @SQLCol35 + @SQLColLine
		else if		@SQLColLevel = 36	set	@SQLCol36 	= @SQLCol36 + @SQLColLine
		else if		@SQLColLevel = 37	set	@SQLCol37 	= @SQLCol37 + @SQLColLine
		else if		@SQLColLevel = 38	set	@SQLCol38 	= @SQLCol38 + @SQLColLine
		else if		@SQLColLevel = 39	set	@SQLCol39 	= @SQLCol39 + @SQLColLine
		else if		@SQLColLevel = 40	set	@SQLCol40 	= @SQLCol40 + @SQLColLine
		else if		@SQLColLevel = 41	set	@SQLCol41 	= @SQLCol41 + @SQLColLine
		else if		@SQLColLevel = 42	set	@SQLCol42 	= @SQLCol42 + @SQLColLine
		else if		@SQLColLevel = 43	set	@SQLCol43 	= @SQLCol43 + @SQLColLine
		else if		@SQLColLevel = 44	set	@SQLCol44 	= @SQLCol44 + @SQLColLine
		else if		@SQLColLevel = 45	set	@SQLCol45 	= @SQLCol45 + @SQLColLine
		else if		@SQLColLevel = 46	set	@SQLCol46 	= @SQLCol46 + @SQLColLine
		else if		@SQLColLevel = 47	set	@SQLCol47 	= @SQLCol47 + @SQLColLine
		else if		@SQLColLevel = 48	set	@SQLCol48 	= @SQLCol48 + @SQLColLine
		else if		@SQLColLevel = 49	set	@SQLCol49 	= @SQLCol49 + @SQLColLine
		else if		@SQLColLevel = 50	set	@SQLCol50 	= @SQLCol50 + @SQLColLine

        if      @RowTotals is not null
        begin
		    if		@SQLTotLevel = 1	set	@SQLTot1 	= @SQLTot1 + @SQLTotLine
		    else if		@SQLTotLevel = 2	set	@SQLTot2 	= @SQLTot2 + @SQLTotLine
		    else if		@SQLTotLevel = 3	set	@SQLTot3 	= @SQLTot3 + @SQLTotLine
		    else if		@SQLTotLevel = 4	set	@SQLTot4 	= @SQLTot4 + @SQLTotLine
		    else if		@SQLTotLevel = 5	set	@SQLTot5 	= @SQLTot5 + @SQLTotLine
		    else if		@SQLTotLevel = 6	set	@SQLTot6 	= @SQLTot6 + @SQLTotLine
		    else if		@SQLTotLevel = 7	set	@SQLTot7 	= @SQLTot7 + @SQLTotLine
		    else if		@SQLTotLevel = 8	set	@SQLTot8 	= @SQLTot8 + @SQLTotLine
		    else if		@SQLTotLevel = 9	set	@SQLTot9 	= @SQLTot9 + @SQLTotLine
		    else if		@SQLTotLevel = 10	set	@SQLTot10 	= @SQLTot10 + @SQLTotLine
		    else if		@SQLTotLevel = 11	set	@SQLTot11 	= @SQLTot11 + @SQLTotLine
		    else if		@SQLTotLevel = 12	set	@SQLTot12 	= @SQLTot12 + @SQLTotLine
		    else if		@SQLTotLevel = 13	set	@SQLTot13 	= @SQLTot13 + @SQLTotLine
		    else if		@SQLTotLevel = 14	set	@SQLTot14 	= @SQLTot14 + @SQLTotLine
		    else if		@SQLTotLevel = 15	set	@SQLTot15 	= @SQLTot15 + @SQLTotLine
		    else if		@SQLTotLevel = 16	set	@SQLTot16 	= @SQLTot16 + @SQLTotLine
		    else if		@SQLTotLevel = 17	set	@SQLTot17 	= @SQLTot17 + @SQLTotLine
		    else if		@SQLTotLevel = 18	set	@SQLTot18 	= @SQLTot18 + @SQLTotLine
		    else if		@SQLTotLevel = 19	set	@SQLTot19 	= @SQLTot19 + @SQLTotLine
		    else if		@SQLTotLevel = 20	set	@SQLTot20 	= @SQLTot20 + @SQLTotLine
		    else if		@SQLTotLevel = 21	set	@SQLTot21 	= @SQLTot21 + @SQLTotLine
		    else if		@SQLTotLevel = 22	set	@SQLTot22 	= @SQLTot22 + @SQLTotLine
		    else if		@SQLTotLevel = 23	set	@SQLTot23 	= @SQLTot23 + @SQLTotLine
		    else if		@SQLTotLevel = 24	set	@SQLTot24 	= @SQLTot24 + @SQLTotLine
		    else if		@SQLTotLevel = 25	set	@SQLTot25 	= @SQLTot25 + @SQLTotLine
		    else if		@SQLTotLevel = 26	set	@SQLTot26 	= @SQLTot26 + @SQLTotLine
		    else if		@SQLTotLevel = 27	set	@SQLTot27 	= @SQLTot27 + @SQLTotLine
		    else if		@SQLTotLevel = 28	set	@SQLTot28 	= @SQLTot28 + @SQLTotLine
		    else if		@SQLTotLevel = 29	set	@SQLTot29 	= @SQLTot29 + @SQLTotLine
		    else if		@SQLTotLevel = 30	set	@SQLTot30 	= @SQLTot30 + @SQLTotLine
		    else if		@SQLTotLevel = 31	set	@SQLTot31 	= @SQLTot31 + @SQLTotLine
		    else if		@SQLTotLevel = 32	set	@SQLTot32 	= @SQLTot32 + @SQLTotLine
		    else if		@SQLTotLevel = 33	set	@SQLTot33 	= @SQLTot33 + @SQLTotLine
		    else if		@SQLTotLevel = 34	set	@SQLTot34 	= @SQLTot34 + @SQLTotLine
		    else if		@SQLTotLevel = 35	set	@SQLTot35 	= @SQLTot35 + @SQLTotLine
		    else if		@SQLTotLevel = 36	set	@SQLTot36 	= @SQLTot36 + @SQLTotLine
		    else if		@SQLTotLevel = 37	set	@SQLTot37 	= @SQLTot37 + @SQLTotLine
		    else if		@SQLTotLevel = 38	set	@SQLTot38 	= @SQLTot38 + @SQLTotLine
		    else if		@SQLTotLevel = 39	set	@SQLTot39 	= @SQLTot39 + @SQLTotLine
		    else if		@SQLTotLevel = 40	set	@SQLTot40 	= @SQLTot40 + @SQLTotLine
		    else if		@SQLTotLevel = 41	set	@SQLTot41 	= @SQLTot41 + @SQLTotLine
		    else if		@SQLTotLevel = 42	set	@SQLTot42 	= @SQLTot42 + @SQLTotLine
		    else if		@SQLTotLevel = 43	set	@SQLTot43 	= @SQLTot43 + @SQLTotLine
		    else if		@SQLTotLevel = 44	set	@SQLTot44 	= @SQLTot44 + @SQLTotLine
		    else if		@SQLTotLevel = 45	set	@SQLTot45 	= @SQLTot45 + @SQLTotLine
		    else if		@SQLTotLevel = 46	set	@SQLTot46 	= @SQLTot46 + @SQLTotLine
		    else if		@SQLTotLevel = 47	set	@SQLTot47 	= @SQLTot47 + @SQLTotLine
		    else if		@SQLTotLevel = 48	set	@SQLTot48 	= @SQLTot48 + @SQLTotLine
		    else if		@SQLTotLevel = 49	set	@SQLTot49 	= @SQLTot49 + @SQLTotLine
		    else if		@SQLTotLevel = 50	set	@SQLTot50 	= @SQLTot50 + @SQLTotLine
        end

		if		@TempTableName is not null
		begin
			if		@SQLInsLevel = 1	set	@SQLIns1 	= @SQLIns1 + @SQLInsLine
			else if		@SQLInsLevel = 2	set	@SQLIns2 	= @SQLIns2 + @SQLInsLine
			else if		@SQLInsLevel = 3	set	@SQLIns3 	= @SQLIns3 + @SQLInsLine
			else if		@SQLInsLevel = 4	set	@SQLIns4 	= @SQLIns4 + @SQLInsLine
			else if		@SQLInsLevel = 5	set	@SQLIns5 	= @SQLIns5 + @SQLInsLine
			else if		@SQLInsLevel = 6	set	@SQLIns6 	= @SQLIns6 + @SQLInsLine
			else if		@SQLInsLevel = 7	set	@SQLIns7 	= @SQLIns7 + @SQLInsLine
			else if		@SQLInsLevel = 8	set	@SQLIns8 	= @SQLIns8 + @SQLInsLine
			else if		@SQLInsLevel = 9	set	@SQLIns9 	= @SQLIns9 + @SQLInsLine
			else if		@SQLInsLevel = 10	set	@SQLIns10 	= @SQLIns10 + @SQLInsLine
			else if		@SQLInsLevel = 11	set	@SQLIns11 	= @SQLIns11 + @SQLInsLine
			else if		@SQLInsLevel = 12	set	@SQLIns12 	= @SQLIns12 + @SQLInsLine
			else if		@SQLInsLevel = 13	set	@SQLIns13 	= @SQLIns13 + @SQLInsLine
			else if		@SQLInsLevel = 14	set	@SQLIns14 	= @SQLIns14 + @SQLInsLine
			else if		@SQLInsLevel = 15	set	@SQLIns15 	= @SQLIns15 + @SQLInsLine
			else if		@SQLInsLevel = 16	set	@SQLIns16 	= @SQLIns16 + @SQLInsLine
			else if		@SQLInsLevel = 17	set	@SQLIns17 	= @SQLIns17 + @SQLInsLine
			else if		@SQLInsLevel = 18	set	@SQLIns18 	= @SQLIns18 + @SQLInsLine
			else if		@SQLInsLevel = 19	set	@SQLIns19 	= @SQLIns19 + @SQLInsLine
			else if		@SQLInsLevel = 20	set	@SQLIns20 	= @SQLIns20 + @SQLInsLine
			else if		@SQLInsLevel = 21	set	@SQLIns21 	= @SQLIns21 + @SQLInsLine
			else if		@SQLInsLevel = 22	set	@SQLIns22 	= @SQLIns22 + @SQLInsLine
			else if		@SQLInsLevel = 23	set	@SQLIns23 	= @SQLIns23 + @SQLInsLine
			else if		@SQLInsLevel = 24	set	@SQLIns24 	= @SQLIns24 + @SQLInsLine
			else if		@SQLInsLevel = 25	set	@SQLIns25 	= @SQLIns25 + @SQLInsLine
			else if		@SQLInsLevel = 26	set	@SQLIns26 	= @SQLIns26 + @SQLInsLine
			else if		@SQLInsLevel = 27	set	@SQLIns27 	= @SQLIns27 + @SQLInsLine
			else if		@SQLInsLevel = 28	set	@SQLIns28 	= @SQLIns28 + @SQLInsLine
			else if		@SQLInsLevel = 29	set	@SQLIns29 	= @SQLIns29 + @SQLInsLine
			else if		@SQLInsLevel = 30	set	@SQLIns30 	= @SQLIns30 + @SQLInsLine
		end

		if		@ColTotals is not null
		begin
			if		@SQLTtCLevel = 1	set	@SQLTtC1 	= @SQLTtC1 + @SQLTtCLine
			else if		@SQLTtCLevel = 2	set	@SQLTtC2 	= @SQLTtC2 + @SQLTtCLine
			else if		@SQLTtCLevel = 3	set	@SQLTtC3 	= @SQLTtC3 + @SQLTtCLine
			else if		@SQLTtCLevel = 4	set	@SQLTtC4 	= @SQLTtC4 + @SQLTtCLine
			else if		@SQLTtCLevel = 5	set	@SQLTtC5 	= @SQLTtC5 + @SQLTtCLine
			else if		@SQLTtCLevel = 6	set	@SQLTtC6 	= @SQLTtC6 + @SQLTtCLine
			else if		@SQLTtCLevel = 7	set	@SQLTtC7 	= @SQLTtC7 + @SQLTtCLine
			else if		@SQLTtCLevel = 8	set	@SQLTtC8 	= @SQLTtC8 + @SQLTtCLine
			else if		@SQLTtCLevel = 9	set	@SQLTtC9 	= @SQLTtC9 + @SQLTtCLine
			else if		@SQLTtCLevel = 10	set	@SQLTtC10 	= @SQLTtC10 + @SQLTtCLine
			else if		@SQLTtCLevel = 11	set	@SQLTtC11 	= @SQLTtC11 + @SQLTtCLine
			else if		@SQLTtCLevel = 12	set	@SQLTtC12 	= @SQLTtC12 + @SQLTtCLine
			else if		@SQLTtCLevel = 13	set	@SQLTtC13 	= @SQLTtC13 + @SQLTtCLine
			else if		@SQLTtCLevel = 14	set	@SQLTtC14 	= @SQLTtC14 + @SQLTtCLine
			else if		@SQLTtCLevel = 15	set	@SQLTtC15 	= @SQLTtC15 + @SQLTtCLine
			else if		@SQLTtCLevel = 16	set	@SQLTtC16 	= @SQLTtC16 + @SQLTtCLine
			else if		@SQLTtCLevel = 17	set	@SQLTtC17 	= @SQLTtC17 + @SQLTtCLine
			else if		@SQLTtCLevel = 18	set	@SQLTtC18 	= @SQLTtC18 + @SQLTtCLine
			else if		@SQLTtCLevel = 19	set	@SQLTtC19 	= @SQLTtC19 + @SQLTtCLine
			else if		@SQLTtCLevel = 20	set	@SQLTtC20 	= @SQLTtC20 + @SQLTtCLine
			else if		@SQLTtCLevel = 21	set	@SQLTtC21 	= @SQLTtC21 + @SQLTtCLine
			else if		@SQLTtCLevel = 22	set	@SQLTtC22 	= @SQLTtC22 + @SQLTtCLine
			else if		@SQLTtCLevel = 23	set	@SQLTtC23 	= @SQLTtC23 + @SQLTtCLine
			else if		@SQLTtCLevel = 24	set	@SQLTtC24 	= @SQLTtC24 + @SQLTtCLine
			else if		@SQLTtCLevel = 25	set	@SQLTtC25 	= @SQLTtC25 + @SQLTtCLine
			else if		@SQLTtCLevel = 26	set	@SQLTtC26 	= @SQLTtC26 + @SQLTtCLine
			else if		@SQLTtCLevel = 27	set	@SQLTtC27 	= @SQLTtC27 + @SQLTtCLine
			else if		@SQLTtCLevel = 28	set	@SQLTtC28 	= @SQLTtC28 + @SQLTtCLine
			else if		@SQLTtCLevel = 29	set	@SQLTtC29 	= @SQLTtC29 + @SQLTtCLine
			else if		@SQLTtCLevel = 30	set	@SQLTtC30 	= @SQLTtC30 + @SQLTtCLine
		end

		set	@ColNo = @ColNo + 1

	end

	fetch next
	from 		curColCursor 
	into		@ColID, @ColName, @ColTotal

end

close		curColCursor
deallocate	curColCursor

-- Don't forget to debug print our row total column...
if  @RowTotals is not null and
    @TempTableName is not null
begin
    if		@Debug		= 1
        print	    'alter table ' + @TempTableName + ' add [' + @RowTotals + '] ' + @CalcFieldType
    exec		('alter table ' + @TempTableName + ' add [' + @RowTotals + '] ' + @CalcFieldType)
end


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Run the cross-tab

-- Right, all the hard work has now been done. We just need to run the SQL statements 
-- that we've built up. We have eight different scenarions (a combination of with or
-- without column totals, with or without row totals, and with or without writing to
-- a temp table). The query execution for each of these scenarios differs slightly. 
-- I probably could have joined some of these scenarios, but the decided against it
-- for both performance and maintainability reasons. If does look a bit full though
-- with all the debug code mixed in with it.



if      @ColTotals is not null
begin
    if      @RowTotals is not null
    begin
        if		@TempTableName is not null
        begin   -- Row totals, col totals, temp table
        if      @Debug = 1 
        begin 
            print   '--1 Row totals, col totals, temp table'
            print 'insert into ' + @TempTableName + '(' + @StrippedRowFieldNames 
		    print @SQLIns1  print @SQLIns2  print @SQLIns3  print @SQLIns4  print @SQLIns5  print @SQLIns6  print @SQLIns7 
            print @SQLIns8  print @SQLIns9  print @SQLIns10 print @SQLIns11 print @SQLIns12 print @SQLIns13 print @SQLIns14 
            print @SQLIns15 print @SQLIns16 print @SQLIns17 print @SQLIns18 print @SQLIns19 print @SQLIns20 print @SQLIns21  
            print @SQLIns22 print @SQLIns23 print @SQLIns24 print @SQLIns25 print @SQLIns26 print @SQLIns27 print @SQLIns28 
            print @SQLIns29 print @SQLIns30 print ',[' + @RowTotals + '])'  print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print   @NewLine + ', '  
		    print @SQLTot1  print @SQLTot2  print @SQLTot3  print @SQLTot4  print @SQLTot5  print @SQLTot6  print @SQLTot7 
            print @SQLTot8  print @SQLTot9  print @SQLTot10 print @SQLTot11 print @SQLTot12 print @SQLTot13 print @SQLTot14 
            print @SQLTot15 print @SQLTot16 print @SQLTot17 print @SQLTot18 print @SQLTot19 print @SQLTot20 print @SQLTot21  
            print @SQLTot22 print @SQLTot23 print @SQLTot24 print @SQLTot25 print @SQLTot26 print @SQLTot27 print @SQLTot28 
            print @SQLTot29 print @SQLTot30 print @SQLTot31 print @SQLTot32 print @SQLTot33 print @SQLTot34 print @SQLTot35 
            print @SQLTot36 print @SQLTot37 print @SQLTot38 print @SQLTot39 print @SQLTot40 print @SQLTot41 print @SQLTot42 
            print @SQLTot43 print @SQLTot44 print @SQLTot45 print @SQLTot46 print @SQLTot47 print @SQLTot48 print @SQLTot49 
            print @SQLTot50 print   ' [' + @RowTotals + ']' + @NewLine 	    print  @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine
            print 'union all ' + @Newline + 'select ' + @ColTotals  
	        print @SQLTtC1  print @SQLTtC2  print @SQLTtC3  print @SQLTtC4  print @SQLTtC5  print @SQLTtC6  print @SQLTtC7  
            print @SQLTtC8  print @SQLTtC9  print @SQLTtC10 print @SQLTtC11 print @SQLTtC12 print @SQLTtC13 print @SQLTtC14 
            print @SQLTtC15 print @SQLTtC16 print @SQLTtC17 print @SQLTtC18 print @SQLTtC19 print @SQLTtC20 print @SQLTtC21 
            print @SQLTtC22 print @SQLTtC23 print @SQLTtC24 print @SQLTtC25 print @SQLTtC26 print @SQLTtC27 print @SQLTtC28 
            print @SQLTtC29 print @SQLTtC30 print ', ' + @GrandTotal        print @AddOrder + @NewLine
        end

        exec	('insert into ' + @TempTableName + '(' + @StrippedRowFieldNames +
		        @SQLIns1  + @SQLIns2 + @SQLIns3 + @SQLIns4 + @SQLIns5 + @SQLIns6 + @SQLIns7 + @SQLIns8 + @SQLIns9 + @SQLIns10 +
		        @SQLIns11  + @SQLIns12 + @SQLIns13 + @SQLIns14 + @SQLIns15 + @SQLIns16 + @SQLIns17 + @SQLIns18 + @SQLIns19 + @SQLIns20 +
		        @SQLIns21  + @SQLIns22 + @SQLIns23 + @SQLIns24 + @SQLIns25 + @SQLIns26 + @SQLIns27 + @SQLIns28 + @SQLIns29 + @SQLIns30 + 
                ',[' + @RowTotals + '])' + 
		        'select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ', ' + 
		        @SQLTot1  + @SQLTot2 + @SQLTot3 + @SQLTot4 + @SQLTot5 + @SQLTot6 + @SQLTot7 + @SQLTot8 + @SQLTot9 + @SQLTot10 +
		        @SQLTot11  + @SQLTot12 + @SQLTot13 + @SQLTot14 + @SQLTot15 + @SQLTot16 + @SQLTot17 + @SQLTot18 + @SQLTot19 + @SQLTot20 +
		        @SQLTot21  + @SQLTot22 + @SQLTot23 + @SQLTot24 + @SQLTot25 + @SQLTot26 + @SQLTot27 + @SQLTot28 + @SQLTot29 + @SQLTot30 +
		        @SQLTot31  + @SQLTot32 + @SQLTot33 + @SQLTot34 + @SQLTot35 + @SQLTot36 + @SQLTot37 + @SQLTot38 + @SQLTot39 + @SQLTot40 +
		        @SQLTot41  + @SQLTot42 + @SQLTot43 + @SQLTot44 + @SQLTot45 + @SQLTot46 + @SQLTot47 + @SQLTot48 + @SQLTot49 + @SQLTot50 +
                ' [' + @RowTotals + ']' + @NewLine + 
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine +
                ' union all ' + @Newline + 'select ' + @ColTotals + 
		        @SQLTtC1  + @SQLTtC2  + @SQLTtC3  + @SQLTtC4  + @SQLTtC5  + @SQLTtC6  + @SQLTtC7  + @SQLTtC8  + @SQLTtC9  + @SQLTtC10 + 
                @SQLTtC11 + @SQLTtC12 + @SQLTtC13 + @SQLTtC14 + @SQLTtC15 + @SQLTtC16 + @SQLTtC17 + @SQLTtC18 + @SQLTtC19 + @SQLTtC20 + 
		        @SQLTtC21 + @SQLTtC22 + @SQLTtC23 + @SQLTtC24 + @SQLTtC25 + @SQLTtC26 + @SQLTtC27 + @SQLTtC28 + @SQLTtC29 + @SQLTtC30 +
		        ', ' + @GrandTotal + @AddOrder
                )
        end
        else
        begin   -- Row totals, col totals, no temp table
        if      @Debug = 1 
        begin
            print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print   @NewLine + ', '  
		    print @SQLTot1  print @SQLTot2  print @SQLTot3  print @SQLTot4  print @SQLTot5  print @SQLTot6  print @SQLTot7 
            print @SQLTot8  print @SQLTot9  print @SQLTot10 print @SQLTot11 print @SQLTot12 print @SQLTot13 print @SQLTot14 
            print @SQLTot15 print @SQLTot16 print @SQLTot17 print @SQLTot18 print @SQLTot19 print @SQLTot20 print @SQLTot21  
            print @SQLTot22 print @SQLTot23 print @SQLTot24 print @SQLTot25 print @SQLTot26 print @SQLTot27 print @SQLTot28 
            print @SQLTot29 print @SQLTot30 print @SQLTot31 print @SQLTot32 print @SQLTot33 print @SQLTot34 print @SQLTot35 
            print @SQLTot36 print @SQLTot37 print @SQLTot38 print @SQLTot39 print @SQLTot40 print @SQLTot41 print @SQLTot42 
            print @SQLTot43 print @SQLTot44 print @SQLTot45 print @SQLTot46 print @SQLTot47 print @SQLTot48 print @SQLTot49 
            print @SQLTot50 print   ' [' + @RowTotals + ']' + @NewLine 	    print  @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine
            print 'union all ' + @Newline + 'select ' + @ColTotals  
	        print @SQLTtC1  print @SQLTtC2  print @SQLTtC3  print @SQLTtC4  print @SQLTtC5  print @SQLTtC6  print @SQLTtC7  
            print @SQLTtC8  print @SQLTtC9  print @SQLTtC10 print @SQLTtC11 print @SQLTtC12 print @SQLTtC13 print @SQLTtC14 
            print @SQLTtC15 print @SQLTtC16 print @SQLTtC17 print @SQLTtC18 print @SQLTtC19 print @SQLTtC20 print @SQLTtC21 
            print @SQLTtC22 print @SQLTtC23 print @SQLTtC24 print @SQLTtC25 print @SQLTtC26 print @SQLTtC27 print @SQLTtC28 
            print @SQLTtC29 print @SQLTtC30 print ', ' + @GrandTotal        print @AddOrder + @NewLine
        end

        exec	('select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ', ' + 
		        @SQLTot1  + @SQLTot2 + @SQLTot3 + @SQLTot4 + @SQLTot5 + @SQLTot6 + @SQLTot7 + @SQLTot8 + @SQLTot9 + @SQLTot10 +
		        @SQLTot11  + @SQLTot12 + @SQLTot13 + @SQLTot14 + @SQLTot15 + @SQLTot16 + @SQLTot17 + @SQLTot18 + @SQLTot19 + @SQLTot20 +
		        @SQLTot21  + @SQLTot22 + @SQLTot23 + @SQLTot24 + @SQLTot25 + @SQLTot26 + @SQLTot27 + @SQLTot28 + @SQLTot29 + @SQLTot30 +
		        @SQLTot31  + @SQLTot32 + @SQLTot33 + @SQLTot34 + @SQLTot35 + @SQLTot36 + @SQLTot37 + @SQLTot38 + @SQLTot39 + @SQLTot40 +
		        @SQLTot41  + @SQLTot42 + @SQLTot43 + @SQLTot44 + @SQLTot45 + @SQLTot46 + @SQLTot47 + @SQLTot48 + @SQLTot49 + @SQLTot50 +
                ' [' + @RowTotals + ']' + @NewLine +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + 
                ' union all ' + @Newline + 'select ' + @ColTotals + 
		        @SQLTtC1  + @SQLTtC2  + @SQLTtC3  + @SQLTtC4  + @SQLTtC5  + @SQLTtC6  + @SQLTtC7  + @SQLTtC8  + @SQLTtC9  + @SQLTtC10 + 
                @SQLTtC11 + @SQLTtC12 + @SQLTtC13 + @SQLTtC14 + @SQLTtC15 + @SQLTtC16 + @SQLTtC17 + @SQLTtC18 + @SQLTtC19 + @SQLTtC20 + 
		        @SQLTtC21 + @SQLTtC22 + @SQLTtC23 + @SQLTtC24 + @SQLTtC25 + @SQLTtC26 + @SQLTtC27 + @SQLTtC28 + @SQLTtC29 + @SQLTtC30 +                
                ', ' + @GrandTotal + @AddOrder
                )
        end
    end
    else
    begin
        if		@TempTableName is not null
        begin   -- No row totals, col totals, temp table
        if      @Debug = 1 
        begin   
            print   '--3 No row totals, col totals, temp table'
            print 'insert into ' + @TempTableName + '(' + @StrippedRowFieldNames 
		    print @SQLIns1  print @SQLIns2  print @SQLIns3  print @SQLIns4  print @SQLIns5  print @SQLIns6  print @SQLIns7 
            print @SQLIns8  print @SQLIns9  print @SQLIns10 print @SQLIns11 print @SQLIns12 print @SQLIns13 print @SQLIns14 
            print @SQLIns15 print @SQLIns16 print @SQLIns17 print @SQLIns18 print @SQLIns19 print @SQLIns20 print @SQLIns21  
            print @SQLIns22 print @SQLIns23 print @SQLIns24 print @SQLIns25 print @SQLIns26 print @SQLIns27 print @SQLIns28 
            print @SQLIns29 print @SQLIns30 print ') select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print ' from (select ' print @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine
            print 'union all ' + @Newline + 'select ' + @ColTotals  
	        print @SQLTtC1  print @SQLTtC2  print @SQLTtC3  print @SQLTtC4  print @SQLTtC5  print @SQLTtC6  print @SQLTtC7  
            print @SQLTtC8  print @SQLTtC9  print @SQLTtC10 print @SQLTtC11 print @SQLTtC12 print @SQLTtC13 print @SQLTtC14 
            print @SQLTtC15 print @SQLTtC16 print @SQLTtC17 print @SQLTtC18 print @SQLTtC19 print @SQLTtC20 print @SQLTtC21 
            print @SQLTtC22 print @SQLTtC23 print @SQLTtC24 print @SQLTtC25 print @SQLTtC26 print @SQLTtC27 print @SQLTtC28 
            print @SQLTtC29 print @SQLTtC30 print @AddOrder + @NewLine
        end		        

        exec	('insert into ' + @TempTableName + '(' + @StrippedRowFieldNames +
		        @SQLIns1  + @SQLIns2 + @SQLIns3 + @SQLIns4 + @SQLIns5 + @SQLIns6 + @SQLIns7 + @SQLIns8 + @SQLIns9 + @SQLIns10 +
		        @SQLIns11  + @SQLIns12 + @SQLIns13 + @SQLIns14 + @SQLIns15 + @SQLIns16 + @SQLIns17 + @SQLIns18 + @SQLIns19 + @SQLIns20 +
		        @SQLIns21  + @SQLIns22 + @SQLIns23 + @SQLIns24 + @SQLIns25 + @SQLIns26 + @SQLIns27 + @SQLIns28 + @SQLIns29 + @SQLIns30 + ')' + 
		        'select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine +
                ' union all ' + @Newline + 'select ' + @ColTotals + 
		        @SQLTtC1  + @SQLTtC2  + @SQLTtC3  + @SQLTtC4  + @SQLTtC5  + @SQLTtC6  + @SQLTtC7  + @SQLTtC8  + @SQLTtC9  + @SQLTtC10 + 
                @SQLTtC11 + @SQLTtC12 + @SQLTtC13 + @SQLTtC14 + @SQLTtC15 + @SQLTtC16 + @SQLTtC17 + @SQLTtC18 + @SQLTtC19 + @SQLTtC20 + 
		        @SQLTtC21 + @SQLTtC22 + @SQLTtC23 + @SQLTtC24 + @SQLTtC25 + @SQLTtC26 + @SQLTtC27 + @SQLTtC28 + @SQLTtC29 + @SQLTtC30  + 
                @AddOrder
		        )
        end
        else
        begin   -- No row totals, col totals, no temp table
        if      @Debug = 1
        begin    
            print   '--4 No row totals, col totals, no temp table'        
            print 'select * from (select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print  @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine
            print 'union all ' + @Newline + 'select ' + @ColTotals  
	        print @SQLTtC1  print @SQLTtC2  print @SQLTtC3  print @SQLTtC4  print @SQLTtC5  print @SQLTtC6  print @SQLTtC7  
            print @SQLTtC8  print @SQLTtC9  print @SQLTtC10 print @SQLTtC11 print @SQLTtC12 print @SQLTtC13 print @SQLTtC14 
            print @SQLTtC15 print @SQLTtC16 print @SQLTtC17 print @SQLTtC18 print @SQLTtC19 print @SQLTtC20 print @SQLTtC21 
            print @SQLTtC22 print @SQLTtC23 print @SQLTtC24 print @SQLTtC25 print @SQLTtC26 print @SQLTtC27 print @SQLTtC28 
            print @SQLTtC29 print @SQLTtC30 print ' ) X ' + @AddOrder + @NewLine          
        end		        
        
        exec	('select * from (select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + 
                ' union all ' + @Newline + 'select ' + @ColTotals + 
		        @SQLTtC1  + @SQLTtC2  + @SQLTtC3  + @SQLTtC4  + @SQLTtC5  + @SQLTtC6  + @SQLTtC7  + @SQLTtC8  + @SQLTtC9  + @SQLTtC10 + 
                @SQLTtC11 + @SQLTtC12 + @SQLTtC13 + @SQLTtC14 + @SQLTtC15 + @SQLTtC16 + @SQLTtC17 + @SQLTtC18 + @SQLTtC19 + @SQLTtC20 + 
		        @SQLTtC21 + @SQLTtC22 + @SQLTtC23 + @SQLTtC24 + @SQLTtC25 + @SQLTtC26 + @SQLTtC27 + @SQLTtC28 + @SQLTtC29 + @SQLTtC30 +
                ' ) X ' + @AddOrder + @NewLine 
                )                    
        end
    end
end
else
begin
    if      @RowTotals is not null
    begin
        if		@TempTableName is not null
        begin   -- Row totals, no col totals, temp table
        if      @Debug = 1 
        begin
            print   '--5 Row totals, no col totals, temp table'
            print 'insert into ' + @TempTableName + '(' + @StrippedRowFieldNames 
		    print @SQLIns1  print @SQLIns2  print @SQLIns3  print @SQLIns4  print @SQLIns5  print @SQLIns6  print @SQLIns7 
            print @SQLIns8  print @SQLIns9  print @SQLIns10 print @SQLIns11 print @SQLIns12 print @SQLIns13 print @SQLIns14 
            print @SQLIns15 print @SQLIns16 print @SQLIns17 print @SQLIns18 print @SQLIns19 print @SQLIns20 print @SQLIns21  
            print @SQLIns22 print @SQLIns23 print @SQLIns24 print @SQLIns25 print @SQLIns26 print @SQLIns27 print @SQLIns28 
            print @SQLIns29 print @SQLIns30 print ', [' + @RowTotals + '])' print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print   @NewLine + ', '  
		    print @SQLTot1  print @SQLTot2  print @SQLTot3  print @SQLTot4  print @SQLTot5  print @SQLTot6  print @SQLTot7 
            print @SQLTot8  print @SQLTot9  print @SQLTot10 print @SQLTot11 print @SQLTot12 print @SQLTot13 print @SQLTot14 
            print @SQLTot15 print @SQLTot16 print @SQLTot17 print @SQLTot18 print @SQLTot19 print @SQLTot20 print @SQLTot21  
            print @SQLTot22 print @SQLTot23 print @SQLTot24 print @SQLTot25 print @SQLTot26 print @SQLTot27 print @SQLTot28 
            print @SQLTot29 print @SQLTot30 print @SQLTot31 print @SQLTot32 print @SQLTot33 print @SQLTot34 print @SQLTot35 
            print @SQLTot36 print @SQLTot37 print @SQLTot38 print @SQLTot39 print @SQLTot40 print @SQLTot41 print @SQLTot42 
            print @SQLTot43 print @SQLTot44 print @SQLTot45 print @SQLTot46 print @SQLTot47 print @SQLTot48 print @SQLTot49 
            print @SQLTot50 print   ' [' + @RowTotals + ']' + @NewLine 	    print  @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
        end		        

        exec	('insert into ' + @TempTableName + '(' + @StrippedRowFieldNames +
		        @SQLIns1  + @SQLIns2 + @SQLIns3 + @SQLIns4 + @SQLIns5 + @SQLIns6 + @SQLIns7 + @SQLIns8 + @SQLIns9 + @SQLIns10 +
		        @SQLIns11  + @SQLIns12 + @SQLIns13 + @SQLIns14 + @SQLIns15 + @SQLIns16 + @SQLIns17 + @SQLIns18 + @SQLIns19 + @SQLIns20 +
		        @SQLIns21  + @SQLIns22 + @SQLIns23 + @SQLIns24 + @SQLIns25 + @SQLIns26 + @SQLIns27 + @SQLIns28 + @SQLIns29 + @SQLIns30 + 
                ', [' + @RowTotals + '])' + 
		        'select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ', ' + 
		        @SQLTot1  + @SQLTot2 + @SQLTot3 + @SQLTot4 + @SQLTot5 + @SQLTot6 + @SQLTot7 + @SQLTot8 + @SQLTot9 + @SQLTot10 +
		        @SQLTot11  + @SQLTot12 + @SQLTot13 + @SQLTot14 + @SQLTot15 + @SQLTot16 + @SQLTot17 + @SQLTot18 + @SQLTot19 + @SQLTot20 +
		        @SQLTot21  + @SQLTot22 + @SQLTot23 + @SQLTot24 + @SQLTot25 + @SQLTot26 + @SQLTot27 + @SQLTot28 + @SQLTot29 + @SQLTot30 +
		        @SQLTot31  + @SQLTot32 + @SQLTot33 + @SQLTot34 + @SQLTot35 + @SQLTot36 + @SQLTot37 + @SQLTot38 + @SQLTot39 + @SQLTot40 +
		        @SQLTot41  + @SQLTot42 + @SQLTot43 + @SQLTot44 + @SQLTot45 + @SQLTot46 + @SQLTot47 + @SQLTot48 + @SQLTot49 + @SQLTot50 +
                ' [' + @RowTotals + ']' + @NewLine + 
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
		        )
        end
        else
        begin   -- Row totals, no col totals, no temp table
        if      @Debug = 1 
        begin
            print   '--6 Row totals, no col totals, no temp table'
            print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print   @NewLine + ', '  
		    print @SQLTot1  print @SQLTot2  print @SQLTot3  print @SQLTot4  print @SQLTot5  print @SQLTot6  print @SQLTot7 
            print @SQLTot8  print @SQLTot9  print @SQLTot10 print @SQLTot11 print @SQLTot12 print @SQLTot13 print @SQLTot14 
            print @SQLTot15 print @SQLTot16 print @SQLTot17 print @SQLTot18 print @SQLTot19 print @SQLTot20 print @SQLTot21  
            print @SQLTot22 print @SQLTot23 print @SQLTot24 print @SQLTot25 print @SQLTot26 print @SQLTot27 print @SQLTot28 
            print @SQLTot29 print @SQLTot30 print @SQLTot31 print @SQLTot32 print @SQLTot33 print @SQLTot34 print @SQLTot35 
            print @SQLTot36 print @SQLTot37 print @SQLTot38 print @SQLTot39 print @SQLTot40 print @SQLTot41 print @SQLTot42 
            print @SQLTot43 print @SQLTot44 print @SQLTot45 print @SQLTot46 print @SQLTot47 print @SQLTot48 print @SQLTot49 
            print @SQLTot50 print   ' [' + @RowTotals + ']' + @NewLine 	    print  @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
        end		        

        exec	('select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ', ' + 
		        @SQLTot1  + @SQLTot2 + @SQLTot3 + @SQLTot4 + @SQLTot5 + @SQLTot6 + @SQLTot7 + @SQLTot8 + @SQLTot9 + @SQLTot10 +
		        @SQLTot11  + @SQLTot12 + @SQLTot13 + @SQLTot14 + @SQLTot15 + @SQLTot16 + @SQLTot17 + @SQLTot18 + @SQLTot19 + @SQLTot20 +
		        @SQLTot21  + @SQLTot22 + @SQLTot23 + @SQLTot24 + @SQLTot25 + @SQLTot26 + @SQLTot27 + @SQLTot28 + @SQLTot29 + @SQLTot30 +
		        @SQLTot31  + @SQLTot32 + @SQLTot33 + @SQLTot34 + @SQLTot35 + @SQLTot36 + @SQLTot37 + @SQLTot38 + @SQLTot39 + @SQLTot40 +
		        @SQLTot41  + @SQLTot42 + @SQLTot43 + @SQLTot44 + @SQLTot45 + @SQLTot46 + @SQLTot47 + @SQLTot48 + @SQLTot49 + @SQLTot50 +
                ' [' + @RowTotals + ']' + @NewLine +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
                )
        end
    end
    else
    begin
        if		@TempTableName is not null
        begin   -- No row totals, no col totals, temp table
        if      @Debug = 1 
        begin
            print   '--7 No row totals, no col totals, temp table'
            print 'insert into ' + @TempTableName + '(' + @StrippedRowFieldNames 
		    print @SQLIns1  print @SQLIns2  print @SQLIns3  print @SQLIns4  print @SQLIns5  print @SQLIns6  print @SQLIns7 
            print @SQLIns8  print @SQLIns9  print @SQLIns10 print @SQLIns11 print @SQLIns12 print @SQLIns13 print @SQLIns14 
            print @SQLIns15 print @SQLIns16 print @SQLIns17 print @SQLIns18 print @SQLIns19 print @SQLIns20 print @SQLIns21  
            print @SQLIns22 print @SQLIns23 print @SQLIns24 print @SQLIns25 print @SQLIns26 print @SQLIns27 print @SQLIns28 
            print @SQLIns29 print @SQLIns30 print ')' print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
        end 

        exec	('insert into ' + @TempTableName + '(' + @StrippedRowFieldNames +
		        @SQLIns1  + @SQLIns2 + @SQLIns3 + @SQLIns4 + @SQLIns5 + @SQLIns6 + @SQLIns7 + @SQLIns8 + @SQLIns9 + @SQLIns10 +
		        @SQLIns11  + @SQLIns12 + @SQLIns13 + @SQLIns14 + @SQLIns15 + @SQLIns16 + @SQLIns17 + @SQLIns18 + @SQLIns19 + @SQLIns20 +
		        @SQLIns21  + @SQLIns22 + @SQLIns23 + @SQLIns24 + @SQLIns25 + @SQLIns26 + @SQLIns27 + @SQLIns28 + @SQLIns29 + @SQLIns30 + ')' + 
		        'select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
		        )
        end
        else
        begin   -- No row totals, no col totals, no temp table
        if      @Debug = 1
        begin
            print   '--8 No row totals, no col totals, no temp table'
            print 'select ' + @StrippedRowFieldNames
		    print @SQLCol1  print @SQLCol2  print @SQLCol3  print @SQLCol4  print @SQLCol5  print @SQLCol6  print @SQLCol7 
            print @SQLCol8  print @SQLCol9  print @SQLCol10 print @SQLCol11 print @SQLCol12 print @SQLCol13 print @SQLCol14 
            print @SQLCol15 print @SQLCol16 print @SQLCol17 print @SQLCol18 print @SQLCol19 print @SQLCol20 print @SQLCol21  
            print @SQLCol22 print @SQLCol23 print @SQLCol24 print @SQLCol25 print @SQLCol26 print @SQLCol27 print @SQLCol28 
            print @SQLCol29 print @SQLCol30 print @SQLCol31 print @SQLCol32 print @SQLCol33 print @SQLCol34 print @SQLCol35 
            print @SQLCol36 print @SQLCol37 print @SQLCol38 print @SQLCol39 print @SQLCol40 print @SQLCol41 print @SQLCol42 
            print @SQLCol43 print @SQLCol44 print @SQLCol45 print @SQLCol46 print @SQLCol47 print @SQLCol48 print @SQLCol49 
            print @SQLCol50 print @NewLine + ' from (select ' + @RowFieldNames 
		    print @SQLCase1  print @SQLCase2  print @SQLCase3  print @SQLCase4  print @SQLCase5  print @SQLCase6  print @SQLCase7
		    print @SQLCase8  print @SQLCase9  print @SQLCase10 print @SQLCase11 print @SQLCase12 print @SQLCase13 print @SQLCase14 
            print @SQLCase15 print @SQLCase16 print @SQLCase17 print @SQLCase18 print @SQLCase19 print @SQLCase20 print @SQLCase21  
            print @SQLCase22 print @SQLCase23 print @SQLCase24 print @SQLCase25 print @SQLCase26 print @SQLCase27 print @SQLCase28 
            print @SQLCase29 print @SQLCase30 print @SQLCase31 print @SQLCase32 print @SQLCase33 print @SQLCase34 print @SQLCase35 
            print @SQLCase36 print @SQLCase37 print @SQLCase38 print @SQLCase39 print @SQLCase40 print @SQLCase41 print @SQLCase42 
            print @SQLCase43 print @SQLCase44 print @SQLCase45 print @SQLCase46 print @SQLCase47 print @SQLCase48 print @SQLCase49 
            print @SQLCase50 + @NewLine 
            print 'from ' + @SQLSource + @NewLine 
            print 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine 
            print 'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine 
            print 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
        end 

        exec	('select ' + @StrippedRowFieldNames + 
		        @SQLCol1  + @SQLCol2 + @SQLCol3 + @SQLCol4 + @SQLCol5 + @SQLCol6 + @SQLCol7 + @SQLCol8 + @SQLCol9 + @SQLCol10 +
		        @SQLCol11  + @SQLCol12 + @SQLCol13 + @SQLCol14 + @SQLCol15 + @SQLCol16 + @SQLCol17 + @SQLCol18 + @SQLCol19 + @SQLCol20 +
		        @SQLCol21  + @SQLCol22 + @SQLCol23 + @SQLCol24 + @SQLCol25 + @SQLCol26 + @SQLCol27 + @SQLCol28 + @SQLCol29 + @SQLCol30 +
		        @SQLCol31  + @SQLCol32 + @SQLCol33 + @SQLCol34 + @SQLCol35 + @SQLCol36 + @SQLCol37 + @SQLCol38 + @SQLCol39 + @SQLCol40 +
		        @SQLCol41  + @SQLCol42 + @SQLCol43 + @SQLCol44 + @SQLCol45 + @SQLCol46 + @SQLCol47 + @SQLCol48 + @SQLCol49 + @SQLCol50 +
		        @NewLine + ' from (select ' + @RowFieldNames +
		        @SQLCase1 + @SQLCase2 + @SQLCase3 + @SQLCase4 + @SQLCase5 + @SQLCase6 + @SQLCase7 + @SQLCase8 + @SQLCase9 + @SQLCase10 +
		        @SQLCase11  + @SQLCase12 + @SQLCase13 + @SQLCase14 + @SQLCase15 + @SQLCase16 + @SQLCase17 + @SQLCase18 + @SQLCase19 + @SQLCase20 +
		        @SQLCase21  + @SQLCase22 + @SQLCase23 + @SQLCase24 + @SQLCase25 + @SQLCase26 + @SQLCase27 + @SQLCase28 + @SQLCase29 + @SQLCase30 +
		        @SQLCase31  + @SQLCase32 + @SQLCase33 + @SQLCase34 + @SQLCase35 + @SQLCase36 + @SQLCase37 + @SQLCase38 + @SQLCase39 + @SQLCase40 +
		        @SQLCase41  + @SQLCase42 + @SQLCase43 + @SQLCase44 + @SQLCase45 + @SQLCase46 + @SQLCase47 + @SQLCase48 + @SQLCase49 + @SQLCase50 +
		        @NewLine + 'from ' + @SQLSource + @NewLine + 'where ' + @CalcFieldName + ' is not null' + @NewLine + @AddWhere + @NewLine + 
		        'group by ' + @RowFieldNames + ', ' + @ColFieldID + ') X' + @NewLine + 'group by ' + @StrippedRowFieldNames + @NewLine + @AddOrder
                )
        end
    end
end


drop table  #Columns


-----=====******--~-~--~~---~-~---~~-~-~---~---~--~--~~~-~-~---~---~--~*****=====-----
--              Fin.
GO
