
GO
--SqlScripter----[dbo].[ax_get_VARFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_get_VARFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_get_VARFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_get_VARFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN


DECLARE @xml xml
SELECT  @xml=VARFIELDS_XML FROM XML_MODULE_DEFINITIONS	WHERE MODULEID=@MODULEID

INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[SHOW_IN_REPORT] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)
SELECT 
	CONVERT(nvarchar(200), HashBytes('MD2', Tab.Col.value('@Name','nvarchar(100)') +  Tab.Col.value('@Table','nvarchar(200)')),2),
	Tab.Col.value('@Name','nvarchar(100)') AS [Name] ,
	Tab.Col.value('@Type','nvarchar(100)') AS [Type],
	Tab.Col.value('@Table','nvarchar(200)') AS [Table],
	Tab.Col.value('DESCRIPTION[1]','nvarchar(200)') AS [DESCRIPTION],
	dbo.translate(Tab.Col.value('DESCRIPTION[1]','nvarchar(200)')) AS [DESCRIPTION_TRANSLATED],
	Tab.Col.value('SHOW_IN_REPORT[1]','nvarchar(10)') AS [SHOW_IN_REPORT],
	Tab.Col.value('INPUTSTRING[1]','nvarchar(200)') AS INPUTSTRING ,
	dbo.translate(Tab.Col.value('INPUTSTRING[1]','nvarchar(200)')) AS [INPUTSTRING_TRANSLATED] 

FROM @xml.nodes('//VARFIELDS/FIELD') Tab(Col)


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_get_VarModulesRptsParam].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_get_VarModulesRptsParam]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_get_VarModulesRptsParam] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_get_VarModulesRptsParam]
(	
	
)
RETURNS @tblModules table(
[ModuleId] int,
[DESCRIPTION]	nvarchar(2000),
DESCRIPTION_LOC nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblModules([ModuleId], [DESCRIPTION], DESCRIPTION_LOC)
SELECT 0 AS MODULEID, dbo.translate('Loc_All_Items'), 'Loc_All_Items'

INSERT INTO @tblModules([ModuleId], [DESCRIPTION], DESCRIPTION_LOC)
SELECT
	CLASS.MODULEID AS MODULEID,
	CLASS.[DESCRIPTION] AS NAME,
	CLASS.DESCRIPTION_LOC AS NAME
	FROM XML_MODULE_DEFINITIONS CLASS			
	WHERE CLASS.[ENABLED]=1

RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_robot_get_DateActionsFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_get_DateActionsFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_robot_get_DateActionsFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_robot_get_DateActionsFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)


 SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','DATE_IN' +  'IKALERTS'),2) AS Id,
	'DATE_IN' AS [Name], 
	'Date' as [Type],
	'IKALERTS' as [Table],
	'Loc_Created' AS [DESCRIPTION],
	dbo.translate('Loc_Created') AS [DESCRIPTION_TRANSLATED],
	'Loc_Created' AS [INPUTSTRING] ,
	dbo.translate('Loc_Created') AS [INPUTSTRING_TRANSLATED]

	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','DATE_EFFECTIVE' +  'IKALERTS'),2) AS Id,
	'DATE_EFFECTIVE' AS [Name], 
	'Date' as [Type],
	'IKALERTS' as [Table],
	'Loc_Deadline' AS [DESCRIPTION],
	dbo.translate('Loc_Deadline') AS [DESCRIPTION_TRANSLATED],
	'Loc_Deadline' AS [INPUTSTRING] ,
	dbo.translate('Loc_Deadline') AS [INPUTSTRING_TRANSLATED]
	
	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','DATE_DONE' +  'IKALERTS'),2) AS Id,
	'DATE_DONE' AS [Name], 
	'Date' as [Type],
	'IKALERTS' as [Table],
	'Loc_EndDate' AS [DESCRIPTION],
	dbo.translate('Loc_EndDate') AS [DESCRIPTION_TRANSLATED],
	'Loc_EndDate' AS [INPUTSTRING] ,
	dbo.translate('Loc_EndDate') AS [INPUTSTRING_TRANSLATED]	

	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','DATE_ARCHIVED' +  'IKALERTS'),2) AS Id,
	'DATE_ARCHIVED' AS [Name], 
	'Date' as [Type],
	'IKALERTS' as [Table],
	'Loc_Date_Archived' AS [DESCRIPTION],
	dbo.translate('Loc_Date_Archived') AS [DESCRIPTION_TRANSLATED],
	'Loc_Date_Archived' AS [INPUTSTRING] ,
	dbo.translate('Loc_Date_Archived') AS [INPUTSTRING_TRANSLATED]	


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_robot_get_DateDocumentsFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_get_DateDocumentsFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_robot_get_DateDocumentsFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_robot_get_DateDocumentsFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)


 SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHACREACION' +  'DOCUMENTOS'),2) AS Id,
	'FECHACREACION' AS [Name], 
	'Date' as [Type],
	'DOCUMENTOS' as [Table],
	'Loc_Created' AS [DESCRIPTION],
	dbo.translate('Loc_Created') AS [DESCRIPTION_TRANSLATED],
	'Loc_Created' AS [INPUTSTRING] ,
	dbo.translate('Loc_Created') AS [INPUTSTRING_TRANSLATED]

	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHAVIGENCIA' +  'DOCUMENTOS'),2) AS Id,
	'FECHAVIGENCIA' AS [Name], 
	'Date' as [Type],
	'DOCUMENTOS' as [Table],
	'Loc_Date_Current' AS [DESCRIPTION],
	dbo.translate('Loc_Date_Current') AS [DESCRIPTION_TRANSLATED],
	'Loc_Date_Current' AS [INPUTSTRING] ,
	dbo.translate('Loc_Date_Current') AS [INPUTSTRING_TRANSLATED]
	
	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHAOBSOLETO' +  'DOCUMENTOS'),2) AS Id,
	'FECHAOBSOLETO' AS [Name], 
	'Date' as [Type],
	'DOCUMENTOS' as [Table],
	'Loc_Date_Obsolete' AS [DESCRIPTION],
	dbo.translate('Loc_Date_Obsolete') AS [DESCRIPTION_TRANSLATED],
	'Loc_Date_Obsolete' AS [INPUTSTRING] ,
	dbo.translate('Loc_Date_Obsolete') AS [INPUTSTRING_TRANSLATED]	


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_robot_get_DateNCTasksFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_get_DateNCTasksFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_robot_get_DateNCTasksFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_robot_get_DateNCTasksFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)


 SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','ALTA' +  'NCTAREAS'),2) AS Id,
	'ALTA' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Input_Date' AS [DESCRIPTION],
	dbo.translate('Loc_Input') AS [DESCRIPTION_TRANSLATED],
	'Loc_Input_Date' AS [INPUTSTRING] ,
	dbo.translate('Loc_Input') AS [INPUTSTRING_TRANSLATED]

	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHA' +  'NCTAREAS'),2) AS Id,
	'FECHA' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Actual_Start' AS [DESCRIPTION],
	dbo.translate('Loc_Actual_Start') AS [DESCRIPTION_TRANSLATED],
	'Loc_Actual_Start' AS [INPUTSTRING] ,
	dbo.translate('Loc_Actual_Start') AS [INPUTSTRING_TRANSLATED]
	
	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','MANDARENFECHA' +  'NCTAREAS'),2) AS Id,
	'MANDARENFECHA' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Sched_Start' AS [DESCRIPTION],
	dbo.translate('Loc_Sched_Start') AS [DESCRIPTION_TRANSLATED],
	'Loc_Sched_Start' AS [INPUTSTRING] ,
	dbo.translate('Loc_Sched_Start') AS [INPUTSTRING_TRANSLATED]	
	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','CUMPLIMIENTO' +  'NCTAREAS'),2) AS Id,
	'CUMPLIMIENTO' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Fulfillment' AS [DESCRIPTION],
	dbo.translate('Loc_Fulfillment') AS [DESCRIPTION_TRANSLATED],
	'Loc_Fulfillment' AS [INPUTSTRING] ,
	dbo.translate('Loc_Fulfillment') AS [INPUTSTRING_TRANSLATED]	

		UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','PSTARTDATE' +  'NCTAREAS'),2) AS Id,
	'PSTARTDATE' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Proj_Start' AS [DESCRIPTION],
	dbo.translate('Loc_Proj_Start') AS [DESCRIPTION_TRANSLATED],
	'Loc_Proj_Start' AS [INPUTSTRING] ,
	dbo.translate('Loc_Proj_Start') AS [INPUTSTRING_TRANSLATED]	

	
		UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','PENDDATE' +  'NCTAREAS'),2) AS Id,
	'PENDDATE' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Proj_End' AS [DESCRIPTION],
	dbo.translate('Loc_Proj_End') AS [DESCRIPTION_TRANSLATED],
	'Loc_Proj_End' AS [INPUTSTRING] ,
	dbo.translate('Loc_Proj_End') AS [INPUTSTRING_TRANSLATED]	


	UNION 

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHALIMITE' +  'NCTAREAS'),2) AS Id,
	'FECHALIMITE' AS [Name], 
	'Date' as [Type],
	'NCTAREAS' as [Table],
	'Loc_Sched_End' AS [DESCRIPTION],
	dbo.translate('Loc_Sched_End') AS [DESCRIPTION_TRANSLATED],
	'Loc_Sched_End' AS [INPUTSTRING] ,
	dbo.translate('Loc_Sched_End') AS [INPUTSTRING_TRANSLATED]	

/*

UNION

SELECT * FROM dbo.[ax_get_VarFields](CONVERT(int,@MODULEID))
WHERE [Type] = 'Date' and SHOW_IN_REPORT = 'True'

*/

RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_robot_get_DateStagesFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_get_DateStagesFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_robot_get_DateStagesFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_robot_get_DateStagesFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)


 SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','STAGE_DEADLINE' +  '#TEMP_ISSUES_STAGES'),2) AS Id,
	'STAGE_DEADLINE' AS [Name], 
	'Date' as [Type],
	'#TEMP_ISSUES_STAGES' as [Table],
	'Loc_Expiration' AS [DESCRIPTION],
	dbo.translate('Loc_Expiration') AS [DESCRIPTION_TRANSLATED],
	'Loc_Expiration' AS [INPUTSTRING] ,
	dbo.translate('Loc_Expiration') AS [INPUTSTRING_TRANSLATED]

	union all

	SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','STAGE_ENDDATE' +  '#TEMP_ISSUES_STAGES'),2) AS Id,
	'STAGE_ENDDATE' AS [Name], 
	'Date' as [Type],
	'#TEMP_ISSUES_STAGES' as [Table],
	'Loc_Actual_End' AS [DESCRIPTION],
	dbo.translate('Loc_Actual_End') AS [DESCRIPTION_TRANSLATED],
	'Loc_Actual_End' AS [INPUTSTRING] ,
	dbo.translate('Loc_Actual_End') AS [INPUTSTRING_TRANSLATED]	

	


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ax_robot_get_DateVARFields].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ax_robot_get_DateVARFields]') IS NULL EXEC('CREATE FUNCTION [dbo].[ax_robot_get_DateVARFields] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ax_robot_get_DateVARFields]
(	
	@MODULEID int
)
RETURNS @tblFields table(
[Id] nvarchar(200),
[Name]	nvarchar(200),
[Type] nvarchar(20),
[Table] nvarchar(200),
[DESCRIPTION] nvarchar(200),
[DESCRIPTION_TRANSLATED] nvarchar(200),
[SHOW_IN_REPORT] nvarchar(10),
[INPUTSTRING] nvarchar(200),
[INPUTSTRING_TRANSLATED] nvarchar(200)
)

AS
BEGIN



INSERT INTO @tblFields(
[id],
[Name]	,
[Type] ,
[Table] ,
[DESCRIPTION] ,
[DESCRIPTION_TRANSLATED] ,
[SHOW_IN_REPORT] ,
[INPUTSTRING] ,
[INPUTSTRING_TRANSLATED] 
)


SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','INPUTFECHA' +  'VAR_NCMAINPROD'),2) AS Id,
	'INPUTFECHA' AS [Name], 
	'Date' as [Type],
	'VAR_NCMAINPROD' as [Table],
	'Loc_Input_Date' AS [DESCRIPTION],
	dbo.translate('Loc_Input_Date') AS [DESCRIPTION_TRANSLATED],
	'True' AS [SHOW_IN_REPORT] ,
	'Loc_Input_Date' AS [INPUTSTRING] ,
	dbo.translate('Loc_Input_Date') AS [INPUTSTRING_TRANSLATED]

UNION 
SELECT  
	CONVERT(nvarchar(200), HashBytes('MD2','FECHAPROCESAMIENTO' +  'VAR_NCMAINPROD'),2) AS Id,
	'FECHAPROCESAMIENTO' AS [Name], 
	'Date' as [Type],
	'VAR_NCMAINPROD' as [Table],
	'Loc_DateofProcessing' AS [DESCRIPTION],
	dbo.translate('Loc_DateofProcessing') AS [DESCRIPTION_TRANSLATED],
	'True' AS [SHOW_IN_REPORT] ,
	'Loc_DateofProcessing' AS [INPUTSTRING],
	dbo.translate('Loc_DateofProcessing') AS [INPUTSTRING_TRANSLATED]

UNION 
SELECT
	CONVERT(nvarchar(200), HashBytes('MD2','FECHAARCHIVO' +  'VAR_NCMAINPROD'),2) AS Id,
	'FECHAARCHIVO' AS [Name], 
	'Date' as [Type],
	'VAR_NCMAINPROD' as [Table],
	'Loc_Date_Archived' AS [DESCRIPTION],
	dbo.translate('Loc_Date_Archived') AS [DESCRIPTION_TRANSLATED],
	'True' AS [SHOW_IN_REPORT] ,
	'Loc_Date_Archived' AS [INPUTSTRING],
	dbo.translate('Loc_Date_Archived') AS [INPUTSTRING_TRANSLATED]



UNION

SELECT * FROM dbo.[ax_get_VarFields](CONVERT(int,@MODULEID))
WHERE [Type] = 'Date' and SHOW_IN_REPORT = 'True'



RETURN 
END
GO

GO
--SqlScripter----[dbo].[fn_doc_getDistributeds].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_doc_getDistributeds]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_doc_getDistributeds] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_doc_getDistributeds]
(
		@DOCCODE INT 
	)
RETURNS  @DISTRI TABLE 
(CODIGOUSUARIOCARGOMULTIPLE INT,
CODDIS INT,
CODIGODOC INT,
CODIGOCARGO INT,
CODIGODISTRIBUIDOR INT,
L_SUBDISTRIBUIDOR TINYINT,
INSTRUCCIONES ntext,
ARCHIVOINSTRUCCIONES nvarchar(100),
ORGANIGRAMA_CODIGO INT,
DESCRIPCION nvarchar(100),
TIPO INT,
TIPO_DISTRIBUCION TINYINT,
TIPO_ORG_IMG nvarchar(50),
TIPO_DISTRIBUCIONLOC nvarchar(50)
)
AS
BEGIN

DECLARE @DISTRI_AUX TABLE 
(CODIGOUSUARIOCARGOMULTIPLE INT,
CODDIS INT,
CODIGODOC INT,
CODIGOCARGO INT,
CODIGODISTRIBUIDOR INT,
L_SUBDISTRIBUIDOR TINYINT,
INSTRUCCIONES ntext,
ARCHIVOINSTRUCCIONES nvarchar(100),
ORGANIGRAMA_CODIGO INT,
DESCRIPCION nvarchar(100),
TIPO INT,
TIPO_DISTRIBUCION TINYINT
)

DECLARE @TIPO_DISTRIBUCION TINYINT
DECLARE @CODDIS int 
DECLARE @CODIGODISTRIBUIDOR INT
DECLARE @GROUP_PATH nvarchar(1000)
DECLARE @GROUPS nvarchar(4000)
SET @GROUPS=''

DECLARE curPOSITIONGROUPS CURSOR FOR
	SELECT PATH_INT,TIPO_DISTRIBUCION, CODIGO, CODIGODISTRIBUIDOR FROM DISTRIBUCION D
	JOIN  IKPOSITIONSGROUPSTREE T ON D.CODIGOGRUPO=T.IKPOSITIONSGROUPSTREEID
	WHERE CODIGODOCUMENTO=@DOCCODE --AND NOT CODIGOGRUPO IS NULL

OPEN curPOSITIONGROUPS 

FETCH NEXT FROM curPOSITIONGROUPS INTO @GROUP_PATH, @TIPO_DISTRIBUCION,@CODDIS,@CODIGODISTRIBUIDOR
WHILE @@FETCH_STATUS = 0
BEGIN
	--CARGOS SIMPLES + MULTI SIMPLE DE GRUPOS DE DISTRIBUCION
	INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,
	TIPO_DISTRIBUCION )
	SELECT 
	CASE
		WHEN TIPO=1 THEN -1
		ELSE CODIGOUSUARIO
	END
	, @CODDIS, @DOCCODE, CODIGO,
	@CODIGODISTRIBUIDOR,
	0,
	NULL,NULL,CODIGO,DESCRIPCION,
	CASE
		WHEN TIPO=5 THEN 4
		ELSE TIPO
	END
	,@TIPO_DISTRIBUCION
	FROM VISTA_ORGANIGRAMA
	WHERE (TIPO=1 OR TIPO=5) AND CODIGO IN (
		(SELECT POSITIONID FROM IKPOSITIONSGROUPS PG
		JOIN IKPOSITIONSGROUPSTREE G ON G.IKPOSITIONSGROUPSTREEID=PG.IKPOSITIONSGROUPSTREEID
		WHERE G.PATH_INT LIKE @GROUP_PATH  OR G.PATH_INT LIKE @GROUP_PATH + ',%' OR (CONVERT(NVARCHAR(100),G.IKPOSITIONSGROUPSTREEID)=@GROUP_PATH)))

UNION ALL
--CARGOS MULTI DE GRUPOS DE DISTRIBUCION
	SELECT 
	U.CODIGO
	, @CODDIS, @DOCCODE, O.CODIGO,@CODIGODISTRIBUIDOR,0,NULL,NULL,O.CODIGO,
	
	'(' + O.DESCRIPCIONDOCUMENTO + ') ' + LTRIM(RTRIM(REPLACE(U.USUARIO,'''',' '))) 
	
	,
	CASE
		WHEN TIPO=5 THEN 4
		ELSE TIPO
	END
	,@TIPO_DISTRIBUCION
	FROM VISTA_ORGANIGRAMA O
		INNER JOIN WEBGROUPMEMBERS 
			ON O.CODIGOUSUARIO = WEBGROUPMEMBERS.CODIGOGRUPO 
		INNER JOIN USUARIOS U
			ON WEBGROUPMEMBERS.CODIGOUSUARIO = U.CODIGO
                      
	
	WHERE (TIPO=4) AND O.CODIGO IN (
		(SELECT POSITIONID FROM IKPOSITIONSGROUPS PG
		JOIN IKPOSITIONSGROUPSTREE G ON G.IKPOSITIONSGROUPSTREEID=PG.IKPOSITIONSGROUPSTREEID
		WHERE G.PATH_INT LIKE @GROUP_PATH  OR G.PATH_INT LIKE @GROUP_PATH + ',%' OR (CONVERT(NVARCHAR(100),G.IKPOSITIONSGROUPSTREEID)=@GROUP_PATH)))


    FETCH NEXT FROM curPOSITIONGROUPS INTO @GROUP_PATH,@TIPO_DISTRIBUCION,@CODDIS,@CODIGODISTRIBUIDOR
END

CLOSE curPOSITIONGROUPS
DEALLOCATE curPOSITIONGROUPS


	INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,	
	TIPO_DISTRIBUCION )
SELECT 
CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,	
	TIPO_DISTRIBUCION 
 FROM VISTA_DOCTAREASDISTRIBNEG WHERE TIPO=1 AND CODIGODOC=@DOCCODE


	INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,
	TIPO_DISTRIBUCION  )
SELECT CODIGOUSUARIO,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	'(' + DESCRIPCIONDOCUMENTO + ') ' + LTRIM(RTRIM(REPLACE(USUARIO,'''',' ')))  ,
	4 ,
	TIPO_DISTRIBUCION 
 FROM VISTA_DOCTAREASDISTRIBNEG_MULT WHERE CODIGODOC=@DOCCODE



INSERT INTO @DISTRI 
SELECT *,
dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1),--PASO PARAMS FAKE PARA EVITAR JOIN. SOLO PUEDEN VENIR TIPO=1 O TIPO=4 O TIPO = 5
'Loc_Subdistributor' as TIPO_DISTRIBUCIONDESC

FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=1

INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	MAX(CODIGODOC) ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	TIPO_DISTRIBUCION ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1)),
'Loc_Direct_Distribution' as TIPO_DISTRIBUCIONDESC

 FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=2 AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI)
GROUP BY CODIGOCARGO, DESCRIPCION, TIPO_DISTRIBUCION

INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	MAX(CODIGODOC) ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	TIPO_DISTRIBUCION ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Loc_Notify' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=3 AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI)
GROUP BY CODIGOCARGO, DESCRIPCION, TIPO_DISTRIBUCION

INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	MAX(CODIGODOC) ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	TIPO_DISTRIBUCION ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Loc_GrantAccess' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=4 AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI)
GROUP BY CODIGOCARGO, DESCRIPCION, TIPO_DISTRIBUCION


INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	MAX(CODIGODOC) ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	TIPO_DISTRIBUCION ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Loc_SubDistributed' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=10 --AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI)
GROUP BY CODIGOCARGO, DESCRIPCION, TIPO_DISTRIBUCION


RETURN
END
GO

GO
--SqlScripter----[dbo].[fn_strat_getNodeDescendant].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_strat_getNodeDescendant]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_strat_getNodeDescendant] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_strat_getNodeDescendant]
(
		@BS_STRAT_NODESID int,
		@LEVEL INT
	)
RETURNS 
@TBL TABLE(
	BS_STRAT_NODESID int,
	NIVEL INT
) 
AS
	BEGIN


INSERT INTO @TBL(BS_STRAT_NODESID, NIVEL)
SELECT DISTINCT BS_STRAT_NODESID, @LEVEL+1 FROM 
	BS_STRAT_NODES
WHERE 
BS_STRAT_NODESID_PARENT=@BS_STRAT_NODESID


DECLARE @CHILDNODE INT
DECLARE curNODES CURSOR FOR
	SELECT BS_STRAT_NODESID, NIVEL FROM @TBL

OPEN curNODES

FETCH NEXT FROM curNODES INTO @CHILDNODE, @LEVEL
WHILE @@FETCH_STATUS = 0
BEGIN
	INSERT INTO @TBL(BS_STRAT_NODESID, NIVEL)
		SELECT DISTINCT BS_STRAT_NODESID, @LEVEL+1 FROM 
			BS_STRAT_NODES
		WHERE 
		BS_STRAT_NODESID_PARENT=@CHILDNODE

	FETCH NEXT FROM curNODES INTO @CHILDNODE, @LEVEL
END



		

RETURN
END
GO

GO
--SqlScripter----[dbo].[fn_usr_getDistributionGroups].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_usr_getDistributionGroups]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_usr_getDistributionGroups] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_usr_getDistributionGroups]
(
		@IKCDU int
	)
RETURNS 
@TBLUSRGROUPSTREEANDSUBGROUPS TABLE(
	IKPOSITIONSGROUPSTREEID int, 
	PATH_STR  nvarchar(4000) ,
	PATH_INT nvarchar(4000)
) 
AS
	BEGIN


DECLARE @TBLUSRGROUPSTREE TABLE(
	IKPOSITIONSGROUPSTREEID int, 
	PATH_INT  nvarchar(4000) 
) 

INSERT INTO @TBLUSRGROUPSTREE(IKPOSITIONSGROUPSTREEID,PATH_INT)
SELECT DISTINCT IKPOSITIONSGROUPSTREEID,PATH_INT FROM 
	VISTA_POSITIONSINGROUPTREE 
WHERE 
	POSITIONID IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@IKCDU)
	OR
	CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU)




DECLARE @PATH_INT nvarchar(4000)
DECLARE @PATH_INT_SEARCH nvarchar(4000)
DECLARE @SQL nvarchar(4000)

DECLARE cur_USRGROUPS CURSOR FOR
SELECT PATH_INT FROM @TBLUSRGROUPSTREE
OPEN cur_USRGROUPS
FETCH NEXT FROM cur_USRGROUPS INTO @PATH_INT
WHILE @@FETCH_STATUS = 0
BEGIN

SET @PATH_INT_SEARCH=@PATH_INT
IF RIGHT(@PATH_INT,1)=','
BEGIN
	SET @PATH_INT= @PATH_INT + '-1'
END


	INSERT INTO @TBLUSRGROUPSTREEANDSUBGROUPS (
		IKPOSITIONSGROUPSTREEID,
		PATH_STR,
		PATH_INT
	)
	SELECT DISTINCT 
		GT.IKPOSITIONSGROUPSTREEID,
		GT.PATH_STR ,
		GT.PATH_INT 
		
	FROM dbo.IKPOSITIONSGROUPSTREE GT
	WHERE 
		NOT IKPOSITIONSGROUPSTREEID IN (SELECT IKPOSITIONSGROUPSTREEID FROM @TBLUSRGROUPSTREEANDSUBGROUPS) 
		AND
		IKPOSITIONSGROUPSTREEID IN (
			SELECT [VALUE] FROM dbo.ik_SplitIntoTable(@PATH_INT,',')
		)
--		OR 
--		PATH_INT LIKE  @PATH_INT_SEARCH+'%'
		
	
	
	
	FETCH NEXT FROM cur_USRGROUPS INTO @PATH_INT
END
		

RETURN
END
GO

GO
--SqlScripter----[dbo].[fn_usr_getDistributionGroupsWithPositions].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_usr_getDistributionGroupsWithPositions]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_usr_getDistributionGroupsWithPositions] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_usr_getDistributionGroupsWithPositions]
(
		@IKCDU int
	)
RETURNS 
@TBLUSRGROUPSTREEANDSUBGROUPS TABLE(
	IKPOSITIONSGROUPSTREEID int, 
	POSITIONID int,
	POSITIONTYPE tinyint
) 
AS
BEGIN



DECLARE @TBLUSRGROUPSTREE TABLE(
	IKPOSITIONSGROUPSTREEID int, 
	PATH_INT  nvarchar(4000) ,
	POSITIONID int,
	POSITIONTYPE tinyint
) 

INSERT INTO @TBLUSRGROUPSTREE(IKPOSITIONSGROUPSTREEID,PATH_INT, POSITIONID,POSITIONTYPE )
SELECT DISTINCT VISTA_POSITIONSINGROUPTREE.IKPOSITIONSGROUPSTREEID,VISTA_POSITIONSINGROUPTREE.PATH_INT, VISTA_POSITIONSINGROUPTREE.POSITIONID, VISTA_POSITIONSINGROUPTREE.TIPO FROM 
	VISTA_POSITIONSINGROUPTREE 
WHERE 
	POSITIONID IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@IKCDU)
	OR
	CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU)




DECLARE @PATH_INT nvarchar(4000)
DECLARE @PATH_INT_SEARCH nvarchar(4000)
DECLARE @SQL nvarchar(4000)
DECLARE @POSITIONID INT
DECLARE @POSITIONTYPE tinyint

DECLARE cur_USRGROUPS CURSOR FOR
SELECT PATH_INT, POSITIONID, POSITIONTYPE FROM @TBLUSRGROUPSTREE
OPEN cur_USRGROUPS
FETCH NEXT FROM cur_USRGROUPS INTO @PATH_INT, @POSITIONID, @POSITIONTYPE
WHILE @@FETCH_STATUS = 0
BEGIN

SET @PATH_INT_SEARCH=@PATH_INT
IF RIGHT(@PATH_INT,1)=','
BEGIN
	SET @PATH_INT= @PATH_INT + '-1'
END


	INSERT INTO @TBLUSRGROUPSTREEANDSUBGROUPS (
		IKPOSITIONSGROUPSTREEID, POSITIONID,POSITIONTYPE
	)
	SELECT DISTINCT 
		GT.IKPOSITIONSGROUPSTREEID,
		@POSITIONID,
		@POSITIONTYPE		
	FROM IKPOSITIONSGROUPSTREE GT
	WHERE 
		NOT IKPOSITIONSGROUPSTREEID IN (SELECT IKPOSITIONSGROUPSTREEID FROM @TBLUSRGROUPSTREEANDSUBGROUPS) 
		AND
		IKPOSITIONSGROUPSTREEID IN (
			SELECT [VALUE] FROM dbo.ik_SplitIntoTable(@PATH_INT,',')
		)
--		OR 
--		PATH_INT LIKE  @PATH_INT_SEARCH+'%'
		
	
	
	
	FETCH NEXT FROM cur_USRGROUPS INTO @PATH_INT, @POSITIONID, @POSITIONTYPE
END
		



/*
WITH GRUPOS_CALCULADOS AS (
SELECT DISTINCT 
	GRUPO_BASE.IKPOSITIONSGROUPSTREEID, 
	GRUPO_BASE.PATH_STR,
	GRUPO_BASE.POSITIONID, 
	GRUPO_BASE.TIPO AS POSITION_TYPE
	FROM VISTA_POSITIONSINGROUPTREE GRUPO_BASE 	
	WHERE
	GRUPO_BASE.POSITIONID IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@IKCDU)
	OR
	GRUPO_BASE.CODIGOUSUARIO IN (SELECT CODIGOGRUPO FROM WEBGROUPMEMBERS WHERE CODIGOUSUARIO=@IKCDU)

	UNION ALL

SELECT 
	GRUPOS_HIJOS.IKPOSITIONSGROUPSTREEID, 
	GRUPOS_HIJOS.PATH_STR,
	CALCULADOS.POSITIONID ,
	CALCULADOS.POSITION_TYPE
FROM IKPOSITIONSGROUPSTREE GRUPOS_HIJOS JOIN GRUPOS_CALCULADOS CALCULADOS ON CALCULADOS.IKPOSITIONSGROUPSTREEID=GRUPOS_HIJOS.PARENTID
          
)


INSERT INTO @TBLUSRGROUPSTREEANDSUBGROUPS (
	IKPOSITIONSGROUPSTREEID , 
	POSITIONID ,
	POSITIONTYPE 
	)

SELECT DISTINCT 
GRUPOS_CALCULADOS.IKPOSITIONSGROUPSTREEID,
GRUPOS_CALCULADOS.POSITIONID,
GRUPOS_CALCULADOS.POSITION_TYPE

 from GRUPOS_CALCULADOS
ORDER BY 2,3
		*/


RETURN
END
GO

GO
--SqlScripter----[dbo].[fn_usr_getDocsDistrib].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_usr_getDocsDistrib]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_usr_getDocsDistrib] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_usr_getDocsDistrib]
(
		@IKCDU int,
		@L_INCLUDE_RUNNING_DISTRIBUTIONS tinyint
	)
RETURNS @DOC_TBL TABLE (CODIGO int , NOMBRE nvarchar(120), CODIGOISO nvarchar(25), REVISION int , C_REVISION nvarchar(20), TIPO_DISTRIBUCION tinyint,CODIGODISTRIBUCION INT) 
AS
	BEGIN
DECLARE @DISTRI TABLE 
(CODIGOUSUARIOCARGOMULTIPLE INT,
CODDIS INT,
CODIGODOC INT,
CODIGOCARGO INT,
CODIGODISTRIBUIDOR INT,
L_SUBDISTRIBUIDOR TINYINT,
INSTRUCCIONES ntext,
ARCHIVOINSTRUCCIONES nvarchar(100),
ORGANIGRAMA_CODIGO INT,
DESCRIPCION nvarchar(100),
TIPO INT,
TIPO_DISTRIBUCION TINYINT,
TIPO_ORG_IMG nvarchar(50),
TIPO_DISTRIBUCIONLOC nvarchar(50)
)		

INSERT INTO @DISTRI
SELECT * FROM dbo.fn_usr_getDocsDistribPolicies(@IKCDU)



DELETE FROM @DOC_TBL

INSERT INTO @DOC_TBL (CODIGO, NOMBRE, CODIGOISO, REVISION,C_REVISION,CODIGODISTRIBUCION,TIPO_DISTRIBUCION )
SELECT  
CODIGO, 
NOMBRE, 
CODIGOISO, 
REVISION,
C_REVISION ,
CODIGODISTRIBUCION, 
MIN(TIPO_DISTRIBUCION)

FROM (

SELECT  CODIGO, NOMBRE, CODIGOISO, REVISION,C_REVISION ,CODIGODISTRIBUCION, DIS.TIPO_DISTRIBUCION
FROM DOCUMENTOS DOC 
JOIN @DISTRI DIS ON (DOC.CODIGO=DIS.CODIGODOC )
WHERE  
	L_ISSURVEY=0 
AND ESTADO=2 
AND DIS.TIPO_DISTRIBUCION<10
AND(
	@L_INCLUDE_RUNNING_DISTRIBUTIONS=1  
	OR (
		@L_INCLUDE_RUNNING_DISTRIBUTIONS=0 AND 
		CODIGO NOT IN (
				SELECT CODIGODOCUMENTO FROM VISTA_CONDOCTAREASUSUARIOS 
				WHERE CODIGOUSUARIO=@IKCDU 
				)  
		)
)


UNION

SELECT  CODIGO, NOMBRE, CODIGOISO, REVISION,C_REVISION ,CODIGODISTRIBUCION, DIS.TIPO_DISTRIBUCION
FROM DOCUMENTOS DOC 
JOIN @DISTRI DIS ON (DOC.CODIGODISTRIBUCION=DIS.CODIGODOC )
WHERE  
	L_ISSURVEY=0 
AND ESTADO=2 
AND DIS.TIPO_DISTRIBUCION<10
AND(
	@L_INCLUDE_RUNNING_DISTRIBUTIONS=1  
	OR (
		@L_INCLUDE_RUNNING_DISTRIBUTIONS=0 AND 
		CODIGO NOT IN (
				SELECT CODIGODOCUMENTO FROM VISTA_CONDOCTAREASUSUARIOS 
				WHERE CODIGOUSUARIO=@IKCDU 
				)  
		)
)

)DATA
GROUP BY
CODIGO, NOMBRE, CODIGOISO, REVISION,C_REVISION ,CODIGODISTRIBUCION

ORDER BY NOMBRE


		

RETURN
END
GO

GO
--SqlScripter----[dbo].[fn_usr_getDocsDistribPolicies].sql
GO
SET ANSI_NULLS OFF
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[fn_usr_getDocsDistribPolicies]') IS NULL EXEC('CREATE FUNCTION [dbo].[fn_usr_getDocsDistribPolicies] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[fn_usr_getDocsDistribPolicies]
(
		@IKCDU int
	)

RETURNS  @DISTRI TABLE 
(CODIGOUSUARIOCARGOMULTIPLE INT,
CODDIS INT,
CODIGODOC INT,
CODIGOCARGO INT,
CODIGODISTRIBUIDOR INT,
L_SUBDISTRIBUIDOR TINYINT,
INSTRUCCIONES ntext,
ARCHIVOINSTRUCCIONES nvarchar(100),
ORGANIGRAMA_CODIGO INT,
DESCRIPCION nvarchar(100),
TIPO INT,
TIPO_DISTRIBUCION TINYINT,
TIPO_ORG_IMG nvarchar(50),
TIPO_DISTRIBUCIONLOC nvarchar(50)
)
AS
BEGIN


DECLARE @USERNAME nvarchar(500)
SELECT @USERNAME=USUARIO FROM USUARIOS WHERE CODIGO=@IKCDU


DECLARE @DISTRI_AUX TABLE 
(CODIGOUSUARIOCARGOMULTIPLE INT,
CODDIS INT,
CODIGODOC INT,
CODIGOCARGO INT,
CODIGODISTRIBUIDOR INT,
L_SUBDISTRIBUIDOR TINYINT,
INSTRUCCIONES ntext,
ARCHIVOINSTRUCCIONES nvarchar(100),
ORGANIGRAMA_CODIGO INT,
DESCRIPCION nvarchar(100),
TIPO INT,
TIPO_DISTRIBUCION TINYINT
)




INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,
	TIPO_DISTRIBUCION )

SELECT 
	CASE
		WHEN T.POSITIONTYPE=1 THEN -1
		ELSE O.CODIGOUSUARIO
	END AS CODIGOUSUARIOCARGOMULTIPLE,
	D.CODIGO AS CODDIS,
	D.CODIGODOCUMENTO AS CODIGODOC,
	T.POSITIONID AS CODIGOCARGO,
	D.CODIGODISTRIBUIDOR,
	0 AS L_SUBDISTRIBUIDOR,
	NULL AS INSTRUCCIONES,
	NULL AS ARCHIVOINSTRUCCIONES,
	T.POSITIONID AS ORGANIGRAMA_CODIGO,
	O.DESCRIPCION AS DESCRIPCION,
	CASE
		WHEN T.POSITIONTYPE=5 THEN 4
		ELSE T.POSITIONTYPE
	END AS TIPO,
	TIPO_DISTRIBUCION

	FROM DISTRIBUCION D
	JOIN  [fn_usr_getDistributionGroupsWithPositions](@IKCDU) T ON D.CODIGOGRUPO=T.IKPOSITIONSGROUPSTREEID
	JOIN VISTA_ORGANIGRAMA O ON O.CODIGO=T.POSITIONID

	WHERE (T.POSITIONTYPE=1 OR T.POSITIONTYPE=5) 



INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,
	TIPO_DISTRIBUCION )


SELECT 
	@IKCDU AS CODIGOUSUARIOCARGOMULTIPLE,
	D.CODIGO AS CODDIS,
	D.CODIGODOCUMENTO AS CODIGODOC,
	T.POSITIONID AS CODIGOCARGO,
	D.CODIGODISTRIBUIDOR,
	0 AS L_SUBDISTRIBUIDOR,
	NULL AS INSTRUCCIONES,
	NULL AS ARCHIVOINSTRUCCIONES,
	T.POSITIONID AS ORGANIGRAMA_CODIGO,
	'(' + O.DESCRIPCION + ') ' + LTRIM(RTRIM(REPLACE(@USERNAME,'''',' ')))  AS DESCRIPCION,
	CASE
		WHEN T.POSITIONTYPE=5 THEN 4
		ELSE T.POSITIONTYPE
	END AS TIPO,
	TIPO_DISTRIBUCION

	FROM DISTRIBUCION D
	JOIN  [fn_usr_getDistributionGroupsWithPositions](@IKCDU) T ON D.CODIGOGRUPO=T.IKPOSITIONSGROUPSTREEID
	JOIN VISTA_ORGANIGRAMA O ON O.CODIGO=T.POSITIONID
	WHERE (T.POSITIONTYPE=4 ) 



	INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,	
	TIPO_DISTRIBUCION )
SELECT 
CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,	
	TIPO_DISTRIBUCION 
 FROM VISTA_DOCTAREASDISTRIBNEG WHERE TIPO=1 AND CODIGOCARGO IN (SELECT CODIGOCARGO FROM CARGOSUSUARIOS WHERE CODIGOUSUARIO=@IKCDU)


	INSERT INTO @DISTRI_AUX 
	(CODIGOUSUARIOCARGOMULTIPLE ,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	DESCRIPCION ,
	TIPO ,
	TIPO_DISTRIBUCION  )
SELECT CODIGOUSUARIO,
	CODDIS ,
	CODIGODOC ,
	CODIGOCARGO ,
	CODIGODISTRIBUIDOR ,
	L_SUBDISTRIBUIDOR ,
	INSTRUCCIONES ,
	ARCHIVOINSTRUCCIONES ,
	ORGANIGRAMA_CODIGO ,
	'(' + DESCRIPCION + ') ' + LTRIM(RTRIM(REPLACE(USUARIO,'''',' ')))  ,
	4 ,
	TIPO_DISTRIBUCION 
 FROM VISTA_DOCTAREASDISTRIBNEG_MULT WHERE CODIGOUSUARIO=@IKCDU



INSERT INTO @DISTRI 
SELECT *,
dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1),
'Subdistribuidor' as TIPO_DISTRIBUCIONDESC

FROM @DISTRI_AUX 
WHERE TIPO_DISTRIBUCION=1



INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	CODIGODOC ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	2 ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1)),
'Distribuir' as TIPO_DISTRIBUCIONDESC

 FROM @DISTRI_AUX AUX
WHERE TIPO_DISTRIBUCION=2 
--	AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI DISTRI WHERE DISTRI.CODIGODOC=AUX.CODIGODOC )
--	AND CODIGODOC NOT IN (SELECT CODIGODOC FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO )
AND NOT EXISTS(SELECT * FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO AND  DISTRI.CODIGODOC=AUX.CODIGODOC )
GROUP BY CODIGODOC, CODIGOCARGO, DESCRIPCION--, TIPO_DISTRIBUCION

INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	CODIGODOC ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	3 ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Notificar' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX AUX
WHERE TIPO_DISTRIBUCION=3 
--	AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI DISTRI WHERE DISTRI.CODIGODOC=AUX.CODIGODOC )
--	AND CODIGODOC NOT IN (SELECT CODIGODOC FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO )
AND NOT EXISTS(SELECT * FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO AND  DISTRI.CODIGODOC=AUX.CODIGODOC )
GROUP BY CODIGODOC,CODIGOCARGO, DESCRIPCION--, TIPO_DISTRIBUCION

INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	CODIGODOC ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	4 ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Conceder acceso' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX AUX
WHERE TIPO_DISTRIBUCION=4 
--	AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI DISTRI WHERE DISTRI.CODIGODOC=AUX.CODIGODOC )
--	AND CODIGODOC NOT IN (SELECT CODIGODOC FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO )
AND NOT EXISTS(SELECT * FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO AND  DISTRI.CODIGODOC=AUX.CODIGODOC )
GROUP BY CODIGODOC, CODIGOCARGO, DESCRIPCION--, TIPO_DISTRIBUCION


INSERT INTO @DISTRI 
SELECT 
	MAX(CODIGOUSUARIOCARGOMULTIPLE),
	MAX(CODDIS) ,
	CODIGODOC ,
	CODIGOCARGO ,
	MAX(CODIGODISTRIBUIDOR) ,
	MAX(L_SUBDISTRIBUIDOR) ,
	NULL AS INSTRUCCIONES ,
	NULL AS ARCHIVOINSTRUCCIONES ,
	MAX(ORGANIGRAMA_CODIGO) ,
	DESCRIPCION,
	MAX(TIPO) ,
	10 ,
MAX(dbo.ik_org_ImageOfNode(TIPO, -1, -1, -1) ),
'Subdistribuido' as TIPO_DISTRIBUCIONDESC


 FROM @DISTRI_AUX AUX
WHERE TIPO_DISTRIBUCION=10 
--	AND CODIGOCARGO NOT IN (SELECT CODIGOCARGO FROM @DISTRI DISTRI WHERE DISTRI.CODIGODOC=AUX.CODIGODOC )
--	AND CODIGODOC NOT IN (SELECT CODIGODOC FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO )
AND NOT EXISTS(SELECT * FROM @DISTRI DISTRI WHERE DISTRI.CODIGOCARGO=AUX.CODIGOCARGO AND  DISTRI.CODIGODOC=AUX.CODIGODOC )
GROUP BY CODIGODOC, CODIGOCARGO, DESCRIPCION--, TIPO_DISTRIBUCION


DELETE FROM @DISTRI WHERE CODIGODOC IN (
SELECT CODIGO FROM DOCUMENTOS WHERE CODIGODISTRIBUCION > 0)

RETURN
END
GO

GO
--SqlScripter----[dbo].[ik_getFullUsersIds].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_getFullUsersIds]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_getFullUsersIds] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_getFullUsersIds]
(	

)
RETURNS @tblIds table(CODIGOUSUARIO INT)

AS

BEGIN
INSERT INTO @tblIds (CODIGOUSUARIO )

--USUARIOS ADMIN 
SELECT DISTINCT U.CODIGO
FROM USUARIOS U
WHERE U.L_WEBGROUP=0 AND L_DELETED=0 AND (CATEGORIA=4 OR CATEGORIA=3)

UNION

--USUARIOS CON PERMISOS
SELECT DISTINCT CODIGOUSUARIO 
FROM NCMODULESECURITYLEVELS P
JOIN USUARIOS U ON U.CODIGO=P.CODIGOUSUARIO
WHERE 
--U.L_WEBGROUP=0 AND 
L_DELETED=0

UNION

--GRUPOS DE USUARIOS CON PERMISOS
SELECT DISTINCT U.CODIGO
FROM NCMODULESECURITYLEVELS P
JOIN WEBGROUPMEMBERS G ON G.CODIGOGRUPO=P.CODIGOUSUARIO
JOIN USUARIOS U ON U.CODIGO=G.CODIGOUSUARIO
WHERE 
--U.L_WEBGROUP=0 AND 
L_DELETED=0




RETURN 
END
GO

GO
--SqlScripter----[dbo].[ik_SplitIntoTable].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_SplitIntoTable]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_SplitIntoTable] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_SplitIntoTable]
(
	@List nvarchar(2000),
	@SplitOn nvarchar(5)
)  
RETURNS @RtnValue table 
(
		
	Id int identity(1,1),
	Value nvarchar(100)
) 
AS  
BEGIN

While (Charindex(@SplitOn,@List)>0)
Begin 
	Insert Into @RtnValue (value)
	Select 
	    Value = ltrim(rtrim(Substring(@List,1,Charindex(@SplitOn,@List)-1))) 
	Set @List = Substring(@List, Charindex(@SplitOn,@List)+len(@SplitOn), len(@List))
End 
Insert Into @RtnValue (Value)
    Select Value = ltrim(rtrim(@List))

    Return

END
GO

GO
--SqlScripter----[dbo].[ik_wf_approval_get_records_levels].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_approval_get_records_levels]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_wf_approval_get_records_levels] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_wf_approval_get_records_levels]
(	
	@WF_NODE_ID int
)
RETURNS @TBL_RESULTS
TABLE (
WF_APPROVAL_RECORDS_LEVEL INT, 
WF_APPROVAL_RECORDS_LEVEL_DESCRIPTION nvarchar(100) COLLATE Modern_Spanish_CI_AS 
)

AS

BEGIN

INSERT INTO @TBL_RESULTS

SELECT 
	RL.WF_APPROVAL_RECORDS_LEVEL,
	RL.WF_APPROVAL_RECORDS_LEVEL_DESCRIPTION
FROM

NCMAINPROD NC 
	INNER JOIN WF_NODE WN ON WN.WF_ID=NC.WF_ID
	INNER JOIN WF_APPROVAL_RECORDS_LEVELS RL 
		ON RL.WF_XML_FILE=NC.WF_XML_FILE 
			AND RL.WF_NODE_XMLNODE_ID=WN.WF_NODE_XMLNODE_ID

WHERE WN.WF_NODE_ID=@WF_NODE_ID	



RETURN 
END
GO

GO
--SqlScripter----[dbo].[ik_wf_getPositionRelatedWFRolesTemplates].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_getPositionRelatedWFRolesTemplates]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_wf_getPositionRelatedWFRolesTemplates] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_wf_getPositionRelatedWFRolesTemplates]
(	
@POSITIONID int
)
RETURNS @TBL
TABLE (
WF_ROLESTEMPLATES_ID int
)

AS

BEGIN

INSERT INTO @TBL(WF_ROLESTEMPLATES_ID)
SELECT DISTINCT WF_ROLESTEMPLATES_ID FROM WF_ROLESTEMPLATES
WHERE 

WF_ROLESTEMPLATES_DEFINITION LIKE '%:'+ CONVERT(nvarchar(10),@POSITIONID) + ',%'
OR
WF_ROLESTEMPLATES_DEFINITION LIKE '%: '+ CONVERT(nvarchar(10),@POSITIONID) + ',%'
OR
WF_ROLESTEMPLATES_DEFINITION LIKE '%:'+ CONVERT(nvarchar(10),@POSITIONID) + '|%'
OR
WF_ROLESTEMPLATES_DEFINITION LIKE '%: '+ CONVERT(nvarchar(10),@POSITIONID) + '|%'

OR
WF_ROLESTEMPLATES_DEFINITION LIKE '%:'+ CONVERT(nvarchar(10),@POSITIONID) 
OR
WF_ROLESTEMPLATES_DEFINITION LIKE '%: '+ CONVERT(nvarchar(10),@POSITIONID) 


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ik_wf_getPositionRelatedWFs].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_getPositionRelatedWFs]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_wf_getPositionRelatedWFs] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_wf_getPositionRelatedWFs]
(	
@POSITIONID int
)
RETURNS @TBL_WFS
TABLE (
WF_ID int,
CODIGONC INT,
MODULEID INT,
ESTADONC INT
)

AS

BEGIN

INSERT INTO @TBL_WFS(WF_ID, CODIGONC, MODULEID, ESTADONC)
SELECT DISTINCT NC.WF_ID,NC.CODIGO, NC.TIPO AS MODULEID, ESTADO AS ESTADONC FROM WF_NODE_ROL R JOIN NCMAINPROD NC ON NC.WF_ID=R.WF_ID
WHERE 

WF_NODE_ROL_MEMBERS LIKE CONVERT(nvarchar(10),@POSITIONID)--solo
OR
WF_NODE_ROL_MEMBERS LIKE CONVERT(nvarchar(10),@POSITIONID) + ',%'--primero
OR
WF_NODE_ROL_MEMBERS LIKE '%,' + CONVERT(nvarchar(10),@POSITIONID) --ultimo
OR 
WF_NODE_ROL_MEMBERS LIKE '%,' + CONVERT(nvarchar(10),@POSITIONID) + ',%' --medio


RETURN 
END
GO

GO
--SqlScripter----[dbo].[ik_wf_getRolesMembers].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_getRolesMembers]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_wf_getRolesMembers] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_wf_getRolesMembers]
(	
@WF_ID int
)
RETURNS @TBL_ROLES_MEMBERS 
TABLE (
WF_ROL_NAME nvarchar(100) COLLATE Modern_Spanish_CI_AS , 
POSITIONID int,
POSITIONDESCRIPTION nvarchar(100) COLLATE Modern_Spanish_CI_AS ,
POSITIONUSERID int,
POSITIONUSER nvarchar(100) COLLATE Modern_Spanish_CI_AS ,
EMAIL nvarchar(100) COLLATE Modern_Spanish_CI_AS 
)

AS

BEGIN



DECLARE @WF_ROL_NAME nvarchar(100)
DECLARE @WF_ROL_MEMBERS nvarchar(500)


DECLARE curROLES CURSOR FOR
SELECT WF_NODE_ROL_NAME, WF_NODE_ROL_MEMBERS 
FROM WF_NODE_ROL
WHERE 
WF_ID = @WF_ID


OPEN curROLES

FETCH NEXT FROM curROLES 
INTO @WF_ROL_NAME, @WF_ROL_MEMBERS 

WHILE @@FETCH_STATUS = 0
BEGIN
	INSERT INTO @TBL_ROLES_MEMBERS		
	SELECT 	
		@WF_ROL_NAME, 
		[VALUE] AS POSITIONID,  
		O.DESCRIPCION AS POSITIONDESCRIPTION, 
		O.CODIGOUSUARIO AS POSITIONUSERID,
	CASE
		WHEN O.USUARIO IS NULL THEN 'Usuario no asignado'
		ELSE O.USUARIO 
		END AS POSITIONUSER,
		O.EMAIL
		
	FROM
	dbo.ik_SplitIntoTable(@WF_ROL_MEMBERS,',') R JOIN VISTA_ORGANIGRAMA O ON O.CODIGO=R.[VALUE]

	FETCH NEXT FROM curROLES 
	INTO @WF_ROL_NAME, @WF_ROL_MEMBERS 

END


CLOSE curROLES
DEALLOCATE curROLES





RETURN 
END
GO

GO
--SqlScripter----[dbo].[ik_wf_IsNodeInDB].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER ON
GO
IF OBJECT_ID('[dbo].[ik_wf_IsNodeInDB]') IS NULL EXEC('CREATE FUNCTION [dbo].[ik_wf_IsNodeInDB] () RETURNS @Ret TABLE (c1 int) AS BEGIN /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ RETURN END')
GO
ALTER FUNCTION [dbo].[ik_wf_IsNodeInDB]
(
	@WF_ID int,
	@WF_NODE_XMLNODE_ID nvarchar(100)
)  
RETURNS @RESULTS table (RESULT nvarchar(5))
AS  
BEGIN

IF (SELECT COUNT(*) FROM WF_NODE WHERE WF_ID=@WF_ID AND WF_NODE_XMLNODE_ID=@WF_NODE_XMLNODE_ID)>0
BEGIN
	INSERT INTO @RESULTS(RESULT)
	SELECT 'YES'
END
ELSE
BEGIN
	INSERT INTO @RESULTS(RESULT)
	SELECT 'NO' 
END

RETURN
END
GO
