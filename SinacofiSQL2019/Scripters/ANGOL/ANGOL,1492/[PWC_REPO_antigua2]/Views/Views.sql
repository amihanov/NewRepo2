
GO
--SqlScripter----[dbo].[REP_ALL_MAPPINGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_MAPPINGS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_MAPPINGS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_MAPPINGS]
AS 
SELECT  
	OPB_SUBJECT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
	OPB_MAPPING.MAPPING_NAME PARENT_MAPPING_NAME,  
	OPB_MAPPING.MAPPING_ID PARENT_MAPPING_ID,  
	OPB_MAPPING.VERSION_NUMBER PARENT_MAPPING_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS PARENT_MAPPING_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN PARENT_MAPPING_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED PARENT_MAPPING_UTC_LAST_SAVED,
    OPB_MAPPING.LAST_SAVED  PARENT_MAPPING_LAST_SAVED, 
    OPB_MAPPING.IS_VALID PARENT_MAPPING_IS_VALID,
	OPB_MAPPING.COMMENTS PARENT_MAPPING_DESCRIPTION,
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
	OPB_MAPPING.MAPPING_ID MAPPING_ID,  
	OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS MAPPING_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN MAPPING_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED MAPPING_UTC_LAST_SAVED,
	OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,  
	OPB_MAPPING.COMMENTS MAPPING_DESCRIPTION,  
	NULL REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	0 IS_SHORTCUT  
FROM  
	OPB_MAPPING, OPB_SUBJECT  
WHERE  
	OPB_MAPPING.REF_WIDGET_ID = 0 
	AND OPB_MAPPING.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_MAPPING.IS_VISIBLE = 1 
UNION ALL
SELECT  
	PARENT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	PARENT.SUBJ_ID PARENT_SUBJECT_ID,  
	CHILD.SUBJ_NAME SUBJECT_AREA,  
	CHILD.SUBJ_ID SUBJECT_ID,  
	OPB_MAPPING.MAPPING_NAME PARENT_MAPPING_NAME,  
	OPB_MAPPING.MAPPING_ID PARENT_MAPPING_ID,  
	OPB_MAPPING.VERSION_NUMBER PARENT_MAPPING_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS PARENT_MAPPING_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN PARENT_MAPPING_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED PARENT_MAPPING_UTC_LAST_SAVED,
	OPB_MAPPING.LAST_SAVED PARENT_MAPPING_LAST_SAVED,
    OPB_MAPPING.IS_VALID PARENT_MAPPING_IS_VALID,
    OPB_MAPPING.COMMENTS PARENT_MAPPING_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME MAPPING_NAME,  
	OPB_SHORTCUT.OBJECT_ID MAPPING_ID,  
	OPB_SHORTCUT.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS MAPPING_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN MAPPING_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED MAPPING_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME MAPPING_LAST_SAVED,	
    OPB_SHORTCUT.COMMENTS MAPPING_DESCRIPTION,  
	NULL REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_SHORTCUT, OPB_MAPPING, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD  
WHERE  
	OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
	AND OPB_SHORTCUT.OBJECT_ID = OPB_MAPPING.MAPPING_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
	AND OPB_SHORTCUT.IS_VISIBLE = 1 
	AND OPB_SHORTCUT.OBJECT_TYPE=21 
	AND OPB_MAPPING.SUBJECT_ID = PARENT.SUBJ_ID 
	AND OPB_MAPPING.IS_VISIBLE = 1
UNION ALL
SELECT  
	NULL PARENT_SUBJECT_AREA,  
	NULL PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
	NULL PARENT_MAPPING_NAME,  
	NULL PARENT_MAPPING_ID,
	NULL PARENT_MAPPING_VERSION_NUMBER,
    NULL PARENT_MAPPING_VERSION_STATUS,
	NULL PARENT_MAPPING_UTC_CHECKIN,
	NULL PARENT_MAPPING_UTC_LAST_SAVED,
	NULL PARENT_MAPPING_LAST_SAVED,
    NULL PARENT_MAPPING_IS_VALID,
    NULL PARENT_MAPPING_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME MAPPING_NAME,  
	OPB_SHORTCUT.OBJECT_ID MAPPING_ID,  
	OPB_SHORTCUT.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS MAPPING_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN MAPPING_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED MAPPING_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME MAPPING_LAST_SAVED,	
	OPB_SHORTCUT.COMMENTS MAPPING_DESCRIPTION,  
	OPB_SHORTCUT.REPOSITORY_NAME REPOSITORY_NAME,  
	1 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_SHORTCUT, OPB_SUBJECT  
WHERE  
	OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
	AND OPB_SHORTCUT.OBJECT_TYPE = 21 
	AND OPB_SHORTCUT.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_ALL_MAPPLETS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_MAPPLETS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_MAPPLETS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_MAPPLETS]
AS 
SELECT  
	OPB_SUBJECT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
	OPB_MAPPING.MAPPING_NAME PARENT_MAPPLET_NAME,  
	OPB_MAPPING.MAPPING_ID PARENT_MAPPLET_ID,  
	OPB_MAPPING.VERSION_NUMBER PARENT_MAPPLET_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS PARENT_MAPPLET_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN PARENT_MAPPLET_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED PARENT_MAPPLET_UTC_LAST_SAVED,
	OPB_MAPPING.LAST_SAVED PARENT_MAPPLET_LAST_SAVED,
    OPB_MAPPING.IS_VALID PARENT_MAPPLET_IS_VALID,
    OPB_MAPPING.COMMENTS PARENT_MAPPLET_DESCRIPTION,
    OPB_MAPPING.MAPPING_NAME MAPPLET_NAME,  
	OPB_MAPPING.MAPPING_ID MAPPLET_ID,  
	OPB_MAPPING.VERSION_NUMBER MAPPLET_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS MAPPLET_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN MAPPLET_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED MAPPLET_UTC_LAST_SAVED,
	OPB_MAPPING.LAST_SAVED MAPPLET_LAST_SAVED,  
	OPB_MAPPING.COMMENTS MAPPLET_DESCRIPTION, 
	OPB_MAPPING.REF_WIDGET_ID, 
	NULL REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	0 IS_SHORTCUT  
FROM  
	OPB_MAPPING, OPB_SUBJECT  
WHERE  
	OPB_MAPPING.REF_WIDGET_ID != 0 
	AND OPB_MAPPING.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID  
	AND OPB_MAPPING.IS_VISIBLE = 1 
UNION ALL
SELECT 
	PARENT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	PARENT.SUBJ_ID PARENT_SUBJECT_ID,  
	CHILD.SUBJ_NAME SUBJECT_AREA,  
	CHILD.SUBJ_ID SUBJECT_ID,  
	OPB_MAPPING.MAPPING_NAME PARENT_MAPPLET_NAME,  
	OPB_MAPPING.MAPPING_ID PARENT_MAPPLET_ID,  
	OPB_MAPPING.VERSION_NUMBER PARENT_MAPPLET_VERSION_NUMBER,
    OPB_MAPPING.VERSION_STATUS PARENT_MAPPLET_VERSION_STATUS,
	OPB_MAPPING.UTC_CHECKIN PARENT_MAPPLET_UTC_CHECKIN,
	OPB_MAPPING.UTC_LAST_SAVED PARENT_MAPPLET_UTC_LAST_SAVED,
	OPB_MAPPING.LAST_SAVED PARENT_MAPPLET_LAST_SAVED,
    OPB_MAPPING.IS_VALID PARENT_MAPPLET_IS_VALID,
    OPB_MAPPING.COMMENTS PARENT_MAPPLET_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME MAPPLET_NAME,  
	OPB_SHORTCUT.OBJECT_ID MAPPLET_ID,  
	OPB_SHORTCUT.VERSION_NUMBER MAPPLET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS MAPPLET_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN MAPPLET_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED MAPPLET_UTC_LAST_SAVED,
	OPB_SHORTCUT.CREATION_TIME MAPPLET_LAST_SAVED,
	OPB_SHORTCUT.COMMENTS MAPPLET_DESCRIPTION,  
	OPB_MAPPING.REF_WIDGET_ID,
	OPB_SHORTCUT.REPOSITORY_NAME REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_WIDGET, OPB_SHORTCUT, OPB_MAPPING, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD  
WHERE 
	OPB_WIDGET.WIDGET_ID = OPB_SHORTCUT.OBJECT_ID 
	AND OPB_WIDGET.WIDGET_ID = OPB_MAPPING.REF_WIDGET_ID 
	AND OPB_WIDGET.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND OPB_MAPPING.SUBJECT_ID = PARENT.SUBJ_ID 
	AND OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
	AND OPB_SHORTCUT.OBJECT_TYPE = 44 
	AND OPB_SHORTCUT.IS_VISIBLE = 1 
	AND OPB_MAPPING.IS_VISIBLE = 1
	AND OPB_WIDGET.IS_VISIBLE = 1
UNION ALL
SELECT  
	NULL PARENT_SUBJECT_AREA,  
	NULL PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
	NULL PARENT_MAPPLET_NAME,  
	NULL PARENT_MAPPLET_ID,  
	NULL PARENT_MAPPLET_VERSION_NUMBER,
    NULL PARENT_MAPPLET_VERSION_STATUS,
	NULL PARENT_MAPPLET_UTC_CHECKIN,
	NULL PARENT_MAPPLET_UTC_LAST_SAVED,
	NULL PARENT_MAPPLET_LAST_SAVED,
    NULL PARENT_MAPPLET_IS_VALID,
    NULL PARENT_MAPPLET_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME MAPPLET_NAME,  
	OPB_SHORTCUT.OBJECT_ID MAPPLET_ID,  
	OPB_SHORTCUT.VERSION_NUMBER MAPPLET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS MAPPLET_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN MAPPLET_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED MAPPLET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME MAPPLET_LAST_SAVED,	
	OPB_SHORTCUT.COMMENTS MAPPLET_DESCRIPTION,  
	0 REF_WIDGET_ID,
	OPB_SHORTCUT.REPOSITORY_NAME REPOSITORY_NAME,  
	1 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_SHORTCUT, OPB_SUBJECT  
WHERE  
	OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
	AND OPB_SHORTCUT.OBJECT_TYPE = 44 
	AND OPB_SHORTCUT.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_ALL_SCHEDULERS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_SCHEDULERS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_SCHEDULERS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_SCHEDULERS]
AS
SELECT 
	OPB_SCHEDULER.SUBJECT_ID,
	OPB_SCHEDULER.SCHEDULER_ID,
	OPB_SCHEDULER.SCHEDULER_NAME,
	OPB_SCHEDULER.START_TIME,
	OPB_SCHEDULER.END_TIME,
	OPB_SCHEDULER.RUN_OPTIONS,
	OPB_SCHEDULER.END_OPTIONS,
	OPB_SCHEDULER.DELTA_VALUE,
	OPB_SCHEDULER.RUN_COUNT,
	OPB_SCHEDULER.COMMENTS DESCRIPTION,
	OPB_SCHEDULER.IS_REUSABLE,
	OPB_SCHEDULER.LAST_SAVED,
	OPB_SCHEDULER.VERSION_NUMBER,
	OPB_SCHEDULER.UTC_LAST_SAVED,
	OPB_SCHEDULER.UTC_CHECKIN
FROM 
	OPB_SCHEDULER
WHERE
	OPB_SCHEDULER.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_ALL_SOURCE_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_SOURCE_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_SOURCE_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_SOURCE_FLDS]
AS 
SELECT  
    OPB_SUBJECT.SUBJ_NAME          PARENT_SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID            PARENT_SUBJECT_ID,  
    OPB_SRC.SOURCE_NAME            PARENT_SOURCE_NAME,  
    OPB_SRC.BUSINESS_NAME          PARENT_SOURCE_BUSINESS_NAME,  
    OPB_SRC.SRC_ID                 PARENT_SOURCE_ID,  
    OPB_SRC.SRC_DESC               PARENT_SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER         PARENT_SOURCE_VERSION_NUMBER,  
    OPB_SRC.VERSION_STATUS         PARENT_SOURCE_VERSION_STATUS,  
    OPB_SRC.UTC_CHECKIN            PARENT_SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED         PARENT_SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED             PARENT_SOURCE_LAST_SAVED,
    OPB_DBD.SRCTYPE                PARENT_SOURCE_TYPE,  
    OPB_DBD.DBDNAM                 PARENT_SOURCE_DATABASE_NAME,  
    OPB_MMD_DBTYPE.DBTYPE_NAME     PARENT_SOURCE_DATABASE_TYPE,  
    OPB_SUBJECT.SUBJ_NAME          SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID            SUBJECT_ID, 
    OPB_SRC.SOURCE_NAME            SOURCE_NAME,  
    OPB_SRC.SRC_ID                 SOURCE_ID,  
    OPB_SRC.SRC_DESC               SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER         SOURCE_VERSION_NUMBER,
    OPB_SRC.VERSION_STATUS         SOURCE_VERSION_STATUS,
    OPB_SRC.UTC_CHECKIN            SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED         SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED             SOURCE_LAST_SAVED,
    OPB_DBD.DBDNAM                 SOURCE_DATABASE_NAME,
    OPB_SRC_FLD.SRC_NAME           SOURCE_FIELD_NAME,  
    OPB_SRC_FLD.BUSINESS_NAME      SOURCE_FIELD_BUSINESS_NAME,  
    OPB_SRC_FLD.FLDID              SOURCE_FIELD_ID,  
    OPB_SRC_FLD.SRC_DESC           SOURCE_FIELD_DESCRIPTION,  
    OPB_SRC_FLD.FLDNO              SOURCE_FIELD_NUMBER,
    OPB_SRC_FLD.NXTSIBID           SOURCE_FIELD_NEXT_FIELD_ID,
    OPB_SRC_FLD.FLDLVL             SOURCE_FIELD_LEVEL,
    OPB_SRC_FLD.PICTXT             SOURCE_FIELD_PICTURE_TEXT,
    OPB_SRC_FLD.OCCTIMES           SOURCE_FIELD_OCCURS_TIMES,
    OPB_SRC_FLD.REDFNAME           SOURCE_FIELD_REDEFINES_FIELD,
    OPB_SRC_FLD.OFFS               SOURCE_FIELD_DISPLAY_OFFSET,
    OPB_SRC_FLD.LEN                SOURCE_FIELD_DISPLAY_LENGTH,
    OPB_SRC_FLD.POFFS              SOURCE_FIELD_PHYSICAL_OFFSET,
    OPB_SRC_FLD.PLEN               SOURCE_FIELD_PHYSICAL_LENGTH,
    OPB_SRC_FLD.NXTCHLDID          SOURCE_FIELD_CHILD_FIELD_ID,
    REP_SRC_KEY_TYPES.KEYTYPE_NAME SOURCE_FIELD_KEY_TYPE,  
    REP_FLD_DATATYPE.DTYPE_NAME    SOURCE_FIELD_DATATYPE,  
    OPB_PICDSC.SRC_PREC            SOURCE_FIELD_PRECISION,  
    OPB_PICDSC.SRC_SCALE           SOURCE_FIELD_SCALE,  
    REP_PIC_USAGE.USAGE_NAME       SOURCE_FIELD_PIC_USAGE_NAME,
    OPB_SRC_FLD.NULLTYPE           SOURCE_FIELD_NULLTYPE,  
    NULL                           REPOSITORY_NAME,  
    0                              IS_SHORTCUT,  
    0                              IS_GLOBAL_SHORTCUT
FROM  
    OPB_SUBJECT, OPB_SRC, OPB_DBD, OPB_MMD_DBTYPE, OPB_SRC_FLD,  
    REP_FLD_DATATYPE, OPB_PICDSC, REP_SRC_KEY_TYPES, REP_PIC_USAGE
WHERE  
    OPB_SRC.SUBJ_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_SRC.SUBJ_ID = OPB_DBD.SUBJ_ID
    AND OPB_SRC.SRC_ID = OPB_SRC_FLD.SRC_ID 
    AND OPB_SRC_FLD.PICID = OPB_PICDSC.PICID 
    AND OPB_SRC_FLD.KEYTYPE = REP_SRC_KEY_TYPES.KEYTYPE_NUM 
    AND OPB_SRC.DBDID = OPB_DBD.DBDID
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_SRC_FLD.IS_HIDDEN = 0 
    AND OPB_PICDSC.SRC_NTYPE = REP_FLD_DATATYPE.DTYPE_NUM 
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER 
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER 
    AND OPB_SRC.VERSION_NUMBER = OPB_PICDSC.VERSION_NUMBER 
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_PICDSC.PIC_USAGE % 16 = REP_PIC_USAGE.USAGE_NUM
    AND NOT EXISTS (SELECT '1' FROM OPB_SHORTCUT, OPB_SHORTCUT DBD  
    WHERE OPB_SRC.SRC_ID = OPB_SHORTCUT.OBJECT_ID  
      AND OPB_SRC.SUBJ_ID = OPB_SHORTCUT.SUBJECT_ID  
      AND OPB_SHORTCUT.OBJECT_TYPE = 25
      AND OPB_SHORTCUT.IS_VISIBLE = 1
      AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
      AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
      AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
      AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
      AND DBD.OBJECT_TYPE = 22)  
UNION ALL
SELECT  
    PARENT.SUBJ_NAME               PARENT_SUBJECT_AREA,  
    PARENT.SUBJ_ID                 PARENT_SUBJECT_ID,  
    OPB_SRC.SOURCE_NAME            PARENT_SOURCE_NAME,  
    OPB_SRC.BUSINESS_NAME          PARENT_SOURCE_BUSINESS_NAME,  
    OPB_SRC.SRC_ID                 PARENT_SOURCE_ID,  
    OPB_SRC.SRC_DESC               PARENT_SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER         PARENT_SOURCE_VERSION_NUMBER,  
    OPB_SRC.VERSION_STATUS         PARENT_SOURCE_VERSION_STATUS,  
    OPB_SRC.UTC_CHECKIN            PARENT_SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED         PARENT_SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED             PARENT_SOURCE_LAST_SAVED,
    OPB_DBD.SRCTYPE                PARENT_SOURCE_TYPE,  
    OPB_DBD.DBDNAM                 PARENT_SOURCE_DATABASE_NAME,  
    OPB_MMD_DBTYPE.DBTYPE_NAME     PARENT_SOURCE_DATABASE_TYPE,  
    CHILD.SUBJ_NAME                SUBJECT_AREA,  
    CHILD.SUBJ_ID                  SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME     SOURCE_NAME,  
    OPB_SHORTCUT.OBJECT_ID         SOURCE_ID,  
    OPB_SHORTCUT.COMMENTS          SOURCE_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER    SOURCE_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS    SOURCE_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN       SOURCE_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED    SOURCE_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME     SOURCE_LAST_SAVED, 
    DBD.SHORTCUT_NAME              SOURCE_DATABASE_NAME,
    OPB_SRC_FLD.SRC_NAME           SOURCE_FIELD_NAME,  
    OPB_SRC_FLD.BUSINESS_NAME      SOURCE_FIELD_BUSINESS_NAME,  
    OPB_SRC_FLD.FLDID              SOURCE_FIELD_ID,  
    OPB_SRC_FLD.SRC_DESC           SOURCE_FIELD_DESCRIPTION,  
    OPB_SRC_FLD.FLDNO              SOURCE_FIELD_NUMBER,
    OPB_SRC_FLD.NXTSIBID           SOURCE_FIELD_NEXT_FIELD_ID,
    OPB_SRC_FLD.FLDLVL             SOURCE_FIELD_LEVEL,
    OPB_SRC_FLD.PICTXT             SOURCE_FIELD_PICTURE_TEXT,
    OPB_SRC_FLD.OCCTIMES           SOURCE_FIELD_OCCURS_TIMES,
    OPB_SRC_FLD.REDFNAME           SOURCE_FIELD_REDEFINES_FIELD,
    OPB_SRC_FLD.OFFS               SOURCE_FIELD_DISPLAY_OFFSET,
    OPB_SRC_FLD.LEN                SOURCE_FIELD_DISPLAY_LENGTH,
    OPB_SRC_FLD.POFFS              SOURCE_FIELD_PHYSICAL_OFFSET,
    OPB_SRC_FLD.PLEN               SOURCE_FIELD_PHYSICAL_LENGTH,
    OPB_SRC_FLD.NXTCHLDID          SOURCE_FIELD_CHILD_FIELD_ID,
    REP_SRC_KEY_TYPES.KEYTYPE_NAME SOURCE_FIELD_KEY_TYPE, 
    REP_FLD_DATATYPE.DTYPE_NAME    SOURCE_FIELD_DATATYPE,  
    OPB_PICDSC.SRC_PREC            SOURCE_FIELD_PRECISION,  
    OPB_PICDSC.SRC_SCALE           SOURCE_FIELD_SCALE, 
    REP_PIC_USAGE.USAGE_NAME       SOURCE_FIELD_PIC_USAGE_NAME,
    OPB_SRC_FLD.NULLTYPE           SOURCE_FIELD_NULLTYPE,  
    OPB_SHORTCUT.REPOSITORY_NAME   REPOSITORY_NAME,  
    1                              IS_SHORTCUT,  
    0                              IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD, 
    OPB_SRC, OPB_DBD, OPB_MMD_DBTYPE, OPB_SRC_FLD,  
    REP_FLD_DATATYPE, OPB_PICDSC, REP_SRC_KEY_TYPES, OPB_SHORTCUT DBD, REP_PIC_USAGE
WHERE  
    OPB_SHORTCUT.OBJECT_ID = OPB_SRC.SRC_ID 
    AND OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
    AND OPB_SHORTCUT.IS_VISIBLE = 1 
    AND OPB_SHORTCUT.OBJECT_TYPE = 25 
    AND OPB_SRC.SUBJ_ID = PARENT.SUBJ_ID 
    AND OPB_SRC.SRC_ID = OPB_SRC_FLD.SRC_ID 
    AND OPB_SRC.DBDID = OPB_DBD.DBDID 
    AND OPB_SRC_FLD.PICID = OPB_PICDSC.PICID 
    AND OPB_SRC_FLD.KEYTYPE = REP_SRC_KEY_TYPES.KEYTYPE_NUM 
    AND OPB_SRC_FLD.IS_HIDDEN = 0 
    AND OPB_PICDSC.SRC_NTYPE = REP_FLD_DATATYPE.DTYPE_NUM 
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER 
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER 
    AND OPB_SRC.VERSION_NUMBER = OPB_PICDSC.VERSION_NUMBER 
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_PICDSC.PIC_USAGE % 16 = REP_PIC_USAGE.USAGE_NUM
    AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
    AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
    AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
    AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
    AND DBD.OBJECT_TYPE = 22
UNION ALL
SELECT  
    NULL                           PARENT_SUBJECT_AREA,  
    NULL                           PARENT_SUBJECT_ID,  
    NULL                           PARENT_SOURCE_NAME,  
    NULL                           PARENT_SOURCE_BUSINESS_NAME,  
    NULL                           PARENT_SOURCE_ID,  
    NULL                           PARENT_SOURCE_DESCRIPTION,  
    NULL                           PARENT_SOURCE_VERSION_NUMBER,
    NULL                           PARENT_SOURCE_VERSION_STATUS,  
    NULL                           PARENT_SOURCE_UTC_CHECKIN,
    NULL                           PARENT_SOURCE_UTC_LAST_SAVED,
    NULL                           PARENT_SOURCE_LAST_SAVED,
    NULL                           PARENT_SOURCE_TYPE,  
    NULL                           PARENT_SOURCE_DATABASE_NAME,  
    NULL                           PARENT_SOURCE_DATABASE_TYPE,  
    OPB_SUBJECT.SUBJ_NAME          SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID            SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME     SOURCE_NAME,  
    OPB_SHORTCUT.OBJECT_ID         SOURCE_ID,
    OPB_SHORTCUT.COMMENTS          SOURCE_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER    SOURCE_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS    SOURCE_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN       SOURCE_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED    SOURCE_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME     SOURCE_LAST_SAVED, 
    DBD.SHORTCUT_NAME              SOURCE_DATABASE_NAME,
    NULL                           SOURCE_FIELD_NAME,  
    NULL                           SOURCE_FIELD_BUSINESS_NAME,  
    NULL                           SOURCE_FIELD_ID,
    NULL                           SOURCE_FIELD_DESCRIPTION,  
    NULL                           SOURCE_FIELD_NUMBER,
    NULL                           SOURCE_FIELD_NEXT_FIELD_ID,
    NULL                           SOURCE_FIELD_LEVEL,
    NULL                           SOURCE_FIELD_PICTURE_TEXT,
    NULL                           SOURCE_FIELD_OCCURS_TIMES,
    NULL                           SOURCE_FIELD_REDEFINES_FIELD,
    NULL                           SOURCE_FIELD_DISPLAY_OFFSET,
    NULL                           SOURCE_FIELD_DISPLAY_LENGTH,
    NULL                           SOURCE_FIELD_PHYSICAL_OFFSET,
    NULL                           SOURCE_FIELD_PHYSICAL_LENGTH,
    NULL                           SOURCE_FIELD_CHILD_FIELD_ID,
    NULL                           SOURCE_FIELD_KEY_TYPE,  
    NULL                           SOURCE_FIELD_DATATYPE,  
    NULL                           SOURCE_FIELD_PRECISION,  
    NULL                           SOURCE_FIELD_SCALE,  
    NULL                           SOURCE_FIELD_PIC_USAGE_NAME,
    NULL                           SOURCE_FIELD_NULLTYPE,  
    OPB_SHORTCUT.REPOSITORY_NAME   REPOSITORY_NAME,  
    1                              IS_SHORTCUT,  
    1                              IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT, OPB_SHORTCUT DBD
WHERE  
    OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
    AND OPB_SHORTCUT.OBJECT_TYPE = 25 
    AND OPB_SHORTCUT.IS_VISIBLE = 1
    AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
    AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
    AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
    AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
    AND DBD.OBJECT_TYPE = 22
GO

GO
--SqlScripter----[dbo].[REP_ALL_SOURCES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_SOURCES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_SOURCES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_SOURCES]
AS 
SELECT  
    OPB_SUBJECT.SUBJ_NAME         PARENT_SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID           PARENT_SUBJECT_ID,  
    OPB_SRC.SOURCE_NAME           PARENT_SOURCE_NAME,
    OPB_SRC.BUSINESS_NAME         PARENT_SOURCE_BUSINESS_NAME,  
    OPB_SRC.SRC_ID                PARENT_SOURCE_ID,  
    OPB_SRC.SRC_DESC              PARENT_SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER        PARENT_SOURCE_VERSION_NUMBER,
    OPB_SRC.VERSION_STATUS        PARENT_SOURCE_VERSION_STATUS,
    OPB_SRC.UTC_CHECKIN           PARENT_SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED        PARENT_SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED            PARENT_SOURCE_LAST_SAVED,
    OPB_SRC.FILE_NAME             PARENT_SOURCE_SCHEMA_NAME,
    OPB_SRC.FLDID                 PARENT_SOURCE_FIRST_FIELD_ID,
    OPB_SRC.SELID                 PARENT_SOURCE_SELECT_INFO_ID,
    OPB_SRC.FDSIZ                 PARENT_SOURCE_DISPLAY_SIZE,
    OPB_SRC.PFDSIZ                PARENT_SOURCE_PHYSICAL_SIZE,
    OPB_SRC.PFDSIZ_MIN            PARENT_SRC_MIN_PHYSICAL_SIZE,
    OPB_DBD.DBDNAM                PARENT_SOURCE_DATABASE_NAME,
    OPB_DBD.SRCTYPE               PARENT_SOURCE_TYPE,
    OPB_MMD_DBTYPE.DBTYPE_NAME    PARENT_SOURCE_DATABASE_TYPE,  
    OPB_SUBJECT.SUBJ_NAME         SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID           SUBJECT_ID,  
    OPB_SRC.SOURCE_NAME           SOURCE_NAME,  
    OPB_SRC.SRC_ID                SOURCE_ID,  
    OPB_SRC.SRC_DESC              SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER        SOURCE_VERSION_NUMBER,
    OPB_SRC.VERSION_STATUS        SOURCE_VERSION_STATUS,
    OPB_SRC.UTC_CHECKIN           SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED        SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED            SOURCE_LAST_SAVED,
    OPB_DBD.DBDNAM                SOURCE_DATABASE_NAME,
    NULL                          REPOSITORY_NAME,
    0                             IS_SHORTCUT,
    0                             IS_GLOBAL_SHORTCUT
FROM  
    OPB_SUBJECT, OPB_SRC, OPB_DBD, OPB_MMD_DBTYPE
WHERE  
    OPB_SRC.SUBJ_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_SUBJECT.SUBJ_ID = OPB_DBD.SUBJ_ID
    AND OPB_SRC.DBDID = OPB_DBD.DBDID 
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER 
    AND OPB_SRC.IS_VISIBLE = 1
    AND NOT EXISTS (SELECT '1' FROM OPB_SHORTCUT, OPB_SHORTCUT DBD  
    WHERE OPB_SRC.SRC_ID = OPB_SHORTCUT.OBJECT_ID  
      AND OPB_SRC.SUBJ_ID = OPB_SHORTCUT.SUBJECT_ID  
      AND OPB_SHORTCUT.OBJECT_TYPE = 25
      AND OPB_SHORTCUT.IS_VISIBLE = 1
      AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
      AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
      AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
      AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
      AND DBD.OBJECT_TYPE = 22)  
UNION ALL
SELECT
    PARENT.SUBJ_NAME              PARENT_SUBJECT_AREA,  
    PARENT.SUBJ_ID                PARENT_SUBJECT_ID,  
    OPB_SRC.SOURCE_NAME           PARENT_SOURCE_NAME,  
    OPB_SRC.BUSINESS_NAME         PARENT_SOURCE_BUSINESS_NAME,  
    OPB_SRC.SRC_ID                PARENT_SOURCE_ID,  
    OPB_SRC.SRC_DESC              PARENT_SOURCE_DESCRIPTION,
    OPB_SRC.VERSION_NUMBER        PARENT_SOURCE_VERSION_NUMBER,
    OPB_SRC.VERSION_STATUS        PARENT_SOURCE_VERSION_STATUS,
    OPB_SRC.UTC_CHECKIN           PARENT_SOURCE_UTC_CHECKIN,
    OPB_SRC.UTC_LAST_SAVED        PARENT_SOURCE_UTC_LAST_SAVED,
    OPB_SRC.LAST_SAVED            PARENT_SOURCE_LAST_SAVED,
    OPB_SRC.FILE_NAME             PARENT_SOURCE_SCHEMA_NAME,
    OPB_SRC.FLDID                 PARENT_SOURCE_FIRST_FIELD_ID,
    OPB_SRC.SELID                 PARENT_SOURCE_SELECT_INFO_ID,
    OPB_SRC.FDSIZ                 PARENT_SOURCE_DISPLAY_SIZE,
    OPB_SRC.PFDSIZ                PARENT_SOURCE_PHYSICAL_SIZE,
    OPB_SRC.PFDSIZ_MIN            PARENT_SRC_MIN_PHYSICAL_SIZE,
    OPB_DBD.DBDNAM                PARENT_SOURCE_DATABASE_NAME,
    OPB_DBD.SRCTYPE               PARENT_SOURCE_TYPE,
    OPB_MMD_DBTYPE.DBTYPE_NAME    PARENT_SOURCE_DATABASE_TYPE,  
    CHILD.SUBJ_NAME               SUBJECT_AREA,  
    CHILD.SUBJ_ID                 SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME    SOURCE_NAME,  
    OPB_SHORTCUT.OBJECT_ID        SOURCE_ID,  
    OPB_SHORTCUT.COMMENTS         SOURCE_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER   SOURCE_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS   SOURCE_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN      SOURCE_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED   SOURCE_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME    SOURCE_LAST_SAVED,
    DBD.SHORTCUT_NAME             SOURCE_DATABASE_NAME,
    OPB_SHORTCUT.REPOSITORY_NAME  REPOSITORY_NAME,
    1                             IS_SHORTCUT,
    0                             IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD, 
    OPB_SRC, OPB_DBD, OPB_MMD_DBTYPE, OPB_SHORTCUT DBD 
WHERE  
    OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
    AND OPB_SHORTCUT.OBJECT_ID = OPB_SRC.SRC_ID 
    AND OPB_SHORTCUT.OBJECT_TYPE = 25 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
    AND OPB_SHORTCUT.IS_VISIBLE = 1 
    AND OPB_SRC.SUBJ_ID = PARENT.SUBJ_ID 
    AND OPB_SRC.DBDID = OPB_DBD.DBDID 
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER 
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
    AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
    AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
    AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
    AND DBD.OBJECT_TYPE = 22
UNION ALL
SELECT
    NULL                          PARENT_SUBJECT_AREA,  
    NULL                          PARENT_SUBJECT_ID,  
    NULL                          PARENT_SOURCE_NAME,
    NULL                          PARENT_SOURCE_BUSINESS_NAME,  
    NULL                          PARENT_SOURCE_ID,  
    NULL                          PARENT_SOURCE_DESCRIPTION,
	NULL                          PARENT_SOURCE_VERSION_NUMBER,
	NULL                          PARENT_SOURCE_VERSION_STATUS,
    NULL                          PARENT_SOURCE_UTC_CHECKIN,
    NULL                          PARENT_SOURCE_UTC_LAST_SAVED,
    NULL                          PARENT_SOURCE_LAST_SAVED,
    NULL                          PARENT_SOURCE_SCHEMA_NAME,
    NULL                          PARENT_SOURCE_FIRST_FIELD_ID,
    NULL                          PARENT_SOURCE_SELECT_INFO_ID,
    NULL                          PARENT_SOURCE_DISPLAY_SIZE,
    NULL                          PARENT_SOURCE_PHYSICAL_SIZE,
    NULL                          PARENT_SRC_MIN_PHYSICAL_SIZE,
    NULL                          PARENT_SOURCE_DATABASE_NAME,
    NULL                          PARENT_SOURCE_TYPE,
    NULL                          PARENT_SOURCE_DATABASE_TYPE,  
    OPB_SUBJECT.SUBJ_NAME         SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID           SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME    SOURCE_NAME,  
    OPB_SHORTCUT.OBJECT_ID        SOURCE_ID,
    OPB_SHORTCUT.COMMENTS         SOURCE_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER   SOURCE_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS   SOURCE_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN      SOURCE_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED   SOURCE_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME    SOURCE_LAST_SAVED,
    DBD.SHORTCUT_NAME             SOURCE_DATABASE_NAME,
    OPB_SHORTCUT.REPOSITORY_NAME  REPOSITORY_NAME,
    1                             IS_SHORTCUT,
    1                             IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT, OPB_SHORTCUT DBD 
WHERE  
    OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_SHORTCUT.OBJECT_TYPE = 25 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
    AND OPB_SHORTCUT.IS_VISIBLE = 1
    AND OPB_SHORTCUT.PARENT_ID = DBD.OBJECT_ID
    AND OPB_SHORTCUT.SUBJECT_ID = DBD.SUBJECT_ID
    AND OPB_SHORTCUT.VERSION_NUMBER = DBD.VERSION_NUMBER
    AND NOT (OPB_SHORTCUT.SHORTCUT_NAME = DBD.SHORTCUT_NAME)
    AND DBD.OBJECT_TYPE = 22
GO

GO
--SqlScripter----[dbo].[REP_ALL_TARGET_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_TARGET_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_TARGET_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_TARGET_FLDS]
AS 
SELECT
    OPB_SUBJECT.SUBJ_NAME             PARENT_SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID               PARENT_SUBJECT_ID,  
    OPB_TARG.TARGET_NAME              PARENT_TARGET_NAME, 
    OPB_TARG.BUSINESS_NAME            PARENT_TARGET_BUSINESS_NAME,
    OPB_TARG.TARGET_ID                PARENT_TARGET_ID,
    OPB_TARG.TARGET_DESC              PARENT_TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER           PARENT_TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS           PARENT_TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN              PARENT_TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED           PARENT_TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED               PARENT_TARGET_LAST_SAVED,
    OPB_TARG.FILE_ID                  PARENT_TARGET_FILE_ID,
    OPB_MMD_DBTYPE.DBTYPE_NAME        PARENT_TARGET_DATABASE_TYPE,
    OPB_SUBJECT.SUBJ_NAME             SUBJECT_AREA, 
    OPB_SUBJECT.SUBJ_ID               SUBJECT_ID,
    OPB_TARG.TARGET_NAME              TARGET_NAME, 
    OPB_TARG.TARGET_ID                TARGET_ID, 
    OPB_TARG.TARGET_DESC              TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER           TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS           TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN              TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED           TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED               TARGET_LAST_SAVED,
    OPB_TARG_FLD.TARGET_NAME          TARGET_FIELD_NAME,  
    OPB_TARG_FLD.BUSINESS_NAME        TARGET_FIELD_BUSINESS_NAME,  
    OPB_TARG_FLD.FLDID                TARGET_FIELD_ID,  
    OPB_TARG_FLD.TARGET_DESC          TARGET_FIELD_DESCRIPTION,  
    OPB_TARG_FLD.FLDNO                TARGET_FIELD_NUMBER,
    OPB_TARG_FLD.NXTFLDID             TARGET_FIELD_NEXT_FIELD_ID,  
    OPB_TARG_FLD.PICTXT               TARGET_FIELD_PICTURE_TEXT,
    OPB_TARG_FLD.NULLTYPE             TARGET_FIELD_IS_NULLABLE,
    OPB_TARG_FLD.DFLDID               TARGET_FIELD_SOURCE_FIELD_ID,
    REP_TARG_KEY_TYPES.KEYTYPE_NAME   TARGET_FIELD_KEY_TYPE, 
    REP_FLD_DATATYPE.DTYPE_NAME       TARGET_FIELD_DATATYPE,  
    REP_FLD_DATATYPE.DTYPE_GROUP_CODE TARGET_FIELD_DATATYPE_GROUP, 
    OPB_TARG_FLD.DPREC                TARGET_FIELD_PRECISION,  
    OPB_TARG_FLD.DSCALE               TARGET_FIELD_SCALE,  
    NULL                              REPOSITORY_NAME,
    0                                 IS_SHORTCUT,
    0                                 IS_GLOBAL_SHORTCUT
FROM  
    OPB_MMD_DBTYPE, OPB_TARG_FLD, REP_TARG_KEY_TYPES, 
    REP_FLD_DATATYPE, OPB_TARG, OPB_SUBJECT
WHERE  
    OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_TARG.TARGET_ID = OPB_TARG_FLD.TARGET_ID 
    AND OPB_TARG_FLD.NDTYPE = REP_FLD_DATATYPE.DTYPE_NUM 
    AND OPB_TARG_FLD.KEYTYPE = REP_TARG_KEY_TYPES.KEYTYPE_NUM 
    AND OPB_TARG.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER 
    AND OPB_TARG.IS_VISIBLE = 1
    AND NOT EXISTS (SELECT '1' FROM OPB_SHORTCUT  
    WHERE OPB_TARG.TARGET_ID = OPB_SHORTCUT.OBJECT_ID  
    AND OPB_TARG.SUBJ_ID = OPB_SHORTCUT.SUBJECT_ID  
    AND OPB_SHORTCUT.OBJECT_TYPE = 24
    AND OPB_SHORTCUT.IS_VISIBLE = 1)  
UNION ALL
SELECT  
    PARENT.SUBJ_NAME                  PARENT_SUBJECT_AREA,  
    PARENT.SUBJ_ID                    PARENT_SUBJECT_ID,  
    OPB_TARG.TARGET_NAME              PARENT_TARGET_NAME, 
    OPB_TARG.BUSINESS_NAME            PARENT_TARGET_BUSINESS_NAME,
    OPB_TARG.TARGET_ID                PARENT_TARGET_ID,
    OPB_TARG.TARGET_DESC              PARENT_TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER           PARENT_TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS           PARENT_TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN              PARENT_TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED           PARENT_TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED               PARENT_TARGET_LAST_SAVED,
    OPB_TARG.FILE_ID                  PARENT_TARGET_FILE_ID,
    OPB_MMD_DBTYPE.DBTYPE_NAME        PARENT_TARGET_DATABASE_TYPE,
    CHILD.SUBJ_NAME                   SUBJECT_AREA,  
    CHILD.SUBJ_ID                     SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME        TARGET_NAME,  
    OPB_SHORTCUT.OBJECT_ID            TARGET_ID,  
    OPB_SHORTCUT.COMMENTS             TARGET_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER       TARGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS       TARGET_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN          TARGET_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED       TARGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME        TARGET_LAST_SAVED,
    OPB_TARG_FLD.TARGET_NAME          TARGET_FIELD_NAME,  
    OPB_TARG_FLD.BUSINESS_NAME        TARGET_FIELD_BUSINESS_NAME,  
    OPB_TARG_FLD.FLDID                TARGET_FIELD_ID,  
    OPB_TARG_FLD.TARGET_DESC          TARGET_FIELD_DESCRIPTION,  
    OPB_TARG_FLD.FLDNO                TARGET_FIELD_NUMBER,
    OPB_TARG_FLD.NXTFLDID             TARGET_FIELD_NEXT_FIELD_ID,  
    OPB_TARG_FLD.PICTXT               TARGET_FIELD_PICTURE_TEXT,
    OPB_TARG_FLD.NULLTYPE             TARGET_FIELD_IS_NULLABLE,
    OPB_TARG_FLD.DFLDID               TARGET_FIELD_SOURCE_FIELD_ID,
    REP_TARG_KEY_TYPES.KEYTYPE_NAME   TARGET_FIELD_KEY_TYPE, 
    REP_FLD_DATATYPE.DTYPE_NAME       TARGET_FIELD_DATATYPE,
    REP_FLD_DATATYPE.DTYPE_GROUP_CODE TARGET_FIELD_DATATYPE_GROUP, 
    OPB_TARG_FLD.DPREC                TARGET_FIELD_PRECISION,  
    OPB_TARG_FLD.DSCALE               TARGET_FIELD_SCALE,  
    OPB_SHORTCUT.REPOSITORY_NAME      REPOSITORY_NAME,  
    1                                 IS_SHORTCUT,
    0                                 IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_MMD_DBTYPE, OPB_TARG_FLD, REP_TARG_KEY_TYPES, 
    REP_FLD_DATATYPE, OPB_TARG, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD
WHERE  
    OPB_SHORTCUT.SUBJECT_ID=CHILD.SUBJ_ID 
    AND OPB_SHORTCUT.OBJECT_ID = OPB_TARG.TARGET_ID 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
    AND OPB_SHORTCUT.OBJECT_TYPE = 24 
    AND OPB_SHORTCUT.IS_VISIBLE = 1 
    AND OPB_TARG.SUBJ_ID = PARENT.SUBJ_ID 
    AND OPB_TARG.TARGET_ID = OPB_TARG_FLD.TARGET_ID 
    AND OPB_TARG_FLD.NDTYPE = REP_FLD_DATATYPE.DTYPE_NUM 
    AND OPB_TARG_FLD.KEYTYPE = REP_TARG_KEY_TYPES.KEYTYPE_NUM 
    AND OPB_TARG.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER 
    AND OPB_TARG.IS_VISIBLE = 1
UNION ALL
SELECT
    NULL                              PARENT_SUBJECT_AREA,  
    NULL                              PARENT_SUBJECT_ID,  
    NULL                              PARENT_TARGET_NAME, 
    NULL                              PARENT_TARGET_BUSINESS_NAME,
    NULL                              PARENT_TARGET_ID,
    NULL                              PARENT_TARGET_DESCRIPTION,
    NULL                              PARENT_TARGET_VERSION_NUMBER,
    NULL                              PARENT_TARGET_VERSION_STATUS,
    NULL                              PARENT_TARGET_UTC_CHECKIN,
    NULL                              PARENT_TARGET_UTC_LAST_SAVED,
    NULL                              PARENT_TARGET_LAST_SAVED,
    NULL                              PARENT_TARGET_FILE_ID,
    NULL                              PARENT_TARGET_DATABASE_TYPE,
    OPB_SUBJECT.SUBJ_NAME             SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID               SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME        TARGET_NAME,  
    OPB_SHORTCUT.OBJECT_ID            TARGET_ID,  
    OPB_SHORTCUT.COMMENTS             TARGET_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER       TARGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS       TARGET_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN          TARGET_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED       TARGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME        TARGET_LAST_SAVED,
    NULL                              TARGET_FIELD_NAME,  
    NULL                              TARGET_FIELD_BUSINESS_NAME,  
    NULL                              TARGET_FIELD_ID,  
    NULL                              TARGET_FIELD_DESCRIPTION,  
    NULL                              TARGET_FIELD_NUMBER,
    NULL                              TARGET_FIELD_NEXT_FIELD_ID,  
    NULL                              TARGET_FIELD_PICTURE_TEXT,
    NULL                              TARGET_FIELD_IS_NULLABLE,
    NULL                              TARGET_FIELD_SOURCE_FIELD_ID,
    NULL                              TARGET_FIELD_KEY_TYPE, 
    NULL                              TARGET_FIELD_DATATYPE,
    NULL                              TARGET_FIELD_DATATYPE_GROUP, 
    NULL                              TARGET_FIELD_PRECISION,  
    NULL                              TARGET_FIELD_SCALE,  
    OPB_SHORTCUT.REPOSITORY_NAME      REPOSITORY_NAME,  
    1                                 IS_SHORTCUT,
    1                                 IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT  
WHERE  
    OPB_SHORTCUT.SUBJECT_ID=OPB_SUBJECT.SUBJ_ID 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
    AND OPB_SHORTCUT.OBJECT_TYPE = 24 
    AND OPB_SHORTCUT.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_ALL_TARGETS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_TARGETS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_TARGETS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_TARGETS]
AS
SELECT
    OPB_SUBJECT.SUBJ_NAME         PARENT_SUBJECT_AREA, 
    OPB_SUBJECT.SUBJ_ID           PARENT_SUBJECT_ID, 
    OPB_TARG.TARGET_NAME          PARENT_TARGET_NAME, 
    OPB_TARG.BUSINESS_NAME        PARENT_TARGET_BUSINESS_NAME, 
    OPB_TARG.TARGET_ID            PARENT_TARGET_ID,
    OPB_TARG.TARGET_DESC          PARENT_TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER       PARENT_TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS       PARENT_TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN          PARENT_TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED       PARENT_TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED           PARENT_TARGET_LAST_SAVED,
    OPB_TARG.FLDID                PARENT_TARGET_FIRST_FIELD_ID,
    OPB_TARG.CONSTR               PARENT_TARGET_CONSTRAINT,
    OPB_TARG.TBL_OPTIONS          PARENT_TARGET_CREATE_OPTIONS,
    OPB_TARG.INDEXID              PARENT_TARGET_FIRST_INDEX_ID,
    OPB_TARG.FILE_ID              PARENT_TARGET_FILE_ID,
    OPB_MMD_DBTYPE.DBTYPE_NAME    PARENT_TARGET_DATABASE_TYPE,
    OPB_SUBJECT.SUBJ_NAME         SUBJECT_AREA, 
    OPB_SUBJECT.SUBJ_ID           SUBJECT_ID,
    OPB_TARG.TARGET_NAME          TARGET_NAME, 
    OPB_TARG.TARGET_ID            TARGET_ID, 
    OPB_TARG.TARGET_DESC          TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER       TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS       TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN          TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED       TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED           TARGET_LAST_SAVED,
    NULL                          REPOSITORY_NAME,
    0                             IS_SHORTCUT,
    0                             IS_GLOBAL_SHORTCUT
FROM
    OPB_SUBJECT, OPB_MMD_DBTYPE, OPB_TARG
WHERE
    OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_TARG.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_TARG.IS_VISIBLE = 1
    AND NOT EXISTS (SELECT '1' FROM OPB_SHORTCUT  
    WHERE OPB_TARG.TARGET_ID = OPB_SHORTCUT.OBJECT_ID  
    AND OPB_TARG.SUBJ_ID = OPB_SHORTCUT.SUBJECT_ID  
    AND OPB_SHORTCUT.OBJECT_TYPE = 24
    AND OPB_SHORTCUT.IS_VISIBLE = 1)  
UNION ALL
SELECT
    PARENT.SUBJ_NAME              PARENT_SUBJECT_AREA, 
    PARENT.SUBJ_ID                PARENT_SUBJECT_ID, 
    OPB_TARG.TARGET_NAME          PARENT_TARGET_NAME, 
    OPB_TARG.BUSINESS_NAME        PARENT_TARGET_BUSINESS_NAME,
    OPB_TARG.TARGET_ID            PARENT_TARGET_ID,
    OPB_TARG.TARGET_DESC          PARENT_TARGET_DESCRIPTION,
    OPB_TARG.VERSION_NUMBER       PARENT_TARGET_VERSION_NUMBER,
    OPB_TARG.VERSION_STATUS       PARENT_TARGET_VERSION_STATUS,
    OPB_TARG.UTC_CHECKIN          PARENT_TARGET_UTC_CHECKIN,
    OPB_TARG.UTC_LAST_SAVED       PARENT_TARGET_UTC_LAST_SAVED,
    OPB_TARG.LAST_SAVED           PARENT_TARGET_LAST_SAVED,
    OPB_TARG.FLDID                PARENT_TARGET_FIRST_FIELD_ID,
    OPB_TARG.CONSTR               PARENT_TARGET_CONSTRAINT,
    OPB_TARG.TBL_OPTIONS          PARENT_TARGET_CREATE_OPTIONS,
    OPB_TARG.INDEXID              PARENT_TARGET_FIRST_INDEX_ID,
    OPB_TARG.FILE_ID              PARENT_TARGET_FILE_ID,
    OPB_MMD_DBTYPE.DBTYPE_NAME    PARENT_TARGET_DATABASE_TYPE,
    CHILD.SUBJ_NAME               SUBJECT_AREA, 
    CHILD.SUBJ_ID                 SUBJECT_ID,
    OPB_SHORTCUT.SHORTCUT_NAME    TARGET_NAME, 
    OPB_SHORTCUT.OBJECT_ID        TARGET_ID, 
    OPB_SHORTCUT.COMMENTS         TARGET_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER   TARGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS   TARGET_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN      TARGET_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED   TARGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME    TARGET_LAST_SAVED,
    OPB_SHORTCUT.REPOSITORY_NAME  REPOSITORY_NAME,
    1                             IS_SHORTCUT,
    0                             IS_GLOBAL_SHORTCUT
FROM
    OPB_SHORTCUT, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD, OPB_MMD_DBTYPE, OPB_TARG
WHERE
    OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
    AND OPB_SHORTCUT.OBJECT_TYPE = 24 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
    AND OPB_SHORTCUT.IS_VISIBLE = 1 
    AND OPB_SHORTCUT.OBJECT_ID = OPB_TARG.TARGET_ID 
    AND OPB_TARG.SUBJ_ID = PARENT.SUBJ_ID 
    AND OPB_TARG.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_TARG.IS_VISIBLE = 1
UNION ALL
    SELECT
    NULL                          PARENT_SUBJECT_AREA,  
    NULL                          PARENT_SUBJECT_ID,  
    NULL                          PARENT_TARGET_NAME,  
    NULL                          PARENT_TARGET_BUSINESS_NAME,  
    NULL                          PARENT_TARGET_ID,  
    NULL                          PARENT_TARGET_DESCRIPTION,  
    NULL                          PARENT_TARGET_VERSION_NUMBER,
    NULL                          PARENT_TARGET_VERSION_STATUS,
    NULL                          PARENT_TARGET_UTC_CHECKIN,
    NULL                          PARENT_TARGET_UTC_LAST_SAVED,
    NULL                          PARENT_TARGET_LAST_SAVED,
    NULL                          PARENT_TARGET_FIRST_FIELD_ID,
    NULL                          PARENT_TARGET_CONSTRAINT,
    NULL                          PARENT_TARGET_CREATE_OPTIONS,
    NULL                          PARENT_TARGET_FIRST_INDEX_ID,
    NULL                          PARENT_TARGET_FILE_ID,
    NULL                          PARENT_TARGET_DATABASE_TYPE,
    OPB_SUBJECT.SUBJ_NAME         SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID           SUBJECT_ID,  
    OPB_SHORTCUT.SHORTCUT_NAME    TARGET_NAME,  
    OPB_SHORTCUT.OBJECT_ID        TARGET_ID,  
    OPB_SHORTCUT.COMMENTS         TARGET_DESCRIPTION,
    OPB_SHORTCUT.VERSION_NUMBER   TARGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS   TARGET_VERSION_STATUS,
    OPB_SHORTCUT.UTC_CHECKIN      TARGET_UTC_CHECKIN,
    OPB_SHORTCUT.UTC_LAST_SAVED   TARGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME    TARGET_LAST_SAVED,
    OPB_SHORTCUT.REPOSITORY_NAME  REPOSITORY_NAME,
    1                             IS_SHORTCUT,
    1                             IS_GLOBAL_SHORTCUT
FROM  
    OPB_SHORTCUT, OPB_SUBJECT 
WHERE  
    OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_SHORTCUT.OBJECT_TYPE = 24 
    AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
    AND OPB_SHORTCUT.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_ALL_TASKS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_TASKS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_TASKS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_TASKS]
AS
SELECT 
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
	OPB_TASK.TASK_NAME,
	OPB_TASK.TASK_ID,
	OPB_TASK.IS_VALID,
	OPB_TASK.LAST_SAVED,
	OPB_TASK.COMMENTS DESCRIPTION,
	OPB_TASK.VERSION_NUMBER,
	OPB_TASK.IS_ENABLED,
	OPB_TASK.UTC_CHECKIN,
	OPB_TASK.UTC_LAST_SAVED,
	OPB_TASK.IS_REUSABLE,
	OPB_TASK.TASK_TYPE,
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TASK_TYPE_NAME
FROM 
	OPB_TASK, OPB_SUBJECT, OPB_OBJECT_TYPE
WHERE
	OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID
	AND OPB_TASK.IS_VISIBLE = 1
	AND OPB_TASK.TASK_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
GO

GO
--SqlScripter----[dbo].[REP_ALL_TRANSFORMS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_ALL_TRANSFORMS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_ALL_TRANSFORMS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_ALL_TRANSFORMS]
AS 
SELECT  
	OPB_SUBJECT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
	OPB_WIDGET.WIDGET_NAME PARENT_WIDGET_NAME,  
	OPB_WIDGET.WIDGET_ID PARENT_WIDGET_ID,
	OPB_WIDGET.VERSION_NUMBER PARENT_WIDGET_VERSION_NUMBER,
    OPB_WIDGET.VERSION_STATUS PARENT_WIDGET_VERSION_STATUS,
	OPB_WIDGET.UTC_CHECKIN PARENT_WIDGET_UTC_CHECKIN,
	OPB_WIDGET.UTC_LAST_SAVED PARENT_WIDGET_UTC_LAST_SAVED,
	OPB_WIDGET.LAST_SAVED PARENT_WIDGET_LAST_SAVED,
    OPB_WIDGET.IS_REUSABLE PARENT_WIDGET_IS_REUSABLE,
    OPB_WIDGET.COMMENTS PARENT_WIDGET_DESCRIPTION,
    OPB_WIDGET.WIDGET_NAME WIDGET_NAME,  
	OPB_WIDGET.WIDGET_ID WIDGET_ID,  
	OPB_WIDGET.VERSION_NUMBER WIDGET_VERSION_NUMBER,
    OPB_WIDGET.VERSION_STATUS WIDGET_VERSION_STATUS,
	OPB_WIDGET.UTC_CHECKIN WIDGET_UTC_CHECKIN,
	OPB_WIDGET.UTC_LAST_SAVED WIDGET_UTC_LAST_SAVED,
	OPB_WIDGET.LAST_SAVED WIDGET_LAST_SAVED,
    OPB_WIDGET.WIDGET_TYPE WIDGET_TYPE_ID,  
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME WIDGET_TYPE_NAME,
	OPB_WIDGET.COMMENTS WIDGET_DESCRIPTION,  
	NULL REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	0 IS_SHORTCUT  
FROM  
	OPB_WIDGET, OPB_OBJECT_TYPE, OPB_SUBJECT  
WHERE  
	OPB_WIDGET.WIDGET_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_WIDGET.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_WIDGET.WIDGET_TYPE != 44  
	AND OPB_WIDGET.IS_VISIBLE = 1
UNION ALL
SELECT
	PARENT.SUBJ_NAME PARENT_SUBJECT_AREA,  
	PARENT.SUBJ_ID PARENT_SUBJECT_ID,  
	CHILD.SUBJ_NAME SUBJECT_AREA,  
	CHILD.SUBJ_ID SUBJECT_ID,  
	OPB_WIDGET.WIDGET_NAME PARENT_WIDGET_NAME,  
	OPB_WIDGET.WIDGET_ID PARENT_WIDGET_ID,  
	OPB_WIDGET.VERSION_NUMBER PARENT_WIDGET_VERSION_NUMBER,
    OPB_WIDGET.VERSION_STATUS PARENT_WIDGET_VERSION_STATUS,
	OPB_WIDGET.UTC_CHECKIN PARENT_WIDGET_UTC_CHECKIN,
	OPB_WIDGET.UTC_LAST_SAVED PARENT_WIDGET_UTC_LAST_SAVED,
    OPB_WIDGET.LAST_SAVED PARENT_WIDGET_LAST_SAVED,
    OPB_WIDGET.IS_REUSABLE PARENT_WIDGET_IS_REUSABLE,
    OPB_WIDGET.COMMENTS PARENT_WIDGET_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME WIDGET_NAME,  
	OPB_SHORTCUT.OBJECT_ID WIDGET_ID,  
	OPB_SHORTCUT.VERSION_NUMBER WIDGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS WIDGET_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN WIDGET_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED WIDGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME WIDGET_LAST_SAVED,
	OPB_SHORTCUT.OBJECT_SUBTYPE WIDGET_TYPE_ID, 
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME WIDGET_TYPE_NAME,  
	OPB_SHORTCUT.COMMENTS WIDGET_DESCRIPTION,  
	OPB_SHORTCUT.REPOSITORY_NAME,  
	0 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_WIDGET, OPB_SHORTCUT, OPB_OBJECT_TYPE, OPB_SUBJECT PARENT, OPB_SUBJECT CHILD  
WHERE  
	OPB_WIDGET.WIDGET_ID = OPB_SHORTCUT.OBJECT_ID 
	AND OPB_WIDGET.SUBJECT_ID = PARENT.SUBJ_ID 
	AND OPB_SHORTCUT.SUBJECT_ID = CHILD.SUBJ_ID 
	AND OPB_SHORTCUT.OBJECT_SUBTYPE=OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 1 
	AND OPB_SHORTCUT.OBJECT_TYPE = 23 
	AND OPB_SHORTCUT.IS_VISIBLE = 1 
	AND OPB_WIDGET.IS_VISIBLE = 1
UNION ALL
SELECT
	NULL PARENT_SUBJECT_AREA,  
	NULL PARENT_SUBJECT_ID,  
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
	NULL PARENT_WIDGET_NAME,  
	NULL PARENT_WIDGET_ID,  
	NULL PARENT_WIDGET_VERSION_NUMBER,
    NULL PARENT_WIDGET_VERSION_STATUS,
	NULL PARENT_WIDGET_UTC_CHECKIN,
	NULL PARENT_WIDGET_UTC_LAST_SAVED,
	NULL PARENT_WIDGET_LAST_SAVED,
    NULL PARENT_WIDGET_IS_REUSABLE,
    NULL PARENT_WIDGET_DESCRIPTION,
    OPB_SHORTCUT.SHORTCUT_NAME WIDGET_NAME,  
	OPB_SHORTCUT.OBJECT_ID WIDGET_ID,  
	OPB_SHORTCUT.VERSION_NUMBER WIDGET_VERSION_NUMBER,
    OPB_SHORTCUT.VERSION_STATUS WIDGET_VERSION_STATUS,
	OPB_SHORTCUT.UTC_CHECKIN WIDGET_UTC_CHECKIN,
	OPB_SHORTCUT.UTC_LAST_SAVED WIDGET_UTC_LAST_SAVED,
    OPB_SHORTCUT.CREATION_TIME WIDGET_LAST_SAVED,
	OPB_SHORTCUT.OBJECT_SUBTYPE WIDGET_TYPE_ID, 
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME WIDGET_TYPE_NAME,  
	OPB_SHORTCUT.COMMENTS WIDGET_DESCRIPTION,  
	OPB_SHORTCUT.REPOSITORY_NAME,  
	1 IS_GLOBAL_SHORTCUT,  
	1 IS_SHORTCUT  
FROM  
	OPB_SHORTCUT, OPB_OBJECT_TYPE, OPB_SUBJECT  
WHERE  
	OPB_SHORTCUT.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_SHORTCUT.OBJECT_SUBTYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_SHORTCUT.REFERENCE_TYPE = 2 
	AND OPB_SHORTCUT.OBJECT_TYPE=23 
	AND OPB_SHORTCUT.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_COMPONENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_COMPONENT]') IS NULL EXEC('CREATE VIEW [dbo].[REP_COMPONENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_COMPONENT]
AS
SELECT 
	OPB_COMPONENT.WORKFLOW_ID,
	OPB_COMPONENT.TASK_ID,
	OPB_COMPONENT.TASK_INST_ID,
	OPB_COMPONENT.REF_OBJ_ID,
	OPB_COMPONENT.REF_OBJ_TYPE, 
	OPB_COMPONENT.OBJECT_TYPE,
	OPB_COMPONENT.OBJECT_SEQ_TYPE,
	OPB_COMPONENT.VERSION_NUMBER,
	OPB_TASK_VAL_LIST.PM_VALUE,
	OPB_TASK_VAL_LIST.VAL_NAME,
	OPB_TASK_VAL_LIST.DESCRIPTION
FROM 
	OPB_COMPONENT, OPB_TASK_VAL_LIST
WHERE 
	OPB_COMPONENT.REF_OBJ_ID = OPB_TASK_VAL_LIST.TASK_ID 
	AND OPB_COMPONENT.VERSION_NUMBER = OPB_TASK_VAL_LIST.VERSION_NUMBER 
	AND OPB_COMPONENT.OBJECT_TYPE = OPB_TASK_VAL_LIST.TASK_TYPE 
	AND OPB_TASK_VAL_LIST.LINE_NO = 1 
	AND OPB_COMPONENT.OBJECT_TYPE NOT IN (72)
UNION ALL
SELECT 
	OPB_COMPONENT.WORKFLOW_ID,
	OPB_COMPONENT.TASK_ID,
	OPB_COMPONENT.TASK_INST_ID,
	OPB_COMPONENT.REF_OBJ_ID,
	OPB_COMPONENT.REF_OBJ_TYPE, 
	OPB_COMPONENT.OBJECT_TYPE,
	OPB_COMPONENT.OBJECT_SEQ_TYPE,
	OPB_COMPONENT.VERSION_NUMBER,
	NULL PM_VALUE,
	NULL VAL_NAME,
	NULL DESCRIPTION
FROM 
	OPB_COMPONENT
WHERE 
	OPB_COMPONENT.OBJECT_TYPE NOT IN (72)
	AND OPB_COMPONENT.REF_OBJ_ID = 0
GO

GO
--SqlScripter----[dbo].[REP_DATABASE_DEFS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_DATABASE_DEFS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_DATABASE_DEFS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_DATABASE_DEFS]
AS SELECT 
DISTINCT
    DBDNAM DATABASE_NAME, 
    SRCNAM DEF_SOURCE,
    SUBJ_NAME SUBJECT_AREA,
    NULL VERSION_ID,
    OPB_DBD.VERSION_NUMBER DATABASE_VERSION_NUMBER
FROM OPB_DBD, OPB_SUBJECT, OPB_SRC
WHERE OPB_DBD.SUBJ_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_SRC.DBDID = OPB_DBD.DBDID AND
    OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER AND
    OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_DEPLOY_GROUP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_DEPLOY_GROUP]') IS NULL EXEC('CREATE VIEW [dbo].[REP_DEPLOY_GROUP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_DEPLOY_GROUP]
AS
SELECT 
	OPB_CM_DEPLOY.DEP_GROUP_ID,
	OPB_CM_DEPLOY.DEP_GROUP_NAME,
	OPB_CM_DEPLOY.COMMENTS DESCRIPTION,
	OPB_CM_DEPLOY.CREATED_BY,
	OPB_CM_DEPLOY.OWNER_ID,
	OPB_CM_DEPLOY.GROUP_ID,
	OPB_CM_DEPLOY.CREATION_TIME,
	OPB_CM_DEPLOY.LAST_SAVED,
	OPB_CM_DEPLOY.GROUP_TYPE,
	OPB_CM_DEPLOY.QUERY_ID,
	OPB_CM_QUERY.QUERY_NAME,
	OPB_CM_QUERY.COMMENTS QUERY_DESCRIPTION, 
	OPB_CM_QUERY.CREATED_BY QUERY_CREATED_BY, 
	OPB_CM_QUERY.OWNER_ID QUERY_OWNER_ID, 
	OPB_CM_QUERY.GROUP_ID QUERY_GROUP_ID,
	OPB_CM_QUERY.CREATION_TIME QUERY_CREATION_TIME,
	OPB_CM_QUERY.LAST_SAVED QUERY_LAST_SAVED, 
	OPB_CM_QUERY.QUERY_TYPE QUERY_TYPE
FROM 
	OPB_CM_DEPLOY, OPB_CM_QUERY
WHERE
	OPB_CM_DEPLOY.QUERY_ID = OPB_CM_QUERY.QUERY_ID
UNION ALL
SELECT 
	OPB_CM_DEPLOY.DEP_GROUP_ID,
	OPB_CM_DEPLOY.DEP_GROUP_NAME,
	OPB_CM_DEPLOY.COMMENTS DESCRIPTION,
	OPB_CM_DEPLOY.CREATED_BY,
	OPB_CM_DEPLOY.OWNER_ID,
	OPB_CM_DEPLOY.GROUP_ID,
	OPB_CM_DEPLOY.CREATION_TIME,
	OPB_CM_DEPLOY.LAST_SAVED,
	OPB_CM_DEPLOY.GROUP_TYPE,
	OPB_CM_DEPLOY.QUERY_ID,
	NULL QUERY_NAME,
	NULL QUERY_DESCRIPTION, 
	NULL QUERY_CREATED_BY, 
	NULL QUERY_OWNER_ID, 
	NULL QUERY_GROUP_ID,
	NULL QUERY_CREATION_TIME,
	NULL QUERY_LAST_SAVED, 
	NULL QUERY_TYPE
FROM 
	OPB_CM_DEPLOY
WHERE
	OPB_CM_DEPLOY.QUERY_ID = 0
GO

GO
--SqlScripter----[dbo].[REP_DEPLOY_GROUP_DETAIL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_DEPLOY_GROUP_DETAIL]') IS NULL EXEC('CREATE VIEW [dbo].[REP_DEPLOY_GROUP_DETAIL] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_DEPLOY_GROUP_DETAIL]
AS 
SELECT  
    OPB_CM_DEPDETAIL.DEP_RUN_ID,  
    OPB_CM_DEPDETAIL.OBJECT_ID,  
    OPB_CM_DEPDETAIL.OBJECT_NAME,  
    OPB_CM_DEPDETAIL.OBJECT_TYPE,  
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,  
    OPB_CM_DEPDETAIL.SRC_VERNUM SRC_VERSION_NUMBER,  
    OPB_CM_DEPDETAIL.TARG_VERNUM TARG_VERSION_NUMBER,  
    OPB_CM_DEPDETAIL.SRC_SUBJ_ID SRC_SUBJECT_ID,  
    OPB_CM_DEPDETAIL.TARG_SUBJ_ID TARG_SUBJECT_ID,  
    OPB_CM_DEPDETAIL.SRC_SUBJ_NAME SRC_SUBJECT_AREA,  
    OPB_CM_DEPDETAIL.TARG_SUBJ_NAME TARG_SUBJECT_AREA,  
    OPB_CM_DEPDETAIL.IS_SHORTCUT,  
    OPB_CM_DEPLOY_LOG.DEP_GROUP_ID,  
    OPB_CM_DEPLOY_LOG.DEP_GROUP_NAME,  
    OPB_CM_DEPLOY_LOG.DEPLOY_TIME,  
    OPB_CM_DEPLOY_LOG.DEPLOY_TYPE,  
    OPB_CM_DEPLOY_LOG.REP_NAME TARGET_REP_NAME,  
    OPB_CM_DEPLOY_LOG.REP_GID,  
    OPB_CM_DEPLOY_LOG.USER_ID,  
    OPB_CM_DEPLOY_LOG.GROUP_ID,  
    OPB_CM_DEPLOY_LOG.USER_NAME,  
    OPB_CM_DEPLOY_LOG.UTC_DEPLOY_TIME,  
    OPB_CM_DEPLOY_LOG.DEPLOY_STATUS,  
    OPB_CM_DEPLOY_LOG.ROLLBACK_TIME  
FROM  
    OPB_CM_DEPDETAIL, OPB_CM_DEPLOY_LOG, OPB_OBJECT_TYPE
WHERE  
    OPB_CM_DEPDETAIL.DEP_RUN_ID = OPB_CM_DEPLOY_LOG.DEP_RUN_ID  
    AND OPB_CM_DEPDETAIL.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
GO

GO
--SqlScripter----[dbo].[REP_EVENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_EVENT]') IS NULL EXEC('CREATE VIEW [dbo].[REP_EVENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_EVENT]
AS
SELECT 
	OPB_EVENT.SUBJECT_ID,
	OPB_EVENT.WORKFLOW_ID,
	OPB_EVENT.EVENT_ID, 
	OPB_EVENT.EVENT_NAME,
	OPB_EVENT.EVENT_TYPE,
	OPB_EVENT.EVENT_SCOPE,
	OPB_EVENT.EVENT_DESC EVENT_DESCRIPTION,
	OPB_EVENT.LAST_SAVED,
	OPB_EVENT.VERSION_NUMBER
FROM 
	OPB_EVENT, OPB_TASK
WHERE 
	OPB_EVENT.WORKFLOW_ID = OPB_TASK.TASK_ID
	AND OPB_EVENT.VERSION_NUMBER  = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_FLD_MAPPING].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_FLD_MAPPING]') IS NULL EXEC('CREATE VIEW [dbo].[REP_FLD_MAPPING] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_FLD_MAPPING]
AS 
SELECT
    OPB_SRC_FLD.SRC_NAME SOURCE_FIELD_NAME,
    OPB_SRC_FLD.BUSINESS_NAME SRC_FLD_BUSNAME,
    OPB_SRC.SOURCE_NAME SOURCE_NAME,
    OPB_SRC.BUSINESS_NAME SRC_BUSNAME,
    OPB_TARG_FLD.TARGET_NAME TARGET_COLUMN_NAME,
    OPB_TARG_FLD.BUSINESS_NAME TARG_COL_BUSNAME,
    OPB_TARG.TARGET_NAME TARGET_NAME,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    MAPPING_NAME,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    OPB_TARG_FLD_EXPR.TRANS_EXPR TRANS_EXPRESSION,
    OPB_TARG_FLD_EXPR.USER_COMMENT USER_COMMENT,
    OPB_TARG_FLD_EXPR.USER_COMMENT DBA_COMMENT,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER,
    OPB_SRC.SRC_ID SOURCE_ID,
    OPB_TARG.TARGET_ID,
    OPB_MAPPING.MAPPING_ID
FROM  OPB_SUBJECT, OPB_MAPPING, OPB_SRC,
    OPB_SRC_FLD, OPB_TARG, OPB_TARG_FLD,
    OPB_ANALYZE_DEP DEPENDENCY,  
    OPB_WIDGET_INST FROMINSTANCES, 
    OPB_WIDGET_INST TOINSTANCES,
    OPB_TARG_FLD_EXPR
WHERE OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND OPB_MAPPING.MAPPING_ID = DEPENDENCY.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = FROMINSTANCES.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = TOINSTANCES.MAPPING_ID
    AND DEPENDENCY.MAPPING_ID = FROMINSTANCES.MAPPING_ID
    AND DEPENDENCY.MAPPING_ID = TOINSTANCES.MAPPING_ID
    AND OPB_TARG.TARGET_ID = TOINSTANCES.WIDGET_ID 
    AND TOINSTANCES.WIDGET_TYPE = 2 
    AND OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TARG_FLD.FLDID = DEPENDENCY.TO_FIELD_ID
    AND TOINSTANCES.INSTANCE_ID = DEPENDENCY.TO_INSTANCE_ID
    AND OPB_SRC.SRC_ID = FROMINSTANCES.WIDGET_ID 
    AND FROMINSTANCES.WIDGET_TYPE = 1 
    AND OPB_SRC_FLD.SRC_ID = OPB_SRC.SRC_ID
    AND OPB_SRC_FLD.FLDID = DEPENDENCY.FROM_FIELD_ID
    AND FROMINSTANCES.INSTANCE_ID = DEPENDENCY.FROM_INSTANCE_ID
    AND OPB_TARG_FLD_EXPR.MAPPING_ID = TOINSTANCES.MAPPING_ID
    AND OPB_TARG_FLD_EXPR.TARGET_INST_ID = TOINSTANCES.INSTANCE_ID
    AND OPB_TARG_FLD_EXPR.TARGET_FLD = OPB_TARG_FLD.FLDID 
    AND OPB_SRC_FLD.IS_HIDDEN = 0
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = TOINSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = FROMINSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = DEPENDENCY.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_FLD_EXPR.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_LABEL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_LABEL]') IS NULL EXEC('CREATE VIEW [dbo].[REP_LABEL] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_LABEL]
AS
SELECT 
	OPB_CM_LABEL.LABEL_ID,
	OPB_CM_LABEL.LABEL_NAME,
	OPB_CM_LABEL.COMMENTS DESCRIPTION,
	OPB_CM_LABEL.CREATED_BY,
	OPB_CM_LABEL.OWNER_ID,
	OPB_CM_LABEL.GROUP_ID,
	OPB_CM_LABEL.CREATION_TIME,
	OPB_CM_LABEL.LAST_SAVED,
	OPB_CM_LABEL.LABEL_TYPE,
	OPB_CM_LABEL.LABEL_STATUS
FROM 
	OPB_CM_LABEL
GO

GO
--SqlScripter----[dbo].[REP_LABEL_REF].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_LABEL_REF]') IS NULL EXEC('CREATE VIEW [dbo].[REP_LABEL_REF] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_LABEL_REF]
AS
SELECT 
	OPB_CM_LABEL_REF.LABEL_ID,
	OPB_CM_LABEL_REF.OBJECT_ID,
	OPB_CM_LABEL_REF.OBJECT_TYPE,
	OPB_CM_LABEL_REF.VERSION_NUMBER,
	OPB_CM_LABEL_REF.SUBJECT_ID,
	OPB_CM_LABEL_REF.USER_ID,
	OPB_CM_LABEL_REF.COMMENTS DESCRIPTION,
	OPB_CM_LABEL_REF.APPLY_TIME
FROM 
	OPB_CM_LABEL_REF
GO

GO
--SqlScripter----[dbo].[REP_LOAD_SESSIONS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_LOAD_SESSIONS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_LOAD_SESSIONS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_LOAD_SESSIONS]
AS
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_TASK.TASK_NAME SESSION_NAME, 
    OPB_TASK.LAST_SAVED LAST_SAVED,
    OPB_SESSION.SESSION_ID SESSION_ID,
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME, 
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL IS_ACTIVE,
    NULL STARTTIME,
    NULL SESS_INTERVAL,
    NULL REPEAT_COUNT,
    NULL SESSION_LOG_FILE,
    NULL BAD_FILE_LOCATION,
    NULL TARGET_ID,
    NULL SOURCE_ID,
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_TASK.SAVED_VALID IS_VALID, 
    OPB_TASK.IS_REUSABLE IS_REUSABLE, 
    OPB_TASK.COMMENTS COMMENTS,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,
    1 IS_IMPACTED
FROM 
    OPB_TASK, OPB_MAPPING, OPB_SESSION, OPB_SUBJECT
WHERE 
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_TASK.TASK_TYPE = 68
    AND OPB_TASK.TASK_ID = OPB_SESSION.SESSION_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID
    AND OPB_TASK.VERSION_NUMBER = OPB_SESSION.VERSION_NUMBER
    AND OPB_TASK.IS_VISIBLE = 1
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND (OPB_TASK.IS_INVALIDATED = 1 
    OR ( EXISTS (SELECT * FROM OPB_VALIDATE V
        WHERE V.SUBJECT_ID = OPB_MAPPING.SUBJECT_ID
        AND V.OBJECT_TYPE = 21
        AND V.OBJECT_ID = OPB_MAPPING.MAPPING_ID
        AND V.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
    OR ( EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_TASK T, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND T.TASK_TYPE = C.OBJECT_TYPE
        AND T.TASK_ID = C.REF_OBJ_ID
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
    OR ( EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_SESSION_CONFIG G, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND C.OBJECT_TYPE = 72
        AND G.CONFIG_ID = C.REF_OBJ_ID
        AND G.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = 72
        AND V.OBJECT_ID = G.CONFIG_ID
        AND V.VERSION_NUMBER = G.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
    OR ( EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_WIDGET_INST I, OPB_SRC R
        WHERE I.MAPPING_ID = OPB_MAPPING.MAPPING_ID
        AND I.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND I.WIDGET_TYPE = 1
        AND R.SRC_ID = I.WIDGET_ID
        AND R.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = R.SUBJ_ID
        AND V.OBJECT_TYPE = I.WIDGET_TYPE
        AND V.OBJECT_ID = R.SRC_ID
        AND V.VERSION_NUMBER = R.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED
        AND V.INV_TYPE = 1))
    OR ( EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_WIDGET_INST I, OPB_TARG R
        WHERE I.MAPPING_ID = OPB_MAPPING.MAPPING_ID
        AND I.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND I.WIDGET_TYPE = 2
        AND R.TARGET_ID = I.WIDGET_ID
        AND R.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = R.SUBJ_ID
        AND V.OBJECT_TYPE = I.WIDGET_TYPE
        AND V.OBJECT_ID = R.TARGET_ID
        AND V.VERSION_NUMBER = R.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED
        AND V.INV_TYPE = 1)))
UNION ALL
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_TASK.TASK_NAME SESSION_NAME, 
    OPB_TASK.LAST_SAVED LAST_SAVED,
    OPB_SESSION.SESSION_ID SESSION_ID,
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME, 
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL IS_ACTIVE,
    NULL STARTTIME,
    NULL SESS_INTERVAL,
    NULL REPEAT_COUNT,
    NULL SESSION_LOG_FILE,
    NULL BAD_FILE_LOCATION,
    NULL TARGET_ID,
    NULL SOURCE_ID,
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_TASK.SAVED_VALID IS_VALID, 
    OPB_TASK.IS_REUSABLE IS_REUSABLE, 
    OPB_TASK.COMMENTS COMMENTS,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,
    0 IS_IMPACTED
FROM 
    OPB_TASK, OPB_MAPPING, OPB_SESSION, OPB_SUBJECT
WHERE 
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_TASK.TASK_TYPE = 68
    AND OPB_TASK.TASK_ID = OPB_SESSION.SESSION_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID
    AND OPB_TASK.VERSION_NUMBER = OPB_SESSION.VERSION_NUMBER
    AND OPB_TASK.IS_VISIBLE = 1
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_TASK.IS_INVALIDATED = 0 
    AND NOT EXISTS (SELECT * FROM OPB_VALIDATE V
        WHERE V.SUBJECT_ID = OPB_MAPPING.SUBJECT_ID
        AND V.OBJECT_TYPE = 21
        AND V.OBJECT_ID = OPB_MAPPING.MAPPING_ID
        AND V.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
    AND NOT EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_TASK T, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND T.TASK_TYPE = C.OBJECT_TYPE
        AND T.TASK_ID = C.REF_OBJ_ID
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
    AND NOT EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_SESSION_CONFIG G, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND C.OBJECT_TYPE = 72
        AND G.CONFIG_ID = C.REF_OBJ_ID
        AND G.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = 72
        AND V.OBJECT_ID = G.CONFIG_ID
        AND V.VERSION_NUMBER = G.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
    AND NOT EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_WIDGET_INST I, OPB_SRC R
        WHERE I.MAPPING_ID = OPB_MAPPING.MAPPING_ID
        AND I.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND I.WIDGET_TYPE = 1
        AND R.SRC_ID = I.WIDGET_ID
        AND R.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = R.SUBJ_ID
        AND V.OBJECT_TYPE = I.WIDGET_TYPE
        AND V.OBJECT_ID = R.SRC_ID
        AND V.VERSION_NUMBER = R.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED
        AND V.INV_TYPE = 1)
    AND NOT EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_WIDGET_INST I, OPB_TARG R
        WHERE I.MAPPING_ID = OPB_MAPPING.MAPPING_ID
        AND I.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND I.WIDGET_TYPE = 2
        AND R.TARGET_ID = I.WIDGET_ID
        AND R.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = R.SUBJ_ID
        AND V.OBJECT_TYPE = I.WIDGET_TYPE
        AND V.OBJECT_ID = R.TARGET_ID
        AND V.VERSION_NUMBER = R.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED
        AND V.INV_TYPE = 1)
UNION ALL
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_TASK.TASK_NAME SESSION_NAME, 
    OPB_TASK.LAST_SAVED LAST_SAVED,
    OPB_SESSION.SESSION_ID SESSION_ID,
    NULL MAPPING_NAME, 
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL IS_ACTIVE,
    NULL STARTTIME,
    NULL SESS_INTERVAL,
    NULL REPEAT_COUNT,
    NULL SESSION_LOG_FILE,
    NULL BAD_FILE_LOCATION,
    NULL TARGET_ID,
    NULL SOURCE_ID,
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER,
    NULL MAPPING_VERSION_NUMBER,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_TASK.SAVED_VALID IS_VALID, 
    OPB_TASK.IS_REUSABLE IS_REUSABLE, 
    OPB_TASK.COMMENTS COMMENTS,  
    NULL MAPPING_ID,
    1 IS_IMPACTED
FROM 
    OPB_TASK, OPB_SESSION, OPB_SUBJECT
WHERE 
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_TASK.TASK_TYPE = 68
    AND OPB_TASK.TASK_ID = OPB_SESSION.SESSION_ID
    AND OPB_TASK.VERSION_NUMBER = OPB_SESSION.VERSION_NUMBER
    AND OPB_TASK.IS_VISIBLE = 1
    AND OPB_SESSION.MAPPING_ID NOT IN (SELECT MAPPING_ID 
    FROM OPB_MAPPING WHERE OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID 
    AND OPB_MAPPING.IS_VISIBLE = 1)
    AND (OPB_TASK.IS_INVALIDATED = 1 
    OR ( EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_MAPPING
        WHERE OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID
        AND OPB_MAPPING.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = OPB_MAPPING.SUBJECT_ID
        AND V.OBJECT_TYPE = 21
        AND V.OBJECT_ID = OPB_MAPPING.MAPPING_ID
        AND V.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
    OR ( EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_TASK T, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND T.TASK_TYPE = C.OBJECT_TYPE
        AND T.TASK_ID = C.REF_OBJ_ID
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
    OR ( EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_SESSION_CONFIG G, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND C.OBJECT_TYPE = 72
        AND G.CONFIG_ID = C.REF_OBJ_ID
        AND G.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = 72
        AND V.OBJECT_ID = G.CONFIG_ID
        AND V.VERSION_NUMBER = G.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)))
UNION ALL
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_TASK.TASK_NAME SESSION_NAME, 
    OPB_TASK.LAST_SAVED LAST_SAVED,
    OPB_SESSION.SESSION_ID SESSION_ID,
    NULL MAPPING_NAME, 
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL IS_ACTIVE,
    NULL STARTTIME,
    NULL SESS_INTERVAL,
    NULL REPEAT_COUNT,
    NULL SESSION_LOG_FILE,
    NULL BAD_FILE_LOCATION,
    NULL TARGET_ID,
    NULL SOURCE_ID,
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER,
    NULL MAPPING_VERSION_NUMBER,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_TASK.SAVED_VALID IS_VALID, 
    OPB_TASK.IS_REUSABLE IS_REUSABLE, 
    OPB_TASK.COMMENTS COMMENTS,  
    NULL MAPPING_ID,
    0 IS_IMPACTED
FROM 
    OPB_TASK, OPB_SESSION, OPB_SUBJECT
WHERE 
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
    AND OPB_TASK.TASK_TYPE = 68
    AND OPB_TASK.TASK_ID = OPB_SESSION.SESSION_ID
    AND OPB_TASK.VERSION_NUMBER = OPB_SESSION.VERSION_NUMBER
    AND OPB_TASK.IS_VISIBLE = 1
    AND OPB_SESSION.MAPPING_ID NOT IN (SELECT MAPPING_ID 
    FROM OPB_MAPPING WHERE OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID 
    AND OPB_MAPPING.IS_VISIBLE = 1)
    AND OPB_TASK.IS_INVALIDATED = 0 
    AND NOT EXISTS (SELECT * FROM OPB_VALIDATE V, OPB_MAPPING
        WHERE OPB_MAPPING.MAPPING_ID = OPB_SESSION.MAPPING_ID
        AND OPB_MAPPING.IS_VISIBLE <> 2
        AND V.SUBJECT_ID = OPB_MAPPING.SUBJECT_ID
        AND V.OBJECT_TYPE = 21
        AND V.OBJECT_ID = OPB_MAPPING.MAPPING_ID
        AND V.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
    AND NOT EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_TASK T, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND T.TASK_TYPE = C.OBJECT_TYPE
        AND T.TASK_ID = C.REF_OBJ_ID
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
    AND NOT EXISTS (SELECT * FROM OPB_COMPONENT C, OPB_SESSION_CONFIG G, OPB_VALIDATE V
        WHERE C.WORKFLOW_ID = 0
        AND C.TASK_ID = OPB_TASK.TASK_ID
        AND C.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
        AND C.OBJECT_TYPE = 72
        AND G.CONFIG_ID = C.REF_OBJ_ID
        AND G.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = 72
        AND V.OBJECT_ID = G.CONFIG_ID
        AND V.VERSION_NUMBER = G.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
GO

GO
--SqlScripter----[dbo].[REP_MAPPING_CONN_PORTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_MAPPING_CONN_PORTS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_MAPPING_CONN_PORTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_MAPPING_CONN_PORTS]
AS 
SELECT  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    INST_FROM.WIDGET_ID FROM_OBJECT_ID,  
    INST_FROM.WIDGET_TYPE FROM_OBJECT_TYPE,
    FROM_OBJECT_TYPE.OBJECT_TYPE_NAME FROM_OBJECT_TYPE_NAME,
    INST_FROM.INSTANCE_NAME FROM_OBJECT_NAME,  
    OPB_WIDGET_DEP.FROM_INSTANCE_ID FROM_OBJECT_INSTANCE_ID,  
    OPB_SRC_FLD.SRC_NAME FROM_OBJECT_FIELD_NAME,  
    OPB_SRC_FLD.VERSION_NUMBER FROM_OBJECT_VERSION_NUMBER,
    INST_TO.WIDGET_ID TO_OBJECT_ID,  
    INST_TO.WIDGET_TYPE TO_OBJECT_TYPE,  
    TO_OBJECT_TYPE.OBJECT_TYPE_NAME TO_OBJECT_TYPE_NAME,
    INST_TO.INSTANCE_NAME TO_OBJECT_NAME,  
    OPB_WIDGET_DEP.TO_INSTANCE_ID TO_OBJECT_INSTANCE_ID,  
    OPB_WIDGET_FIELD.FIELD_NAME TO_OBJECT_FIELD_NAME,
    OPB_WIDGET_FIELD.VERSION_NUMBER TO_OBJECT_VERSION_NUMBER  
FROM  
	OPB_WIDGET_INST INST_FROM, OPB_WIDGET_INST INST_TO,  
    OPB_WIDGET_DEP, OPB_SRC_FLD, OPB_WIDGET_FIELD, OPB_MAPPING, 
    OPB_SUBJECT, OPB_SRC, OPB_OBJECT_TYPE FROM_OBJECT_TYPE, 
    OPB_OBJECT_TYPE TO_OBJECT_TYPE, OPB_WIDGET
WHERE  
	INST_FROM.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
	AND OPB_MAPPING.IS_VISIBLE = 1
	AND INST_FROM.WIDGET_TYPE=1 
	AND INST_FROM.WIDGET_ID= OPB_SRC_FLD.SRC_ID 
	AND OPB_SRC_FLD.SRC_ID = OPB_SRC.SRC_ID 
	AND OPB_SRC_FLD.VERSION_NUMBER = OPB_SRC.VERSION_NUMBER
	AND OPB_SRC.IS_VISIBLE = 1
	AND INST_FROM.INSTANCE_ID = OPB_WIDGET_DEP.FROM_INSTANCE_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER 
	AND INST_TO.MAPPING_ID = OPB_MAPPING.MAPPING_ID
	AND INST_TO.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
	AND INST_TO.WIDGET_TYPE != 1 
	AND INST_TO.WIDGET_TYPE!=2
	AND INST_TO.WIDGET_ID = OPB_WIDGET.WIDGET_ID
	AND INST_TO.WIDGET_ID = OPB_WIDGET_FIELD.WIDGET_ID 
	AND OPB_WIDGET.VERSION_NUMBER = OPB_WIDGET_FIELD.VERSION_NUMBER
	AND OPB_WIDGET.IS_VISIBLE = 1
	AND INST_TO.INSTANCE_ID=  OPB_WIDGET_DEP.TO_INSTANCE_ID 
	AND INST_TO.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER 
	AND OPB_WIDGET_DEP.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
	AND OPB_WIDGET_DEP.FROM_FIELD_ID= OPB_SRC_FLD.FLDID 
	AND OPB_WIDGET_DEP.TO_FIELD_ID = OPB_WIDGET_FIELD.FIELD_ID 
	AND OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND INST_FROM.WIDGET_TYPE = FROM_OBJECT_TYPE.OBJECT_TYPE_ID
    AND INST_TO.WIDGET_TYPE = TO_OBJECT_TYPE.OBJECT_TYPE_ID
UNION ALL
SELECT  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    INST_FROM.WIDGET_ID FROM_OBJECT_ID, 
    INST_FROM.WIDGET_TYPE FROM_OBJECT_TYPE, 
    FROM_OBJECT_TYPE.OBJECT_TYPE_NAME FROM_OBJECT_TYPE_NAME,
    INST_FROM.INSTANCE_NAME FROM_OBJECT_NAME, 
    OPB_WIDGET_DEP.FROM_INSTANCE_ID FROM_OBJECT_INSTANCE_ID,  
    FIELDS_FROM.FIELD_NAME FROM_OBJECT_FIELD_NAME,  
    FIELDS_FROM.VERSION_NUMBER FROM_OBJECT_VERSION_NUMBER,
    INST_TO.WIDGET_ID TO_OBJECT_ID, 
    INST_TO.WIDGET_TYPE TO_OBJECT_TYPE, 
    TO_OBJECT_TYPE.OBJECT_TYPE_NAME TO_OBJECT_TYPE_NAME,
    INST_TO.INSTANCE_NAME TO_OBJECT_NAME, 
    OPB_WIDGET_DEP.TO_INSTANCE_ID TO_OBJECT_INSTANCE_ID,  
    FIELDS_TO.FIELD_NAME TO_OBJECT_FIELD_NAME,
    FIELDS_TO.VERSION_NUMBER TO_OBJECT_VERSION_NUMBER  
FROM  
    OPB_WIDGET_INST INST_FROM, OPB_WIDGET_INST INST_TO,  
    OPB_WIDGET_FIELD FIELDS_FROM, OPB_WIDGET_FIELD FIELDS_TO,
    OPB_WIDGET_DEP, OPB_MAPPING, OPB_SUBJECT, OPB_OBJECT_TYPE FROM_OBJECT_TYPE, 
    OPB_OBJECT_TYPE TO_OBJECT_TYPE, OPB_WIDGET WIDGET_FROM, OPB_WIDGET WIDGET_TO
WHERE  
	INST_FROM.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
	AND OPB_MAPPING.IS_VISIBLE = 1
	AND INST_FROM.WIDGET_TYPE != 1 
	AND INST_FROM.WIDGET_TYPE!=2 
	AND INST_FROM.WIDGET_ID=FIELDS_FROM.WIDGET_ID 
	AND INST_FROM.WIDGET_ID=WIDGET_FROM.WIDGET_ID
	AND WIDGET_FROM.VERSION_NUMBER = FIELDS_FROM.VERSION_NUMBER
	AND WIDGET_FROM.IS_VISIBLE = 1
	AND INST_FROM.INSTANCE_ID = OPB_WIDGET_DEP.FROM_INSTANCE_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER 
	AND INST_TO.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND INST_TO.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND INST_TO.WIDGET_TYPE != 1 AND INST_TO.WIDGET_TYPE!=2 
	AND INST_TO.WIDGET_ID= FIELDS_TO.WIDGET_ID 
	AND INST_TO.WIDGET_ID=WIDGET_TO.WIDGET_ID
	AND WIDGET_TO.VERSION_NUMBER = FIELDS_TO.VERSION_NUMBER
	AND INST_TO.INSTANCE_ID= OPB_WIDGET_DEP.TO_INSTANCE_ID 
	AND INST_TO.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER
	AND WIDGET_TO.IS_VISIBLE = 1
	AND OPB_WIDGET_DEP.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND OPB_WIDGET_DEP.FROM_FIELD_ID = FIELDS_FROM.FIELD_ID 
	AND OPB_WIDGET_DEP.TO_FIELD_ID = FIELDS_TO.FIELD_ID 
	AND OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID  
    AND INST_FROM.WIDGET_TYPE = FROM_OBJECT_TYPE.OBJECT_TYPE_ID
    AND INST_TO.WIDGET_TYPE = TO_OBJECT_TYPE.OBJECT_TYPE_ID
UNION ALL
SELECT  
	OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    INST_FROM.WIDGET_ID FROM_OBJECT_ID, 
    INST_FROM.WIDGET_TYPE FROM_OBJECT_TYPE, 
    FROM_OBJECT_TYPE.OBJECT_TYPE_NAME FROM_OBJECT_TYPE_NAME,
    INST_FROM.INSTANCE_NAME FROM_OBJECT_NAME, 
    OPB_WIDGET_DEP.FROM_INSTANCE_ID FROM_OBJECT_INSTANCE_ID,  
    OPB_WIDGET_FIELD.FIELD_NAME FROM_OBJECT_FIELD_NAME,  
    OPB_WIDGET_FIELD.VERSION_NUMBER FROM_OBJECT_VERSION_NUMBER,
    INST_TO.WIDGET_ID TO_OBJECT_ID, 
    INST_TO.WIDGET_TYPE TO_OBJECT_TYPE, 
    TO_OBJECT_TYPE.OBJECT_TYPE_NAME TO_OBJECT_TYPE_NAME,
    INST_TO.INSTANCE_NAME TO_OBJECT_NAME, 
    OPB_WIDGET_DEP.TO_INSTANCE_ID TO_OBJECT_INSTANCE_ID,  
    OPB_TARG_FLD.TARGET_NAME TO_OBJECT_FIELD_NAME,
    OPB_TARG_FLD.VERSION_NUMBER TO_OBJECT_VERSION_NUMBER  
FROM
    OPB_WIDGET_INST INST_FROM, OPB_WIDGET_INST INST_TO,  
    OPB_WIDGET_DEP, OPB_WIDGET_FIELD, OPB_TARG_FLD, OPB_MAPPING, OPB_SUBJECT, 
    OPB_TARG, OPB_OBJECT_TYPE FROM_OBJECT_TYPE, OPB_OBJECT_TYPE TO_OBJECT_TYPE, OPB_WIDGET
WHERE  
	INST_FROM.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND OPB_MAPPING.IS_VISIBLE = 1
	AND OPB_WIDGET.IS_VISIBLE = 1
	AND INST_FROM.WIDGET_TYPE != 1 
	AND INST_FROM.WIDGET_TYPE != 2 
	AND INST_FROM.WIDGET_ID = OPB_WIDGET_FIELD.WIDGET_ID 
	AND INST_FROM.WIDGET_ID = OPB_WIDGET.WIDGET_ID
	AND OPB_WIDGET.VERSION_NUMBER = OPB_WIDGET_FIELD.VERSION_NUMBER 
	AND INST_FROM.INSTANCE_ID= OPB_WIDGET_DEP.FROM_INSTANCE_ID 
	AND INST_FROM.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER 
	AND INST_TO.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND INST_TO.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND INST_TO.WIDGET_TYPE = 2 
	AND INST_TO.WIDGET_ID = OPB_TARG_FLD.TARGET_ID 
	AND OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID 
	AND OPB_TARG_FLD.VERSION_NUMBER = OPB_TARG.VERSION_NUMBER 
	AND OPB_TARG.IS_VISIBLE = 1 
	AND INST_TO.INSTANCE_ID = OPB_WIDGET_DEP.TO_INSTANCE_ID 
	AND INST_TO.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER 
	AND OPB_WIDGET_DEP.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
	AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
	AND OPB_WIDGET_DEP.FROM_FIELD_ID = OPB_WIDGET_FIELD.FIELD_ID 
	AND OPB_WIDGET_DEP.TO_FIELD_ID = OPB_TARG_FLD.FLDID 
	AND OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND INST_FROM.WIDGET_TYPE = FROM_OBJECT_TYPE.OBJECT_TYPE_ID
    AND INST_TO.WIDGET_TYPE = TO_OBJECT_TYPE.OBJECT_TYPE_ID
GO

GO
--SqlScripter----[dbo].[REP_MAPPING_UNCONN_PORTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_MAPPING_UNCONN_PORTS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_MAPPING_UNCONN_PORTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_MAPPING_UNCONN_PORTS]
AS
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
	OPB_WIDGET_INST.INSTANCE_NAME OBJECT_INSTANCE_NAME,  
    OPB_WIDGET_INST.INSTANCE_ID OBJECT_INSTANCE_ID,  
    OPB_WIDGET_INST.WIDGET_TYPE OBJECT_TYPE,  
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,
    OPB_SRC_FLD.FLDID FIELD_ID,  
    OPB_SRC_FLD.SRC_NAME FIELD_NAME,
    OPB_SRC.VERSION_NUMBER OBJECT_VERSION_NUMBER  
FROM  
	OPB_WIDGET_INST, OPB_MAPPING, OPB_SUBJECT, OPB_SRC_FLD, OPB_SRC , OPB_OBJECT_TYPE
WHERE  
    OPB_WIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
    AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
    AND OPB_WIDGET_INST.WIDGET_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
	AND OPB_MAPPING.IS_VISIBLE = 1 
	AND OPB_SRC_FLD.SRC_ID = OPB_SRC.SRC_ID 
	AND OPB_SRC_FLD.VERSION_NUMBER = OPB_SRC.VERSION_NUMBER 
	AND OPB_SRC.IS_VISIBLE = 1 
	AND OPB_WIDGET_INST.WIDGET_ID = OPB_SRC_FLD.SRC_ID 
	AND OPB_WIDGET_INST.WIDGET_TYPE = 1 
	AND OPB_MAPPING.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_MAPPING.REF_WIDGET_ID = 0 
	AND NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_DEP  
		WHERE OPB_WIDGET_DEP.MAPPING_ID= OPB_MAPPING.MAPPING_ID 
		AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
		AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER
		AND ((OPB_WIDGET_DEP.FROM_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.FROM_FIELD_ID=OPB_SRC_FLD.FLDID) 
		OR (OPB_WIDGET_DEP.TO_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.TO_FIELD_ID=OPB_SRC_FLD.FLDID)))
UNION ALL
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,  
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_WIDGET_INST.INSTANCE_NAME OBJECT_INSTANCE_NAME,  
    OPB_WIDGET_INST.INSTANCE_ID OBJECT_INSTANCE_ID,  
    OPB_WIDGET_INST.WIDGET_TYPE OBJECT_TYPE,  
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,
    OPB_TARG_FLD.FLDID FIELD_ID,  
    OPB_TARG_FLD.TARGET_NAME FIELD_NAME,
    OPB_TARG.VERSION_NUMBER OBJECT_VERSION_NUMBER
FROM  
	OPB_WIDGET_INST, OPB_MAPPING, OPB_TARG_FLD, OPB_SUBJECT, OPB_TARG, OPB_OBJECT_TYPE
WHERE  
    OPB_WIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
    AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER 
    AND OPB_WIDGET_INST.WIDGET_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
    AND OPB_MAPPING.IS_VISIBLE = 1
	AND OPB_WIDGET_INST.WIDGET_ID = OPB_TARG_FLD.TARGET_ID 
	AND OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID
	AND OPB_TARG_FLD.VERSION_NUMBER = OPB_TARG.VERSION_NUMBER
	AND OPB_TARG.IS_VISIBLE = 1
	AND OPB_WIDGET_INST.WIDGET_TYPE = 2 
	AND OPB_MAPPING.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_MAPPING.REF_WIDGET_ID = 0 
	AND NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_DEP  
		WHERE OPB_WIDGET_DEP.MAPPING_ID= OPB_MAPPING.MAPPING_ID
		AND OPB_WIDGET_DEP.VERSION_NUMBER=OPB_WIDGET_INST.VERSION_NUMBER 
		AND OPB_WIDGET_DEP.VERSION_NUMBER=OPB_MAPPING.VERSION_NUMBER 
		AND ((OPB_WIDGET_DEP.FROM_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.FROM_FIELD_ID=OPB_TARG_FLD.FLDID) 
		OR (OPB_WIDGET_DEP.TO_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.TO_FIELD_ID=OPB_TARG_FLD.FLDID)))
UNION ALL
SELECT  
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,  
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,  
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,  
    OPB_MAPPING.MAPPING_ID MAPPING_ID,  
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_WIDGET_INST.INSTANCE_NAME OBJECT_INSTANCE_NAME,  
    OPB_WIDGET_INST.INSTANCE_ID OBJECT_INSTANCE_ID,  
    OPB_WIDGET_INST.WIDGET_TYPE OBJECT_TYPE,  
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,
    OPB_WIDGET_FIELD.FIELD_ID FIELD_ID,  
    OPB_WIDGET_FIELD.FIELD_NAME FIELD_NAME,
    OPB_WIDGET_FIELD.VERSION_NUMBER OBJECT_VERSION_NUMBER
FROM  
	OPB_WIDGET_INST, OPB_MAPPING, OPB_WIDGET_FIELD, OPB_SUBJECT, 
    OPB_WIDGET, OPB_OBJECT_TYPE
WHERE  
    OPB_WIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
    AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
    AND OPB_WIDGET_INST.WIDGET_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
	AND OPB_MAPPING.IS_VISIBLE = 1
	AND OPB_WIDGET_INST.WIDGET_ID = OPB_WIDGET.WIDGET_ID 
	AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
	AND OPB_WIDGET.IS_VISIBLE = 1
	AND OPB_WIDGET_INST.WIDGET_ID = OPB_WIDGET_FIELD.WIDGET_ID 
	AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_WIDGET_FIELD.VERSION_NUMBER 
	AND OPB_WIDGET_INST.WIDGET_TYPE NOT IN (1,2) 
	AND OPB_MAPPING.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID 
	AND OPB_MAPPING.REF_WIDGET_ID = 0 
	AND NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_DEP  
		WHERE OPB_WIDGET_DEP.MAPPING_ID= OPB_MAPPING.MAPPING_ID 
		AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
		AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_WIDGET_FIELD.VERSION_NUMBER 
		AND OPB_WIDGET_DEP.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER 
		AND ((OPB_WIDGET_DEP.FROM_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.FROM_FIELD_ID=OPB_WIDGET_FIELD.FIELD_ID) 
		OR (OPB_WIDGET_DEP.TO_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID 
		AND OPB_WIDGET_DEP.TO_FIELD_ID=OPB_WIDGET_FIELD.FIELD_ID)))
GO

GO
--SqlScripter----[dbo].[REP_METADATA_EXTN_DEFINES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_METADATA_EXTN_DEFINES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_METADATA_EXTN_DEFINES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_METADATA_EXTN_DEFINES]
AS 
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,  
	OPB_MMD_DBTYPE.DBTYPE_NAME DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	OPB_MMD_CATALOG.VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_OBJECT_TYPE, OPB_MMD_DBTYPE, 
	OPB_MMD_DOMAIN, OPB_MMD_CATALOG  
WHERE  
	OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_MMD_METAEXT.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE > 0  
	AND OPB_MMD_METAEXT.DBTYPE >= 0  
	AND OPB_MMD_METAEXT.VENDOR_ID = OPB_MMD_CATALOG.VENDOR_ID  
UNION ALL
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,  
	OPB_MMD_DBTYPE.DBTYPE_NAME DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	NULL VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_OBJECT_TYPE, OPB_MMD_DBTYPE, OPB_MMD_DOMAIN
WHERE  
    OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
    AND OPB_MMD_METAEXT.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
    AND OPB_MMD_METAEXT.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID  
    AND OPB_MMD_METAEXT.OBJECT_TYPE > 0  
    AND OPB_MMD_METAEXT.DBTYPE >= 0  
    AND NOT EXISTS (SELECT 'X' FROM OPB_MMD_CATALOG 
	    WHERE OPB_MMD_CATALOG.VENDOR_ID = OPB_MMD_METAEXT.VENDOR_ID)  
UNION ALL  
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	'ALL' AS OBJECT_TYPE_NAME,  
	'N/A' AS DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	OPB_MMD_CATALOG.VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_MMD_DOMAIN, OPB_MMD_CATALOG  
WHERE  
	OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE = 0  
	AND OPB_MMD_METAEXT.VENDOR_ID = OPB_MMD_CATALOG.VENDOR_ID
UNION ALL
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	'ALL' AS OBJECT_TYPE_NAME,  
	'N/A' AS DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	NULL VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_MMD_DOMAIN  
WHERE  
	OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE = 0  
	AND NOT EXISTS (SELECT 'X' FROM OPB_MMD_CATALOG 
		WHERE OPB_MMD_CATALOG.VENDOR_ID = OPB_MMD_METAEXT.VENDOR_ID)
UNION ALL  
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,  
	'ALL' AS DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	OPB_MMD_CATALOG.VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_OBJECT_TYPE, OPB_MMD_DOMAIN, OPB_MMD_CATALOG  
WHERE  
	OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_MMD_METAEXT.OBJECT_TYPE > 0  
	AND OPB_MMD_METAEXT.DBTYPE = -1  
	AND OPB_MMD_METAEXT.VENDOR_ID = OPB_MMD_CATALOG.VENDOR_ID
UNION ALL
SELECT  
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,  
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,  
	OPB_MMD_METAEXT.METAEXT_NAME,  
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME,  
	'ALL' AS DATABASE_TYPE,  
	OPB_MMD_METAEXT.METAEXT_DESC METADATA_EXTN_DESCRIPTION,  
	NULL VENDOR_NAME  
FROM  
	OPB_MMD_METAEXT, OPB_OBJECT_TYPE, OPB_MMD_DOMAIN  
WHERE  
	OPB_MMD_METAEXT.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID  
	AND OPB_MMD_METAEXT.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
	AND OPB_MMD_METAEXT.OBJECT_TYPE > 0  
	AND OPB_MMD_METAEXT.DBTYPE = -1  
	AND NOT EXISTS (SELECT 'X' FROM OPB_MMD_CATALOG 
		WHERE OPB_MMD_CATALOG.VENDOR_ID = OPB_MMD_METAEXT.VENDOR_ID)
GO

GO
--SqlScripter----[dbo].[REP_METADATA_EXTNS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_METADATA_EXTNS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_METADATA_EXTNS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_METADATA_EXTNS]
AS
SELECT 
	OPB_METAEXT_VAL.SUBJECT_ID,
	OPB_METAEXT_VAL.METAEXT_NAME METADATA_EXTN_NAME, 
	OPB_METAEXT_VAL.OBJECT_TYPE METADATA_EXTN_OBJECT_TYPE, 
	OPB_METAEXT_VAL.OBJECT_ID METADATA_EXTN_OBJECT_ID,
	OPB_METAEXT_VAL.DATA_TYPE METADATA_EXTN_DATA_TYPE,
	OPB_METAEXT_VAL.PERMISSIONS PERMISSIONS,
	OPB_METAEXT_VAL.PM_VALUE METADATA_EXTN_VALUE, 
	OPB_METAEXT_VAL.LINE_NO,
	OPB_METAEXT_VAL.METAEXT_DESC METADATA_EXTN_DESCRIPTION,
	OPB_METAEXT_VAL.VERSION_NUMBER,
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME OBJECT_TYPE_NAME,
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,
	OPB_MMD_DOMAIN.DOMAIN_KEY DOMAIN_KEY,
	OPB_MMD_DOMAIN.DOMAIN_USAGE DOMAIN_USAGE,
	OPB_MMD_DOMAIN.DOMAIN_DESC DOMAIN_DESCRIPTION
FROM
	OPB_METAEXT_VAL, OPB_MMD_DOMAIN, OPB_OBJECT_TYPE
WHERE 
	OPB_METAEXT_VAL.DOMAIN_ID = OPB_MMD_DOMAIN.DOMAIN_ID 
	AND OPB_METAEXT_VAL.OBJECT_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID 
UNION ALL
SELECT 
	NULL SUBJECT_ID,
	NULL METADATA_EXTN_NAME, 
	NULL METADATA_EXTN_OBJECT_TYPE, 
	NULL METADATA_EXTN_OBJECT_ID,
	NULL METADATA_EXTN_DATA_TYPE,
	NULL PERMISSIONS,
	NULL METADATA_EXTN_VALUE, 
	NULL LINE_NO,
	NULL METADATA_EXTN_DESCRIPTION,
	NULL VERSION_NUMBER,
	NULL OBJECT_TYPE_NAME,
	OPB_MMD_DOMAIN.DOMAIN_ID DOMAIN_ID,
	OPB_MMD_DOMAIN.DOMAIN_NAME DOMAIN_NAME,
	OPB_MMD_DOMAIN.DOMAIN_KEY DOMAIN_KEY,
	OPB_MMD_DOMAIN.DOMAIN_USAGE DOMAIN_USAGE,
	OPB_MMD_DOMAIN.DOMAIN_DESC DOMAIN_DESCRIPTION
FROM
	OPB_MMD_DOMAIN
WHERE 
	NOT EXISTS (SELECT 'X' FROM OPB_METAEXT_VAL 
		WHERE OPB_MMD_DOMAIN.DOMAIN_ID = OPB_METAEXT_VAL.DOMAIN_ID)
GO

GO
--SqlScripter----[dbo].[REP_REPOSIT_INFO].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_REPOSIT_INFO]') IS NULL EXEC('CREATE VIEW [dbo].[REP_REPOSIT_INFO] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_REPOSIT_INFO]
AS
SELECT OPB_REPOSIT.RECID,
       OPB_REPOSIT.REPOSIT_NAME REPOSITORY_NAME,
	   OPB_REPOSIT.REPOSIT_DESC REPOSITORY_DESCRIPTION,
	   OPB_REPOSIT_INFO.REPOSITORY_ID,
	   OPB_REPOSIT_INFO.REPOSITORY_TYPE,
	   OPB_REPOSIT_INFO.DOMAIN_NAME,
	   OPB_REPOSIT_INFO.DB_USER DATABASE_USER,
	   OPB_REPOSIT_INFO.DB_TYPE DATABASE_TYPE,
	   'N/A' AS HOSTNAME,
	   'N/A' AS PORTNUM
FROM OPB_REPOSIT, OPB_REPOSIT_INFO
WHERE OPB_REPOSIT.REPOSIT_NAME = OPB_REPOSIT_INFO.REPOSITORY_NAME
    AND  OPB_REPOSIT.RECID = 1
GO

GO
--SqlScripter----[dbo].[REP_SEG_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SEG_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SEG_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SEG_FLDS]
AS SELECT
* FROM REP_SRC_FILE_FLDS
GO

GO
--SqlScripter----[dbo].[REP_SERVER_INFO].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SERVER_INFO]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SERVER_INFO] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SERVER_INFO]
AS
SELECT SERVER_ID,
       SERVER_NAME,
       HOST_INFO,
       TIMEOUT,
       PORT_NO,
       HOSTNAME,
       IP_ADDRESS,
       LAST_SAVED
FROM OPB_SERVER_INFO
WHERE SERVER_TYPE = 41
GO

GO
--SqlScripter----[dbo].[REP_SERVER_NET].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SERVER_NET]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SERVER_NET] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SERVER_NET]
AS
SELECT SERVER_NET_ID,
       SERVER_NET_NAME ,
       SERVER_NET_DESC  SERVER_NET_DESCRIPTION,
       LAST_SAVED
FROM OPB_SERVER_NET
GO

GO
--SqlScripter----[dbo].[REP_SERVER_NET_REF].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SERVER_NET_REF]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SERVER_NET_REF] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SERVER_NET_REF]
AS
SELECT SERVER_NET_ID,
       SERVER_ID,
       BIT_OPTIONS
FROM OPB_SERVER_NET_REF
GO

GO
--SqlScripter----[dbo].[REP_SESS_CONFIG_PARM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_CONFIG_PARM]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_CONFIG_PARM] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_CONFIG_PARM]
AS 
SELECT  
	OPB_CFG_ATTR.SESSION_ID,
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER,
	OPB_SESSION_CONFIG.CONFIG_ID,  
	OPB_CFG_ATTR.ATTR_ID,  
	OPB_MMD_CFG_ATTR.ATTR_TYPE,  
	OPB_MMD_CFG_ATTR.ATTR_NAME,  
	OPB_CFG_ATTR.ATTR_VALUE  
FROM 
	OPB_CFG_ATTR, OPB_MMD_CFG_ATTR, OPB_TASK, OPB_SESSION_CONFIG, OPB_COMPONENT  
WHERE 
	OPB_CFG_ATTR.ATTR_ID = OPB_MMD_CFG_ATTR.ATTR_ID  
	AND OPB_CFG_ATTR.SESSION_ID > 0  
	AND OPB_CFG_ATTR.WORKFLOW_ID = 0  
	AND OPB_CFG_ATTR.ATTR_ID NOT IN (1,101,201)  
	AND OPB_CFG_ATTR.SESSION_ID = OPB_TASK.TASK_ID  
	AND OPB_CFG_ATTR.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
	AND OPB_TASK.TASK_TYPE = 68  
	AND OPB_TASK.IS_VISIBLE = 1  
	AND OPB_CFG_ATTR.SESSION_ID = OPB_COMPONENT.TASK_ID  
	AND OPB_COMPONENT.OBJECT_TYPE = 72  
	AND OPB_COMPONENT.WORKFLOW_ID = 0  
	AND OPB_COMPONENT.TASK_INST_ID = 0  
        AND OPB_COMPONENT.TASK_ID = OPB_TASK.TASK_ID
	AND OPB_COMPONENT.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
	AND OPB_COMPONENT.REF_OBJ_ID = OPB_SESSION_CONFIG.CONFIG_ID  
	AND OPB_SESSION_CONFIG.IS_VISIBLE = 1  
UNION ALL  
SELECT 
	OPB_TASK.TASK_ID SESSION_ID, 
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER, 
	OPB_CFG_ATTR.CONFIG_ID,  
	OPB_CFG_ATTR.ATTR_ID,  
	OPB_MMD_CFG_ATTR.ATTR_TYPE,  
	OPB_MMD_CFG_ATTR.ATTR_NAME,  
	OPB_CFG_ATTR.ATTR_VALUE  
FROM
	OPB_TASK, OPB_CFG_ATTR, OPB_MMD_CFG_ATTR, OPB_SESSION_CONFIG, OPB_COMPONENT  
WHERE 
	OPB_CFG_ATTR.ATTR_ID = OPB_MMD_CFG_ATTR.ATTR_ID  
	AND OPB_CFG_ATTR.SESSION_ID = 0  
	AND OPB_CFG_ATTR.WORKFLOW_ID = 0  
	AND OPB_CFG_ATTR.ATTR_ID NOT IN (1,101,201)  
	AND OPB_TASK.TASK_TYPE  = 68  
	AND OPB_TASK.IS_VISIBLE = 1  
	AND OPB_CFG_ATTR.CONFIG_ID IN  
	(SELECT C.CONFIG_ID 
	FROM 
		OPB_CFG_ATTR A, OPB_COMPONENT B, OPB_SESSION_CONFIG C  
	WHERE 
		A.SESSION_ID > 0  
		AND A.WORKFLOW_ID = 0  
		AND A.ATTR_ID NOT IN (1,101,201)  
		AND A.SESSION_ID = OPB_TASK.TASK_ID  
		AND A.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND A.SESSION_ID = B.TASK_ID  
		AND B.OBJECT_TYPE = 72  
		AND B.WORKFLOW_ID = 0  
		AND B.TASK_INST_ID = 0  
		AND B.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND B.REF_OBJ_ID = C.CONFIG_ID  
		AND C.IS_VISIBLE = 1)  
	AND OPB_CFG_ATTR.ATTR_ID NOT IN  
	(SELECT A.ATTR_ID 
	FROM 
		OPB_CFG_ATTR A, OPB_COMPONENT B, OPB_SESSION_CONFIG C  
	WHERE 
		A.SESSION_ID > 0  
		AND A.WORKFLOW_ID = 0
		AND A.ATTR_ID NOT IN (1,101,201)  
		AND A.SESSION_ID = OPB_TASK.TASK_ID  
		AND A.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND A.SESSION_ID = B.TASK_ID  
		AND B.OBJECT_TYPE = 72  
		AND B.WORKFLOW_ID = 0  
		AND B.TASK_INST_ID = 0  
		AND B.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND B.REF_OBJ_ID = C.CONFIG_ID  
		AND C.IS_VISIBLE = 1)  
	AND OPB_COMPONENT.OBJECT_TYPE = 72
        AND OPB_COMPONENT.TASK_ID = OPB_TASK.TASK_ID
	AND OPB_COMPONENT.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_COMPONENT.REF_OBJ_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_CFG_ATTR.CONFIG_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_CFG_ATTR.VERSION_NUMBER = OPB_SESSION_CONFIG.VERSION_NUMBER
	AND OPB_SESSION_CONFIG.IS_VISIBLE = 1
UNION ALL
SELECT
	OPB_CFG_ATTR.SESSION_ID SESSION_ID,
	0 SESSION_VERSION_NUMBER,
	OPB_CFG_ATTR.CONFIG_ID,
	OPB_CFG_ATTR.ATTR_ID,
	OPB_MMD_CFG_ATTR.ATTR_TYPE,
	OPB_MMD_CFG_ATTR.ATTR_NAME,
	OPB_CFG_ATTR.ATTR_VALUE
FROM
	OPB_TASK, OPB_CFG_ATTR, OPB_MMD_CFG_ATTR, OPB_SESSION_CONFIG, OPB_COMPONENT
WHERE
	OPB_CFG_ATTR.ATTR_ID = OPB_MMD_CFG_ATTR.ATTR_ID
	AND OPB_CFG_ATTR.SESSION_ID = 0
	AND OPB_CFG_ATTR.WORKFLOW_ID = 0
	AND OPB_CFG_ATTR.ATTR_ID NOT IN (1,101,201)
	AND OPB_TASK.TASK_TYPE = 68
	AND OPB_TASK.IS_VISIBLE = 1
	AND OPB_CFG_ATTR.CONFIG_ID IN
	(SELECT C.CONFIG_ID
	FROM
		OPB_CFG_ATTR A, OPB_COMPONENT B, OPB_SESSION_CONFIG C
	WHERE
		A.SESSION_ID > 0
		AND A.WORKFLOW_ID = 0
		AND A.ATTR_ID NOT IN (1,101,201)
		AND A.SESSION_ID = OPB_TASK.TASK_ID
		AND A.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
		AND A.SESSION_ID = B.TASK_ID
		AND B.OBJECT_TYPE = 72
		AND B.WORKFLOW_ID = 0
		AND B.TASK_INST_ID = 0
		AND B.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
		AND B.REF_OBJ_ID = C.CONFIG_ID
		AND C.IS_VISIBLE = 1)
	AND OPB_CFG_ATTR.ATTR_ID IN
	(SELECT A.ATTR_ID
	FROM
		OPB_CFG_ATTR A, OPB_COMPONENT B, OPB_SESSION_CONFIG C
	WHERE
		A.SESSION_ID > 0
		AND A.WORKFLOW_ID = 0
		AND A.ATTR_ID NOT IN (1,101,201)
		AND A.SESSION_ID = OPB_TASK.TASK_ID
		AND A.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
		AND A.SESSION_ID = B.TASK_ID
		AND B.OBJECT_TYPE = 72
		AND B.WORKFLOW_ID = 0
		AND B.TASK_INST_ID = 0
		AND B.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
		AND B.REF_OBJ_ID = C.CONFIG_ID
		AND C.IS_VISIBLE = 1)
	AND OPB_COMPONENT.OBJECT_TYPE = 72
        AND OPB_COMPONENT.TASK_ID = OPB_TASK.TASK_ID
	AND OPB_COMPONENT.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_COMPONENT.REF_OBJ_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_CFG_ATTR.CONFIG_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_CFG_ATTR.VERSION_NUMBER = OPB_SESSION_CONFIG.VERSION_NUMBER
	AND OPB_SESSION_CONFIG.IS_VISIBLE = 1
UNION ALL  
SELECT 
	OPB_TASK.TASK_ID SESSION_ID, 
    OPB_TASK.VERSION_NUMBER SESSION_VERSION_NUMBER, 
	OPB_CFG_ATTR.CONFIG_ID,  
	OPB_CFG_ATTR.ATTR_ID,  
	OPB_MMD_CFG_ATTR.ATTR_TYPE,  
	OPB_MMD_CFG_ATTR.ATTR_NAME,  
	OPB_CFG_ATTR.ATTR_VALUE  
FROM 
	OPB_TASK, OPB_CFG_ATTR, OPB_MMD_CFG_ATTR, OPB_SESSION_CONFIG, OPB_COMPONENT  
WHERE 
	OPB_CFG_ATTR.ATTR_ID = OPB_MMD_CFG_ATTR.ATTR_ID  
	AND OPB_CFG_ATTR.SESSION_ID = 0  
	AND OPB_CFG_ATTR.WORKFLOW_ID = 0  
	AND OPB_CFG_ATTR.ATTR_ID NOT IN (1,101,201)  
	AND OPB_TASK.TASK_TYPE = 68  
	AND OPB_TASK.IS_VISIBLE = 1  
	AND NOT EXISTS  
	(SELECT 'X' 
	FROM 
		OPB_CFG_ATTR A, OPB_COMPONENT B, OPB_SESSION_CONFIG C  
	WHERE 
		A.SESSION_ID > 0  
		AND A.WORKFLOW_ID = 0  
		AND A.ATTR_ID NOT IN (1,101,201)  
		AND A.SESSION_ID = OPB_TASK.TASK_ID  
		AND A.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND A.SESSION_ID = B.TASK_ID  
		AND B.OBJECT_TYPE = 72  
		AND B.WORKFLOW_ID = 0  
		AND B.TASK_INST_ID = 0  
		AND B.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER  
		AND B.REF_OBJ_ID = C.CONFIG_ID  
		AND C.IS_VISIBLE = 1)  
	AND OPB_COMPONENT.OBJECT_TYPE = 72
        AND OPB_COMPONENT.TASK_ID = OPB_TASK.TASK_ID
	AND OPB_COMPONENT.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_COMPONENT.REF_OBJ_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_CFG_ATTR.CONFIG_ID = OPB_SESSION_CONFIG.CONFIG_ID  
	AND OPB_CFG_ATTR.VERSION_NUMBER = OPB_SESSION_CONFIG.VERSION_NUMBER
	AND OPB_TASK.SUBJECT_ID = OPB_SESSION_CONFIG.SUBJECT_ID  
	AND OPB_SESSION_CONFIG.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESS_INST_CONFIG_PARM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_INST_CONFIG_PARM]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_INST_CONFIG_PARM] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_INST_CONFIG_PARM]
AS 
SELECT
	OPB_CFG_ATTR.WORKFLOW_ID,
	OPB_CFG_ATTR.SESSION_ID,
	OPB_CFG_ATTR.SESSION_INST_ID,
	OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
	OPB_SESSION_CONFIG.CONFIG_ID,
	OPB_CFG_ATTR.ATTR_ID,
	OPB_MMD_CFG_ATTR.ATTR_TYPE,
	OPB_MMD_CFG_ATTR.ATTR_NAME,
	OPB_CFG_ATTR.ATTR_VALUE
FROM
	OPB_CFG_ATTR, OPB_MMD_CFG_ATTR, OPB_TASK, OPB_TASK T1, OPB_SESSION_CONFIG, OPB_COMPONENT
WHERE
	OPB_CFG_ATTR.ATTR_ID = OPB_MMD_CFG_ATTR.ATTR_ID
	AND OPB_CFG_ATTR.SESSION_ID > 0
	AND OPB_CFG_ATTR.WORKFLOW_ID > 0
	AND OPB_CFG_ATTR.ATTR_ID NOT IN (1,101,201)
	AND OPB_CFG_ATTR.WORKFLOW_ID = OPB_TASK.TASK_ID
	AND OPB_CFG_ATTR.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.TASK_TYPE = 71
	AND OPB_TASK.IS_VISIBLE = 1
	AND OPB_CFG_ATTR.SESSION_ID = T1.TASK_ID
	AND T1.TASK_TYPE = 68
	AND T1.IS_VISIBLE = 1
	AND OPB_CFG_ATTR.SESSION_ID = OPB_COMPONENT.TASK_ID
	AND OPB_COMPONENT.OBJECT_TYPE = 72
	AND OPB_COMPONENT.WORKFLOW_ID = 0
	AND OPB_COMPONENT.TASK_INST_ID = 0
	AND OPB_COMPONENT.VERSION_NUMBER = T1.VERSION_NUMBER
	AND OPB_COMPONENT.REF_OBJ_ID = OPB_SESSION_CONFIG.CONFIG_ID
	AND OPB_SESSION_CONFIG.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESS_LOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_LOG]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_LOG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_LOG]
AS SELECT
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    OPB_TASK_INST_RUN.TASK_NAME SESSION_NAME,
    OPB_TASK_INST_RUN.TASK_ID SESSION_ID,
    OPB_TASK_INST_RUN.INSTANCE_NAME SESSION_INSTANCE_NAME,
    TARG_SUCCESS_ROWS SUCCESSFUL_ROWS,
    TARG_FAILED_ROWS FAILED_ROWS,
    SRC_SUCCESS_ROWS SUCCESSFUL_SOURCE_ROWS,
    SRC_FAILED_ROWS FAILED_SOURCE_ROWS,
    FIRST_ERROR_CODE,
    FIRST_ERROR_MSG,
    OPB_TASK_INST_RUN.RUN_ERR_CODE LAST_ERROR_CODE,
    OPB_TASK_INST_RUN.RUN_ERR_MSG  LAST_ERROR,
    OPB_TASK_INST_RUN.RUN_STATUS_CODE,
    OPB_TASK_INST_RUN.START_TIME ACTUAL_START,
    OPB_TASK_INST_RUN.END_TIME   SESSION_TIMESTAMP,
    OPB_SESS_TASK_LOG.LOG_FILE  SESSION_LOG_FILE,
    OPB_SESS_TASK_LOG.ERROR_LOG_FILE  BAD_FILE_LOCATION,
    OPB_TASK_INST_RUN.VERSION_NUMBER TASK_VERSION_NUMBER,
    OPB_WFLOW_RUN.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_WFLOW_RUN.WORKFLOW_NAME WORKFLOW_NAME,
    OPB_SESS_TASK_LOG.MAPPING_NAME MAPPING_NAME,
    OPB_SESS_TASK_LOG.TOTAL_TRANS_ERRS TOTAL_ERR,
    OPB_SESS_TASK_LOG.WORKFLOW_ID,
    OPB_SESS_TASK_LOG.WORKFLOW_RUN_ID,
    OPB_SESS_TASK_LOG.WORKLET_RUN_ID,
    OPB_SESS_TASK_LOG.INSTANCE_ID
FROM
    OPB_TASK_INST_RUN, OPB_SESS_TASK_LOG, OPB_WFLOW_RUN, OPB_SUBJECT
WHERE
    OPB_TASK_INST_RUN.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK_INST_RUN.WORKFLOW_ID = OPB_SESS_TASK_LOG.WORKFLOW_ID AND
    OPB_TASK_INST_RUN.WORKFLOW_RUN_ID = OPB_SESS_TASK_LOG.WORKFLOW_RUN_ID AND
    OPB_TASK_INST_RUN.WORKLET_RUN_ID = OPB_SESS_TASK_LOG.WORKLET_RUN_ID AND
    OPB_TASK_INST_RUN.INSTANCE_ID = OPB_SESS_TASK_LOG.INSTANCE_ID AND
    OPB_WFLOW_RUN.WORKFLOW_RUN_ID = OPB_SESS_TASK_LOG.WORKFLOW_RUN_ID AND
    OPB_WFLOW_RUN.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID
GO

GO
--SqlScripter----[dbo].[REP_SESS_PARTITION_DEF].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_PARTITION_DEF]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_PARTITION_DEF] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_PARTITION_DEF]
AS
SELECT
	OPB_PARTITION_DEF.SESSION_ID, 
	OPB_PARTITION_DEF.SESS_WIDG_INST_ID,
	OPB_PARTITION_DEF.PARTITION_ID,
	OPB_PARTITION_DEF.PARTITION_NAME,
	OPB_PARTITION_DEF.COMMENTS DESCRIPTION,
	OPB_PARTITION_DEF.LAST_SAVED,
	OPB_PARTITION_DEF.VERSION_NUMBER,
	OPB_SWIDGET_INST.MAPPING_ID,
	OPB_SWIDGET_INST.WIDGET_ID,
	OPB_SWIDGET_INST.WIDGET_TYPE,
	OPB_SWIDGET_INST.INSTANCE_ID,
	OPB_SWIDGET_INST.INSTANCE_NAME, 
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TYPE_NAME
FROM 
	OPB_PARTITION_DEF, OPB_SWIDGET_INST, OPB_OBJECT_TYPE, OPB_TASK
WHERE 
	OPB_PARTITION_DEF.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID 
	AND OPB_PARTITION_DEF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID 
	AND OPB_OBJECT_TYPE.OBJECT_TYPE_ID = OPB_SWIDGET_INST.WIDGET_TYPE
	AND OPB_PARTITION_DEF.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER 
	AND OPB_SWIDGET_INST.SESSION_ID = OPB_TASK.TASK_ID
	AND OPB_TASK.TASK_TYPE = 68
	AND OPB_TASK.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESS_TBL_LOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_TBL_LOG]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_TBL_LOG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_TBL_LOG]
AS SELECT
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    B.TASK_NAME SESSION_NAME,
    B.TASK_ID SESSION_ID,
    OPB_TASK_INST.INSTANCE_NAME SESSION_INSTANCE_NAME,
    OPB_TASK_INST.INSTANCE_ID SESSION_INSTANCE_ID,
    OPB_TASK_INST.WORKFLOW_ID,
    A.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TARG.TARGET_NAME TABLE_NAME,
    OPB_TARG.TARGET_ID TABLE_ID,
    OPB_TARG.VERSION_NUMBER TABLE_VERSION_NUMBER,
    BUSINESS_NAME TABLE_BUSNAME,
    OPB_SWIDGINST_LOG.INSTANCE_NAME TABLE_INSTANCE_NAME,
    APPLIED_ROWS SUCCESSFUL_ROWS,
    AFFECTED_ROWS SUCCESSFUL_AFFECTED_ROWS,
    REJECTED_ROWS FAILED_ROWS,
    LAST_ERR_MSG LAST_ERROR,
    LAST_ERR_CODE LAST_ERROR_CODE,
    START_TIME,
    END_TIME,
    NULL SESSION_TIMESTAMP,
    CAST(ATTRDIR.ATTR_VALUE AS VARCHAR) + CAST(ATTRFILE.ATTR_VALUE AS VARCHAR) AS BAD_FILE_LOCATION,
    B.VERSION_NUMBER SESSION_VERSION_NUMBER,
    OPB_SWIDGINST_LOG.PARTITION_NAME PARTITION_NAME,
    OPB_SWIDGINST_LOG.MAPPLET_INST_NAME MAPPLET_INSTANCE_NAME,
    OPB_SWIDGINST_LOG.WIDGET_NAME WIDGET_NAME,
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TYPE_NAME,
    OPB_SWIDGINST_LOG.GROUP_NAME GROUP_NAME,
    OPB_SWIDGINST_LOG.THRUPUT THROUGHPUT,
    OPB_SWIDGINST_LOG.WIDGET_TYPE TYPE_ID
FROM
    OPB_SWIDGINST_LOG, OPB_SUBJECT, OPB_TASK_INST, OPB_SWIDGET_INST,
    OPB_TARG, OPB_TASK A, OPB_TASK B, OPB_OBJECT_TYPE, 
    OPB_EXTN_ATTR ATTRDIR, OPB_EXTN_ATTR ATTRFILE, OPB_MAPPING M,
    OPB_WIDGET_INST W
WHERE
    A.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    A.TASK_TYPE IN (70, 71) AND
    OPB_TASK_INST.WORKFLOW_ID = A.TASK_ID AND
    B.TASK_ID = OPB_SWIDGINST_LOG.SESSION_ID AND
    B.TASK_TYPE = 68 AND
    OPB_TASK_INST.INSTANCE_ID = OPB_SWIDGINST_LOG.TASK_INSTANCE_ID AND
    OPB_SWIDGINST_LOG.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID AND
    OPB_SWIDGINST_LOG.SESSWIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
    OPB_SWIDGET_INST.MAPPING_ID = W.MAPPING_ID AND
    OPB_SWIDGET_INST.INSTANCE_ID = W.INSTANCE_ID AND
    M.MAPPING_ID = W.MAPPING_ID AND
    M.VERSION_NUMBER = W.VERSION_NUMBER AND
    W.WIDGET_TYPE = 2 AND
    W.WIDGET_ID = OPB_TARG.TARGET_ID AND
    M.IS_VISIBLE = 1 AND
    OPB_TARG.IS_VISIBLE = 1 AND
    OPB_SWIDGINST_LOG.WIDGET_TYPE = OPB_SWIDGET_INST.WIDGET_TYPE AND
    OPB_SWIDGINST_LOG.WIDGET_TYPE = 2 AND
    A.VERSION_NUMBER = OPB_TASK_INST.VERSION_NUMBER AND
    B.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER AND
    A.IS_VISIBLE = 1 AND
    B.IS_VISIBLE = 1 AND
    OPB_OBJECT_TYPE.OBJECT_TYPE_ID = OPB_SWIDGINST_LOG.WIDGET_TYPE AND
    ATTRDIR.OBJECT_TYPE = 79 AND
    ATTRFILE.OBJECT_TYPE = 79 AND
    ATTRDIR.OBJECT_SUBTYPE = ATTRFILE.OBJECT_SUBTYPE AND
    ((ATTRDIR.OBJECT_SUBTYPE = 1001 AND
        ATTRDIR.ATTR_ID = 1 AND
        ATTRFILE.ATTR_ID = 2) OR
        (ATTRDIR.OBJECT_SUBTYPE = 1000 AND
        ATTRDIR.ATTR_ID = 3 AND
        ATTRFILE.ATTR_ID = 4)) AND
    ATTRDIR.SESSION_ID = OPB_SWIDGINST_LOG.SESSION_ID AND
    ATTRDIR.SESS_WIDG_INST_ID = OPB_SWIDGINST_LOG.SESSWIDG_INST_ID AND
    ATTRDIR.VERSION_NUMBER = B.VERSION_NUMBER AND
    ATTRDIR.PARTITION_ID = OPB_SWIDGINST_LOG.PARTITION_ID AND
    ATTRFILE.SESSION_ID = OPB_SWIDGINST_LOG.SESSION_ID AND
    ATTRFILE.SESS_WIDG_INST_ID = OPB_SWIDGINST_LOG.SESSWIDG_INST_ID AND
    ATTRFILE.VERSION_NUMBER = B.VERSION_NUMBER AND
    ATTRFILE.PARTITION_ID = OPB_SWIDGINST_LOG.PARTITION_ID AND
    ATTRDIR.SESSION_INST_ID = (SELECT MAX(ATTRINST.SESSION_INST_ID)
        FROM OPB_EXTN_ATTR ATTRINST
        WHERE ATTRINST.SESSION_ID = ATTRDIR.SESSION_ID AND
        ATTRINST.SESS_WIDG_INST_ID = ATTRDIR.SESS_WIDG_INST_ID AND
        ATTRINST.VERSION_NUMBER = ATTRDIR.VERSION_NUMBER AND
        ATTRINST.ATTR_ID = ATTRDIR.ATTR_ID AND
        ATTRINST.OBJECT_TYPE = 79 AND
        ATTRINST.OBJECT_SUBTYPE = ATTRDIR.OBJECT_SUBTYPE AND
        (ATTRINST.SESSION_INST_ID = OPB_SWIDGINST_LOG.TASK_INSTANCE_ID OR
        ATTRINST.SESSION_INST_ID = 0)) AND
    ATTRFILE.SESSION_INST_ID = (SELECT MAX(ATTRINST.SESSION_INST_ID)
        FROM OPB_EXTN_ATTR ATTRINST
        WHERE ATTRINST.SESSION_ID = ATTRFILE.SESSION_ID AND
        ATTRINST.SESS_WIDG_INST_ID = ATTRFILE.SESS_WIDG_INST_ID AND
        ATTRINST.VERSION_NUMBER = ATTRFILE.VERSION_NUMBER AND
        ATTRINST.ATTR_ID = ATTRFILE.ATTR_ID AND
        ATTRINST.OBJECT_TYPE = 79 AND
        ATTRINST.OBJECT_SUBTYPE = ATTRFILE.OBJECT_SUBTYPE AND
        (ATTRINST.SESSION_INST_ID = OPB_SWIDGINST_LOG.TASK_INSTANCE_ID OR
        ATTRINST.SESSION_INST_ID = 0))
UNION ALL
SELECT
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    B.TASK_NAME SESSION_NAME,
    B.TASK_ID SESSION_ID,
    OPB_TASK_INST.INSTANCE_NAME SESSION_INSTANCE_NAME,
    OPB_TASK_INST.INSTANCE_ID SESSION_INSTANCE_ID,
    OPB_TASK_INST.WORKFLOW_ID,
    A.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TARG.TARGET_NAME TABLE_NAME,
    OPB_TARG.TARGET_ID TABLE_ID,
    OPB_TARG.VERSION_NUMBER TABLE_VERSION_NUMBER,
    BUSINESS_NAME TABLE_BUSNAME,
    OPB_SWIDGINST_LOG.INSTANCE_NAME TABLE_INSTANCE_NAME,
    APPLIED_ROWS SUCCESSFUL_ROWS,
    AFFECTED_ROWS SUCCESSFUL_AFFECTED_ROWS,
    REJECTED_ROWS FAILED_ROWS,
    LAST_ERR_MSG LAST_ERROR,
    LAST_ERR_CODE LAST_ERROR_CODE,
    START_TIME,
    END_TIME,
    NULL SESSION_TIMESTAMP,
    NULL BAD_FILE_LOCATION,
    B.VERSION_NUMBER SESSION_VERSION_NUMBER,
    OPB_SWIDGINST_LOG.PARTITION_NAME PARTITION_NAME,
    OPB_SWIDGINST_LOG.MAPPLET_INST_NAME MAPPLET_INSTANCE_NAME,
    OPB_SWIDGINST_LOG.WIDGET_NAME WIDGET_NAME,
    OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TYPE_NAME,
    OPB_SWIDGINST_LOG.GROUP_NAME GROUP_NAME,
    OPB_SWIDGINST_LOG.THRUPUT THROUGHPUT,
    OPB_SWIDGINST_LOG.WIDGET_TYPE TYPE_ID
FROM
    OPB_SWIDGINST_LOG, OPB_SUBJECT, OPB_TASK_INST, OPB_SWIDGET_INST,
    OPB_TARG, OPB_TASK A, OPB_TASK B, OPB_OBJECT_TYPE, 
    OPB_MAPPING M, OPB_WIDGET_INST W
WHERE
    A.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    A.TASK_TYPE IN (70, 71) AND
    OPB_TASK_INST.WORKFLOW_ID = A.TASK_ID AND
    B.TASK_ID = OPB_SWIDGINST_LOG.SESSION_ID AND
    B.TASK_TYPE = 68 AND
    OPB_TASK_INST.INSTANCE_ID = OPB_SWIDGINST_LOG.TASK_INSTANCE_ID AND
    OPB_SWIDGINST_LOG.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID AND
    OPB_SWIDGINST_LOG.SESSWIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
    OPB_SWIDGET_INST.MAPPING_ID = W.MAPPING_ID AND
    OPB_SWIDGET_INST.INSTANCE_ID = W.INSTANCE_ID AND
    M.MAPPING_ID = W.MAPPING_ID AND
    M.VERSION_NUMBER = W.VERSION_NUMBER AND
    W.WIDGET_TYPE = 2 AND
    W.WIDGET_ID = OPB_TARG.TARGET_ID AND
    M.IS_VISIBLE = 1 AND
    OPB_TARG.IS_VISIBLE = 1 AND
    OPB_SWIDGINST_LOG.WIDGET_TYPE = OPB_SWIDGET_INST.WIDGET_TYPE AND
    OPB_SWIDGINST_LOG.WIDGET_TYPE = 2 AND
    A.VERSION_NUMBER = OPB_TASK_INST.VERSION_NUMBER AND
    B.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER AND
    A.IS_VISIBLE = 1 AND
    B.IS_VISIBLE = 1 AND
    OPB_OBJECT_TYPE.OBJECT_TYPE_ID = OPB_SWIDGINST_LOG.WIDGET_TYPE AND
    NOT EXISTS (SELECT SESSION_ID
                FROM   OPB_EXTN_ATTR
                WHERE  SESSION_ID = OPB_SWIDGINST_LOG.SESSION_ID
                AND    OBJECT_TYPE = 79
                AND    OBJECT_SUBTYPE = 1001
                AND    ATTR_ID = 1) AND
    NOT EXISTS (SELECT SESSION_ID
                FROM   OPB_EXTN_ATTR
                WHERE  SESSION_ID = OPB_SWIDGINST_LOG.SESSION_ID
                AND    OBJECT_TYPE = 79
                AND    OBJECT_SUBTYPE = 1000
                AND    ATTR_ID = 3)
GO

GO
--SqlScripter----[dbo].[REP_SESS_WIDGET_CNXS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESS_WIDGET_CNXS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESS_WIDGET_CNXS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESS_WIDGET_CNXS]
AS
SELECT 
	OPB_SWIDGET_INST.INSTANCE_ID WIDGET_INSTANCE_ID,
	OPB_SWIDGET_INST.WIDGET_TYPE WIDGET_TYPE,
	OPB_SWIDGET_INST.INSTANCE_NAME INSTANCE_NAME, 
	OPB_MMD_SESS_EXTNS.OBJECT_NAME READER_WRITER_TYPE, 
	OPB_CNX.OBJECT_NAME CNX_NAME,
	OPB_SWIDGET_INST.SESSION_ID,
	OPB_SWIDGET_INST.SESS_WIDG_INST_ID,
	OPB_SESS_EXTNS.OBJECT_TYPE SESS_EXTN_OBJECT_TYPE,
	OPB_SESS_EXTNS.OBJECT_SUBTYPE SESS_EXTN_OBJECT_SUBTYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_TYPE SESS_CNX_REFS_OBJECT_TYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_SUBTYP SESS_CNX_REFS_OBJECT_SUBTYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_ID SESS_CNX_REFS_OBJECT_ID,
	OPB_SESS_CNX_REFS.WORKFLOW_ID WORKFLOW_ID,
	OPB_SESS_CNX_REFS.SESSION_INST_ID SESSION_INSTANCE_ID,
    OPB_SWIDGET_INST.VERSION_NUMBER SESSION_VERSION_NUMBER
FROM 
	OPB_SWIDGET_INST, OPB_SESS_EXTNS, OPB_MMD_SESS_EXTNS, 
	OPB_SESS_CNX_REFS, OPB_CNX, OPB_TASK
WHERE 
	OPB_SWIDGET_INST.WIDGET_TYPE IN (1,2, 3, 56, 45, 55, 84)  
	AND OPB_SWIDGET_INST.SESSION_ID = OPB_SESS_EXTNS.SESSION_ID 
	AND OPB_SWIDGET_INST.SESS_WIDG_INST_ID = OPB_SESS_EXTNS.SESS_WIDG_INST_ID 
	AND OPB_SESS_EXTNS.OBJECT_TYPE = OPB_MMD_SESS_EXTNS.OBJECT_TYPE 
	AND OPB_SESS_EXTNS.OBJECT_SUBTYPE = OPB_MMD_SESS_EXTNS.OBJECT_SUBTYPE 
	AND OPB_SESS_EXTNS.SESSION_ID = OPB_SESS_CNX_REFS.SESSION_ID 
	AND OPB_SESS_CNX_REFS.REF_OBJECT_TYPE = OPB_CNX.OBJECT_TYPE 
	AND OPB_SESS_CNX_REFS.REF_OBJECT_SUBTYP = OPB_CNX.OBJECT_SUBTYPE 
	AND OPB_SESS_CNX_REFS.REF_OBJECT_ID  = OPB_CNX.OBJECT_ID 
	AND OPB_SESS_EXTNS.SESS_WIDG_INST_ID = OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID 
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_SESS_EXTNS.VERSION_NUMBER
	AND OPB_SESS_CNX_REFS.WORKFLOW_ID = 0
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_SESS_CNX_REFS.VERSION_NUMBER
	AND OPB_SWIDGET_INST.SESSION_ID = OPB_TASK.TASK_ID
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.IS_VISIBLE = 1
UNION ALL
SELECT 
	OPB_SWIDGET_INST.INSTANCE_ID WIDGET_INSTANCE_ID,
	OPB_SWIDGET_INST.WIDGET_TYPE WIDGET_TYPE,
	OPB_SWIDGET_INST.INSTANCE_NAME INSTANCE_NAME, 
	OPB_MMD_SESS_EXTNS.OBJECT_NAME READER_WRITER_TYPE,  
	OPB_SESS_CNX_REFS.REF_OBJECT_VALUE CNX_NAME, OPB_SWIDGET_INST.SESSION_ID,
	OPB_SWIDGET_INST.SESS_WIDG_INST_ID,
	OPB_SESS_EXTNS.OBJECT_TYPE SESS_EXTN_OBJECT_TYPE,
	OPB_SESS_EXTNS.OBJECT_SUBTYPE SESS_EXTN_OBJECT_SUBTYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_TYPE SESS_CNX_REFS_OBJECT_TYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_SUBTYP SESS_CNX_REFS_OBJECT_SUBTYPE,
	OPB_SESS_CNX_REFS.REF_OBJECT_ID SESS_CNX_REFS_OBJECT_ID,
	OPB_SESS_CNX_REFS.WORKFLOW_ID WORKFLOW_ID,
	OPB_SESS_CNX_REFS.SESSION_INST_ID,
    OPB_SWIDGET_INST.VERSION_NUMBER SESSION_VERSION_NUMBER
FROM 
	OPB_SWIDGET_INST, OPB_SESS_EXTNS, OPB_MMD_SESS_EXTNS, 
	OPB_SESS_CNX_REFS, OPB_TASK
WHERE 
	OPB_SWIDGET_INST.WIDGET_TYPE IN (1,2, 3, 56, 45, 55, 84) 
	AND OPB_SWIDGET_INST.SESSION_ID = OPB_SESS_EXTNS.SESSION_ID 
	AND OPB_SESS_CNX_REFS.SESSION_ID = OPB_SESS_EXTNS.SESSION_ID 
	AND OPB_SWIDGET_INST.SESS_WIDG_INST_ID = OPB_SESS_EXTNS.SESS_WIDG_INST_ID 
	AND OPB_SESS_EXTNS.OBJECT_TYPE = OPB_MMD_SESS_EXTNS.OBJECT_TYPE 
	AND OPB_SESS_EXTNS.OBJECT_SUBTYPE = OPB_MMD_SESS_EXTNS.OBJECT_SUBTYPE 
	AND OPB_SESS_CNX_REFS.REF_OBJECT_ID = 0 
	AND OPB_SESS_EXTNS.SESS_WIDG_INST_ID = OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_SESS_EXTNS.VERSION_NUMBER
	AND OPB_SESS_CNX_REFS.WORKFLOW_ID = 0 
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_SESS_CNX_REFS.VERSION_NUMBER
	AND OPB_SWIDGET_INST.SESSION_ID = OPB_TASK.TASK_ID
	AND OPB_SWIDGET_INST.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESSION_CNXS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESSION_CNXS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESSION_CNXS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESSION_CNXS]
AS SELECT
DISTINCT
    B.SUBJ_NAME SUBJECT_AREA,
    B.SUBJ_ID SUBJECT_ID,
    A.TASK_NAME SESSION_NAME,
    A.TASK_ID SESSION_ID,
    (E.OBJECT_TYPE - 78) IS_TARGET,
    C.OBJECT_NAME CONNECTION_NAME,
    D.REF_OBJECT_ID CONNECTION_ID,
    A.VERSION_NUMBER SESSION_VERSION_NUMBER
FROM
    OPB_TASK A, OPB_SUBJECT B, OPB_CNX C,
    OPB_SESS_CNX_REFS D, OPB_SESS_EXTNS E
WHERE
    A.SUBJECT_ID = B.SUBJ_ID AND
    A.TASK_TYPE = 68 AND A.IS_REUSABLE = 1 AND
    D.WORKFLOW_ID = 0 AND D.SESSION_INST_ID = 0 AND
    A.TASK_ID   = D.SESSION_ID AND
    D.SESSION_ID = E.SESSION_ID AND
    D.SESS_WIDG_INST_ID = E.SESS_WIDG_INST_ID AND
    C.OBJECT_ID = D.REF_OBJECT_ID AND
    A.VERSION_NUMBER = D.VERSION_NUMBER AND
    D.VERSION_NUMBER = E.VERSION_NUMBER AND
    A.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESSION_FILES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESSION_FILES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESSION_FILES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESSION_FILES]
AS 
SELECT 
    SUBJ_NAME SUBJECT_AREA,
    TASK_NAME SESSION_NAME,
    (E.OBJECT_TYPE - 78) IS_TARGET,
    FILE_VALS.FILE_NAME FILE_NAME,
    FILE_VALS.DIR_NAME DIR_NAME,
    FILE_VALS.CODEPAGE CODE_PAGE,
    A.VERSION_NUMBER SESSION_VERSION_NUMBER
FROM
    OPB_TASK A, OPB_SUBJECT B, OPB_SESS_EXTNS E, OPB_SESS_FILE_VALS FILE_VALS
WHERE
    A.SUBJECT_ID = B.SUBJ_ID AND
    A.TASK_TYPE = 68 AND A.IS_REUSABLE = 1 AND
    E.SESSION_ID = A.TASK_ID AND 
    FILE_VALS.SESS_WIDG_INST_ID = E.SESS_WIDG_INST_ID AND 
    FILE_VALS.SESSION_ID = E.SESSION_ID AND 
    FILE_VALS.SESSION_INST_ID = 0 AND 
    A.VERSION_NUMBER = E.VERSION_NUMBER AND 
    A.VERSION_NUMBER = FILE_VALS.VERSION_NUMBER AND
    A.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESSION_INST_FILES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESSION_INST_FILES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESSION_INST_FILES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESSION_INST_FILES]
AS
SELECT 
    F.SUBJ_NAME SUBJECT_AREA, 
    A.TASK_NAME WORKFLOW_NAME,
    B.INSTANCE_NAME SESSION_INSTANCE_NAME,
    (E.OBJECT_TYPE - 78) IS_TARGET,
    FILE_VALS.FILE_NAME FILE_NAME,
    FILE_VALS.DIR_NAME DIR_NAME,
    FILE_VALS.CODEPAGE CODE_PAGE,
    A.VERSION_NUMBER WORKFLOW_VERSION_NUMBER
FROM OPB_TASK A, OPB_TASK_INST B, OPB_SESS_EXTNS E, OPB_SUBJECT F, 
    OPB_SESS_FILE_VALS FILE_VALS, OPB_TASK G
WHERE 
    A.SUBJECT_ID = F.SUBJ_ID AND
    A.TASK_ID = B.WORKFLOW_ID AND A.TASK_TYPE IN (70,71) AND
    B.TASK_TYPE = 68 AND
    E.SESSION_ID = B.TASK_ID AND
    FILE_VALS.SESSION_ID = B.TASK_ID AND 
    FILE_VALS.SESS_WIDG_INST_ID = E.SESS_WIDG_INST_ID AND
    FILE_VALS.SESSION_INST_ID = B.INSTANCE_ID AND
    A.VERSION_NUMBER = B.VERSION_NUMBER AND
    A.IS_VISIBLE = 1 AND
    G.TASK_ID = E.SESSION_ID AND
    G.VERSION_NUMBER = E.VERSION_NUMBER AND
    G.VERSION_NUMBER = FILE_VALS.VERSION_NUMBER AND 
    G.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SESSION_INSTANCES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SESSION_INSTANCES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SESSION_INSTANCES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SESSION_INSTANCES]
AS SELECT
DISTINCT 
    F.SUBJ_NAME SUBJECT_AREA, 
    F.SUBJ_ID SUBJECT_ID,
    A.TASK_NAME WORKFLOW_NAME,
    A.TASK_ID WORKFLOW_ID,
    B.INSTANCE_NAME SESSION_INSTANCE_NAME,
    B.INSTANCE_ID SESSION_INSTANCE_ID,
    B.TASK_ID SESSION_ID,
    (E.OBJECT_TYPE - 78) IS_TARGET,
    C.OBJECT_NAME CONNECTION_NAME,
    D.REF_OBJECT_ID CONNECTION_ID,
    A.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    G.VERSION_NUMBER SESSION_VERSION_NUMBER
FROM OPB_TASK A, OPB_TASK_INST B, OPB_CNX C, 
    OPB_SESS_CNX_REFS D, OPB_SESS_EXTNS E, OPB_SUBJECT F,
    OPB_TASK G
WHERE 
    A.SUBJECT_ID = F.SUBJ_ID AND
    A.TASK_ID = B.WORKFLOW_ID AND A.TASK_TYPE IN (70,71) AND
    B.TASK_TYPE = 68 AND
    B.TASK_ID   = D.SESSION_ID AND
    D.SESSION_ID = E.SESSION_ID AND
    D.SESS_WIDG_INST_ID = E.SESS_WIDG_INST_ID AND
    C.OBJECT_ID = D.REF_OBJECT_ID AND
    A.VERSION_NUMBER = B.VERSION_NUMBER AND
    E.VERSION_NUMBER = D.VERSION_NUMBER AND
    A.IS_VISIBLE = 1 AND
    G.TASK_ID = E.SESSION_ID AND
    G.VERSION_NUMBER = E.VERSION_NUMBER AND
    G.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SRC_FILE_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_FILE_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_FILE_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_FILE_FLDS]
AS SELECT
    OPB_SRC_FLD.FLDID FIELD_ID,
    SUBJ_NAME SUBJECT_AREA,
    OPB_SRC_FLD.SRC_ID FILE_ID,
    SRC_NAME FIELD_NAME,
    FLDLVL FIELD_LEVEL,
    OPB_SRC_FLD.FLDNO FIELD_NUMBER,
    OPB_SRC_FLD.SRC_DESC FIELD_DESCRIPTION,
    PICTXT PICTURE_TEXT,
    OCCTIMES OCCURS,
    REDFNAME REDEFINES_FIELD,
    KEYTYPE_NAME KEY_TYPE,
    OFFS DISPLAY_OFFSET,
    LEN DISPLAY_LENGTH,
    POFFS PHYSICAL_OFFSET,
    PLEN PHYSICAL_LENGTH,
    REP_PIC_USAGE.USAGE_NAME USAGE_TYPE,
    OPB_PICDSC.SRC_PREC DATA_PRECISION,
    OPB_PICDSC.SRC_SCALE DATA_SCALE,
    OPB_SRC_FLD.NXTCHLDID CHILD_ID,
    OPB_SRC_FLD.NXTSIBID SIBLING_ID,
    NULL VERSION_ID,
    OPB_SRC.VERSION_NUMBER SRC_VERSION_NUMBER
FROM OPB_SRC, OPB_SRC_FLD, REP_PIC_USAGE, OPB_PICDSC, 
    OPB_SUBJECT, REP_SRC_KEY_TYPES, OPB_DBD, OPB_MMD_DBTYPE 
WHERE 
    OPB_SUBJECT.SUBJ_ID = OPB_SRC.SUBJ_ID
    AND OPB_SRC.SUBJ_ID = OPB_DBD.SUBJ_ID
    AND OPB_SRC_FLD.PICID = OPB_PICDSC.PICID 
    AND OPB_PICDSC.PIC_USAGE % 16 = REP_PIC_USAGE.USAGE_NUM
    AND OPB_SRC.SRC_ID = OPB_SRC_FLD.SRC_ID
    AND OPB_SRC_FLD.KEYTYPE = REP_SRC_KEY_TYPES.KEYTYPE_NUM
    AND OPB_SRC.FILE_NAME != '$EXPORTED'
    AND OPB_SRC.DBDID = OPB_DBD.DBDID 
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_DBD.SRCTYPE = 1
    AND OPB_SRC_FLD.IS_HIDDEN = 0
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_PICDSC.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER
    AND OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SRC_FILES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_FILES]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_FILES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_FILES]
AS SELECT
    SRC_ID FILE_ID,
    SUBJ_NAME SUBJECT_AREA,
    DBTYPE_NAME DATABASE_TYPE,
    DBDNAM DATABASE_NAME,
    SOURCE_NAME FILE_NAME,
    FILE_NAME SCHEMA_FILE_NAME,
    SELID SELECT_INFO_ID,
    FDSIZ DISPLAY_SIZE,
    PFDSIZ PHYSICAL_SIZE,
    PFDSIZ_MIN  MIN_PHYSICAL_SIZE,
    FLDID FIRST_FIELD_ID,
    SRC_DESC SOURCE_DESCRIPTION,
    NULL VERSION_ID,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER
FROM  OPB_SRC, OPB_SUBJECT, OPB_DBD, OPB_MMD_DBTYPE
WHERE OPB_SRC.SUBJ_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_SUBJECT.SUBJ_ID = OPB_DBD.SUBJ_ID AND
    OPB_SRC.DBDID = OPB_DBD.DBDID AND
    OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID AND
    OPB_DBD.SRCTYPE = 1 AND
    OPB_SRC.FILE_NAME != '$EXPORTED' AND
    OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER AND
    OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SRC_FLD_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_FLD_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_FLD_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_FLD_MAP]
AS 
SELECT 
    SOURCE_FIELD_NAME,
    SRC_FLD_BUSNAME,
    SOURCE_NAME,
    SRC_BUSNAME,
    SUBJECT_AREA,
    MAPPING_NAME,
    VERSION_ID,
    VERSION_NAME,
    TRANS_EXPRESSION,
    USER_COMMENT,
    DBA_COMMENT,
    MAPPING_COMMENT,
    MAPPING_LAST_SAVED,
    MAPPING_VERSION_NUMBER,
    SOURCE_VERSION_NUMBER,
    TARGET_VERSION_NUMBER
FROM REP_FLD_MAPPING
GO

GO
--SqlScripter----[dbo].[REP_SRC_MAPPING].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_MAPPING]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_MAPPING] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_MAPPING]
AS SELECT 
    OPB_SRC.SOURCE_NAME,
    OPB_SRC.SRC_ID SOURCE_ID,
    OPB_SRC.BUSINESS_NAME SRC_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    OPB_MAPPING.MAPPING_NAME,
    OPB_MAPPING.MAPPING_ID,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER
FROM
    OPB_SRC, OPB_SUBJECT, OPB_MAPPING, OPB_DBDS, OPB_DBD
WHERE
    OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_DBDS.MAPPING_ID
    AND OPB_DBD.DBDID = OPB_DBDS.DBD_ID
    AND OPB_DBD.ROOTID = OPB_SRC.SRC_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = OPB_DBDS.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SRC_TBL_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_TBL_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_TBL_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_TBL_FLDS]
AS SELECT
    SRC_NAME COLUMN_NAME,
    OPB_SRC_FLD.BUSINESS_NAME COLUMN_BUSNAME,
    OPB_SRC_FLD.FLDID COLUMN_ID,
    SUBJ_NAME SUBJECT_AREA,
    OPB_SRC_FLD.SRC_ID TABLE_ID,
    OPB_SRC.SOURCE_NAME TABLE_NAME,
    OPB_SRC.BUSINESS_NAME TABLE_BUSNAME,
    OPB_SRC_FLD.FLDNO COLUMN_NUMBER,
    OPB_SRC_FLD.SRC_DESC COLUMN_DESCRIPTION,
    KEYTYPE_NAME KEY_TYPE,
    REP_FLD_DATATYPE.DTYPE_NAME SOURCE_TYPE,
    OPB_PICDSC.SRC_PREC DATA_PRECISION,
    OPB_PICDSC.SRC_SCALE DATA_SCALE,
    OPB_SRC_FLD.NXTSIBID NEXT_COLUMN_ID,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER
FROM OPB_SRC, OPB_SRC_FLD, OPB_PICDSC,  
    OPB_SUBJECT, REP_SRC_KEY_TYPES, OPB_DBD, OPB_MMD_DBTYPE, 
    REP_FLD_DATATYPE 
WHERE 
    OPB_SUBJECT.SUBJ_ID = OPB_SRC.SUBJ_ID
    AND OPB_SRC.SUBJ_ID = OPB_DBD.SUBJ_ID
    AND OPB_SRC.SRC_ID = OPB_SRC_FLD.SRC_ID
    AND OPB_SRC_FLD.PICID = OPB_PICDSC.PICID
    AND OPB_SRC_FLD.KEYTYPE = REP_SRC_KEY_TYPES.KEYTYPE_NUM
    AND OPB_SRC.DBDID = OPB_DBD.DBDID 
    AND OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID 
    AND OPB_DBD.SRCTYPE = 2
    AND OPB_PICDSC.SRC_NTYPE = REP_FLD_DATATYPE.DTYPE_NUM 
    AND OPB_SRC_FLD.IS_HIDDEN = 0
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_PICDSC.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_SRC_FLD.VERSION_NUMBER
    AND OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SRC_TBLS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SRC_TBLS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SRC_TBLS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SRC_TBLS]
AS SELECT
    SOURCE_NAME TABLE_NAME,
    OPB_SRC.BUSINESS_NAME TABLE_BUSNAME,
    SRC_ID TABLE_ID,
    SUBJ_NAME SUBJECT_AREA,
    DBTYPE_NAME DATABASE_TYPE,
    DBDNAM DATABASE_NAME,
    FILE_NAME SCHEMA_NAME,
    FLDID FIRST_FIELD_ID,
    SRC_DESC SOURCE_DESCRIPTION,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    LAST_SAVED,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID
FROM  OPB_SRC, OPB_SUBJECT, OPB_DBD, OPB_MMD_DBTYPE
WHERE OPB_SRC.SUBJ_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_SUBJECT.SUBJ_ID = OPB_DBD.SUBJ_ID AND
    OPB_SRC.DBDID = OPB_DBD.DBDID AND
    OPB_DBD.DBTYPE = OPB_MMD_DBTYPE.DBTYPE_ID AND
    OPB_DBD.SRCTYPE = 2 AND
    OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER AND
    OPB_SRC.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_SUBJECT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_SUBJECT]') IS NULL EXEC('CREATE VIEW [dbo].[REP_SUBJECT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_SUBJECT]
AS
SELECT SUBJ_NAME SUBJECT_AREA,
       SUBJ_ID   SUBJECT_ID,
       SUBJ_DESC DESCRIPTION
FROM OPB_SUBJECT
GO

GO
--SqlScripter----[dbo].[REP_TARG_FLD_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TARG_FLD_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TARG_FLD_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TARG_FLD_MAP]
AS 
SELECT
    OPB_TARG_FLD.TARGET_NAME TARGET_COLUMN_NAME,
    OPB_TARG_FLD.BUSINESS_NAME TARG_COL_BUSNAME,
    OPB_TARG.TARGET_NAME TARGET_NAME,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_MAPPING.MAPPING_NAME,
    OPB_TARG.VERSIONID VERSION_ID,
    NULL VERSION_NAME,
    TRANS_EXPR TRANS_EXPRESSION,
    OPB_TARG_FLD_EXPR.USER_COMMENT USER_COMMENT,
    OPB_TARG_FLD_EXPR.USER_COMMENT DBA_COMMENT,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM  OPB_SUBJECT, OPB_MAPPING, OPB_TARG, 
    OPB_TARG_FLD, OPB_TDS, OPB_WIDGET_INST, OPB_WIDGET_DEP,
    OPB_TARG_FLD_EXPR
WHERE 
    OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.MAPPING_ID = OPB_MAPPING.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_WIDGET_INST.WIDGET_TYPE = 2
    AND OPB_WIDGET_INST.WIDGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_WIDGET_DEP.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
    AND OPB_WIDGET_DEP.TO_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID 
    AND OPB_WIDGET_DEP.TO_FIELD_ID = OPB_TARG_FLD.FLDID
    AND OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_TARG_FLD_EXPR.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_TARG_FLD_EXPR.TARGET_INST_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_TARG_FLD_EXPR.TARGET_FLD = OPB_TARG_FLD.FLDID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_FLD_EXPR.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
UNION ALL
SELECT
    OPB_TARG_FLD.TARGET_NAME TARGET_COLUMN_NAME,
    OPB_TARG_FLD.BUSINESS_NAME TARG_COL_BUSNAME,
    OPB_TARG.TARGET_NAME TARGET_NAME,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_MAPPING.MAPPING_NAME,
    OPB_TARG.VERSIONID VERSION_ID,
    NULL VERSION_NAME,
    NULL TRANS_EXPRESSION,
    NULL USER_COMMENT,
    NULL DBA_COMMENT,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM  OPB_SUBJECT, OPB_MAPPING, OPB_TARG, 
    OPB_TARG_FLD, OPB_TDS, OPB_WIDGET_INST, OPB_WIDGET_DEP
WHERE 
    OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.MAPPING_ID = OPB_MAPPING.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_WIDGET_INST.WIDGET_TYPE = 2
    AND OPB_WIDGET_INST.WIDGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_WIDGET_DEP.MAPPING_ID = OPB_MAPPING.MAPPING_ID 
    AND OPB_WIDGET_DEP.TO_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID 
    AND OPB_WIDGET_DEP.TO_FIELD_ID = OPB_TARG_FLD.FLDID
    AND OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_DEP.VERSION_NUMBER
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
    AND NOT EXISTS
    (SELECT 'X'
     FROM
            OPB_TARG_FLD_EXPR
     WHERE
            OPB_TARG_FLD_EXPR.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
            AND OPB_TARG_FLD_EXPR.TARGET_INST_ID = OPB_WIDGET_INST.INSTANCE_ID
            AND OPB_TARG_FLD_EXPR.TARGET_FLD = OPB_TARG_FLD.FLDID
            AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_FLD_EXPR.VERSION_NUMBER)
GO

GO
--SqlScripter----[dbo].[REP_TARG_MAPPING].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TARG_MAPPING]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TARG_MAPPING] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TARG_MAPPING]
AS 
SELECT 
    OPB_TARG.TARGET_NAME TARGET_NAME,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    SRCFILTER SOURCE_FILTER,
    CONDFILTER CONDITIONAL_LOAD,
    GROUP_BY GROUP_BY_CLAUSE,
    SQLOVERRIDE SQL_OVERRIDE,
    OPB_WIDGET_INST.COMMENTS DESCRIPTION,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM
    OPB_TARG, OPB_SUBJECT, 
    OPB_MAPPING, OPB_TDS, OPB_WIDGET_INST,
    OPB_TARG_TBL_EXPR
WHERE
    OPB_TDS.MAPPING_ID = OPB_MAPPING.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_WIDGET_INST.WIDGET_TYPE = 2
    AND OPB_WIDGET_INST.WIDGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_TARG_TBL_EXPR.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_TARG_TBL_EXPR.TARGET_INST_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_TBL_EXPR.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
UNION ALL
SELECT 
    OPB_TARG.TARGET_NAME TARGET_NAME,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_MAPPING.MAPPING_NAME MAPPING_NAME,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL SOURCE_FILTER,
    NULL CONDITIONAL_LOAD,
    NULL GROUP_BY_CLAUSE,
    NULL SQL_OVERRIDE,
    OPB_WIDGET_INST.COMMENTS DESCRIPTION,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM
    OPB_TARG, OPB_SUBJECT, 
    OPB_MAPPING, OPB_TDS, OPB_WIDGET_INST
WHERE
    OPB_TDS.MAPPING_ID = OPB_MAPPING.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
    AND OPB_WIDGET_INST.WIDGET_TYPE = 2
    AND OPB_WIDGET_INST.WIDGET_ID = OPB_TARG.TARGET_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = OPB_WIDGET_INST.INSTANCE_ID
    AND OPB_TARG.SUBJ_ID = OPB_SUBJECT.SUBJ_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
    AND NOT EXISTS
    (SELECT 'X'
     FROM
            OPB_TARG_TBL_EXPR
     WHERE
            OPB_TARG_TBL_EXPR.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID
            AND OPB_TARG_TBL_EXPR.TARGET_INST_ID = OPB_WIDGET_INST.INSTANCE_ID
            AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_TBL_EXPR.VERSION_NUMBER)
GO

GO
--SqlScripter----[dbo].[REP_TARG_TBL_COLS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TARG_TBL_COLS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TARG_TBL_COLS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TARG_TBL_COLS]
AS SELECT
    SUBJ_NAME SUBJECT_AREA,
    OPB_TARG.TARGET_NAME TABLE_NAME,
    OPB_TARG.BUSINESS_NAME TABLE_BUSNAME,
    OPB_TARG_FLD.TARGET_NAME COLUMN_NAME,
    OPB_TARG_FLD.BUSINESS_NAME COLUMN_BUSNAME,
    OPB_TARG_FLD.FLDNO COLUMN_NUMBER,
    OPB_TARG_FLD.FLDID COLUMN_ID,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    OPB_TARG_FLD.TARGET_DESC DESCRIPTION,
    KEYTYPE_NAME COLUMN_KEYTYPE,
    REP_FLD_DATATYPE.DTYPE_NAME  DATA_TYPE,
    REP_FLD_DATATYPE.DTYPE_GROUP_CODE DATA_TYPE_GROUP,
    DPREC  DATA_PRECISION,
    DSCALE DATA_SCALE,
    NXTFLDID NEXT_COLUMN_ID,
    NULLTYPE IS_NULLABLE,
    DFLDID SOURCE_COLUMN_ID,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM OPB_TARG_FLD, OPB_TARG, OPB_SUBJECT, REP_FLD_DATATYPE,
    REP_TARG_KEY_TYPES
WHERE OPB_TARG_FLD.TARGET_ID = OPB_TARG.TARGET_ID
    AND OPB_SUBJECT.SUBJ_ID = OPB_TARG.SUBJ_ID 
    AND OPB_TARG_FLD.NDTYPE = REP_FLD_DATATYPE.DTYPE_NUM
    AND KEYTYPE = REP_TARG_KEY_TYPES.KEYTYPE_NUM
    AND OPB_TARG.VERSION_NUMBER = OPB_TARG_FLD.VERSION_NUMBER
    AND OPB_TARG.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_TARG_TBL_JOINS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TARG_TBL_JOINS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TARG_TBL_JOINS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TARG_TBL_JOINS]
AS 
SELECT   S.SUBJ_NAME      SUBJECT_AREA,
         NULL             VERSION_ID,
         NULL             VERSION_NAME,
         T1.TARGET_NAME   TABLE1_NAME,
         T1.BUSINESS_NAME TABLE1_BUSNAME,
         T1.TARGET_ID     TABLE1_ID,
         F1.TARGET_NAME   COLUMN1_NAME,
         F1.BUSINESS_NAME COLUMN1_BUSNAME,
         F1.FLDNO         COLUMN1_NUMBER,
         F1.FLDID         COLUMN1_ID,
         T2.TARGET_NAME   TABLE2_NAME,
         T2.BUSINESS_NAME TABLE2_BUSNAME,
         T2.TARGET_ID     TABLE2_ID,
         F2.TARGET_NAME   COLUMN2_NAME,
         F2.BUSINESS_NAME COLUMN2_BUSNAME,
         F2.FLDNO         COLUMN2_NUMBER,
         F2.FLDID         COLUMN2_ID,
         T1.VERSION_NUMBER TABLE1_VERSION_NUMBER,
         T2.VERSION_NUMBER TABLE2_VERSION_NUMBER
FROM     OPB_TARG_FLD     F1, 
         OPB_TARG         T1, 
         OPB_TARG_FLD     F2, 
         OPB_TARG         T2, 
         OPB_SUBJECT      S
WHERE    F2.REFPRIKEYID = F1.FLDID
AND      T1.TARGET_ID   = F1.TARGET_ID
AND      T2.TARGET_ID   = F2.TARGET_ID
AND      T2.SUBJ_ID     = T1.SUBJ_ID
AND      T2.SUBJ_ID     = S.SUBJ_ID
AND      T1.VERSION_NUMBER = F1.VERSION_NUMBER
AND      T2.VERSION_NUMBER = F2.VERSION_NUMBER
AND      T1.IS_VISIBLE = 1
AND      T2.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_TARG_TBLS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TARG_TBLS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TARG_TBLS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TARG_TBLS]
AS SELECT
    SUBJ_NAME SUBJECT_AREA,
    TARGET_NAME TABLE_NAME,
    OPB_TARG.BUSINESS_NAME BUSNAME,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    OPB_TARG.TARGET_DESC DESCRIPTION,
    OPB_TARG.FLDID FIRST_COLUMN_ID,
    CONSTR TABLE_CONSTRAINT,
    TBL_OPTIONS CREATE_OPTIONS,
    INDEXID FIRST_INDEX_ID,
    LAST_SAVED,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER,
    OPB_TARG.TARGET_ID TABLE_ID,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID
FROM OPB_SUBJECT, OPB_TARG
WHERE OPB_SUBJECT.SUBJ_ID = OPB_TARG.SUBJ_ID
    AND OPB_TARG.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_TASK_ATTR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TASK_ATTR]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TASK_ATTR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TASK_ATTR]
AS
SELECT 
	OPB_TASK_ATTR.WORKFLOW_ID,
	OPB_TASK_ATTR.INSTANCE_ID,
	OPB_TASK_ATTR.TASK_ID,
	OPB_TASK_ATTR.TASK_TYPE,
	OPB_TASK_ATTR.REF_SESSION_ID,
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TASK_TYPE_NAME,
	OPB_TASK_ATTR.ATTR_ID,
	OPB_MMD_TASK_ATTR.ATTR_NAME,
	OPB_TASK_ATTR.ATTR_VALUE,
	OPB_TASK_ATTR.LINE_NO,
	OPB_TASK_ATTR.GROUP_ID,
	OPB_TASK_ATTR.VERSION_NUMBER
FROM
	OPB_TASK_ATTR, OPB_OBJECT_TYPE, OPB_MMD_TASK_ATTR
WHERE 
	OPB_TASK_ATTR.TASK_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
	AND OPB_TASK_ATTR.TASK_TYPE = OPB_MMD_TASK_ATTR.OBJECT_TYPE_ID
	AND OPB_TASK_ATTR.ATTR_ID = OPB_MMD_TASK_ATTR.ATTR_ID
GO

GO
--SqlScripter----[dbo].[REP_TASK_INST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TASK_INST]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TASK_INST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TASK_INST]
AS
SELECT 
	OPB_TASK_INST.WORKFLOW_ID,
	OPB_TASK_INST.INSTANCE_ID,
	OPB_TASK_INST.TASK_ID, 
	OPB_TASK_INST.TASK_TYPE,
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TASK_TYPE_NAME,
	OPB_TASK_INST.INSTANCE_NAME,
	OPB_TASK_INST.IS_ENABLED,
	OPB_TASK_INST.COMMENTS DESCRIPTION,
	OPB_TASK_INST.IS_VALID,
	OPB_TASK_INST.VERSION_NUMBER,
	OPB_TASK_INST.SERVER_ID
FROM
	OPB_TASK_INST, OPB_OBJECT_TYPE, OPB_TASK
WHERE
	OPB_TASK_INST.TASK_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
	AND OPB_TASK_INST.WORKFLOW_ID = OPB_TASK.TASK_ID
	AND OPB_TASK_INST.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[REP_TASK_INST_RUN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TASK_INST_RUN]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TASK_INST_RUN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TASK_INST_RUN]
AS
SELECT 
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
	OPB_WFLOW_RUN.WORKFLOW_NAME,
	OPB_WFLOW_RUN.VERSION_NUMBER VERSION_NUMBER,
	OPB_TASK_INST_RUN.SUBJECT_ID,
	OPB_TASK_INST_RUN.WORKFLOW_ID,
	OPB_TASK_INST_RUN.WORKFLOW_RUN_ID,
	OPB_TASK_INST_RUN.WORKLET_RUN_ID,
	OPB_TASK_INST_RUN.CHILD_RUN_ID,
	OPB_TASK_INST_RUN.INSTANCE_ID,
	OPB_TASK_INST_RUN.INSTANCE_NAME,
	OPB_TASK_INST_RUN.TASK_ID,
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME TASK_TYPE_NAME,
	OPB_TASK_INST_RUN.TASK_TYPE,
	OPB_TASK_INST_RUN.START_TIME,
	OPB_TASK_INST_RUN.END_TIME,
	OPB_TASK_INST_RUN.RUN_ERR_CODE,
	OPB_TASK_INST_RUN.RUN_ERR_MSG,
	OPB_TASK_INST_RUN.RUN_STATUS_CODE,
	OPB_TASK_INST_RUN.TASK_NAME,
	OPB_TASK_INST_RUN.VERSION_NUMBER TASK_VERSION_NUMBER,
	OPB_TASK_INST_RUN.SERVER_ID,
	OPB_TASK_INST_RUN.SERVER_NAME
FROM 
	OPB_TASK_INST_RUN, OPB_OBJECT_TYPE, OPB_WFLOW_RUN, OPB_SUBJECT
WHERE 
	OPB_SUBJECT.SUBJ_ID = OPB_TASK_INST_RUN.SUBJECT_ID
	AND OPB_WFLOW_RUN.WORKFLOW_ID = OPB_TASK_INST_RUN.WORKFLOW_ID 
	AND OPB_WFLOW_RUN.WORKFLOW_RUN_ID = OPB_TASK_INST_RUN.WORKFLOW_RUN_ID 
	AND OPB_TASK_INST_RUN.TASK_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
GO

GO
--SqlScripter----[dbo].[REP_TBL_MAPPING].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_TBL_MAPPING]') IS NULL EXEC('CREATE VIEW [dbo].[REP_TBL_MAPPING] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_TBL_MAPPING]
AS 
SELECT 
    OPB_SRC.SOURCE_NAME,
    OPB_SRC.SRC_ID SOURCE_ID,
    OPB_SRC.BUSINESS_NAME SRC_BUSNAME,
    OPB_TARG.TARGET_NAME,
    OPB_TARG.TARGET_ID,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    OPB_MAPPING.MAPPING_NAME,
    OPB_MAPPING.MAPPING_ID,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    SRCFILTER SOURCE_FILTER,
    CONDFILTER CONDITIONAL_LOAD,
    GROUP_BY GROUP_BY_CLAUSE,
    SQLOVERRIDE SQL_OVERRIDE,
    TARGET_INSTANCES.COMMENTS DESCRIPTION,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM
    OPB_SRC, OPB_TARG, OPB_SUBJECT, 
    OPB_MAPPING, OPB_DBDS, OPB_DBD, 
    OPB_TDS, OPB_WIDGET_INST TARGET_INSTANCES, 
    OPB_WIDGET_INST SOURCE_INSTANCES,
    OPB_MAP_TARG_INFO, OPB_TARG_TBL_EXPR
WHERE
    OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_TDS.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = TARGET_INSTANCES.MAPPING_ID 
    AND OPB_MAPPING.MAPPING_ID = SOURCE_INSTANCES.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_MAP_TARG_INFO.MAPPING_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = TARGET_INSTANCES.INSTANCE_ID 
    AND TARGET_INSTANCES.WIDGET_TYPE = 2 
    AND TARGET_INSTANCES.WIDGET_ID = OPB_TARG.TARGET_ID    
    AND OPB_MAP_TARG_INFO.TARGET_INSTANCE_ID = TARGET_INSTANCES.INSTANCE_ID
    AND SOURCE_INSTANCES.WIDGET_TYPE = 1 
    AND OPB_MAP_TARG_INFO.OBJECT_INSTANCE_ID = SOURCE_INSTANCES.INSTANCE_ID
    AND OPB_MAP_TARG_INFO.OBJECT_TYPE = 1
    AND OPB_MAP_TARG_INFO.TARGET_OBJECT_TYPE = 2
    AND OPB_SRC.SRC_ID = SOURCE_INSTANCES.WIDGET_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_DBDS.MAPPING_ID
    AND OPB_DBD.DBDID = OPB_DBDS.DBD_ID
    AND OPB_DBD.ROOTID = OPB_SRC.SRC_ID
    AND OPB_TARG_TBL_EXPR.MAPPING_ID = TARGET_INSTANCES.MAPPING_ID
    AND OPB_TARG_TBL_EXPR.TARGET_INST_ID = TARGET_INSTANCES.INSTANCE_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = SOURCE_INSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = TARGET_INSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_MAP_TARG_INFO.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_TBL_EXPR.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_DBDS.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
UNION ALL
SELECT 
    OPB_SRC.SOURCE_NAME,
    OPB_SRC.SRC_ID SOURCE_ID,
    OPB_SRC.BUSINESS_NAME SRC_BUSNAME,
    OPB_TARG.TARGET_NAME,
    OPB_TARG.TARGET_ID,
    OPB_TARG.BUSINESS_NAME TARG_BUSNAME,
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID,
    OPB_MAPPING.MAPPING_NAME,
    OPB_MAPPING.MAPPING_ID,
    NULL VERSION_ID,
    NULL VERSION_NAME,
    NULL SOURCE_FILTER,
    NULL CONDITIONAL_LOAD,
    NULL GROUP_BY_CLAUSE,
    NULL SQL_OVERRIDE,
    TARGET_INSTANCES.COMMENTS DESCRIPTION,
    OPB_MAPPING.COMMENTS MAPPING_COMMENT,
    OPB_MAPPING.LAST_SAVED MAPPING_LAST_SAVED,
    OPB_MAPPING.VERSION_NUMBER MAPPING_VERSION_NUMBER,
    OPB_SRC.VERSION_NUMBER SOURCE_VERSION_NUMBER,
    OPB_TARG.VERSION_NUMBER TARGET_VERSION_NUMBER
FROM
    OPB_SRC, OPB_TARG, OPB_SUBJECT, 
    OPB_MAPPING, OPB_DBDS, OPB_DBD, 
    OPB_TDS, OPB_WIDGET_INST TARGET_INSTANCES, 
    OPB_WIDGET_INST SOURCE_INSTANCES,
    OPB_MAP_TARG_INFO
WHERE
    OPB_SUBJECT.SUBJ_ID = OPB_MAPPING.SUBJECT_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_TDS.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = TARGET_INSTANCES.MAPPING_ID 
    AND OPB_MAPPING.MAPPING_ID = SOURCE_INSTANCES.MAPPING_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_MAP_TARG_INFO.MAPPING_ID
    AND OPB_TDS.TARGET_INSTANCE_ID = TARGET_INSTANCES.INSTANCE_ID 
    AND TARGET_INSTANCES.WIDGET_TYPE = 2 
    AND TARGET_INSTANCES.WIDGET_ID = OPB_TARG.TARGET_ID    
    AND OPB_MAP_TARG_INFO.TARGET_INSTANCE_ID = TARGET_INSTANCES.INSTANCE_ID
    AND SOURCE_INSTANCES.WIDGET_TYPE = 1 
    AND OPB_MAP_TARG_INFO.OBJECT_INSTANCE_ID = SOURCE_INSTANCES.INSTANCE_ID
    AND OPB_MAP_TARG_INFO.OBJECT_TYPE = 1
    AND OPB_MAP_TARG_INFO.TARGET_OBJECT_TYPE = 2
    AND OPB_SRC.SRC_ID = SOURCE_INSTANCES.WIDGET_ID
    AND OPB_MAPPING.MAPPING_ID = OPB_DBDS.MAPPING_ID
    AND OPB_DBD.DBDID = OPB_DBDS.DBD_ID
    AND OPB_DBD.ROOTID = OPB_SRC.SRC_ID
    AND OPB_MAPPING.REF_WIDGET_ID = 0
    AND OPB_MAPPING.VERSION_NUMBER = SOURCE_INSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = TARGET_INSTANCES.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_TDS.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_MAP_TARG_INFO.VERSION_NUMBER
    AND OPB_MAPPING.VERSION_NUMBER = OPB_DBDS.VERSION_NUMBER
    AND OPB_SRC.VERSION_NUMBER = OPB_DBD.VERSION_NUMBER
    AND OPB_MAPPING.IS_VISIBLE = 1
    AND OPB_SRC.IS_VISIBLE = 1
    AND OPB_TARG.IS_VISIBLE = 1
    AND NOT EXISTS
    (SELECT 'X'
     FROM
            OPB_TARG_TBL_EXPR
     WHERE
            OPB_TARG_TBL_EXPR.MAPPING_ID = TARGET_INSTANCES.MAPPING_ID
            AND OPB_TARG_TBL_EXPR.TARGET_INST_ID = TARGET_INSTANCES.INSTANCE_ID
            AND OPB_MAPPING.VERSION_NUMBER = OPB_TARG_TBL_EXPR.VERSION_NUMBER)
GO

GO
--SqlScripter----[dbo].[REP_USERS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_USERS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_USERS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_USERS]
AS
SELECT
	ID USER_ID, 
	NAME_SPACE, 
	NAME USER_NAME, 
	STATUS 
FROM OPB_USER_GROUP WHERE TYPE = 1
GO

GO
--SqlScripter----[dbo].[REP_VERSION_PROPS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_VERSION_PROPS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_VERSION_PROPS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_VERSION_PROPS]
AS
SELECT OBJECT_ID,
       OBJECT_TYPE,
       OBJECT_SUBTYPE,
       IS_SHORTCUT,
       VERSION_NUMBER,
       SUBJECT_ID,
       USER_ID,
       OBJECT_NAME,
       GROUP_NAME,
       LAST_SAVED,
       UTC_LAST_SAVED,
       COMMENTS,
       SAVED_FROM,
       PURGED_BY_USERID
FROM OPB_VERSION_PROPS
GO

GO
--SqlScripter----[dbo].[REP_WFLOW_RUN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WFLOW_RUN]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WFLOW_RUN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WFLOW_RUN]
AS
SELECT 
	OPB_WFLOW_RUN.SUBJECT_ID,
	OPB_WFLOW_RUN.WORKFLOW_ID,
	OPB_WFLOW_RUN.WORKFLOW_RUN_ID,
	OPB_WFLOW_RUN.WORKFLOW_NAME,
	OPB_WFLOW_RUN.SERVER_ID,
	OPB_WFLOW_RUN.SERVER_NAME,
	OPB_WFLOW_RUN.START_TIME,
	OPB_WFLOW_RUN.END_TIME,
	OPB_WFLOW_RUN.LOG_FILE,
	OPB_WFLOW_RUN.RUN_ERR_CODE,
	OPB_WFLOW_RUN.RUN_ERR_MSG,
	OPB_WFLOW_RUN.RUN_STATUS_CODE,
	OPB_WFLOW_RUN.USER_NAME,
	OPB_WFLOW_RUN.RUN_TYPE,
	OPB_WFLOW_RUN.VERSION_NUMBER,
	OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA
FROM 
	OPB_WFLOW_RUN,
	OPB_SUBJECT
WHERE
	OPB_WFLOW_RUN.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID
GO

GO
--SqlScripter----[dbo].[REP_WFLOW_VAR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WFLOW_VAR]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WFLOW_VAR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WFLOW_VAR]
AS
SELECT 
	OPB_WFLOW_VAR.SUBJECT_ID,
	OPB_WFLOW_VAR.WORKFLOW_ID,
	OPB_WFLOW_VAR.VARIABLE_ID,
	OPB_WFLOW_VAR.VAR_NAME VARIABLE_NAME,
	OPB_WFLOW_VAR.VAR_TYPE VARIABLE_TYPE,
	OPB_WFLOW_VAR.VAR_DESC VARIABLE_DESCRIPTION,
	OPB_WFLOW_VAR.VAR_DATATYPE VARIABLE_DATATYPE,
	OPB_WFLOW_VAR.VAR_DEFAULT VARIABLE_DEFAULT_VALUE,
	OPB_WFLOW_VAR.LAST_SAVED,
	OPB_WFLOW_VAR.TASK_INST_ID,
	OPB_WFLOW_VAR.TASK_INST_NAME,
	OPB_WFLOW_VAR.BIT_OPTIONS,
	OPB_WFLOW_VAR.VERSION_NUMBER
FROM 
	OPB_WFLOW_VAR
GO

GO
--SqlScripter----[dbo].[REP_WIDGET_ATTR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WIDGET_ATTR]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WIDGET_ATTR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WIDGET_ATTR]
AS
SELECT
	OPB_WIDGET_ATTR.WIDGET_ID,
	OPB_WIDGET_ATTR.WIDGET_TYPE, 
	OPB_WIDGET_ATTR.MAPPING_ID,
	OPB_WIDGET_ATTR.INSTANCE_ID,
	OPB_WIDGET_ATTR.ATTR_ID,
	OPB_ATTR.ATTR_COMMENT ATTR_DESCRIPTION,
	OPB_ATTR.ATTR_DATATYPE ATTR_DATATYPE,
	OPB_ATTR.ATTR_NAME ATTR_NAME,  
	OPB_ATTR.ATTR_TYPE ATTR_TYPE,  
	OPB_WIDGET_ATTR.LINE_NO,
	OPB_WIDGET_ATTR.ATTR_VALUE,
	OPB_WIDGET_ATTR.PARTITION_ID,
	OPB_WIDGET_ATTR.SESSION_TASK_ID,
	OPB_WIDGET_ATTR.VERSION_NUMBER
FROM 
	OPB_WIDGET_ATTR, OPB_ATTR
WHERE
	OPB_WIDGET_ATTR.WIDGET_TYPE = OPB_ATTR.OBJECT_TYPE_ID 
	AND OPB_WIDGET_ATTR.ATTR_ID = OPB_ATTR.ATTR_ID
GO

GO
--SqlScripter----[dbo].[REP_WIDGET_DEP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WIDGET_DEP]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WIDGET_DEP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WIDGET_DEP]
AS
SELECT 
	OPB_WIDGET_DEP.MAPPING_ID,
	OPB_WIDGET_DEP.FROM_INSTANCE_ID,
	OPB_WIDGET_DEP.FROM_FIELD_ID,
	OPB_WIDGET_DEP.TO_INSTANCE_ID,
	OPB_WIDGET_DEP.TO_FIELD_ID,
	OPB_WIDGET_DEP.VERSION_NUMBER
FROM 
	OPB_WIDGET_DEP
GO

GO
--SqlScripter----[dbo].[REP_WIDGET_FIELD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WIDGET_FIELD]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WIDGET_FIELD] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WIDGET_FIELD]
AS
SELECT  
	OPB_WIDGET_FIELD.WIDGET_ID,  
	OPB_WIDGET_FIELD.FIELD_NAME,
	OPB_WIDGET_FIELD.FIELD_ID,
	OPB_WIDGET_FIELD.WGT_PREC,
	OPB_WIDGET_FIELD.WGT_SCALE,
	OPB_WIDGET_FIELD.WGT_DATATYPE,
	OPB_WIDGET_FIELD.PORTTYPE,
	OPB_WIDGET_FIELD.FIELD_ORDER,
	OPB_WIDGET_FIELD.COMMENTS DESCRIPTION,
	OPB_WIDGET_FIELD.WIDGET_FLD_PROP PROPERTY, 
	OPB_WIDGET_FIELD.DEFAULT_VALUE,
	OPB_WIDGET_FIELD.SRC_FIELD_ID,
	OPB_WIDGET_FIELD.GROUP_ID,
	OPB_WIDGET_FIELD.VERSION_NUMBER,
	REP_FLD_DATATYPE.DTYPE_NUM DATATYPE_NUM,
	REP_FLD_DATATYPE.DTYPE_NAME DATATYPE,
	REP_FLD_DATATYPE.DTYPE_GROUP_CODE DATATYPE_GROUP_CODE,
	REP_FLD_DATATYPE.DTYPE_DATABASE DATABASE_TYPE,
	OPB_EXPRESSION.EXPRESSION EXPRESSION,
	OPB_WIDGET_EXPR.COMMENTS EXPR_DESCRIPTION, 
	OPB_WIDGET_EXPR.EXPR_TYPE
FROM  
	OPB_WIDGET_EXPR, OPB_EXPRESSION, OPB_WIDGET_FIELD, REP_FLD_DATATYPE, OPB_WIDGET
WHERE  
	OPB_WIDGET_FIELD.WIDGET_ID = OPB_WIDGET.WIDGET_ID 
	AND OPB_WIDGET_FIELD.VERSION_NUMBER = OPB_WIDGET.VERSION_NUMBER
	AND OPB_WIDGET.IS_VISIBLE = 1
    AND OPB_WIDGET_FIELD.WGT_DATATYPE= REP_FLD_DATATYPE.DTYPE_NUM 
	AND REP_FLD_DATATYPE.DTYPE_DATABASE = 'INFORMATICA'
	AND OPB_WIDGET_FIELD.WIDGET_ID= OPB_WIDGET_EXPR.WIDGET_ID 
	AND OPB_WIDGET_FIELD.FIELD_ID= OPB_WIDGET_EXPR.OUTPUT_FIELD_ID 
    AND OPB_WIDGET_EXPR.WIDGET_ID=OPB_EXPRESSION.WIDGET_ID 
	AND OPB_WIDGET_EXPR.EXPR_ID=OPB_EXPRESSION.EXPR_ID 
	AND OPB_EXPRESSION.LINE_NO = 1
	AND OPB_WIDGET_EXPR.VERSION_NUMBER = OPB_EXPRESSION.VERSION_NUMBER
	AND OPB_WIDGET_EXPR.VERSION_NUMBER = OPB_WIDGET_FIELD.VERSION_NUMBER
UNION ALL
SELECT
	OPB_WIDGET_FIELD.WIDGET_ID,  
	OPB_WIDGET_FIELD.FIELD_NAME,
	OPB_WIDGET_FIELD.FIELD_ID,
	OPB_WIDGET_FIELD.WGT_PREC,
	OPB_WIDGET_FIELD.WGT_SCALE,
	OPB_WIDGET_FIELD.WGT_DATATYPE,
	OPB_WIDGET_FIELD.PORTTYPE,
	OPB_WIDGET_FIELD.FIELD_ORDER,
	OPB_WIDGET_FIELD.COMMENTS DESCRIPTION,
	OPB_WIDGET_FIELD.WIDGET_FLD_PROP PROPERTY,
	OPB_WIDGET_FIELD.DEFAULT_VALUE,
	OPB_WIDGET_FIELD.SRC_FIELD_ID,
	OPB_WIDGET_FIELD.GROUP_ID,
	OPB_WIDGET_FIELD.VERSION_NUMBER,
	REP_FLD_DATATYPE.DTYPE_NUM DATATYPE_NUM,
	REP_FLD_DATATYPE.DTYPE_NAME DATATYPE,
	REP_FLD_DATATYPE.DTYPE_GROUP_CODE DATATYPE_GROUP_CODE,
	REP_FLD_DATATYPE.DTYPE_DATABASE DATABASE_TYPE,
	NULL EXPRESSION, 
	NULL EXPR_DESCRIPTION, 
	NULL EXPR_TYPE
FROM  
	OPB_WIDGET_FIELD, REP_FLD_DATATYPE, OPB_WIDGET
WHERE 
	OPB_WIDGET_FIELD.WIDGET_ID = OPB_WIDGET.WIDGET_ID 
	AND OPB_WIDGET_FIELD.VERSION_NUMBER = OPB_WIDGET.VERSION_NUMBER
	AND OPB_WIDGET.IS_VISIBLE = 1  
	AND OPB_WIDGET_FIELD.WGT_DATATYPE= REP_FLD_DATATYPE.DTYPE_NUM 
	AND REP_FLD_DATATYPE.DTYPE_DATABASE = 'INFORMATICA'  
	AND NOT EXISTS (SELECT '1' FROM OPB_WIDGET_EXPR
		WHERE OPB_WIDGET_FIELD.WIDGET_ID= OPB_WIDGET_EXPR.WIDGET_ID 
		AND OPB_WIDGET_FIELD.VERSION_NUMBER = OPB_WIDGET_EXPR.VERSION_NUMBER
		AND OPB_WIDGET_FIELD.FIELD_ID= OPB_WIDGET_EXPR.OUTPUT_FIELD_ID)
GO

GO
--SqlScripter----[dbo].[REP_WIDGET_INST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WIDGET_INST]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WIDGET_INST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WIDGET_INST]
AS 
SELECT  
    OPB_WIDGET_INST.MAPPING_ID,
	OPB_WIDGET_INST.WIDGET_ID,
	OPB_WIDGET_INST.WIDGET_TYPE, 
	OPB_OBJECT_TYPE.OBJECT_TYPE_NAME WIDGET_TYPE_NAME,
	OPB_WIDGET_INST.INSTANCE_ID,
	OPB_WIDGET_INST.INSTANCE_NAME,
	OPB_WIDGET_INST.COMMENTS DESCRIPTION,
	OPB_WIDGET_INST.VERSION_NUMBER,
    OPB_MAPPING.REF_WIDGET_ID,
    OPB_MAPPING.SUBJECT_ID  
FROM OPB_WIDGET_INST, OPB_OBJECT_TYPE, OPB_MAPPING
WHERE 
    OPB_WIDGET_INST.WIDGET_TYPE = OPB_OBJECT_TYPE.OBJECT_TYPE_ID
    AND OPB_WIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID
    AND OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[REP_WORKFLOW_DEP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WORKFLOW_DEP]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WORKFLOW_DEP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WORKFLOW_DEP]
AS
SELECT 
	OPB_WFLOW_DEP.WORKFLOW_ID,
	OPB_WFLOW_DEP.FROM_INST_ID FROM_INSTANCE_ID,
	OPB_WFLOW_DEP.TO_INST_ID TO_INSTANCE_ID,
	OPB_WFLOW_DEP.CONDITION_ID,
	OPB_WFLOW_DEP.VERSION_NUMBER,
	OPB_WFLOW_EXPR.CONDITION
FROM
	OPB_WFLOW_DEP, OPB_WFLOW_EXPR, OPB_TASK
WHERE 
	OPB_WFLOW_DEP.WORKFLOW_ID = OPB_WFLOW_EXPR.WORKFLOW_ID 
	AND OPB_WFLOW_DEP.CONDITION_ID = OPB_WFLOW_EXPR.CONDITION_ID 
	AND OPB_WFLOW_DEP.VERSION_NUMBER = OPB_WFLOW_EXPR.VERSION_NUMBER
	AND OPB_WFLOW_DEP.WORKFLOW_ID = OPB_TASK.TASK_ID
	AND OPB_WFLOW_DEP.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER
	AND OPB_TASK.IS_VISIBLE = 1
	AND OPB_WFLOW_EXPR.LINE_NO = 1
GO

GO
--SqlScripter----[dbo].[REP_WORKFLOWS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[REP_WORKFLOWS]') IS NULL EXEC('CREATE VIEW [dbo].[REP_WORKFLOWS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[REP_WORKFLOWS]
AS
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    OPB_SCHEDULER.SCHEDULER_NAME,
    OPB_SCHEDULER.START_TIME,
    OPB_SCHEDULER.END_TIME,
    OPB_SCHEDULER.IS_RUN_ON_LIMIT,
    OPB_SCHEDULER.RUN_OPTIONS,
    OPB_SCHEDULER.END_OPTIONS,
    OPB_SCHEDULER.DELTA_VALUE,
    OPB_SCHEDULER.RUN_COUNT,
    OPB_SCHEDULER.SCHEDULER_ID,
    OPB_SCHEDULER.IS_REUSABLE SCHEDULER_IS_REUSABLE,
    OPB_SCHEDULER.COMMENTS SCHEDULER_COMMENTS,
    OPB_SCHEDULER.VERSION_NUMBER SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_SERVER_INFO.SERVER_NAME,
    OPB_SERVER_INFO.SERVER_ID,
    1 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SERVER_INFO, OPB_SCHEDULER, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_SCHEDULER.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID = OPB_SCHEDULER.SCHEDULER_ID AND
    OPB_WORKFLOW.SERVER_ID = OPB_SERVER_INFO.SERVER_ID AND
    OPB_SERVER_INFO.SERVER_TYPE = 41
    AND (OPB_TASK.IS_INVALIDATED = 1
    OR EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
UNION ALL
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    OPB_SCHEDULER.SCHEDULER_NAME,
    OPB_SCHEDULER.START_TIME,
    OPB_SCHEDULER.END_TIME,
    OPB_SCHEDULER.IS_RUN_ON_LIMIT,
    OPB_SCHEDULER.RUN_OPTIONS,
    OPB_SCHEDULER.END_OPTIONS,
    OPB_SCHEDULER.DELTA_VALUE,
    OPB_SCHEDULER.RUN_COUNT,
    OPB_SCHEDULER.SCHEDULER_ID,
    OPB_SCHEDULER.IS_REUSABLE SCHEDULER_IS_REUSABLE,
    OPB_SCHEDULER.COMMENTS SCHEDULER_COMMENTS,
    OPB_SCHEDULER.VERSION_NUMBER SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_SERVER_INFO.SERVER_NAME,
    OPB_SERVER_INFO.SERVER_ID,
    0 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SERVER_INFO, OPB_SCHEDULER, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_SCHEDULER.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID = OPB_SCHEDULER.SCHEDULER_ID AND
    OPB_WORKFLOW.SERVER_ID = OPB_SERVER_INFO.SERVER_ID AND
    OPB_SERVER_INFO.SERVER_TYPE = 41
    AND OPB_TASK.IS_INVALIDATED = 0
    AND NOT EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
UNION ALL
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    NULL SCHEDULER_NAME,
    NULL START_TIME,
    NULL END_TIME,
    NULL IS_RUN_ON_LIMIT,
    NULL RUN_OPTIONS,
    NULL END_OPTIONS,
    NULL DELTA_VALUE,
    NULL RUN_COUNT,
    NULL SCHEDULER_ID,
    NULL SCHEDULER_IS_REUSABLE,
    NULL SCHEDULER_COMMENTS,
    NULL SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_SERVER_INFO.SERVER_NAME,
    OPB_SERVER_INFO.SERVER_ID,
    1 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SERVER_INFO, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SERVER_ID = OPB_SERVER_INFO.SERVER_ID AND
    OPB_SERVER_INFO.SERVER_TYPE = 41 AND
    OPB_WORKFLOW.SCHEDULER_ID NOT IN (SELECT SCHEDULER_ID FROM OPB_SCHEDULER)
    AND (OPB_TASK.IS_INVALIDATED = 1
    OR EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
UNION ALL
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    NULL SCHEDULER_NAME,
    NULL START_TIME,
    NULL END_TIME,
    NULL IS_RUN_ON_LIMIT,
    NULL RUN_OPTIONS,
    NULL END_OPTIONS,
    NULL DELTA_VALUE,
    NULL RUN_COUNT,
    NULL SCHEDULER_ID,
    NULL SCHEDULER_IS_REUSABLE,
    NULL SCHEDULER_COMMENTS,
    NULL SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    OPB_SERVER_INFO.SERVER_NAME,
    OPB_SERVER_INFO.SERVER_ID,
    0 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SERVER_INFO, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SERVER_ID = OPB_SERVER_INFO.SERVER_ID AND
    OPB_SERVER_INFO.SERVER_TYPE = 41 AND
    OPB_WORKFLOW.SCHEDULER_ID NOT IN (SELECT SCHEDULER_ID FROM OPB_SCHEDULER)
    AND OPB_TASK.IS_INVALIDATED = 0
    AND NOT EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
UNION ALL
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    OPB_SCHEDULER.SCHEDULER_NAME,
    OPB_SCHEDULER.START_TIME,
    OPB_SCHEDULER.END_TIME,
    OPB_SCHEDULER.IS_RUN_ON_LIMIT,
    OPB_SCHEDULER.RUN_OPTIONS,
    OPB_SCHEDULER.END_OPTIONS,
    OPB_SCHEDULER.DELTA_VALUE,
    OPB_SCHEDULER.RUN_COUNT,
    OPB_SCHEDULER.SCHEDULER_ID,
    OPB_SCHEDULER.IS_REUSABLE SCHEDULER_IS_REUSABLE,
    OPB_SCHEDULER.COMMENTS SCHEDULER_COMMENTS,
    OPB_SCHEDULER.VERSION_NUMBER SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    NULL SERVER_NAME,
    NULL SERVER_ID,
    1 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SCHEDULER, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_SCHEDULER.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID = OPB_SCHEDULER.SCHEDULER_ID AND
    OPB_WORKFLOW.SERVER_ID NOT IN 
        (SELECT SERVER_ID FROM OPB_SERVER_INFO WHERE SERVER_TYPE = 41)
    AND (OPB_TASK.IS_INVALIDATED = 1
    OR EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
UNION ALL
SELECT 
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    OPB_SCHEDULER.SCHEDULER_NAME,
    OPB_SCHEDULER.START_TIME,
    OPB_SCHEDULER.END_TIME,
    OPB_SCHEDULER.IS_RUN_ON_LIMIT,
    OPB_SCHEDULER.RUN_OPTIONS,
    OPB_SCHEDULER.END_OPTIONS,
    OPB_SCHEDULER.DELTA_VALUE,
    OPB_SCHEDULER.RUN_COUNT,
    OPB_SCHEDULER.SCHEDULER_ID,
    OPB_SCHEDULER.IS_REUSABLE SCHEDULER_IS_REUSABLE,
    OPB_SCHEDULER.COMMENTS SCHEDULER_COMMENTS,
    OPB_SCHEDULER.VERSION_NUMBER SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    NULL SERVER_NAME,
    NULL SERVER_ID,
    0 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_SCHEDULER, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_SCHEDULER.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID = OPB_SCHEDULER.SCHEDULER_ID AND
    OPB_WORKFLOW.SERVER_ID NOT IN 
        (SELECT SERVER_ID FROM OPB_SERVER_INFO WHERE SERVER_TYPE = 41)
    AND OPB_TASK.IS_INVALIDATED = 0
    AND NOT EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
UNION ALL
SELECT
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    NULL SCHEDULER_NAME,
    NULL START_TIME,
    NULL END_TIME,
    NULL IS_RUN_ON_LIMIT,
    NULL RUN_OPTIONS,
    NULL END_OPTIONS,
    NULL DELTA_VALUE,
    NULL RUN_COUNT,
    NULL SCHEDULER_ID,
    NULL SCHEDULER_IS_REUSABLE,
    NULL SCHEDULER_COMMENTS,
    NULL SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    NULL SERVER_NAME,
    NULL SERVER_ID,
    1 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID NOT IN (SELECT SCHEDULER_ID FROM OPB_SCHEDULER) AND
    OPB_WORKFLOW.SERVER_ID NOT IN 
        (SELECT SERVER_ID FROM OPB_SERVER_INFO WHERE SERVER_TYPE = 41)
    AND (OPB_TASK.IS_INVALIDATED = 1
    OR EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED))
UNION ALL
SELECT
    OPB_SUBJECT.SUBJ_NAME SUBJECT_AREA, 
    OPB_TASK.TASK_NAME WORKFLOW_NAME, 
    NULL SCHEDULER_NAME,
    NULL START_TIME,
    NULL END_TIME,
    NULL IS_RUN_ON_LIMIT,
    NULL RUN_OPTIONS,
    NULL END_OPTIONS,
    NULL DELTA_VALUE,
    NULL RUN_COUNT,
    NULL SCHEDULER_ID,
    NULL SCHEDULER_IS_REUSABLE,
    NULL SCHEDULER_COMMENTS,
    NULL SCHEDULER_VERSION_NUMBER,
    OPB_TASK.VERSION_NUMBER WORKFLOW_VERSION_NUMBER,
    OPB_TASK.TASK_ID WORKFLOW_ID, 
    OPB_TASK.SAVED_VALID WORKFLOW_IS_VALID, 
    OPB_WORKFLOW.IS_SERVICE WORKFLOW_IS_SERVICE, 
    OPB_WORKFLOW.IS_SVC_RUNNABLE WORKFLOW_IS_RUNNABLE_SERVICE, 
    OPB_TASK.LAST_SAVED WORKFLOW_LAST_SAVED, 
    OPB_TASK.COMMENTS WORKFLOW_COMMENTS,
    OPB_SUBJECT.SUBJ_ID SUBJECT_ID, 
    NULL SERVER_NAME,
    NULL SERVER_ID,
    0 WORKFLOW_IS_IMPACTED
FROM 
    OPB_TASK, OPB_WORKFLOW, OPB_SUBJECT
WHERE
    OPB_WORKFLOW.WORKFLOW_ID = OPB_TASK.TASK_ID AND
    OPB_TASK.TASK_TYPE = 71 AND
    OPB_TASK.SUBJECT_ID = OPB_SUBJECT.SUBJ_ID AND
    OPB_TASK.VERSION_NUMBER = OPB_WORKFLOW.VERSION_NUMBER AND
    OPB_TASK.IS_VISIBLE = 1 AND
    OPB_WORKFLOW.SCHEDULER_ID NOT IN (SELECT SCHEDULER_ID FROM OPB_SCHEDULER) AND
    OPB_WORKFLOW.SERVER_ID NOT IN 
        (SELECT SERVER_ID FROM OPB_SERVER_INFO WHERE SERVER_TYPE = 41)
    AND OPB_TASK.IS_INVALIDATED = 0
    AND NOT EXISTS (SELECT * FROM OPB_TASK_INST I, OPB_TASK T, OPB_VALIDATE V
        WHERE OPB_TASK.TASK_ID = I.WORKFLOW_ID
        AND OPB_TASK.VERSION_NUMBER = I.VERSION_NUMBER
        AND T.TASK_ID = I.TASK_ID
        AND T.TASK_TYPE = I.TASK_TYPE
        AND T.IS_VISIBLE <> 2
        AND V.OBJECT_TYPE = T.TASK_TYPE
        AND V.OBJECT_ID = T.TASK_ID
        AND V.VERSION_NUMBER = T.VERSION_NUMBER
        AND V.INV_UTC > OPB_TASK.UTC_LAST_SAVED)
GO

GO
--SqlScripter----[dbo].[V_ASC_CMD_CMDLINE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_CMD_CMDLINE]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_CMD_CMDLINE] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_CMD_CMDLINE]
AS
SELECT  
' '                                                               "REPOSITORY_ID",  
'com.informatica.powercenter.process.Command'		"FROM_CLASS_ID",  
'Command_'+ltrim(str(tasks.TASK_ID))     "FROM_ELEMENT_ID",  
' '                                                                "FROM_REPO_ID",  
'com.informatica.powercenter.process.CommandLine'                                    "TO_CLASS_ID",  
 'CommandLine_' + ltrim(str(tasks.TASK_ID))+'~'+
 ltrim(str(tval.INSTANCE_ID))+'~'+ltrim(str(tval.EXEC_ORDER))        "TO_ELEMENT_ID",  
' '                                                                "TO_REPO_ID",  
'org.omg.cwm.objectmodel.core.ClassifierFeature'                              "ASSOCIATION_ID",  
EXEC_ORDER                                                                                                               "ASSOCIATION_SEQ",  
'N'                                                                                                              "HIDDEN_FLAG",  
''                                                                                                                 "EFF_FROM_DT",  
''                                                                                                                 "EFF_TO_DT"  ,
tasks.SUBJECT_ID "SRC_SUBJECT_ID",
tasks.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
	    OPB_TASK tasks,
	    OPB_TASK_VAL_LIST  tval
where  
	 	tasks.TASK_TYPE = 58 and
	  	tasks.TASK_ID =  tval.TASK_ID AND
	  	tasks.TASK_TYPE =  tval.TASK_TYPE AND	
		tasks.VERSION_NUMBER =  tval.VERSION_NUMBER AND
		tval.LINE_NO = 1 AND
		tasks.IS_VISIBLE = 1 AND
		tasks.IS_REUSABLE = 1 AND
		tval.SESSION_ID = 0 AND		
		tval.INSTANCE_ID = 0
UNION ALL
SELECT  
' '                                                               "REPOSITORY_ID",  
'com.informatica.powercenter.process.CommandTaskInstance'		"FROM_CLASS_ID",  
'TASK_INSTANCE_Command_' + ltrim(str(tval.INSTANCE_ID))   "FROM_ELEMENT_ID",  
' '                                                                "FROM_REPO_ID",  
'com.informatica.powercenter.process.CommandLine'                                    "TO_CLASS_ID",  
 'CommandLine_' + ltrim(str(tval.TASK_ID))+'~'+
 ltrim(str(tval.INSTANCE_ID))+'~'+ltrim(str(tval.EXEC_ORDER))        "TO_ELEMENT_ID",  
' '                                                                "TO_REPO_ID",  
'org.omg.cwm.objectmodel.core.ClassifierFeature'                              "ASSOCIATION_ID",  
EXEC_ORDER                                                                                                               "ASSOCIATION_SEQ",  
'N'                                                                                                              "HIDDEN_FLAG",  
''                                                                                                                 "EFF_FROM_DT",  
''                                                                                                                 "EFF_TO_DT"  ,
wflow.SUBJECT_ID "SRC_SUBJECT_ID",
wflow.SUBJECT_ID "TGT_SUBJECT_ID"
     from 
	    OPB_TASK wflow,
		OPB_TASK_INST tinst,
	    OPB_TASK_VAL_LIST  tval
	 where  
	 	tval.TASK_TYPE = 58 and
	  	tinst.INSTANCE_ID =  tval.INSTANCE_ID AND
	 	tval.TASK_TYPE = tinst.TASK_TYPE and	  	
		tval.WORKFLOW_ID = wflow.TASK_ID AND 
		tinst.VERSION_NUMBER =  tval.VERSION_NUMBER AND
		wflow.VERSION_NUMBER =  tval.VERSION_NUMBER AND
		tval.LINE_NO = 1 AND
		wflow.IS_VISIBLE = 1
UNION ALL
SELECT  
' '                                                               "REPOSITORY_ID",  
'com.informatica.powercenter.process.CommandTaskInstance'		"FROM_CLASS_ID",  
'TASK_INSTANCE_Command_' + ltrim(str(tinst.INSTANCE_ID))   "FROM_ELEMENT_ID",  
' '                                                                "FROM_REPO_ID",  
'com.informatica.powercenter.process.CommandLine'                                    "TO_CLASS_ID",  
 'CommandLine_' + ltrim(str(tval.TASK_ID))+'~'+
 ltrim(str(tval.INSTANCE_ID))+'~'+ltrim(str(tval.EXEC_ORDER))        "TO_ELEMENT_ID",  
' '                                                                "TO_REPO_ID",  
'org.omg.cwm.objectmodel.core.ClassifierFeature'                              "ASSOCIATION_ID",  
EXEC_ORDER                                                                                                               "ASSOCIATION_SEQ",  
'N'                                                                                                              "HIDDEN_FLAG",  
''                                                                                                                 "EFF_FROM_DT",  
''                                                                                                                 "EFF_TO_DT"  ,
wflow.SUBJECT_ID "SRC_SUBJECT_ID",
wflow.SUBJECT_ID "TGT_SUBJECT_ID"
     from 
	    OPB_TASK wflow,
	    OPB_TASK tasks,
		OPB_TASK_INST tinst,
	    OPB_TASK_VAL_LIST  tval
	 where  
	 	tval.TASK_TYPE = 58 and
	  	tinst.TASK_ID =  tval.TASK_ID AND
	 	tval.TASK_TYPE = tinst.TASK_TYPE and
		tinst.WORKFLOW_ID = wflow.TASK_ID AND 
		tinst.VERSION_NUMBER =  wflow.VERSION_NUMBER AND
		wflow.IS_VISIBLE = 1 AND
		tval.TASK_ID = tasks.TASK_ID AND
		tasks.VERSION_NUMBER =  tval.VERSION_NUMBER AND
		tval.LINE_NO = 1 AND
		tasks.IS_VISIBLE = 1 AND
		tasks.IS_REUSABLE = 0
GO

GO
--SqlScripter----[dbo].[V_ASC_FLDR_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_FLDR_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_FLDR_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_FLDR_MAP]
AS 
select ' ' "REPOSITORY_ID",
	   'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder_' + ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.Mapping' "TO_CLASS_ID", 
       'Mapping_'+ ltrim(str(mapping.MAPPING_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ",
         'N' "HIDDEN_FLAG", 
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       FROM
OPB_MAPPING mapping, 
OPB_SUBJECT subj
WHERE
mapping.REF_WIDGET_ID = 0 
and subj.SUBJ_ID = mapping.SUBJECT_ID
and mapping.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_G_SC_TO_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_G_SC_TO_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_G_SC_TO_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_G_SC_TO_FLDR]
AS 
select ' ' "REPOSITORY_ID",
	  'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder' +'_'+ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
' '  "FROM_REPO_ID", 
'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_Mapping_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID + 2147483649)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       from 
OPB_SHORTCUT shcut, 
OPB_SUBJECT subj
where 
shcut.OBJECT_ID < 0 
and shcut.OBJECT_TYPE = 21
and subj.SUBJ_ID = shcut.SUBJECT_ID
and shcut.IS_VISIBLE = 1
UNION ALL
select ' ' "REPOSITORY_ID",
	  'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder'+'_'+ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_'+otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID + 2147483649)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
    FROM
OPB_SHORTCUT shcut, 
OPB_OBJECT_TYPE otype, 
OPB_SUBJECT subj
WHERE
shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID  
and shcut.OBJECT_ID < 0 
and shcut.OBJECT_TYPE <> 22
and subj.SUBJ_ID = shcut.SUBJECT_ID
and shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_L_SC_TO_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_L_SC_TO_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_L_SC_TO_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_L_SC_TO_FLDR]
AS 
select ' ' "REPOSITORY_ID",
	  	   'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder' + '_' + ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",
       ' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID", 
'SHORTCUT_TO_PC_' + shcut.REPOSITORY_NAME + '_Mapping_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
 1 "ASSOCIATION_SEQ", 
'N' "HIDDEN_FLAG", 
'' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       from OPB_SHORTCUT shcut,
     	    OPB_SUBJECT subj
	   where 
subj.SUBJ_ID = shcut.SUBJECT_ID
and shcut.OBJECT_ID >= 0 
and shcut.OBJECT_TYPE = 21
and shcut.IS_VISIBLE = 1
UNION ALL
select ' ' "REPOSITORY_ID",
	   	   'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder' +'_'+ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
       ' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.' +REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' + shcut.REPOSITORY_NAME+'_'+ otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       FROM
OPB_SHORTCUT shcut, 
OPB_OBJECT_TYPE otype, 
OPB_SUBJECT subj
where 
shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID  
and subj.SUBJ_ID = shcut.SUBJECT_ID
and shcut.OBJECT_ID >= 0 
and shcut.OBJECT_TYPE <> 22
and shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_LSC_TO_ELMNT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_LSC_TO_ELMNT]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_LSC_TO_ELMNT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_LSC_TO_ELMNT]
AS 
select ' ' "REPOSITORY_ID",
       'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "FROM_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + ltrim(str(shcut.OBJECT_ID)) "FROM_ELEMENT_ID", 
       ' '    "FROM_REPO_ID", 
       'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_'+otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID", 
	   'com.informatica.cwmx.import.Aliases' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	    widget.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
OPB_SHORTCUT shcut,  
OPB_OBJECT_TYPE otype,  
OPB_WIDGET widget
WHERE  
shcut.OBJECT_TYPE NOT IN (22,21)  
AND shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID  
AND shcut.OBJECT_ID >=0  
AND shcut.IS_VISIBLE = 1  
AND widget.IS_VISIBLE = 1  
AND shcut.OBJECT_ID = widget.WIDGET_ID 
AND shcut.OBJECT_SUBTYPE = widget.WIDGET_TYPE
UNION ALL
select ' ' "REPOSITORY_ID",
       'com.informatica.powercenter.map.SourceDefinition' "FROM_CLASS_ID", 
       'Source Definition_' + ltrim(str(shcut.OBJECT_ID)) "FROM_ELEMENT_ID", 
       ' '    "FROM_REPO_ID", 
       'com.informatica.powercenter.map.SourceDefinitionShortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_Source Definition_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID", 
	   'com.informatica.cwmx.import.Aliases' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
src.SUBJ_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
OPB_SHORTCUT shcut,  
OPB_SRC src
WHERE  
shcut.OBJECT_TYPE NOT IN (22,21)  
AND shcut.OBJECT_SUBTYPE = 1
AND shcut.OBJECT_ID >=0  
AND shcut.IS_VISIBLE = 1  
AND src.IS_VISIBLE = 1  
AND shcut.OBJECT_ID = src.SRC_ID
UNION ALL
select ' ' "REPOSITORY_ID",
       'com.informatica.powercenter.map.TargetDefinition' "FROM_CLASS_ID", 
       'Target Definition_' + ltrim(str(shcut.OBJECT_ID)) "FROM_ELEMENT_ID", 
       ' '    "FROM_REPO_ID", 
       'com.informatica.powercenter.map.TargetDefinitionShortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_Target Definition_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID", 
	   'com.informatica.cwmx.import.Aliases' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
targ.SUBJ_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
OPB_SHORTCUT shcut,  
OPB_TARG targ
WHERE  
shcut.OBJECT_TYPE NOT IN (22,21)  
AND shcut.OBJECT_SUBTYPE = 2
AND shcut.OBJECT_ID >=0  
AND shcut.IS_VISIBLE = 1  
AND targ.IS_VISIBLE = 1  
AND shcut.OBJECT_ID = targ.TARGET_ID
UNION ALL
select ' ' "REPOSITORY_ID",
       'com.informatica.powercenter.map.Mapping'   "FROM_CLASS_ID", 
        'Mapping_' + ltrim(str(shcut.OBJECT_ID))   "FROM_ELEMENT_ID", 
       ' ' "FROM_REPO_ID", 
       'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID", 
       'SHORTCUT_TO_PC_' +  shcut.REPOSITORY_NAME+'_Mapping_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID", 
       'com.informatica.cwmx.import.Aliases' "ASSOCIATION_ID",
       1 "ASSOCIATION_SEQ", 
       'N' "HIDDEN_FLAG", 
       '' "EFF_FROM_DT",  
       '' "EFF_TO_DT",
       map.SUBJECT_ID "SRC_SUBJECT_ID",
       shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
 OPB_SHORTCUT shcut,  
 OPB_MAPPING map
WHERE  
 shcut.OBJECT_TYPE = 21  
 AND shcut.OBJECT_ID >=0  
 AND shcut.IS_VISIBLE = 1
 AND map.MAPPING_ID = shcut.OBJECT_ID 
 AND map.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_REPO_FOLDER].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_REPO_FOLDER]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_REPO_FOLDER] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_REPO_FOLDER]
AS
select ' ' "REPOSITORY_ID",
	   'com.informatica.superglue.repository.Repository' "FROM_CLASS_ID",
        ' ' "FROM_ELEMENT_ID",
        'IMM_MASTER_REPOSITORY' "FROM_REPO_ID",
	  'com.informatica.powercenter.package.Folder' "TO_CLASS_ID",
       'Folder_'+ ltrim(str(subj.SUBJ_ID)) "TO_ELEMENT_ID",
     ' ' "TO_REPO_ID",
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ",
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SUBJECT subj
GO

GO
--SqlScripter----[dbo].[V_ASC_RTASKS_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_RTASKS_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_RTASKS_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_RTASKS_FLDR]
AS 
select ' ' "REPOSITORY_ID",
	   'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder' +'_'+ ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.process.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TO_CLASS_ID", 
       otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(tasks.TASK_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	   ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       from OPB_TASK tasks, OPB_OBJECT_TYPE otype, 
     	    OPB_SUBJECT subj 
	   where otype.OBJECT_TYPE_ID = tasks.TASK_TYPE and subj.SUBJ_ID = tasks.SUBJECT_ID and tasks.IS_REUSABLE = 1 and tasks.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_SESSION_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SESSION_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SESSION_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SESSION_MAP]
AS 
SELECT
' ' "REPOSITORY_ID",
'com.informatica.powercenter.process.Session' "FROM_CLASS_ID", 
'Session_' + ltrim(str(sess.SESSION_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.Mapping' "TO_CLASS_ID", 
'Mapping_' + ltrim(str(sess.MAPPING_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
 1 "ASSOCIATION_SEQ", 
'N' "HIDDEN_FLAG", 
'' "EFF_FROM_DT", 
 '' "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
OPB_SESSION sess, 
OPB_MAPPING map,
OPB_TASK task
WHERE
task.TASK_TYPE = 68 and 
sess.MAPPING_ID = map.MAPPING_ID and
map.IS_VISIBLE = 1 and
sess.SESSION_ID = task.TASK_ID and 
sess.VERSION_NUMBER = task.VERSION_NUMBER and 
task.IS_VISIBLE = 1 and
task.IS_REUSABLE = 1 and
sess.MAPPING_ID > 0 and
NOT EXISTS (SELECT NULL
             FROM
               OPB_SHORTCUT scut
             WHERE scut.SUBJECT_ID = task.SUBJECT_ID AND
                   scut.OBJECT_TYPE = 21 AND
                   scut.OBJECT_ID = sess.MAPPING_ID and scut.IS_VISIBLE = 1)
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "FROM_CLASS_ID",
  'TASK_INSTANCE_Session_'+
          LTRIM(str(taskinst.INSTANCE_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.Mapping' "TO_CLASS_ID",
  'Mapping_' + LTRIM(str(sess.MAPPING_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SESSION sess,
  OPB_MAPPING map,
  OPB_TASK task,
  OPB_TASK_INST taskinst,
  OPB_TASK wkflow_or_wklet
WHERE 
  sess.MAPPING_ID = map.MAPPING_ID and
  map.IS_VISIBLE = 1 and
  sess.SESSION_ID = task.TASK_ID and 
  sess.VERSION_NUMBER = task.VERSION_NUMBER and 
  task.IS_VISIBLE = 1 AND
  taskinst.TASK_ID = task.TASK_ID and 
  taskinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID and 
  taskinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER and 
  wkflow_or_wklet.TASK_TYPE IN (70,71) and 
  wkflow_or_wklet.IS_VISIBLE = 1 AND
  taskinst.TASK_TYPE = 68 AND
  sess.MAPPING_ID > 0 AND
  NOT EXISTS (SELECT NULL
             FROM
               OPB_SHORTCUT scut
             WHERE scut.SUBJECT_ID = task.SUBJECT_ID AND
                   scut.OBJECT_TYPE = 21 AND
                   scut.OBJECT_ID = sess.MAPPING_ID and scut.IS_VISIBLE = 1)
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.process.Session' "FROM_CLASS_ID",
  'Session_' + ltrim(str(sess.SESSION_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME + '_Mapping_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SESSION sess,
  OPB_TASK task,
  OPB_SHORTCUT shcut
WHERE 
  task.TASK_TYPE = 68 and
  shcut.OBJECT_ID = sess.MAPPING_ID AND
  shcut.SUBJECT_ID = task.SUBJECT_ID AND
  shcut.OBJECT_TYPE = 21 AND  
  sess.SESSION_ID = task.TASK_ID and 
  sess.VERSION_NUMBER = task.VERSION_NUMBER and 
  task.IS_VISIBLE = 1 and
  task.IS_REUSABLE = 1 and
  shcut.OBJECT_ID >= 0 and 
  shcut.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "FROM_CLASS_ID",
  'TASK_INSTANCE_Session_' +  		 LTRIM(str(taskinst.INSTANCE_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' +  shcut.REPOSITORY_NAME + '_Mapping_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT" ,
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SESSION sess,
  OPB_TASK task,
  OPB_TASK_INST taskinst,
  OPB_SHORTCUT shcut, 
  OPB_TASK wkflow_or_wklet
WHERE 
  sess.SESSION_ID = task.TASK_ID and 
  sess.VERSION_NUMBER = task.VERSION_NUMBER and 
  task.IS_VISIBLE = 1 AND
  shcut.OBJECT_ID = sess.MAPPING_ID AND
  shcut.SUBJECT_ID = task.SUBJECT_ID AND
  shcut.OBJECT_TYPE = 21 AND  
  taskinst.TASK_ID = task.TASK_ID and 
  taskinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID and 
  taskinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER and 
  wkflow_or_wklet.TASK_TYPE IN (70,71) and 
  wkflow_or_wklet.IS_VISIBLE = 1 AND
  taskinst.TASK_TYPE = 68 AND
  shcut.OBJECT_ID >= 0 and 
  shcut.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.process.Session' "FROM_CLASS_ID", 
  'Session_' + ltrim(str(sess.SESSION_ID)) "FROM_ELEMENT_ID",  
  ' ' "FROM_REPO_ID", 
  'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID", 
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME + '_Mapping_'+ ltrim(str(task.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str((sess.MAPPING_ID + 2147483649))) "TO_ELEMENT_ID", 
  ' ' "TO_REPO_ID", 
  'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
   1 "ASSOCIATION_SEQ", 
  'N' "HIDDEN_FLAG", 
  '' "EFF_FROM_DT",
   '' "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
from 
  OPB_SESSION sess, 
  OPB_TASK task,
  OPB_SHORTCUT shcut
where 
  task.TASK_TYPE = 68 and 
  sess.SESSION_ID = task.TASK_ID and 
  sess.VERSION_NUMBER = task.VERSION_NUMBER and 
  task.IS_VISIBLE = 1 and
  task.IS_REUSABLE = 1 and
  sess.MAPPING_ID < 0  and
  sess.MAPPING_ID = shcut.OBJECT_ID and
  task.SUBJECT_ID = shcut.SUBJECT_ID and  
  shcut.OBJECT_TYPE = 21 AND  
  shcut.REFERENCE_TYPE = 2 and 
  shcut.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "FROM_CLASS_ID",
  'TASK_INSTANCE_Session_'+
         LTRIM(str(taskinst.INSTANCE_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.MappingShortcut' "TO_CLASS_ID", 
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME + '_Mapping_'+ ltrim(str(task.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str((sess.MAPPING_ID + 2147483649))) "TO_ELEMENT_ID", 
  ' ' "TO_REPO_ID",
  'org.omg.cwm.analysis.transformation.TransformationTaskElement' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SESSION sess,
  OPB_TASK task,
  OPB_TASK_INST taskinst,
  OPB_SHORTCUT shcut, 
  OPB_TASK wkflow_or_wklet
WHERE 
  sess.SESSION_ID = task.TASK_ID AND 
  sess.VERSION_NUMBER = task.VERSION_NUMBER AND 
  task.IS_VISIBLE = 1 AND
  taskinst.TASK_ID = task.TASK_ID AND 
  taskinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID AND 
  taskinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER and 
  wkflow_or_wklet.TASK_TYPE IN (70,71) AND 
  wkflow_or_wklet.IS_VISIBLE = 1 AND
  taskinst.TASK_TYPE = 68 AND
  sess.MAPPING_ID < 0 AND
  sess.MAPPING_ID = shcut.OBJECT_ID and
  task.SUBJECT_ID = shcut.SUBJECT_ID and  
  shcut.OBJECT_TYPE = 21 AND  
  shcut.REFERENCE_TYPE = 2 AND 
  shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_SRC_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SRC_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SRC_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SRC_FLDR]
AS 
select ' ' "REPOSITORY_ID",
	    'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
'Folder' + '_' + ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  ' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.SourceDefinition' "TO_CLASS_ID", 
 'Source Definition_' + ltrim(str(src.SRC_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       FROM
OPB_SRC src, 
OPB_SUBJECT subj
WHERE
subj.SUBJ_ID = src.SUBJ_ID
and src.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_SRCFLDS_SRCS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SRCFLDS_SRCS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SRCFLDS_SRCS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SRCFLDS_SRCS]
AS
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.SourceDefinition'  "FROM_CLASS_ID",
  'Source Definition_'+ ltrim(str(src.SRC_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.SourceDefinitionPort' "TO_CLASS_ID",
  'Source Definition_' + 'Field_' + ltrim(str(src.SRC_ID)) + '_' + ltrim(str(fld.FLDID)) "TO_ELEMENT_ID" ,
  ' ' "TO_REPO_ID",
  'org.omg.cwm.objectmodel.core.ClassifierFeature' "ASSOCIATION_ID",
  fld.FLDNO "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  src.SUBJ_ID "SRC_SUBJECT_ID",
src.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
  OPB_SRC src,
  OPB_SRC_FLD fld
WHERE 
  fld.SRC_ID = src.SRC_ID  and fld.VERSION_NUMBER = src.VERSION_NUMBER
and src.IS_VISIBLE = 1
AND
  NOT EXISTS 
  (SELECT NULL 
   FROM OPB_SHORTCUT scut 
   WHERE 
   scut.SUBJECT_ID = src.SUBJ_ID AND
   scut.OBJECT_SUBTYPE = 1 AND
   scut.OBJECT_ID = src.SRC_ID AND scut.IS_VISIBLE = 1
   AND scut.OBJECT_TYPE <> 22 )
GO

GO
--SqlScripter----[dbo].[V_ASC_SRCINST_SRC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SRCINST_SRC]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SRCINST_SRC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SRCINST_SRC]
AS 
SELECT 
  ' ' "REPOSITORY_ID",
    'com.informatica.powercenter.map.SourceDefinition' "FROM_CLASS_ID",
  'Source Definition_' +ltrim(str(winst.WIDGET_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.SourceDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Source Definition_' +   ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
src.SUBJ_ID "SRC_SUBJECT_ID",
src.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_MAPPING map,
  OPB_SRC src
WHERE 
  winst.WIDGET_ID = src.SRC_ID and
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
  and src.IS_VISIBLE = 1
  and map.IS_VISIBLE = 1
  AND  src.SUBJ_ID = map.SUBJECT_ID AND
  winst.WIDGET_TYPE = 1 and
  NOT EXISTS 
  (SELECT NULL FROM OPB_SHORTCUT scut
   WHERE 
   scut.SUBJECT_ID = src.SUBJ_ID AND
   scut.OBJECT_SUBTYPE = 1 AND
   scut.OBJECT_ID = winst.WIDGET_ID AND scut.IS_VISIBLE = 1
   AND scut.OBJECT_TYPE <> 22 )
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.SourceDefinitionShortcut' "FROM_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_Source Definition_' + LTRIM(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + LTRIM(str(shcut.OBJECT_ID))  "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.SourceDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Source Definition_' +   LTRIM(str(winst.MAPPING_ID)) + '_' + LTRIM(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"  
FROM 
  OPB_WIDGET_INST winst,
  OPB_SRC src,
  OPB_SHORTCUT shcut,
  OPB_MAPPING map
WHERE 
  winst.WIDGET_ID = src.SRC_ID  AND
  winst.WIDGET_TYPE = 1 AND
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and src.IS_VISIBLE = 1
and map.IS_VISIBLE = 1
AND  shcut.OBJECT_SUBTYPE = 1 AND
  shcut.OBJECT_ID = winst.WIDGET_ID AND shcut.IS_VISIBLE = 1 AND
  shcut.SUBJECT_ID = map.SUBJECT_ID AND
  shcut.OBJECT_ID >= 0 AND
  shcut.OBJECT_TYPE <> 22    
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
    'com.informatica.powercenter.map.SourceDefinitionShortcut' "FROM_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_Source Definition_'+ ltrim(str(map.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str((winst.WIDGET_ID + 2147483649))) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.SourceDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Source Definition_' +   ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"  
FROM 
  OPB_WIDGET_INST winst,
  OPB_MAPPING map,
  OPB_SHORTCUT shcut
WHERE 
  winst.WIDGET_TYPE = 1 and
  winst.WIDGET_ID < 0 and
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
and   shcut.OBJECT_SUBTYPE = 1 AND
  shcut.OBJECT_ID = winst.WIDGET_ID and shcut.IS_VISIBLE = 1 AND
  shcut.SUBJECT_ID = map.SUBJECT_ID  AND
  shcut.OBJECT_TYPE <> 22
GO

GO
--SqlScripter----[dbo].[V_ASC_SRVC_REPO].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SRVC_REPO]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SRVC_REPO] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SRVC_REPO]
AS
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.superglue.repository.Repository' "FROM_CLASS_ID",
  ' ' "FROM_ELEMENT_ID",
  'IMM_MASTER_REPOSITORY' "FROM_REPO_ID",
  'com.informatica.powercenter.deployment.IntegrationService' "TO_CLASS_ID",
  'Integration Service_' + LTRIM(STR(server.SERVER_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
CAST(NULL AS INT) "SRC_SUBJECT_ID",
CAST(NULL AS INT) "TGT_SUBJECT_ID"
FROM 
  V_ELMNT_SERVICE server
GO

GO
--SqlScripter----[dbo].[V_ASC_SWSYSTEM].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_SWSYSTEM]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_SWSYSTEM] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_SWSYSTEM]
AS
select ' ' "REPOSITORY_ID",
   'org.omg.cwm.foundation.softwaredeployment.SoftwareSystem' "FROM_CLASS_ID",
     'PC_SWSystem_' + repo.REPOSIT_NAME "FROM_ELEMENT_ID",
     ' ' "FROM_REPO_ID",
   'org.omg.cwm.foundation.softwaredeployment.DeployedSoftwareSystem' "TO_CLASS_ID",
      'PC_DepSWSystem_' + repo.REPOSIT_NAME "TO_ELEMENT_ID",
      ' ' "TO_REPO_ID",
   'org.omg.cwm.foundation.softwaredeployment.SoftwareSystemDeployments' "ASSOCIATION_ID",
   1 "ASSOCIATION_SEQ",
   'N' "HIDDEN_FLAG", 
   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
CAST(NULL AS INT) "SRC_SUBJECT_ID",
CAST(NULL AS INT) "TGT_SUBJECT_ID"
       from  OPB_REPOSIT repo
	   where repo.RECID = 1
union all
select ' ' "REPOSITORY_ID",
   'org.omg.cwm.foundation.softwaredeployment.DeployedSoftwareSystem' "FROM_CLASS_ID",
      'PC_DepSWSystem_' + repo.REPOSIT_NAME "FROM_ELEMENT_ID",
      ' ' "FROM_REPO_ID",
   'com.informatica.powercenter.deployment.IntegrationService' "TO_CLASS_ID",
      'Integration Service_' + ltrim(str(server.SERVER_ID)) "TO_ELEMENT_ID",
      ' ' "TO_REPO_ID",
   'org.omg.cwm.foundation.softwaredeployment.DeployedSoftwareSystemComponents' "ASSOCIATION_ID",
   1 "ASSOCIATION_SEQ",
   'N' "HIDDEN_FLAG", 
   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
CAST(NULL AS INT) "SRC_SUBJECT_ID",
CAST(NULL AS INT) "TGT_SUBJECT_ID"
    from V_ELMNT_SERVICE server,OPB_REPOSIT repo
	   where repo.RECID = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_TASK_TSKINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_TASK_TSKINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_TASK_TSKINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_TASK_TSKINST]
AS
select ' ' "REPOSITORY_ID",
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "FROM_CLASS_ID",
otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst.TASK_ID)) "FROM_ELEMENT_ID",
' ' "FROM_REPO_ID",
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "TO_CLASS_ID",
'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst.INSTANCE_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID",
'com.informatica.cwmx.reuse.TaskReuse' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ",
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
tasks.SUBJECT_ID "SRC_SUBJECT_ID",
tasks.SUBJECT_ID "TGT_SUBJECT_ID"
from OPB_TASK_INST taskinst, OPB_TASK tasks, OPB_OBJECT_TYPE otype, OPB_TASK wflow_or_wklet
where taskinst.TASK_TYPE = otype.OBJECT_TYPE_ID  and
      taskinst.TASK_TYPE = tasks.TASK_TYPE and
      taskinst.TASK_ID   = tasks.TASK_ID and taskinst.WORKFLOW_ID = wflow_or_wklet.TASK_ID
and taskinst.VERSION_NUMBER = wflow_or_wklet.VERSION_NUMBER
and wflow_or_wklet.IS_VISIBLE = 1
and wflow_or_wklet.TASK_TYPE IN (70,71)
and
      taskinst.TASK_TYPE = tasks.TASK_TYPE and
      tasks.IS_REUSABLE = 1 and tasks.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_TGT_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_TGT_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_TGT_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_TGT_FLDR]
AS 
select ' ' "REPOSITORY_ID",
'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
       'Folder' + '_' + ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.TargetDefinition' "TO_CLASS_ID", 
       'Target Definition_'+ ltrim(str(targ.TARGET_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       FROM 
OPB_TARG targ, 
OPB_SUBJECT subj
WHERE
subj.SUBJ_ID = targ.SUBJ_ID
and targ.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_TGTFLDS_TGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_TGTFLDS_TGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_TGTFLDS_TGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_TGTFLDS_TGTS]
AS
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.TargetDefinition'  "FROM_CLASS_ID",
  'Target Definition_'+ ltrim(str(targ.TARGET_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
'com.informatica.powercenter.map.TargetDefinitionPort' "TO_CLASS_ID",
  'Target Definition_' + 'Field_' + ltrim(str(targ.TARGET_ID)) + '_' + ltrim(str(fld.FLDID)) "TO_ELEMENT_ID" ,
  ' ' "TO_REPO_ID",
  'org.omg.cwm.objectmodel.core.ClassifierFeature' "ASSOCIATION_ID",
  fld.FLDNO "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  targ.SUBJ_ID "SRC_SUBJECT_ID",
targ.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
  OPB_TARG targ,
  OPB_TARG_FLD fld
WHERE 
  fld.TARGET_ID = targ.TARGET_ID and fld.VERSION_NUMBER = targ.VERSION_NUMBER
and targ.IS_VISIBLE = 1
AND
  NOT EXISTS    
  (SELECT NULL
   FROM 
   OPB_SHORTCUT scut   
   WHERE     
   scut.SUBJECT_ID = targ.SUBJ_ID AND
   scut.OBJECT_SUBTYPE = 2 AND
   scut.OBJECT_ID = targ.TARGET_ID AND scut.IS_VISIBLE = 1  )
GO

GO
--SqlScripter----[dbo].[V_ASC_TGTINST_TGT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_TGTINST_TGT]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_TGTINST_TGT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_TGTINST_TGT]
AS 
SELECT 
  ' ' "REPOSITORY_ID",
   'com.informatica.powercenter.map.TargetDefinition' "FROM_CLASS_ID",
  'Target Definition_' +ltrim(str(winst.WIDGET_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
 'com.informatica.powercenter.map.TargetDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_' +   ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
targ.SUBJ_ID "SRC_SUBJECT_ID",
targ.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_MAPPING map,
  OPB_TARG targ
WHERE 
  winst.WIDGET_ID = targ.TARGET_ID and
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and targ.IS_VISIBLE = 1
and map.IS_VISIBLE = 1
AND  targ.SUBJ_ID = map.SUBJECT_ID AND
  winst.WIDGET_TYPE = 2 AND
   NOT EXISTS (SELECT NULL
             FROM
               OPB_SHORTCUT scut
             WHERE scut.SUBJECT_ID = targ.SUBJ_ID AND
                   scut.OBJECT_SUBTYPE = 2 AND
                   scut.OBJECT_ID = winst.WIDGET_ID AND scut.IS_VISIBLE = 1)
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
   'com.informatica.powercenter.map.TargetDefinitionShortcut' "FROM_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_'+ shcut.REPOSITORY_NAME +'_Target Definition_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
   'com.informatica.powercenter.map.TargetDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_' +   ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_TARG targ,
  OPB_SHORTCUT shcut,
  OPB_MAPPING map
WHERE 
  winst.WIDGET_ID = targ.TARGET_ID  AND
  winst.WIDGET_TYPE = 2 AND
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and targ.IS_VISIBLE = 1
and map.IS_VISIBLE = 1
AND
  shcut.OBJECT_SUBTYPE = 2 AND
  shcut.OBJECT_ID = winst.WIDGET_ID AND
  shcut.SUBJECT_ID = map.SUBJECT_ID AND shcut.IS_VISIBLE = 1 AND
  shcut.OBJECT_ID >= 0
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
   'com.informatica.powercenter.map.TargetDefinitionShortcut' "FROM_CLASS_ID", 
  'SHORTCUT_TO_' + 'PC_'+ shcut.REPOSITORY_NAME +'_Target Definition_'+ ltrim(str(map.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str((winst.WIDGET_ID + 2147483649))) "FROM_ELEMENT_ID", 
  ' ' "FROM_REPO_ID",
   'com.informatica.powercenter.map.TargetDefinitionInstance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_' +   ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_MAPPING map,
  OPB_SHORTCUT shcut
WHERE 
  winst.WIDGET_TYPE = 2 and
  winst.WIDGET_ID < 0 and
  map.MAPPING_ID = winst.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
and
  shcut.OBJECT_SUBTYPE = 2 AND
  shcut.OBJECT_ID = winst.WIDGET_ID AND shcut.IS_VISIBLE = 1 AND
  shcut.SUBJECT_ID = map.SUBJECT_ID
GO

GO
--SqlScripter----[dbo].[V_ASC_WDG_FLDR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WDG_FLDR]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WDG_FLDR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WDG_FLDR]
AS 
select ' ' "REPOSITORY_ID", 
	   'com.informatica.powercenter.package.Folder' "FROM_CLASS_ID", 
'Folder' +'_'+ ltrim(str(subj.SUBJ_ID)) "FROM_ELEMENT_ID",  ' ' "FROM_REPO_ID", 
'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TO_CLASS_ID", otype.OBJECT_TYPE_NAME+'_'+ ltrim(str(widget.WIDGET_ID)) "TO_ELEMENT_ID", ' ' "TO_REPO_ID", 
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	    ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
subj.SUBJ_ID "SRC_SUBJECT_ID",
subj.SUBJ_ID "TGT_SUBJECT_ID"
       FROM 
OPB_WIDGET widget, 
OPB_OBJECT_TYPE otype, 
OPB_SUBJECT subj
WHERE 
otype.OBJECT_TYPE_ID = widget.WIDGET_TYPE 
and widget.IS_REUSABLE = 1
and subj.SUBJ_ID = widget.SUBJECT_ID 
and widget.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_WDGINST_WDG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WDGINST_WDG]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WDGINST_WDG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WDGINST_WDG]
AS 
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "FROM_CLASS_ID",
  otype.OBJECT_TYPE_NAME +'_' +ltrim(str(winst.WIDGET_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Instance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
widget.SUBJECT_ID "SRC_SUBJECT_ID",
widget.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET widget,
  OPB_MAPPING map
WHERE 
  winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID and
  winst.WIDGET_ID = widget.WIDGET_ID and
  winst.WIDGET_TYPE = widget.WIDGET_TYPE and
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and widget.IS_VISIBLE = 1
and map.IS_VISIBLE = 1
AND
  widget.SUBJECT_ID = map. SUBJECT_ID and
  widget.IS_REUSABLE = 1 and
  NOT EXISTS 
  ( SELECT NULL
FROM 
  OPB_SHORTCUT scut
WHERE 
  scut.SUBJECT_ID = widget.SUBJECT_ID AND
  scut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID AND
  scut.OBJECT_ID = winst.WIDGET_ID AND scut.IS_VISIBLE = 1)
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "FROM_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' + + shcut.REPOSITORY_NAME +'_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Instance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_OBJECT_TYPE otype,
  OPB_SHORTCUT shcut,
  OPB_MAPPING map,
  OPB_WIDGET widg
WHERE 
  winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID and
  widg.WIDGET_ID = winst.WIDGET_ID AND
  widg.WIDGET_TYPE = winst.WIDGET_TYPE AND
  shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID AND
  shcut.OBJECT_ID = winst.WIDGET_ID and
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and widg.IS_VISIBLE = 1
and map.IS_VISIBLE = 1
AND
  shcut.SUBJECT_ID = map. SUBJECT_ID and
  shcut.OBJECT_ID >= 0 and shcut.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "FROM_CLASS_ID",
  'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_' + otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(map.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str((winst.WIDGET_ID + 2147483649))) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
  'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'Instance' "TO_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "TO_ELEMENT_ID",
  ' ' "TO_REPO_ID",
  'com.informatica.cwmx.reuse.ClassReuse' "ASSOCIATION_ID",
  1 "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
shcut.SUBJECT_ID "SRC_SUBJECT_ID",
shcut.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_INST winst,
  OPB_OBJECT_TYPE otype,
  OPB_MAPPING map,
  OPB_SHORTCUT shcut
WHERE 
  winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID and
  winst.WIDGET_TYPE NOT IN (1,2) and
  map.MAPPING_ID = winst.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
and
  winst.WIDGET_ID < 0   and
  shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID AND
  shcut.OBJECT_ID = winst.WIDGET_ID and
  shcut.SUBJECT_ID = map. SUBJECT_ID and shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ASC_WFLDS_WDGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WFLDS_WDGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WFLDS_WDGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WFLDS_WDGTS]
AS 
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')   "FROM_CLASS_ID",
  otype.OBJECT_TYPE_NAME +'_'+ ltrim(str(widget.WIDGET_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') + 'Port' "TO_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(widget.WIDGET_ID)) + '_' + ltrim(str(fld.FIELD_ID)) "TO_ELEMENT_ID" ,
  ' ' "TO_REPO_ID",
  'org.omg.cwm.objectmodel.core.ClassifierFeature' "ASSOCIATION_ID",
  fld.FIELD_ORDER "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
widget.SUBJECT_ID "SRC_SUBJECT_ID",
widget.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET widget,
  OPB_WIDGET_FIELD fld,
  OPB_OBJECT_TYPE otype
WHERE 
  otype.OBJECT_TYPE_ID = widget.WIDGET_TYPE and
  fld.WIDGET_ID = widget.WIDGET_ID and fld.VERSION_NUMBER = widget.VERSION_NUMBER
and widget.IS_VISIBLE = 1
and
  widget.IS_REUSABLE = 1 AND
  NOT EXISTS   
  (SELECT NULL 
   FROM OPB_SHORTCUT scut
   WHERE 
   scut.SUBJECT_ID = widget.SUBJECT_ID AND
   scut.OBJECT_SUBTYPE = widget.WIDGET_TYPE AND
   scut.OBJECT_ID = widget.WIDGET_ID AND scut.IS_VISIBLE = 1)
UNION ALL
SELECT 
  ' ' "REPOSITORY_ID",
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance'    "FROM_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_'+ ltrim(str(winst.INSTANCE_ID)) "FROM_ELEMENT_ID",
  ' ' "FROM_REPO_ID",
'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "TO_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(widget.WIDGET_ID)) + '_' + ltrim(str(fld.FIELD_ID)) "TO_ELEMENT_ID" ,
  ' ' "TO_REPO_ID",
  'org.omg.cwm.objectmodel.core.ClassifierFeature' "ASSOCIATION_ID",
  fld.FIELD_ORDER "ASSOCIATION_SEQ",
  'N' "HIDDEN_FLAG",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
widget.SUBJECT_ID "SRC_SUBJECT_ID",
widget.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET widget,
  OPB_WIDGET_FIELD fld,
  OPB_WIDGET_INST winst, OPB_MAPPING map,
  OPB_OBJECT_TYPE otype
WHERE 
  otype.OBJECT_TYPE_ID = widget.WIDGET_TYPE and
  fld.WIDGET_ID = widget.WIDGET_ID and fld.VERSION_NUMBER = widget.VERSION_NUMBER
and widget.IS_VISIBLE = 1
and
  winst.WIDGET_TYPE = widget.WIDGET_TYPE and  
  winst.WIDGET_ID = widget.WIDGET_ID and winst.MAPPING_ID = map.MAPPING_ID
and winst.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
and
  widget.IS_REUSABLE = 0
GO

GO
--SqlScripter----[dbo].[V_ASC_WFLOW_SRVC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WFLOW_SRVC]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WFLOW_SRVC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WFLOW_SRVC]
AS
select ' ' "REPOSITORY_ID",
'com.informatica.powercenter.deployment.IntegrationService' "FROM_CLASS_ID",
       'Integration Service_' + ltrim(str(workflow.SERVER_ID)) "FROM_ELEMENT_ID",
' ' "FROM_REPO_ID",
       'com.informatica.powercenter.process.Workflow' "TO_CLASS_ID",
       'Workflow_' + ltrim(str(workflow.WORKFLOW_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID",
	   'com.informatica.powercenter.operation.WorkflowRunsOnService' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ",
           'N' "HIDDEN_FLAG", 
	     '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	     task.SUBJECT_ID "SRC_SUBJECT_ID",
	task.SUBJECT_ID "TGT_SUBJECT_ID"
       from V_ELMNT_SERVICE server, OPB_WORKFLOW workflow, OPB_TASK task
	   where 
                 workflow.WORKFLOW_ID = task.TASK_ID and workflow.VERSION_NUMBER = task.VERSION_NUMBER
and task.IS_VISIBLE = 1
and
                 71 = task.TASK_TYPE 
AND workflow.SERVER_ID <> 0 AND
workflow.SERVER_ID =server.SERVER_ID
GO

GO
--SqlScripter----[dbo].[V_ASC_WFLOW_T_INST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WFLOW_T_INST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WFLOW_T_INST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WFLOW_T_INST]
AS 
select ' ' "REPOSITORY_ID",
	 'com.informatica.powercenter.process.Workflow' "FROM_CLASS_ID", 
       'Workflow_' + ltrim(str(workflow.WORKFLOW_ID)) "FROM_ELEMENT_ID",  
' ' "FROM_REPO_ID", 
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "TO_CLASS_ID", 
       'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinstance.INSTANCE_ID)) "TO_ELEMENT_ID",
' ' "TO_REPO_ID",
	   'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	    1 "ASSOCIATION_SEQ", 
         'N' "HIDDEN_FLAG", 
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
       from OPB_TASK_INST taskinstance, OPB_OBJECT_TYPE otype, OPB_TASK task,
     	    OPB_WORKFLOW workflow
	   where otype.OBJECT_TYPE_ID = taskinstance.TASK_TYPE and 
                 workflow.WORKFLOW_ID = taskinstance.WORKFLOW_ID and 
workflow.VERSION_NUMBER = taskinstance.VERSION_NUMBER and                 task.TASK_ID = workflow.WORKFLOW_ID and
                 task.TASK_TYPE = 71 and task.IS_VISIBLE = 1 and task.VERSION_NUMBER = workflow.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[V_ASC_WLET_T_INST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WLET_T_INST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WLET_T_INST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WLET_T_INST]
AS 
select 
  ' '                                                                    "REPOSITORY_ID",
  'com.informatica.powercenter.process.Worklet'               "FROM_CLASS_ID",
  'Worklet_' + ltrim(str(workflow.WORKFLOW_ID))                             "FROM_ELEMENT_ID",  
  ' '                                                                    "FROM_REPO_ID", 
  'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "TO_CLASS_ID", 
  'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinstance.INSTANCE_ID))       "TO_ELEMENT_ID",
  ' '                                                                    "TO_REPO_ID", 
  'org.omg.cwm.objectmodel.core.ElementOwnership'                                              "ASSOCIATION_ID",
  1                                                                                            "ASSOCIATION_SEQ", 
  'N'                                                                                          "HIDDEN_FLAG", 
  ''                                                                                           "EFF_FROM_DT",
  ''                                                                                           "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
from 
  OPB_TASK_INST taskinstance, 
  OPB_OBJECT_TYPE otype, 
  OPB_TASK task,
  OPB_WORKFLOW workflow
where 
  otype.OBJECT_TYPE_ID = taskinstance.TASK_TYPE and 
  workflow.WORKFLOW_ID = taskinstance.WORKFLOW_ID and
  workflow.VERSION_NUMBER = taskinstance.VERSION_NUMBER and
  task.TASK_ID = workflow.WORKFLOW_ID and
  task.TASK_TYPE = 70 and 
  task.IS_VISIBLE = 1 and 
  task.IS_REUSABLE = 1 and 
  task.VERSION_NUMBER = workflow.VERSION_NUMBER
UNION ALL
select 
  ' '                                                                         "REPOSITORY_ID",
  'com.informatica.powercenter.process.WorkletTaskInstance'   "FROM_CLASS_ID",
  'TASK_INSTANCE_Worklet_' + ltrim(str(wletinstance.INSTANCE_ID))           "FROM_ELEMENT_ID",  
  ' '                                                                         "FROM_REPO_ID", 
  'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance'      "TO_CLASS_ID", 
  'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinstance.INSTANCE_ID))            "TO_ELEMENT_ID",
  ' '                                                                         "TO_REPO_ID", 
  'org.omg.cwm.objectmodel.core.ElementOwnership'                                                   "ASSOCIATION_ID",
  1                                                                                                 "ASSOCIATION_SEQ", 
  'N'                                                                                               "HIDDEN_FLAG", 
  ''                                                                                                "EFF_FROM_DT",
  ''                                                                                                "EFF_TO_DT",
task.SUBJECT_ID "SRC_SUBJECT_ID",
task.SUBJECT_ID "TGT_SUBJECT_ID"
from 	
  OPB_TASK_INST taskinstance,
  OPB_OBJECT_TYPE otype, 
  OPB_TASK task,
  OPB_TASK_INST wletinstance
where 
  otype.OBJECT_TYPE_ID = taskinstance.TASK_TYPE and 
  wletinstance.TASK_ID = taskinstance.WORKFLOW_ID and
  task.TASK_ID = wletinstance.TASK_ID and
  task.TASK_TYPE = 70 AND
  task.IS_REUSABLE = 0 and 
  task.IS_VISIBLE = 1 and 
  task.VERSION_NUMBER = taskinstance.VERSION_NUMBER AND
  task.VERSION_NUMBER = wletinstance.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[V_ASC_WSRCTGT_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ASC_WSRCTGT_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[V_ASC_WSRCTGT_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ASC_WSRCTGT_MAP]
AS 
SELECT ' ' "REPOSITORY_ID",
	  'com.informatica.powercenter.map.Mapping' "FROM_CLASS_ID",
       'Mapping_' + ltrim(str(mapping.MAPPING_ID)) "FROM_ELEMENT_ID",
       ' ' "FROM_REPO_ID",
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TO_CLASS_ID",
       'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' +
       ltrim(str(mapping.MAPPING_ID)) + '_' +
       ltrim(str(widgetinstance.INSTANCE_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID",
	     'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	     1 "ASSOCIATION_SEQ",
         'N' "HIDDEN_FLAG", 
	    '' "EFF_FROM_DT",  '' "EFF_TO_DT",
mapping.SUBJECT_ID "SRC_SUBJECT_ID",
mapping.SUBJECT_ID "TGT_SUBJECT_ID"
       FROM OPB_WIDGET_INST widgetinstance, OPB_OBJECT_TYPE otype, 
     	   OPB_MAPPING mapping
	     WHERE otype.OBJECT_TYPE_ID = widgetinstance.WIDGET_TYPE AND 
		   mapping.MAPPING_ID = widgetinstance.MAPPING_ID AND mapping.VERSION_NUMBER = widgetinstance.VERSION_NUMBER
	AND mapping.IS_VISIBLE = 1
AND
			   mapping.REF_WIDGET_ID = 0
UNION ALL
SELECT ' ' "REPOSITORY_ID",
	  'com.informatica.powercenter.map.Mapplet' "FROM_CLASS_ID",
       'Mapplet_' + ltrim(str(mapping.REF_WIDGET_ID)) "FROM_ELEMENT_ID",
       ' ' "FROM_REPO_ID",
       'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TO_CLASS_ID",
       'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' +
       ltrim(str(mapping.MAPPING_ID)) + '_' +
       ltrim(str(widgetinstance.INSTANCE_ID)) "TO_ELEMENT_ID",
       ' ' "TO_REPO_ID",
	     'org.omg.cwm.objectmodel.core.ElementOwnership' "ASSOCIATION_ID",
	     1 "ASSOCIATION_SEQ",
         'N' "HIDDEN_FLAG", 
	     '' "EFF_FROM_DT",  '' "EFF_TO_DT",
mapping.SUBJECT_ID "SRC_SUBJECT_ID",
mapping.SUBJECT_ID "TGT_SUBJECT_ID"
       FROM OPB_WIDGET_INST widgetinstance, OPB_OBJECT_TYPE otype, 
     	    OPB_MAPPING mapping
	     WHERE otype.OBJECT_TYPE_ID = widgetinstance.WIDGET_TYPE AND 
			   mapping.MAPPING_ID = widgetinstance.MAPPING_ID AND mapping.VERSION_NUMBER = widgetinstance.VERSION_NUMBER
AND mapping.IS_VISIBLE = 1
AND
			   mapping.REF_WIDGET_ID <> 0
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_MAPPINGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_MAPPINGS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_MAPPINGS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_MAPPINGS]
AS
SELECT 
  map.MAPPING_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(map.MAPPING_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  map.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_MAPPING map
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 21 AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaval.OBJECT_ID = map.MAPPING_ID and metaval.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1 AND map.REF_WIDGET_ID=0
UNION ALL
SELECT 
  map.MAPPING_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(map.MAPPING_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  map.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_MAPPING map
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 21 AND
  metaext.LINE_NO = 1
 and map.IS_VISIBLE = 1 and map.REF_WIDGET_ID=0
and NOT EXISTS
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE metaval.OBJECT_ID = map.MAPPING_ID 
and metaval.OBJECT_TYPE = 21 and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_SESSINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_SESSINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_SESSINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_SESSINST]
AS
SELECT 
  tinst.INSTANCE_NAME,
  '' "REPOSITORY_ID",
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "ELEMENT_CLASS_ID",
  'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tinst.INSTANCE_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  task.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TASK_INST tinst, OPB_TASK wkflow_or_wklet,
OPB_TASK task
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tinst.TASK_TYPE AND
  tinst.TASK_TYPE = 68 AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaval.OBJECT_ID = tinst.TASK_ID and metaval.VERSION_NUMBER = task.VERSION_NUMBER
and metaval.OBJECT_TYPE = task.TASK_TYPE
and tinst.TASK_ID = task.TASK_ID
and tinst.TASK_TYPE = task.TASK_TYPE
and task.IS_VISIBLE = 1
and tinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID
and tinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER
and wkflow_or_wklet.TASK_TYPE in (70,71)
and wkflow_or_wklet.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1
UNION ALL  
SELECT 
  tinst.INSTANCE_NAME,
  '' "REPOSITORY_ID",
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "ELEMENT_CLASS_ID",
  'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tinst.INSTANCE_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  task.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_TASK_INST tinst, OPB_TASK wkflow_or_wklet,
OPB_TASK task
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tinst.TASK_TYPE AND
  tinst.TASK_TYPE = 68 AND
  metaext.LINE_NO = 1
  and tinst.TASK_ID = task.TASK_ID
and tinst.TASK_TYPE = task.TASK_TYPE
and task.IS_VISIBLE = 1
and tinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID
and tinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER
and wkflow_or_wklet.TASK_TYPE in (70,71)
and wkflow_or_wklet.IS_VISIBLE = 1
and NOT EXISTS
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE metaval.OBJECT_ID = tinst.TASK_ID
and metaval.OBJECT_TYPE = tinst.TASK_TYPE and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_SRCS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_SRCS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_SRCS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_SRCS]
AS	  
SELECT 
  src.SOURCE_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(src.SRC_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  src.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_SRC src,
  OPB_MMD_DBTYPE mtype,
  OPB_DBD dbd
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 1 AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaext.DBTYPE = mtype.DBTYPE_ID AND
  metaval.OBJECT_ID = src.SRC_ID and metaval.VERSION_NUMBER = src.VERSION_NUMBER
and src.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1 AND
  dbd.DBDID = src.DBDID and dbd.VERSION_NUMBER = src.VERSION_NUMBER AND
  mtype.DBTYPE_ID = dbd.DBTYPE
UNION ALL
SELECT 
  src.SOURCE_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(src.SRC_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  src.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_SRC src,
  OPB_MMD_DBTYPE mtype,
  OPB_DBD dbd
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 1 AND
  metaext.DBTYPE = mtype.DBTYPE_ID AND
  metaext.LINE_NO = 1
  and NOT EXISTS
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE metaval.OBJECT_ID = src.SRC_ID
and metaval.OBJECT_TYPE = 1 and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME) 
and dbd.DBDID = src.DBDID 
and dbd.VERSION_NUMBER = src.VERSION_NUMBER
and src.IS_VISIBLE = 1
and mtype.DBTYPE_ID = dbd.DBTYPE
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_TASK].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_TASK]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_TASK] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_TASK]
AS
SELECT 
  tasks.TASK_NAME,
  '' "REPOSITORY_ID",
   'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tasks.TASK_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  tasks.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TASK tasks
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tasks.TASK_TYPE AND
  tasks.TASK_TYPE IN (68, 70, 71) AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaval.OBJECT_ID = tasks.TASK_ID and metaval.VERSION_NUMBER = tasks.VERSION_NUMBER
and tasks.IS_VISIBLE = 1
AND  tasks.IS_REUSABLE = 1 AND
  metaval.LINE_NO = 1
UNION ALL
SELECT 
  tasks.TASK_NAME,
  '' "REPOSITORY_ID",
   'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tasks.TASK_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  tasks.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_TASK tasks
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tasks.TASK_TYPE AND
  tasks.TASK_TYPE IN (68, 70, 71) AND
  metaext.LINE_NO = 1 AND
  tasks.IS_REUSABLE = 1 and tasks.IS_VISIBLE = 1
and NOT EXISTS
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE metaval.OBJECT_ID = tasks.TASK_ID
and metaval.OBJECT_TYPE = tasks.TASK_TYPE and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_TGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_TGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_TGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_TGTS]
AS
SELECT 
  targ.TARGET_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(targ.TARGET_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  targ.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TARG targ
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 2 AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaext.DBTYPE = targ.DBTYPE AND
  metaval.OBJECT_ID = targ.TARGET_ID and metaval.VERSION_NUMBER = targ.VERSION_NUMBER
and targ.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1
UNION ALL
SELECT 
  targ.TARGET_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(targ.TARGET_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  targ.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_TARG targ
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = 2 AND
  metaext.DBTYPE = targ.DBTYPE AND
  metaext.LINE_NO = 1 and targ.IS_VISIBLE = 1
and NOT EXISTS
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE 
metaval.OBJECT_ID = targ.TARGET_ID
and metaval.OBJECT_TYPE = 2 and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_WDGINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_WDGINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_WDGINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_WDGINST]
AS
SELECT 
  winst.INSTANCE_NAME,
  '' "REPOSITORY_ID",
   'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "ELEMENT_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  map.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST winst,OPB_MAPPING map,
	OPB_WIDGET widget
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = winst.WIDGET_TYPE AND
  winst.WIDGET_TYPE NOT IN (1, 2) AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  metaval.OBJECT_ID = winst.WIDGET_ID and metaval.VERSION_NUMBER = widget.VERSION_NUMBER AND
  ((metaext.OBJECT_TYPE != 97 ) OR ( metaext.OBJECT_TYPE = 97 and widget.TEMPLATE_ID =metaext.SUBTYPE ))
and metaval.OBJECT_TYPE = widget.WIDGET_TYPE
and winst.WIDGET_ID = widget.WIDGET_ID
and winst.WIDGET_TYPE = widget.WIDGET_TYPE
and widget.IS_VISIBLE = 1
and winst.MAPPING_ID = map.MAPPING_ID
and winst.VERSION_NUMBER = map.VERSION_NUMBER
and metaval.PM_VALUE not like '<?xml%' and metaval.METAEXT_NAME != 'ComponentConfiguration'
and map.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1
UNION ALL  
SELECT 
  winst.INSTANCE_NAME,
  '' "REPOSITORY_ID",
   'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "ELEMENT_CLASS_ID",
  'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  map.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST winst,OPB_MAPPING map,
OPB_WIDGET widget
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  ((metaext.OBJECT_TYPE != 97 ) OR ( metaext.OBJECT_TYPE = 97 and widget.TEMPLATE_ID =metaext.SUBTYPE )) AND
  otype.OBJECT_TYPE_ID = winst.WIDGET_TYPE AND
  winst.WIDGET_TYPE NOT IN (1, 2) AND
  metaext.LINE_NO = 1
  and winst.MAPPING_ID = map.MAPPING_ID
and winst.VERSION_NUMBER = map.VERSION_NUMBER
and map.IS_VISIBLE = 1
and winst.WIDGET_ID = widget.WIDGET_ID
and winst.WIDGET_TYPE = widget.WIDGET_TYPE
and widget.IS_VISIBLE = 1
and NOT EXISTS
(SELECT metaval.OBJECT_ID
  FROM OPB_METAEXT_VAL metaval
  WHERE metaval.OBJECT_ID = winst.WIDGET_ID
  and metaval.OBJECT_TYPE = winst.WIDGET_TYPE  and
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTR_RMETVAL_WDGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTR_RMETVAL_WDGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTR_RMETVAL_WDGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTR_RMETVAL_WDGTS]
AS
SELECT 
  wdg.WIDGET_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(wdg.WIDGET_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET wdg
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = wdg.WIDGET_TYPE AND
  metaext.VENDOR_ID = metaval.VENDOR_ID AND
  metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
  metaext.METAEXT_NAME = metaval.METAEXT_NAME AND
  metaext.OBJECT_TYPE = metaval.OBJECT_TYPE AND
  ((metaext.OBJECT_TYPE != 97 ) OR ( metaext.OBJECT_TYPE = 97 and wdg.TEMPLATE_ID =metaext.SUBTYPE )) AND
  metaval.OBJECT_ID = wdg.WIDGET_ID and metaval.VERSION_NUMBER = wdg.VERSION_NUMBER
and wdg.IS_VISIBLE = 1
AND  wdg.IS_REUSABLE = 1 AND
  metaval.LINE_NO = 1
UNION ALL
SELECT 
  wdg.WIDGET_NAME,
  '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(wdg.WIDGET_ID)) "ELEMENT_ID",
  'REPOSITORY' "SCOPE_TYPE",
  metaext.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaext.DEFAULT_VALUE  "ELMNT_ATTR_VALUE",
  metaext.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaext.DATA_TYPE = 1 THEN 'Integer' ELSE
  (CASE WHEN metaext.DATA_TYPE = 2 THEN 'String' ELSE
  (CASE WHEN metaext.DATA_TYPE=3 THEN 'Boolean' ELSE 
  (CASE WHEN metaext.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  '' "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  '' "EFF_FROM_DT",
  '' "EFF_TO_DT",
  wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_MMD_METAEXT metaext,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET wdg
WHERE 
  metaext.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = wdg.WIDGET_TYPE AND
 ((metaext.OBJECT_TYPE != 97 ) OR ( metaext.OBJECT_TYPE = 97 and wdg.TEMPLATE_ID =metaext.SUBTYPE )) AND
  metaext.LINE_NO = 1 AND
  wdg.IS_REUSABLE = 1 and wdg.IS_VISIBLE = 1
and NOT EXISTS 
(SELECT metaval.OBJECT_ID
FROM OPB_METAEXT_VAL metaval
WHERE metaval.OBJECT_ID = wdg.WIDGET_ID 
and metaval.OBJECT_TYPE = wdg.WIDGET_TYPE and 
	metaext.METAEXT_NAME  = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_METVAL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_METVAL]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_METVAL] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_METVAL]
AS 
SELECT '' "REPOSITORY_ID",
   'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(metaval.OBJECT_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  widget.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET widget
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  widget.WIDGET_TYPE NOT IN (1, 2) AND 
  metaval.LINE_NO = 1	AND    
  widget.IS_REUSABLE = 1 AND
  metaval.OBJECT_TYPE = widget.WIDGET_TYPE AND
  metaval.OBJECT_ID = widget.WIDGET_ID and metaval.VERSION_NUMBER = widget.VERSION_NUMBER
and widget.IS_VISIBLE = 1
  AND NOT EXISTS
    (SELECT NULL
	 FROM OPB_MMD_METAEXT metaext
	 WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
	   metaext.METAEXT_NAME = metaval.METAEXT_NAME)
UNION ALL
SELECT '' "REPOSITORY_ID",
   'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "ELEMENT_CLASS_ID",
  'WIDGET_INSTANCE_'+ otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_' + ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  map.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET widget,
  OPB_WIDGET_INST winst,
  OPB_MAPPING map
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  widget.WIDGET_TYPE NOT IN (1, 2) AND 
  metaval.LINE_NO = 1	AND    
  widget.IS_REUSABLE = 0 AND
  metaval.OBJECT_ID = widget.WIDGET_ID  AND
  widget.WIDGET_ID = winst.WIDGET_ID  and metaval.VERSION_NUMBER = widget.VERSION_NUMBER
and widget.IS_VISIBLE = 1
AND  metaval.OBJECT_TYPE = widget.WIDGET_TYPE AND
  widget.WIDGET_TYPE = winst.WIDGET_TYPE AND
  winst.MAPPING_ID = map.MAPPING_ID and winst.VERSION_NUMBER = map.VERSION_NUMBER
  and metaval.PM_VALUE not like '<?xml%' and metaval.METAEXT_NAME != 'ComponentConfiguration'
and map.IS_VISIBLE = 1
  AND NOT EXISTS
    (SELECT NULL
	 FROM OPB_MMD_METAEXT metaext
	 WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
	   metaext.METAEXT_NAME = metaval.METAEXT_NAME)
UNION ALL
SELECT '' "REPOSITORY_ID",
   'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tasks.TASK_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  tasks.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TASK tasks 
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tasks.TASK_TYPE AND
  tasks.TASK_TYPE IN (68, 70, 71) AND
  metaval.LINE_NO = 1 AND
  tasks.IS_REUSABLE = 1 AND
  metaval.OBJECT_ID = tasks.TASK_ID and metaval.VERSION_NUMBER = tasks.VERSION_NUMBER
and tasks.IS_VISIBLE = 1
AND   metaval.OBJECT_TYPE =  TASK_TYPE   AND NOT EXISTS
    (SELECT NULL
         FROM OPB_MMD_METAEXT metaext
	     WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND
         metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
         metaext.METAEXT_NAME = metaval.METAEXT_NAME)
UNION ALL
SELECT '' "REPOSITORY_ID",
  'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "ELEMENT_CLASS_ID",
  'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tinst.INSTANCE_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  tasks.SUBJECT_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TASK_INST tinst ,
  OPB_TASK tasks, OPB_TASK wkflow_or_wklet
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  otype.OBJECT_TYPE_ID = tinst.TASK_TYPE AND
  tasks.TASK_ID = tinst.TASK_ID AND
  tasks.IS_REUSABLE = 0 AND
  tinst.TASK_TYPE = 68 AND
  metaval.OBJECT_ID = tinst.TASK_ID and metaval.VERSION_NUMBER = tasks.VERSION_NUMBER
and tasks.TASK_TYPE = tinst.TASK_TYPE
and tasks.IS_VISIBLE = 1
and tinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID
and tinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER
and wkflow_or_wklet.TASK_TYPE in (70,71)
and wkflow_or_wklet.IS_VISIBLE = 1
AND  metaval.LINE_NO = 1		 AND
  metaval.OBJECT_TYPE =  tinst.TASK_TYPE   AND NOT EXISTS
    (SELECT NULL
         FROM OPB_MMD_METAEXT metaext
	     WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND
         metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
         metaext.METAEXT_NAME = metaval.METAEXT_NAME)
UNION ALL
SELECT '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(src.SRC_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  src.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_SRC src
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  metaval.OBJECT_TYPE = 1 AND 
  metaval.LINE_NO = 1	AND    
  metaval.OBJECT_ID = src.SRC_ID and metaval.VERSION_NUMBER = src.VERSION_NUMBER
and src.IS_VISIBLE = 1
AND NOT EXISTS
  (SELECT NULL
         FROM OPB_MMD_METAEXT metaext
	     WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND
         metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
         metaext.METAEXT_NAME = metaval.METAEXT_NAME)
UNION ALL
SELECT '' "REPOSITORY_ID",
  'com.informatica.powercenter.map.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + ltrim(str(targ.TARGET_ID)) "ELEMENT_ID",
  'ELEMENT' "SCOPE_TYPE",
  metaval.METAEXT_NAME "ELMNT_ATTR_NAME",
  metaval.PM_VALUE  "ELMNT_ATTR_VALUE",
  metaval.METAEXT_DESC "ELMNT_ATTR_DESC",
  (CASE WHEN metaval.DATA_TYPE = 1 THEN 'Integer' ELSE
    (CASE WHEN metaval.DATA_TYPE = 2 THEN 'String' ELSE
	(CASE WHEN metaval.DATA_TYPE=3 THEN 'Boolean' ELSE 
        (CASE WHEN metaval.DATA_TYPE=4 THEN 'XML' ELSE '' END) END) END) END) "DATA_TYPE",
  ''   "SRC_CREATE_DT",
  '' "SRC_UPDATE_DT",
  ''   "EFF_FROM_DT",
  '' "EFF_TO_DT",
  targ.SUBJ_ID "SUBJECT_ID"
FROM 
  OPB_METAEXT_VAL metaval,
  OPB_OBJECT_TYPE otype,
  OPB_TARG targ
WHERE 
  metaval.OBJECT_TYPE = otype.OBJECT_TYPE_ID AND
  metaval.OBJECT_TYPE = 2 AND 
  metaval.LINE_NO = 1	AND    
  metaval.OBJECT_ID = targ.TARGET_ID and metaval.VERSION_NUMBER = targ.VERSION_NUMBER
and targ.IS_VISIBLE = 1
AND NOT EXISTS
  (SELECT NULL
         FROM OPB_MMD_METAEXT metaext
	     WHERE metaext.VENDOR_ID = metaval.VENDOR_ID AND
         metaext.DOMAIN_ID = metaval.DOMAIN_ID AND
         metaext.METAEXT_NAME = metaval.METAEXT_NAME)
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_RMETVAL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_RMETVAL]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_RMETVAL] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_RMETVAL]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_SRCS
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_TGTS
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_MAPPINGS
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_WDGTS
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_WDGINST
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_TASK
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT, SUBJECT_ID
from  V_ATTR_RMETVAL_SESSINST
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_SRCFLD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_SRCFLD]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_SRCFLD] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_SRCFLD]
AS
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'dataType' "ELMNT_ATTR_NAME",
       CASE WHEN dtype1.DTYPE_NAME is not null THEN dtype1.DTYPE_NAME ELSE dtype2.DTYPE_NAME END "ELMNT_ATTR_VALUE",       
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld,
     OPB_PICDSC picdsc LEFT OUTER JOIN 
     REP_FLD_DATATYPE dtype1 ON dtype1.DTYPE_NUM = picdsc.SRC_NTYPE LEFT OUTER JOIN
     REP_FLD_DATATYPE dtype2 ON dtype2.DTYPE_NUM = picdsc.SRC_TYPE
WHERE 
      src.SRC_ID = srcfld.SRC_ID AND src.VERSION_NUMBER = srcfld.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND      srcfld.PICID = picdsc.PICID AND srcfld.VERSION_NUMBER = picdsc.VERSION_NUMBER 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'precision' "ELMNT_ATTR_NAME",
       ltrim(str(picdsc.SRC_PREC))  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld,
     OPB_PICDSC picdsc
WHERE 
      src.SRC_ID = srcfld.SRC_ID AND src.VERSION_NUMBER = srcfld.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND      srcfld.PICID = picdsc.PICID AND srcfld.VERSION_NUMBER = picdsc.VERSION_NUMBER
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'scale' "ELMNT_ATTR_NAME",
       ltrim(str(picdsc.SRC_SCALE))  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld,
     OPB_PICDSC picdsc
WHERE 
      src.SRC_ID = srcfld.SRC_ID AND  src.VERSION_NUMBER = srcfld.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND     srcfld.PICID = picdsc.PICID AND srcfld.VERSION_NUMBER = picdsc.VERSION_NUMBER
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'GROUP_NAME' "ELMNT_ATTR_NAME",
       tgrp.ATTR_VALUE "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld,
     OPB_TABLE_GROUP tgrp
WHERE 
      tgrp.ATTR_ID = 1 AND
      src.SRC_ID = srcfld.SRC_ID AND src.VERSION_NUMBER = srcfld.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND      tgrp.OBJECT_ID = srcfld.SRC_ID AND
      tgrp.OBJECT_TYPE = 1 AND
      tgrp.GROUP_ID = srcfld.GROUP_ID AND tgrp.VERSION_NUMBER = srcfld.VERSION_NUMBER
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'KEY_TYPE' "ELMNT_ATTR_NAME",
       ktype.KEYTYPE_NAME  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld,
     REP_SRC_KEY_TYPES ktype
WHERE 
      src.SRC_ID = srcfld.SRC_ID AND src.VERSION_NUMBER = srcfld.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND ktype.KEYTYPE_NUM = srcfld.KEYTYPE  
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SourceDefinitionPort' "ELEMENT_CLASS_ID", 
       'Source Definition' + '_' + 'Field_' + ltrim(str(srcfld.SRC_ID)) 
             + '_' + ltrim(str(srcfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'isNullable' "ELMNT_ATTR_NAME",
       CASE WHEN srcfld.NULLTYPE = 0 THEN 'Yes' ELSE 'No' END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       src.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       src.SUBJ_ID "SUBJECT_ID"
FROM OPB_SRC src,
     OPB_SRC_FLD srcfld
WHERE 
      src.SRC_ID = srcfld.SRC_ID AND src.VERSION_NUMBER = srcfld.VERSION_NUMBER
      AND src.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_SRCS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_SRCS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_SRCS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_SRCS]
AS 
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition' + '_' + ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 att.ATTR_NAME "ELMNT_ATTR_NAME", attrval.ATTR_VALUE  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from OPB_WIDGET_ATTR attrval, OPB_ATTR att, OPB_SRC src
	  where 
	  src.SRC_ID = attrval.WIDGET_ID and src.VERSION_NUMBER = attrval.VERSION_NUMBER
and src.IS_VISIBLE = 1
and	    attrval.WIDGET_TYPE = 1 and
			att.ATTR_ID = attrval.ATTR_ID and
			att.OBJECT_TYPE_ID = 1 and 
      attrval.MAPPING_ID = 0 and attrval.INSTANCE_ID = 0
      and attrval.SESSION_ID = 0 and
			attrval.PARTITION_ID = 0 and
			attrval.SESSION_TASK_ID = 0 and attrval.LINE_NO = 1 and
			att.ATTR_ID NOT IN (4, 13, 7, 14, 3, 15, 11, 16)
UNION ALL
SELECT  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition' +'_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'DATABASE_TYPE' "ELMNT_ATTR_NAME", mtype.DBTYPE_NAME  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
    FROM OPB_SRC src, 
         OPB_DBD dbd, OPB_MMD_DBTYPE mtype
	WHERE 
	      dbd.DBDID = src.DBDID AND src.VERSION_NUMBER = dbd.VERSION_NUMBER
AND src.IS_VISIBLE = 1
AND		  mtype.DBTYPE_ID = dbd.DBTYPE
UNION ALL
SELECT  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition' +'_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'DBD_NAME' "ELMNT_ATTR_NAME", dbd.DBDNAM  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
    FROM OPB_SRC src, 
         OPB_DBD dbd
	WHERE 
	      dbd.DBDID = src.DBDID AND src.VERSION_NUMBER = dbd.VERSION_NUMBER
AND src.IS_VISIBLE = 1
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'flatFileType' "ELMNT_ATTR_NAME", 
	 CASE WHEN FILE_PROPERTIES & 128 = 128 THEN 'Delimited' ELSE 'Fixed width' END   "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
			 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1 
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'delimiters' "ELMNT_ATTR_NAME", 
	  STR_DELIMITER   "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
			 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1  AND
	  FILE_PROPERTIES & 128= 128
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'treatConsecutiveDelimitersAsOne' "ELMNT_ATTR_NAME", 
	  CASE WHEN FILE_PROPERTIES & 2= 2 THEN 'Yes' ELSE 'No' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
			 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1  AND
	  FILE_PROPERTIES & 128= 128
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'optionalQuotes' "ELMNT_ATTR_NAME", 
	  CASE OPT_QUOTES WHEN 1 THEN 'Single' WHEN 2 THEN 'Double' ELSE 'None' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
			 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1  AND
	  FILE_PROPERTIES & 128= 128
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'removeEscapeCharFromData' "ELMNT_ATTR_NAME", 
	  CASE WHEN FILE_PROPERTIES & 32 = 32 THEN 'No' ELSE 'Yes' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
			 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1  AND
	  FILE_PROPERTIES & 128= 128
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'numOfInitialRowsToSkip' "ELMNT_ATTR_NAME", 
	  str(ROWS_TO_SKIP)  "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
	  src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1 
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'nullCharTextOrBinary' "ELMNT_ATTR_NAME", 
	  CASE WHEN FILE_PROPERTIES & 1 = 1 THEN 'Binary' ELSE 'Text' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'repeatNullChars' "ELMNT_ATTR_NAME", 
	  CASE WHEN FILE_PROPERTIES & 64 = 64 THEN 'Yes' ELSE 'No' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'fileFormatLineSequential' "ELMNT_ATTR_NAME", 
	  CASE WHEN FILE_PROPERTIES & 256 = 256 THEN 'Yes' ELSE 'No' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'bytesToSkipBetweenRecs' "ELMNT_ATTR_NAME", 
	  str(NUM_OF_PAD_BYTES)  "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'stripTrailingBlanks' "ELMNT_ATTR_NAME", 
	 CASE WHEN FILE_PROPERTIES & 16 = 16 THEN 'Yes' ELSE 'No' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "ELEMENT_CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 'userDefinedShiftState' "ELMNT_ATTR_NAME", 
	 CASE WHEN FILE_PROPERTIES & 512 = 512 THEN 'Yes' ELSE 'No' END   "ELMNT_ATTR_VALUE",
      ''  "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID "SUBJECT_ID"
      from   OPB_SRC src,
	 OPB_FILE_DESC fdesc
	  where  
	  src.SUBJ_ID = fdesc.SUBJECT_ID and
      src.FILE_ID = fdesc.FILE_ID and 
	  src.VERSION_NUMBER = fdesc.VERSION_NUMBER	and 
	  src.IS_VISIBLE = 1    AND
	  FILE_PROPERTIES & 128= 0
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_TASK].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_TASK]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_TASK] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_TASK]
AS 
select  '' "REPOSITORY_ID",	
'com.informatica.powercenter.process.'+ REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID", 
 otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tasks.TASK_ID)) "ELEMENT_ID", 
'GLOBAL' "SCOPE_TYPE", 
		tattr.ATTR_NAME "ELMNT_ATTR_NAME", CASE WHEN (tattr.OBJECT_TYPE_ID=71 AND tattr.ATTR_ID IN(12,13,14,17,18)) OR (tattr.OBJECT_TYPE_ID=58 AND tattr.ATTR_ID=1) 
THEN 
  (CASE WHEN  convert(varchar(4000),tattrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END)
ELSE
CASE WHEN tattr.OBJECT_TYPE_ID=58 AND tattr.ATTR_ID=2 THEN  
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 1 THEN 'Restart task' WHEN 0 THEN 'Fail task and continue workflow' END)  
ELSE
CASE WHEN tattr.OBJECT_TYPE_ID=68 THEN
(CASE WHEN tattr.ATTR_ID IN (17,109,110,111) THEN 
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 1 THEN 'Yes' ELSE 'No' END)
ELSE CASE WHEN tattr.ATTR_ID=107 THEN
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 9 THEN 'To Source with View' WHEN 11 THEN 'Full with View' WHEN 1 THEN 'To Source' WHEN 2 THEN 'To Target' WHEN
3 THEN 'Full' WHEN 4 THEN 'Configured at runtime' WHEN 0 THEN 'None' END)
ELSE CASE WHEN tattr.ATTR_ID=18 THEN 
 (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 2 THEN 'Restart Task' WHEN 1 THEN 'Resume from last checkpoint' WHEN 0 THEN 'Fail task & continue workflow' END)
ELSE
  tattrval.ATTR_VALUE END END END)
ELSE tattrval.ATTR_VALUE END END END  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", tasks.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
     tasks.SUBJECT_ID "SUBJECT_ID"
   from OPB_TASK tasks, OPB_OBJECT_TYPE otype, OPB_MMD_TASK_ATTR tattr, OPB_TASK_ATTR tattrval
   where 
         tasks.TASK_TYPE = otype.OBJECT_TYPE_ID and
         tasks.IS_REUSABLE = 1 and
		 tattrval.TASK_ID = tasks.TASK_ID and tattrval.TASK_TYPE = tasks.TASK_TYPE and tattrval.VERSION_NUMBER = tasks.VERSION_NUMBER
and tasks.IS_VISIBLE = 1
and		 tattrval.WORKFLOW_ID = 0 and tattrval.INSTANCE_ID = 0 and  tattrval.REF_SESSION_ID = 0 and tattrval.GROUP_ID = 0 and 
		 tattrval.ATTR_ID = tattr.ATTR_ID and tattr.OBJECT_TYPE_ID = tasks.TASK_TYPE     
UNION ALL
select  '' "REPOSITORY_ID",	
'com.informatica.powercenter.process.'+ REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "ELEMENT_CLASS_ID", 
 'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tinst.INSTANCE_ID)) "ELEMENT_ID", 
'GLOBAL' "SCOPE_TYPE", 
		tattr.ATTR_NAME "ELMNT_ATTR_NAME", CASE WHEN (tattr.OBJECT_TYPE_ID=71 AND tattr.ATTR_ID IN(12,13,14,17,18)) OR (tattr.OBJECT_TYPE_ID=58 AND tattr.ATTR_ID=1) 
THEN 
  (CASE WHEN  convert(varchar(4000),tattrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END)
ELSE
CASE WHEN tattr.OBJECT_TYPE_ID=58 AND tattr.ATTR_ID=2 THEN  
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 1 THEN 'Restart task' WHEN 0 THEN 'Fail task and continue workflow' END)  
ELSE
CASE WHEN tattr.OBJECT_TYPE_ID=68 THEN
(CASE WHEN tattr.ATTR_ID IN (17,109,110,111) THEN 
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 1 THEN 'Yes' ELSE 'No' END)
ELSE CASE WHEN tattr.ATTR_ID=107 THEN
  (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 9 THEN 'To Source with View' WHEN 11 THEN 'Full with View' WHEN 1 THEN 'To Source' WHEN 2 THEN 'To Target' WHEN
3 THEN 'Full' WHEN 4 THEN 'Configured at runtime' WHEN 0 THEN 'None' END)
ELSE CASE WHEN tattr.ATTR_ID=18 THEN 
 (CASE convert(varchar(4000),tattrval.ATTR_VALUE) WHEN 2 THEN 'Restart Task' WHEN 1 THEN 'Resume from last checkpoint' WHEN 0 THEN 'Fail task & continue workflow' END)
ELSE
  tattrval.ATTR_VALUE END END END)
ELSE tattrval.ATTR_VALUE END END END  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", tasks.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
     tasks.SUBJECT_ID "SUBJECT_ID"
from 
   OPB_TASK tasks, 
   OPB_OBJECT_TYPE otype, 
   OPB_MMD_TASK_ATTR tattr, 
   OPB_TASK_ATTR tattrval,
   OPB_TASK_INST tinst,
   OPB_TASK wflow
   where 
         tinst.TASK_TYPE = otype.OBJECT_TYPE_ID and
         tattrval.TASK_ID = tinst.TASK_ID and
		 tinst.TASK_ID = tasks.TASK_ID AND
		 tinst.TASK_TYPE = tasks.TASK_TYPE AND
		 tasks.IS_VISIBLE = 1 AND
		 tinst.WORKFLOW_ID = wflow.TASK_ID AND (wflow.TASK_TYPE=71 OR wflow.TASK_TYPE=70) AND
		 tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
		 wflow.IS_VISIBLE=1 AND
		 tattrval.TASK_TYPE = tinst.TASK_TYPE and 
		 ((tasks.IS_REUSABLE=1 AND tattrval.INSTANCE_ID=tinst.INSTANCE_ID AND tattrval.WORKFLOW_ID = tinst.WORKFLOW_ID AND tattrval.VERSION_NUMBER = tinst.VERSION_NUMBER) OR
		 (tasks.IS_REUSABLE=0 AND tattrval.INSTANCE_ID=0 AND tattrval.WORKFLOW_ID = 0 AND tattrval.VERSION_NUMBER = tasks.VERSION_NUMBER)) AND
		 tattrval.ATTR_ID = tattr.ATTR_ID and 
		 tattr.OBJECT_TYPE_ID = tasks.TASK_TYPE
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_TGT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_TGT]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_TGT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_TGT]
AS 
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.TargetDefinition' "ELEMENT_CLASS_ID", 
'Target Definition' + '_'+ ltrim(str(targ.TARGET_ID)) "ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.ATTR_NAME = 'DTD Reference' THEN 'DTD/Schema Reference' ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME",
       CASE WHEN att.ATTR_ID = 17
	THEN CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Append' WHEN 2 THEN 'Truncate' 
	WHEN 0 THEN 'None' END ELSE
	CASE WHEN att.ATTR_ID = 18
	THEN CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Unix' WHEN 2 THEN 'Windows' 
	WHEN 3 THEN 'None' WHEN 0  THEN 'System Default' END ELSE
	attrval.ATTR_VALUE END END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", targ.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
     targ.SUBJ_ID "SUBJECT_ID"
      from OPB_WIDGET_ATTR attrval, OPB_ATTR att, OPB_TARG targ
	  where 
	        targ.TARGET_ID = attrval.WIDGET_ID and targ.VERSION_NUMBER = attrval.VERSION_NUMBER
and targ.IS_VISIBLE = 1
and	        attrval.WIDGET_TYPE = 2 and
			att.ATTR_ID = attrval.ATTR_ID and
			att.OBJECT_TYPE_ID = 2 and 
			attrval.MAPPING_ID = 0 and attrval.INSTANCE_ID = 0 and attrval.SESSION_ID = 0 and attrval.PARTITION_ID = 0 and
			attrval.SESSION_TASK_ID = 0 and attrval.LINE_NO = 1
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_TRGFLD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_TRGFLD]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_TRGFLD] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_TRGFLD]
AS
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.TargetDefinitionPort' "ELEMENT_CLASS_ID", 
       'Target Definition_' + 'Field_' + ltrim(str(targfld.TARGET_ID)) 
             + '_' + ltrim(str(targfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'dataType' "ELMNT_ATTR_NAME",
       (select MIN(dtype.DTYPE_NAME) from 
     REP_FLD_DATATYPE dtype where targfld.NDTYPE = dtype.DTYPE_NUM OR targfld.DTYPE = dtype.DTYPE_NUM) "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       targ.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       targ.SUBJ_ID "SUBJECT_ID"
FROM OPB_TARG targ,
     OPB_TARG_FLD targfld
WHERE 
      targ.TARGET_ID = targfld.TARGET_ID AND targ.VERSION_NUMBER = targfld.VERSION_NUMBER
AND targ.IS_VISIBLE = 1 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.TargetDefinitionPort' "ELEMENT_CLASS_ID", 
       'Target Definition_' + 'Field_' + ltrim(str(targfld.TARGET_ID)) 
             + '_' + ltrim(str(targfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'GROUP_NAME' "ELMNT_ATTR_NAME",
       tgrp.ATTR_VALUE "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       targ.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       targ.SUBJ_ID "SUBJECT_ID"
FROM OPB_TARG targ,
     OPB_TARG_FLD targfld,
     OPB_TABLE_GROUP tgrp
WHERE 
      tgrp.ATTR_ID = 1 AND
      targ.TARGET_ID = targfld.TARGET_ID AND targ.VERSION_NUMBER = targfld.VERSION_NUMBER
AND targ.IS_VISIBLE = 1
AND      tgrp.OBJECT_ID = targfld.TARGET_ID AND
      tgrp.OBJECT_TYPE = 2 AND
      tgrp.GROUP_ID = targfld.GROUP_ID AND tgrp.VERSION_NUMBER = targfld.VERSION_NUMBER
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.TargetDefinitionPort' "ELEMENT_CLASS_ID", 
       'Target Definition_' + 'Field_' + ltrim(str(targfld.TARGET_ID)) 
             + '_' + ltrim(str(targfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'KEY_TYPE' "ELMNT_ATTR_NAME",
       ktype.KEYTYPE_NAME  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       targ.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       targ.SUBJ_ID "SUBJECT_ID"
FROM OPB_TARG targ,
     OPB_TARG_FLD targfld,
     REP_TARG_KEY_TYPES ktype
WHERE 
targ.TARGET_ID = targfld.TARGET_ID AND targ.VERSION_NUMBER = targfld.VERSION_NUMBER
AND targ.IS_VISIBLE = 1
AND   targfld.KEYTYPE = ktype.KEYTYPE_NUM
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.TargetDefinitionPort' "ELEMENT_CLASS_ID", 
       'Target Definition_' + 'Field_' + ltrim(str(targfld.TARGET_ID)) 
             + '_' + ltrim(str(targfld.FLDID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'isNullable' "ELMNT_ATTR_NAME",
       CASE WHEN targfld.NULLTYPE = 0 THEN 'Yes' ELSE 'No' END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       targ.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       targ.SUBJ_ID "SUBJECT_ID"
FROM OPB_TARG targ,
     OPB_TARG_FLD targfld
WHERE 
      targ.TARGET_ID = targfld.TARGET_ID AND targ.VERSION_NUMBER = targfld.VERSION_NUMBER
AND targ.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_WDGFLD_1].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_WDGFLD_1]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_WDGFLD_1] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_WDGFLD_1]
AS
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'dataType' "ELMNT_ATTR_NAME",
        (select dtype.DTYPE_NAME from 
       REP_FLD_DATATYPE dtype where wdgfld.WGT_DATATYPE = dtype.DTYPE_NUM)  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
       '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM OPB_WIDGET wdg,
     OPB_WIDGET_FIELD wdgfld,
     OPB_OBJECT_TYPE otype,
     REP_FLD_DATATYPE dtype
WHERE wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
      wdg.WIDGET_ID = wdgfld.WIDGET_ID AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
AND wdg.IS_VISIBLE = 1
AND      wdgfld.WGT_DATATYPE = dtype.DTYPE_NUM 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'precision' "ELMNT_ATTR_NAME",
       ltrim(str(wdgfld.WGT_PREC))  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM OPB_WIDGET wdg,
     OPB_WIDGET_FIELD wdgfld,
     OPB_OBJECT_TYPE otype
WHERE wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
      wdg.WIDGET_ID = wdgfld.WIDGET_ID AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
AND wdg.IS_VISIBLE = 1
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'scale' "ELMNT_ATTR_NAME",
       ltrim(str(wdgfld.WGT_SCALE))  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM OPB_WIDGET wdg,
     OPB_WIDGET_FIELD wdgfld,
     OPB_OBJECT_TYPE otype
WHERE wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
      wdg.WIDGET_ID = wdgfld.WIDGET_ID AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
AND wdg.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_WDGFLD_2].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_WDGFLD_2]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_WDGFLD_2] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_WDGFLD_2]
AS
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'GROUP_NAME' "ELMNT_ATTR_NAME",
       tgrp.ATTR_VALUE  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
       ''  "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM OPB_WIDGET wdg,
     OPB_WIDGET_FIELD wdgfld,
     OPB_OBJECT_TYPE otype,
     OPB_TABLE_GROUP tgrp
WHERE wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
      wdg.WIDGET_ID = wdgfld.WIDGET_ID AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
AND wdg.IS_VISIBLE = 1
AND wdgfld.WIDGET_ID = tgrp.OBJECT_ID AND
      wdgfld.GROUP_ID= tgrp.GROUP_ID AND wdgfld.VERSION_NUMBER = tgrp.VERSION_NUMBER AND
      tgrp.OBJECT_TYPE = wdg.WIDGET_TYPE AND
      tgrp.ATTR_ID = 1 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'portType' "ELMNT_ATTR_NAME",
       CASE WHEN wdgfld.PORTTYPE = 1 THEN 'Input Port'
        WHEN wdgfld.PORTTYPE = 2 THEN 'Output Port' 
        WHEN wdgfld.PORTTYPE = 3 THEN 'Input Output Port'  
        WHEN wdgfld.PORTTYPE = 6 THEN 'Return Port' 
        WHEN wdgfld.PORTTYPE = 7 THEN 'Input Return Port' 
        WHEN wdgfld.PORTTYPE = 8 THEN 'Lookup Port'
        WHEN wdgfld.PORTTYPE = 10 THEN 'Output Lookup Port'
        WHEN wdgfld.PORTTYPE = 14 THEN 'Lookup Return Port' 
        WHEN wdgfld.PORTTYPE = 32 THEN 'Variable Port' 
        WHEN wdgfld.PORTTYPE = 65 THEN 'Input Port and Master Detail Port' 
        WHEN wdgfld.PORTTYPE = 67 THEN 'Input Port, Output Port and Master Detail Port' 
        WHEN wdgfld.PORTTYPE = 130 THEN 'Output Port and Generated Key Port' 
        WHEN wdgfld.PORTTYPE = 258 THEN 'Output Port and Generated Column ID Port' 
        WHEN wdgfld.PORTTYPE = 515 THEN 'Input Port, Output Port and Message ID Port' 
        WHEN wdgfld.PORTTYPE = 1027 THEN 'Input Port, Output Port and Message Data Port' 
        WHEN wdgfld.PORTTYPE = 2050 THEN 'Dynamic Lookup Port' 
       ELSE 'Other'  END 	   
         "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld,
       OPB_OBJECT_TYPE otype
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'expression' "ELMNT_ATTR_NAME",       
       expr.EXPRESSION  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld,
       OPB_OBJECT_TYPE otype,
       OPB_EXPRESSION expr,
       OPB_WIDGET_EXPR wdgexp
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND wdgfld.WIDGET_ID=wdgexp.WIDGET_ID 
       AND wdgfld.VERSION_NUMBER = wdgexp.VERSION_NUMBER
       AND wdgfld.FIELD_ID=wdgexp.OUTPUT_FIELD_ID 
       AND wdgexp.WIDGET_ID=expr.WIDGET_ID 
       AND wdgexp.EXPR_ID=expr.EXPR_ID 
       AND wdgexp.VERSION_NUMBER = expr.VERSION_NUMBER
       AND expr.LINE_NO=1 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'expression' "ELMNT_ATTR_NAME",       
       ''  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld,
       OPB_OBJECT_TYPE otype
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_EXPR wdgexp
                       WHERE wdgfld.WIDGET_ID= wdgexp.WIDGET_ID  	  
                       AND wdgfld.FIELD_ID= wdgexp.OUTPUT_FIELD_ID
                       AND wdgfld.VERSION_NUMBER = wdgexp.VERSION_NUMBER) 
                       AND wdg.WIDGET_TYPE IN (5,9,26)
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'portComments' "ELMNT_ATTR_NAME",       
       wdgexp.COMMENTS  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld,
       OPB_OBJECT_TYPE otype,
       OPB_EXPRESSION expr,
       OPB_WIDGET_EXPR wdgexp
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND wdgfld.WIDGET_ID=wdgexp.WIDGET_ID 
       AND wdgfld.VERSION_NUMBER = wdgexp.VERSION_NUMBER
       AND wdgfld.FIELD_ID=wdgexp.OUTPUT_FIELD_ID 
       AND wdgexp.WIDGET_ID=expr.WIDGET_ID 
       AND wdgexp.EXPR_ID=expr.EXPR_ID 
       AND wdgexp.VERSION_NUMBER = expr.VERSION_NUMBER
       AND expr.LINE_NO=1 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'portComments' "ELMNT_ATTR_NAME",       
       ''  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld,
       OPB_OBJECT_TYPE otype
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_EXPR wdgexp
                       WHERE wdgfld.WIDGET_ID= wdgexp.WIDGET_ID  	  
                       AND wdgfld.FIELD_ID= wdgexp.OUTPUT_FIELD_ID
                       AND wdgfld.VERSION_NUMBER = wdgexp.VERSION_NUMBER) 
                       AND wdg.WIDGET_TYPE IN (5,9,26)
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')  + 'Port' "ELEMENT_CLASS_ID", 
       otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'isGroupBy' "ELMNT_ATTR_NAME", 	     
       CASE WHEN wdgexp.EXPR_TYPE = 46 THEN 'Yes' ELSE 'No' END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,     
       OPB_OBJECT_TYPE otype,
       OPB_WIDGET_FIELD wdgfld LEFT OUTER JOIN OPB_WIDGET_EXPR wdgexp ON
       wdgfld.WIDGET_ID=wdgexp.WIDGET_ID 
       AND wdgfld.FIELD_ID=wdgexp.OUTPUT_FIELD_ID
       AND wdgfld.VERSION_NUMBER = wdgexp.VERSION_NUMBER
WHERE 
       wdg.WIDGET_TYPE = otype.OBJECT_TYPE_ID 
       AND wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND (wdg.WIDGET_TYPE = 9 OR wdg.WIDGET_TYPE = 26)
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.RankPort' "ELEMENT_CLASS_ID", 
       'Rank_' + 'Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'isRankPort' "ELMNT_ATTR_NAME", 	     
       CASE WHEN wdgexp.EXPR_TYPE = 65 THEN 'Yes' ELSE 'No' END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
       OPB_WIDGET wdg,
       OPB_WIDGET_FIELD wdgfld LEFT OUTER JOIN OPB_WIDGET_EXPR wdgexp ON
       wdgfld.WIDGET_ID=wdgexp.WIDGET_ID
       AND wdgfld.FIELD_ID=wdgexp.OUTPUT_FIELD_ID
       AND wdgfld.VERSION_NUMBER=wdgexp.VERSION_NUMBER
WHERE 
	wdg.WIDGET_ID = wdgfld.WIDGET_ID 
       AND wdg.VERSION_NUMBER = wdgfld.VERSION_NUMBER
       AND wdg.IS_VISIBLE = 1
       AND wdg.WIDGET_TYPE = 26  
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.SorterPort' "ELEMENT_CLASS_ID", 
       'Sorter_Field_' + ltrim(str(wgtfld.WIDGET_ID)) 
             + '_' + ltrim(str(wgtfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
	 'direction' "ELMNT_ATTR_NAME", 
	CASE  WIDGET_FLD_PROP%4 WHEN 1 THEN 'Ascending' WHEN 3 THEN 'Descending'  ELSE '' END   "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wgt.LAST_SAVED "SRC_UPDATE_DT",
       '' "EFF_FROM_DT",
       '' "EFF_TO_DT",
       wgt.SUBJECT_ID "SUBJECT_ID"
 FROM 
  OPB_WIDGET_FIELD wgtfld, 
  OPB_WIDGET wgt
 WHERE
  wgt.WIDGET_ID = wgtfld.WIDGET_ID and
  wgt.VERSION_NUMBER = wgtfld.VERSION_NUMBER and 
  wgt.IS_VISIBLE = 1	and
 wgt.WIDGET_TYPE = 80	
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.NormalizerPort' "ELEMENT_CLASS_ID", 
       'Normalizer_Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'level' "ELMNT_ATTR_NAME",
       str(FLDLVL)  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",
       '' "EFF_TO_DT", wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
OPB_WIDGET wdg,
OPB_WIDGET_FIELD wdgfld,
OPB_NORM_FLD nrmfld 
where 
nrmfld.WIDGET_ID = wdg.WIDGET_ID AND
wdg.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
wdg.WIDGET_TYPE = 14 AND
nrmfld.WIDGET_ID = wdgfld.WIDGET_ID and 
wdgfld.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
nrmfld.NORMAL_FLDID = wdgfld.SRC_FIELD_ID and 
wdgfld.PORTTYPE = 2 AND
wdg.IS_VISIBLE=1  
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.NormalizerPort' "ELEMENT_CLASS_ID", 
       'Normalizer_Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'occurs' "ELMNT_ATTR_NAME",
       str(OCCTIMES)  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",
       '' "EFF_TO_DT", wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
OPB_WIDGET wdg,
OPB_WIDGET_FIELD wdgfld,
OPB_NORM_FLD nrmfld 
where 
nrmfld.WIDGET_ID = wdg.WIDGET_ID AND
wdg.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
wdg.WIDGET_TYPE = 14 AND
nrmfld.WIDGET_ID = wdgfld.WIDGET_ID and 
wdgfld.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
nrmfld.NORMAL_FLDID = wdgfld.SRC_FIELD_ID and 
wdgfld.PORTTYPE = 2 AND
wdg.IS_VISIBLE=1 
UNION ALL
SELECT '' "REPOSITORY_ID", 
       'com.informatica.powercenter.map.NormalizerPort' "ELEMENT_CLASS_ID", 
       'Normalizer_Field_' + ltrim(str(wdgfld.WIDGET_ID)) 
             + '_' + ltrim(str(wdgfld.FIELD_ID)) "ELEMENT_ID" , 
       'GLOBAL' "SCOPE_TYPE", 
       'KEY_TYPE' "ELMNT_ATTR_NAME",
       KEY_NAME  "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
       '' "SRC_CREATE_DT",
       wdg.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",
       '' "EFF_TO_DT", wdg.SUBJECT_ID "SUBJECT_ID"
FROM 
OPB_WIDGET wdg,
OPB_WIDGET_FIELD wdgfld,
OPB_MMD_KEYTYPE ktype, 
OPB_NORM_FLD nrmfld 
where 
nrmfld.WIDGET_ID = wdg.WIDGET_ID AND
wdg.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
wdg.WIDGET_TYPE = 14 AND
nrmfld.WIDGET_ID = wdgfld.WIDGET_ID and 
wdgfld.VERSION_NUMBER = nrmfld.VERSION_NUMBER AND 
nrmfld.NORMAL_FLDID = wdgfld.SRC_FIELD_ID and 
wdgfld.PORTTYPE = 2 AND
wdg.IS_VISIBLE=1 AND
ktype.DBTYPE_ID = 0 AND
ktype.KEY_FLAGS = nrmfld.KEYTYPE
GO

GO
--SqlScripter----[dbo].[V_ATTRIBUTE_WDGT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ATTRIBUTE_WDGT]') IS NULL EXEC('CREATE VIEW [dbo].[V_ATTRIBUTE_WDGT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ATTRIBUTE_WDGT]
AS 
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID", 
otype.OBJECT_TYPE_NAME + '_' + ltrim(str(widgets.WIDGET_ID))"ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
       CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE attrval.ATTR_VALUE END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6) or
	(att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=10) or (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=9)
	THEN 
 	CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=9) OR (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=8) THEN 
		'Based On Input Order'   
	ELSE CASE WHEN att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=29 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always Allowed' WHEN 2 THEN 'Always Disallowed' 
	WHEN 0 THEN 'Auto' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=12 AND att.ATTR_ID=16 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Descending' WHEN 2 THEN 'Ascending'	END 
	ELSE attrval.ATTR_VALUE END END END END END END END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", widgets.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
     widgets.SUBJECT_ID "SUBJECT_ID"
      from OPB_WIDGET_ATTR attrval, OPB_OBJECT_TYPE otype, OPB_ATTR att, OPB_WIDGET widgets
	  where widgets.WIDGET_ID = attrval.WIDGET_ID and widgets.VERSION_NUMBER = attrval.VERSION_NUMBER
and widgets.IS_VISIBLE = 1
and	        widgets.WIDGET_TYPE = attrval.WIDGET_TYPE and
			widgets.IS_REUSABLE = 1  and
	        otype.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and
			att.ATTR_ID = attrval.ATTR_ID and
			att.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and
			attrval.MAPPING_ID = 0 and attrval.INSTANCE_ID = 0 and attrval.SESSION_ID = 0 and
			attrval.PARTITION_ID = 0 and
			attrval.SESSION_TASK_ID = 0 and attrval.LINE_NO = 1 and
	(widgets.WIDGET_TYPE != 45 OR 
	(widgets.WIDGET_TYPE = 45 and 
	att.ATTR_ID NOT IN (5, 16, 3, 4, 17, 6, 19, 8, 20)))and not exists
	( select 'x' from OPB_WIDGET_ATTR attrval1 where 
	attrval.ATTR_ID         = attrval1.ATTR_ID and
	attrval.INSTANCE_ID     = attrval1.INSTANCE_ID and
	attrval.SESSION_TASK_ID = attrval1.SESSION_TASK_ID and
	attrval.WIDGET_ID       = attrval1.WIDGET_ID and
   	attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER and	
	attrval.WIDGET_TYPE     = attrval1.WIDGET_TYPE and
	attrval.MAPPING_ID = attrval1.MAPPING_ID and
	attrval1.LINE_NO        = 2
)
UNION ALL
select  '' "REPOSITORY_ID", 
'com.informatica.powercenter.map.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ELEMENT_CLASS_ID", 
otype.OBJECT_TYPE_NAME + '_' + ltrim(str(widgets.WIDGET_ID))"ELEMENT_ID", 
	 'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
       CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) ) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6)
	THEN 
 	CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
		CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END END "ELMNT_ATTR_VALUE",
       '' "ELMNT_ATTR_DESC",
       '' "DATA_TYPE",
	 '' "SRC_CREATE_DT", widgets.LAST_SAVED "SRC_UPDATE_DT",
	 ''  "EFF_FROM_DT",  '' "EFF_TO_DT",
     widgets.SUBJECT_ID "SUBJECT_ID"
      from OPB_WIDGET_ATTR attrval, 
	OPB_WIDGET_ATTR attrval1,OPB_OBJECT_TYPE otype, OPB_ATTR att, OPB_WIDGET widgets
	  where widgets.WIDGET_ID = attrval.WIDGET_ID and widgets.VERSION_NUMBER = attrval.VERSION_NUMBER
and widgets.IS_VISIBLE = 1
and	        widgets.WIDGET_TYPE = attrval.WIDGET_TYPE and
			widgets.IS_REUSABLE = 1  and
	        otype.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and
			att.ATTR_ID = attrval.ATTR_ID and
			att.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and
			attrval.MAPPING_ID = 0 and attrval.INSTANCE_ID = 0 and attrval.SESSION_ID = 0 and
			attrval.PARTITION_ID = 0 and
			attrval.SESSION_TASK_ID = 0 and attrval.LINE_NO = 1 and
	(widgets.WIDGET_TYPE != 45 OR 
	(widgets.WIDGET_TYPE = 45 and 
	att.ATTR_ID NOT IN (5, 16, 3, 4, 17, 6, 19, 8, 20)))and	
	attrval.ATTR_ID         =  attrval1.ATTR_ID and
	attrval.INSTANCE_ID     =  attrval1.INSTANCE_ID and
	attrval.SESSION_TASK_ID =  attrval1.SESSION_TASK_ID and
	attrval.WIDGET_ID       =  attrval1.WIDGET_ID and
   	attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER and	
	attrval.WIDGET_TYPE     =  attrval1.WIDGET_TYPE and
	attrval.MAPPING_ID = attrval1.MAPPING_ID and
	attrval1.LINE_NO        =  2	
UNION ALL
select 
	'' "REPOSITORY_ID", 
	'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance' "ELEMENT_CLASS_ID", 
	'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + 
	ltrim(str(winst.MAPPING_ID)) + '_' + 
	ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID", 
	'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
	 CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE attrval.ATTR_VALUE END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6) OR
	(att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=10) or (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=9)
	THEN 
 	CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
			CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=29 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always Allowed' WHEN 2 THEN 'Always Disallowed' 
	WHEN 0 THEN 'Auto' END 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=9) OR (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=8) THEN 
		'Based On Input Order'  
	ELSE CASE WHEN att.OBJECT_TYPE_ID=12 AND att.ATTR_ID=16 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Descending' WHEN 2 THEN 'Ascending'	END 
	ELSE attrval.ATTR_VALUE END END END END END END END "ELMNT_ATTR_VALUE",
	'' "ELMNT_ATTR_DESC", 
	'' "DATA_TYPE", 
	'' "SRC_CREATE_DT", 
	map.LAST_SAVED "SRC_UPDATE_DT", 
	''  "EFF_FROM_DT", 
	''  "EFF_TO_DT" ,
        widgets.SUBJECT_ID "SUBJECT_ID"
from 
	OPB_WIDGET_ATTR attrval, 
	OPB_OBJECT_TYPE otype, 
	OPB_ATTR att, 
	OPB_MAPPING map,
	OPB_WIDGET widgets, 
	OPB_WIDGET_INST winst 
where 
	widgets.WIDGET_ID = attrval.WIDGET_ID and 
	widgets.WIDGET_TYPE = attrval.WIDGET_TYPE and 
	widgets.VERSION_NUMBER = attrval.VERSION_NUMBER and
	widgets.IS_VISIBLE = 1 and	
	winst.WIDGET_ID = widgets.WIDGET_ID and 
	winst.MAPPING_ID = map.MAPPING_ID and 
	attrval.MAPPING_ID = 0 AND 
	widgets.IS_REUSABLE = 0  AND
	winst.WIDGET_TYPE = widgets.WIDGET_TYPE and 
	otype.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and 
	att.ATTR_ID = attrval.ATTR_ID and 
	att.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and 
	attrval.LINE_NO = 1 and 
	(widgets.WIDGET_TYPE != 45 OR 
	(widgets.WIDGET_TYPE = 45 and 
	att.ATTR_ID NOT IN (5, 16, 3, 4, 17, 6, 19, 8, 20))) and 
	map.VERSION_NUMBER = winst.VERSION_NUMBER  and 
	map.IS_VISIBLE = 1	and not exists
	( select 'x' from OPB_WIDGET_ATTR attrval1 where 
	attrval.ATTR_ID         = attrval1.ATTR_ID and
	attrval.INSTANCE_ID     = attrval1.INSTANCE_ID and
	attrval.SESSION_TASK_ID = attrval1.SESSION_TASK_ID and
	attrval.WIDGET_ID       = attrval1.WIDGET_ID and
   	attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER and	
	attrval.WIDGET_TYPE     = attrval1.WIDGET_TYPE and
	attrval.MAPPING_ID = attrval1.MAPPING_ID and
	attrval1.LINE_NO        = 2
	)	
UNION ALL
select 
	'' "REPOSITORY_ID", 
	'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance' "ELEMENT_CLASS_ID", 
	'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + 
	ltrim(str(winst.MAPPING_ID)) + '_' + 
	ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID", 
	'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
	 CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6)
	THEN 
 	CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
			CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END END "ELMNT_ATTR_VALUE", 
	'' "ELMNT_ATTR_DESC", 
	'' "DATA_TYPE", 
	'' "SRC_CREATE_DT", 
	map.LAST_SAVED "SRC_UPDATE_DT", 
	''  "EFF_FROM_DT", 
	''  "EFF_TO_DT" ,
        widgets.SUBJECT_ID "SUBJECT_ID"
from 
	OPB_WIDGET_ATTR attrval, 
	OPB_WIDGET_ATTR attrval1,
	OPB_OBJECT_TYPE otype, 
	OPB_ATTR att, 
	OPB_MAPPING map,
	OPB_WIDGET widgets, 
	OPB_WIDGET_INST winst 
where 
	widgets.WIDGET_ID = attrval.WIDGET_ID and 
	widgets.WIDGET_TYPE = attrval.WIDGET_TYPE and 
	widgets.VERSION_NUMBER = attrval.VERSION_NUMBER and
	widgets.IS_VISIBLE = 1 and	
	winst.WIDGET_ID = widgets.WIDGET_ID and 
	winst.MAPPING_ID = map.MAPPING_ID and 
	attrval.MAPPING_ID = 0 AND 
	widgets.IS_REUSABLE = 0  AND
	winst.WIDGET_TYPE = widgets.WIDGET_TYPE and 
	otype.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and 
	att.ATTR_ID = attrval.ATTR_ID and 
	att.OBJECT_TYPE_ID = widgets.WIDGET_TYPE and 
	attrval.LINE_NO = 1 and 
	(widgets.WIDGET_TYPE != 45 OR 
	(widgets.WIDGET_TYPE = 45 and 
	att.ATTR_ID NOT IN (5, 16, 3, 4, 17, 6, 19, 8, 20))) and 
	map.VERSION_NUMBER = winst.VERSION_NUMBER  and 
	map.IS_VISIBLE = 1	and	
	attrval.ATTR_ID         =  attrval1.ATTR_ID and
	attrval.INSTANCE_ID     =  attrval1.INSTANCE_ID and
	attrval.SESSION_TASK_ID =  attrval1.SESSION_TASK_ID and
	attrval.WIDGET_ID       =  attrval1.WIDGET_ID and
   	attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER and	
	attrval.WIDGET_TYPE     =  attrval1.WIDGET_TYPE and
	attrval.MAPPING_ID = attrval1.MAPPING_ID and
	attrval1.LINE_NO        =  2	
UNION ALL
select 
	'' "REPOSITORY_ID", 
	'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance' "ELEMENT_CLASS_ID", 
	'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + 
	ltrim(str(winst.MAPPING_ID)) + '_' + 
	ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID", 
	'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
	 CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE attrval.ATTR_VALUE END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6) OR
	(att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=10) or (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=9)
	THEN 
 	CASE WHEN  convert(varchar(4000),attrval.ATTR_VALUE) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
			CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=29 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Always Allowed' WHEN 2 THEN 'Always Disallowed' 
	WHEN 0 THEN 'Auto' END 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=9) OR (att.OBJECT_TYPE_ID=6 AND att.ATTR_ID=8) THEN 
		'Based On Input Order'  
	ELSE CASE WHEN att.OBJECT_TYPE_ID=12 AND att.ATTR_ID=16 THEN 
		CASE convert(varchar(4000),attrval.ATTR_VALUE) WHEN 1 THEN 'Descending' WHEN 2 THEN 'Ascending'	END 
	ELSE attrval.ATTR_VALUE END END END END END END END "ELMNT_ATTR_VALUE",
	'' "ELMNT_ATTR_DESC", 
	'' "DATA_TYPE", 
	'' "SRC_CREATE_DT", 
	map.LAST_SAVED "SRC_UPDATE_DT", 
	''  "EFF_FROM_DT", 
	''  "EFF_TO_DT" ,
        map.SUBJECT_ID "SUBJECT_ID"
from 
	OPB_WIDGET_ATTR attrval, 
	OPB_OBJECT_TYPE otype, 
	OPB_ATTR att, 
	OPB_MAPPING map,
	OPB_WIDGET_INST winst 
where 
	winst.WIDGET_ID = attrval.WIDGET_ID and 
	winst.WIDGET_TYPE = attrval.WIDGET_TYPE and 
	winst.INSTANCE_ID = attrval.INSTANCE_ID and
	winst.MAPPING_ID = attrval.MAPPING_ID and
	winst.VERSION_NUMBER = attrval.VERSION_NUMBER and
	winst.MAPPING_ID = map.MAPPING_ID and 
	winst.VERSION_NUMBER = map.VERSION_NUMBER and
	map.IS_VISIBLE = 1 and	
	attrval.SESSION_ID = 0 AND
	attrval.SESSION_TASK_ID = 0 AND
	winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID  and 
	att.ATTR_ID = attrval.ATTR_ID and 
	att.OBJECT_TYPE_ID = winst.WIDGET_TYPE and 
	attrval.LINE_NO = 1 and 
	(winst.WIDGET_TYPE != 45 OR 
	(winst.WIDGET_TYPE = 45 and 
	att.ATTR_ID NOT IN (5, 16, 3, 4, 17, 6, 19, 8, 20))) and 
	NOT EXISTS ( 
          SELECT 'x' 
            FROM OPB_WIDGET_ATTR attrval1 
           WHERE attrval.ATTR_ID = attrval1.ATTR_ID 
             AND attrval.INSTANCE_ID = attrval1.INSTANCE_ID 
             AND attrval.SESSION_TASK_ID = attrval1.SESSION_TASK_ID 
             AND attrval.WIDGET_ID = attrval1.WIDGET_ID 
   	     AND attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER             
             AND attrval.WIDGET_TYPE = attrval1.WIDGET_TYPE 
             AND attrval.MAPPING_ID = attrval1.MAPPING_ID 
             AND attrval1.LINE_NO = 2) 
UNION ALL
select 
	'' "REPOSITORY_ID", 
	'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance' "ELEMENT_CLASS_ID", 
	'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + 
	ltrim(str(winst.MAPPING_ID)) + '_' + 
	ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID", 
	'GLOBAL' "SCOPE_TYPE", 
	 CASE WHEN att.OBJECT_TYPE_ID = 11 THEN
	 (CASE WHEN att.ATTR_ID = 6 THEN 'Location Information'
	 ELSE CASE WHEN att.ATTR_ID = 17 THEN 'Recache from Database' 
	 ELSE att.ATTR_NAME END END) ELSE att.ATTR_NAME END "ELMNT_ATTR_NAME", 
	 CASE WHEN att.OBJECT_TYPE_ID=97 THEN
	(CASE WHEN att.ATTR_ID=5 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END
	ELSE CASE WHEN att.ATTR_ID IN (15,16) THEN
	 CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.ATTR_ID=13 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 0 THEN 'Java' WHEN 1 THEN 
	'C++' WHEN 2 THEN 'C' END
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END) 
	ELSE CASE WHEN (att.OBJECT_TYPE_ID=84 AND att.ATTR_ID IN (2,3)) OR (att.OBJECT_TYPE_ID=11 AND att.ATTR_ID=27) or
	(att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=10) OR (att.OBJECT_TYPE_ID=56 AND att.ATTR_ID=6)
	THEN 
 	CASE WHEN  convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) = 1 THEN 'Yes' ELSE 'No' END
	ELSE CASE WHEN att.OBJECT_TYPE_ID=8 AND att.ATTR_ID=7 THEN 
	CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Locally' WHEN 2 THEN 
	'Across Grid' WHEN 0 THEN 'No' END 
	ELSE CASE WHEN att.OBJECT_TYPE_ID=3 AND att.ATTR_ID=11 THEN 
			CASE convert(varchar(4000),(CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000)))) WHEN 1 THEN 'Always' ELSE 
	'Never' END 
	ELSE (CAST(attrval.ATTR_VALUE AS VARCHAR(2000))+ CAST(attrval1.ATTR_VALUE AS VARCHAR(2000))) END END END END "ELMNT_ATTR_VALUE", 
	'' "ELMNT_ATTR_DESC", 
	'' "DATA_TYPE", 
	'' "SRC_CREATE_DT", 
	map.LAST_SAVED "SRC_UPDATE_DT", 
	''  "EFF_FROM_DT", 
	''  "EFF_TO_DT" ,
        map.SUBJECT_ID "SUBJECT_ID"
from 
	OPB_WIDGET_ATTR attrval, 
	OPB_WIDGET_ATTR attrval1,
	OPB_OBJECT_TYPE otype, 
	OPB_ATTR att, 
	OPB_MAPPING map,
	OPB_WIDGET_INST winst 
where 
	winst.WIDGET_ID = attrval.WIDGET_ID and 
	winst.WIDGET_TYPE = attrval.WIDGET_TYPE and 
	winst.INSTANCE_ID = attrval.INSTANCE_ID and
	winst.MAPPING_ID = attrval.MAPPING_ID and
	winst.VERSION_NUMBER = attrval.VERSION_NUMBER and
	winst.MAPPING_ID = map.MAPPING_ID and 
	winst.VERSION_NUMBER = map.VERSION_NUMBER and
	map.IS_VISIBLE = 1 and	
	attrval.SESSION_ID = 0 AND
	attrval.SESSION_TASK_ID = 0 AND 
	winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID and 
	att.ATTR_ID = attrval.ATTR_ID and 
	att.OBJECT_TYPE_ID = winst.WIDGET_TYPE and 
	attrval.LINE_NO = 1 and 
   	attrval.ATTR_ID = attrval1.ATTR_ID AND 
   	attrval.INSTANCE_ID = attrval1.INSTANCE_ID AND
   	attrval.SESSION_TASK_ID = attrval1.SESSION_TASK_ID AND 
   	attrval.WIDGET_ID = attrval1.WIDGET_ID AND 
   	attrval.VERSION_NUMBER = attrval1.VERSION_NUMBER and   	
   	attrval.WIDGET_TYPE = attrval1.WIDGET_TYPE AND 
   	attrval.MAPPING_ID = attrval1.MAPPING_ID and
   	attrval1.LINE_NO = 2
GO

GO
--SqlScripter----[dbo].[V_DEFAULT_FILE_CNX].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_DEFAULT_FILE_CNX]') IS NULL EXEC('CREATE VIEW [dbo].[V_DEFAULT_FILE_CNX] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_DEFAULT_FILE_CNX]
AS
select  ' ' "REPOSITORY_ID", 
	'com.informatica.powercenter.deployment.DefaultFlatfileConnection' "CLASS_ID", 
        'PC_DEFAULT_FILE_CONNECTION' "CONNECTION_ID", 
	NULL "CATALOG_ID",
	NULL  "DATA_MGR_CLASS_ID", 
	NULL "DATA_MANAGER_ID",
	'' "SCHEMA_CLASS_ID", 
	'' "SCHEMA_ID",
	'FLAT_FILE' "CONNECTION_TYPE", 
	'' "CONNECTION_NAME", 
	'' "CONNECTION_DESC", 
	'' "CONNECTION_SUBTYPE", 
	'' "HOST_NAME", '' "SCHEMA_NAME",
        '' "USER_NAME", '' "ADDRESS",
        '' "CONNECTION_TEXT1", '' "CONNECTION_TEXT2",
        '' "CONNECTION_TEXT3", '1' "VERSION_NUM",
        '' "SRC_CREATE_DT", '' "SRC_UPDATE_DT",
        ''  "EFF_FROM_DT", '' "EFF_TO_DT"
    from OPB_REPOSIT repo where repo.RECID = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_DTYPES].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_DTYPES]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_DTYPES] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_DTYPES]
AS
	select  ' ' "REPOSITORY_ID", 
	'org.omg.cwm.resource.xml.ElementType' "CLASS_ID", 
	'org.omg.cwm.resource.xml.ElementType'  + '_' +  ltrim(str(DTYPE_NUM)) "ELEMENT_ID", 
   	'1' "VERSION_NUM",
	   dtype.DTYPE_NAME "ELEMENT_NAME", dtype.DTYPE_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS",  dtype.DTYPE_DATABASE + '_' + dtype.DTYPE_NAME "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE", 
	   'DATA_TYPE' "ELEMENT_SUBTYPE", 
	   '' "ELEMENT_ATTR1", '' "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
           'Y' "VALID_FLAG",   'N' "DISABLED_FLAG",
	   '' "SRC_CREATE_DT", ''  "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   CAST(NULL AS INT) "SUBJECT_ID"
         from REP_FLD_DATATYPE dtype
GO

GO
--SqlScripter----[dbo].[V_ELMNT_FOLDERS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_FOLDERS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_FOLDERS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_FOLDERS]
AS
select ' ' "REPOSITORY_ID",
'com.informatica.powercenter.package.Folder' "CLASS_ID",
      'Folder_' + ltrim(str(SUBJ_ID)) "ELEMENT_ID", '1' "VERSION_NUM",
	    SUBJ_NAME "ELEMENT_NAME", SUBJ_NAME "ELEMENT_LABEL",
     '' "ELEMENT_ALIAS", SUBJ_DESC "ELEMENT_DESC",
     '' "ELEMENT_USAGE", 'Folder' "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE",
	   'IS_SHARED' "ELEMENT_ATTR1", (CASE WHEN IS_SHARED=1 THEN 'Yes' ELSE 'No' END) "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2",
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
         '' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", CREATION_TIME "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   SUBJ_ID	"SUBJECT_ID"
    from OPB_SUBJECT
GO

GO
--SqlScripter----[dbo].[V_ELMNT_GLOBAL_SC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_GLOBAL_SC]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_GLOBAL_SC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_GLOBAL_SC]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.'+Replace(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "CLASS_ID", 
       'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_'+ otype.OBJECT_TYPE_NAME + '_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID + 2147483649)) "ELEMENT_ID", 
	   shcut.VERSION_NUMBER "VERSION_NUM",
	   shcut.SHORTCUT_NAME "ELEMENT_NAME", shcut.SHORTCUT_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", shcut.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Global Shortcut' "ELEMENT_TYPE", 
	   otype.OBJECT_TYPE_NAME "ELEMENT_SUBTYPE",
	   'SHORTCUT_TO_REPOSITORY' "ELEMENT_ATTR1", shcut.REPOSITORY_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
         '' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", shcut.CREATION_TIME "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   shcut.SUBJECT_ID	"SUBJECT_ID"
      from OPB_SHORTCUT shcut, OPB_OBJECT_TYPE otype
	  where shcut.OBJECT_TYPE not in (22,21) and shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID 
	        and shcut.OBJECT_ID < 0 and shcut.IS_VISIBLE = 1
UNION ALL
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.MappingShortcut' "CLASS_ID", 
       'SHORTCUT_TO_' + 'PC_'+ shcut.REPOSITORY_NAME +'_Mapping_'+ ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID + 2147483649)) "ELEMENT_ID", 
	   shcut.VERSION_NUMBER "VERSION_NUM",
	   shcut.SHORTCUT_NAME "ELEMENT_NAME", shcut.SHORTCUT_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", shcut.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Global Shortcut' "ELEMENT_TYPE", 
	   'Mapping' "ELEMENT_SUBTYPE",
	   'SHORTCUT_TO_REPOSITORY' "ELEMENT_ATTR1", shcut.REPOSITORY_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
         '' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", shcut.CREATION_TIME "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   shcut.SUBJECT_ID	"SUBJECT_ID"
      from OPB_SHORTCUT shcut
	  where shcut.OBJECT_TYPE = 21 and
	        shcut.OBJECT_ID < 0 and shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_LOCAL_SC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_LOCAL_SC]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_LOCAL_SC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_LOCAL_SC]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.'+Replace(otype.OBJECT_TYPE_NAME,' ','')+'Shortcut' "CLASS_ID", 
       'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(shcut.SUBJECT_ID)) + '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "ELEMENT_ID", 
	   shcut.VERSION_NUMBER "VERSION_NUM",
	   shcut.SHORTCUT_NAME "ELEMENT_NAME", shcut.SHORTCUT_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", shcut.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Local Shortcut' "ELEMENT_TYPE", 
	   otype.OBJECT_TYPE_NAME "ELEMENT_SUBTYPE",
	   'SHORTCUT_TO_REPOSITORY' "ELEMENT_ATTR1", shcut.REPOSITORY_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
     '' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", shcut.CREATION_TIME "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   shcut.SUBJECT_ID	"SUBJECT_ID"
      from OPB_SHORTCUT shcut, OPB_OBJECT_TYPE otype
	  where shcut.OBJECT_TYPE not in (22,21) and shcut.OBJECT_SUBTYPE = otype.OBJECT_TYPE_ID 
	        and shcut.OBJECT_ID >= 0 and shcut.IS_VISIBLE = 1
UNION ALL
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.MappingShortcut' "CLASS_ID", 
       'SHORTCUT_TO_' + 'PC_' + shcut.REPOSITORY_NAME +'_Mapping_' + ltrim(str(shcut.SUBJECT_ID))+ '_' + ltrim(str(shcut.VERSION_ID)) + '_' + ltrim(str(shcut.OBJECT_ID))  "ELEMENT_ID", 
	   shcut.VERSION_NUMBER "VERSION_NUM",
	   shcut.SHORTCUT_NAME "ELEMENT_NAME", shcut.SHORTCUT_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", shcut.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Local Shortcut' "ELEMENT_TYPE", 
	   'Mapping' "ELEMENT_SUBTYPE",
	   'SHORTCUT_TO_REPOSITORY' "ELEMENT_ATTR1", shcut.REPOSITORY_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
     '' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", shcut.CREATION_TIME "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   shcut.SUBJECT_ID	"SUBJECT_ID"
      from OPB_SHORTCUT shcut
	  where shcut.OBJECT_TYPE = 21 
	        and shcut.OBJECT_ID >= 0 and shcut.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_MAPPINGS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_MAPPINGS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_MAPPINGS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_MAPPINGS]
AS
select 
' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.Mapping' "CLASS_ID", 
       'Mapping_' + ltrim(str(map.MAPPING_ID)) "ELEMENT_ID", map.VERSION_NUMBER "VERSION_NUM",
	   map.MAPPING_NAME "ELEMENT_NAME", map.MAPPING_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", map.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE", 
	   'Mapping' "ELEMENT_SUBTYPE", 
	   'VALID' "ELEMENT_ATTR1", (CASE WHEN IS_VALID=1 THEN 'Yes' ELSE 'No' END) "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
     (CASE WHEN IS_VALID=1 THEN 'Y' ELSE 'N' END) "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   map.SUBJECT_ID	"SUBJECT_ID"
	   from OPB_MAPPING map
	   where 
	         REF_WIDGET_ID = 0 and map.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_SERVICE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_SERVICE]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_SERVICE] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_SERVICE]
AS
select  ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.deployment.IntegrationService' "CLASS_ID", 
'Integration Service_' + ltrim(str(server.SERVER_ID)) "ELEMENT_ID", 
server.SERVER_ID "SERVER_ID",
   '1' "VERSION_NUM",
	   server.SERVER_NAME "ELEMENT_NAME", server.SERVER_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", '' "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Integration Service' "ELEMENT_TYPE", 
	   '' "ELEMENT_SUBTYPE", 
	   'domainName' "ELEMENT_ATTR1", server.DOMAIN_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
           'Y' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   CAST(NULL AS INT) "SUBJECT_ID"
    from OPB_SERVER_INFO server
GO

GO
--SqlScripter----[dbo].[V_ELMNT_SRCS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_SRCS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_SRCS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_SRCS]
AS
select  ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinition' "CLASS_ID", 
'Source Definition_'+ ltrim(str(src.SRC_ID)) "ELEMENT_ID", 
   src.VERSION_NUMBER "VERSION_NUM",
	   src.SOURCE_NAME "ELEMENT_NAME", src.SOURCE_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", src.SRC_DESC "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE", 
	   'Source Definition' "ELEMENT_SUBTYPE", 
	   'BUSINESS_NAME' "ELEMENT_ATTR1", src.BUSINESS_NAME "ELEMENT_VALUE1",
	   'FILE_NAME' "ELEMENT_ATTR2", src.FILE_NAME "ELEMENT_VALUE2", 
	   'OWNER_NAME' "ELEMENT_ATTR3", src.OWNERNAME "ELEMENT_VALUE3",
         'Y' "VALID_FLAG", 'N' "DISABLED_FLAG",
	   '' "SRC_CREATE_DT", LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID	"SUBJECT_ID"
    from OPB_SRC src, OPB_DBD dbd
	where 
	      dbd.DBDID = src.DBDID and dbd.VERSION_NUMBER = src.VERSION_NUMBER
and src.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_SRCWDGFLD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_SRCWDGFLD]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_SRCWDGFLD] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_SRCWDGFLD]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.SourceDefinitionPort' "CLASS_ID", 
'Source Definition_' + 'Field_' + ltrim(str(src.SRC_ID)) + '_' + ltrim(str(fld.FLDID)) "ELEMENT_ID" , 
     src.VERSION_NUMBER "VERSION_NUM",
	   fld.SRC_NAME "ELEMENT_NAME", fld.SRC_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", fld.SRC_DESC "ELEMENT_DESC",
	   '' "ELEMENT_USAGE",
     'Source Definition Field' "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE", 
	   'BUSINESS_NAME' "ELEMENT_ATTR1", fld.BUSINESS_NAME "ELEMENT_VALUE1",
	   'REDEFINED NAME' "ELEMENT_ATTR2", fld.REDFNAME "ELEMENT_VALUE2", 
	   'SQL_NAME' "ELEMENT_ATTR3", fld.SQLNAME "ELEMENT_VALUE3",
     'Y' "VALID_FLAG", str(fld.IS_HIDDEN) "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", src.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   src.SUBJ_ID	"SUBJECT_ID"
    from OPB_SRC src, OPB_SRC_FLD fld, OPB_DBD dbd
	where 
	      dbd.DBDID = src.DBDID and
              fld.SRC_ID = src.SRC_ID and src.VERSION_NUMBER = dbd.VERSION_NUMBER
and src.VERSION_NUMBER = fld.VERSION_NUMBER
and src.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_SW_COMP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_SW_COMP]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_SW_COMP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_SW_COMP]
AS
select  ' ' "REPOSITORY_ID", 
'org.omg.cwm.foundation.softwaredeployment.SoftwareSystem' "CLASS_ID", 
'PC_SWSystem_' + repo.REPOSIT_NAME  "ELEMENT_ID", 
   '8' "VERSION_NUM",
	   'PowerCenter Software System' "ELEMENT_NAME", 'PowerCenter Software System' "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", 'This is PowerCenter software system' "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Data Integration' "ELEMENT_TYPE", 
	   '' "ELEMENT_SUBTYPE", 
	   'type' "ELEMENT_ATTR1", 'Data Integration' "ELEMENT_VALUE1",
	   'supplier' "ELEMENT_ATTR2", 'Informatica' "ELEMENT_VALUE2", 
	   'version' "ELEMENT_ATTR3", '8.x' "ELEMENT_VALUE3",
       'Y' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", '' "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   CAST(NULL AS INT) "SUBJECT_ID"
    from OPB_REPOSIT repo
	where  repo.RECID = 1
union all
select  ' ' "REPOSITORY_ID", 
'org.omg.cwm.foundation.softwaredeployment.DeployedSoftwareSystem' "CLASS_ID", 
'PC_DepSWSystem_' + repo.REPOSIT_NAME  "ELEMENT_ID", 
   '8' "VERSION_NUM",
	   'Installed PowerCenter' "ELEMENT_NAME", 'Installed PowerCenter' "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", 'This is the installed PowerCenter software system' "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Data Integration' "ELEMENT_TYPE", 
	   '' "ELEMENT_SUBTYPE", 
	   '' "ELEMENT_ATTR1", '' "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
       'Y' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", '' "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   CAST(NULL AS INT) "SUBJECT_ID"
    from OPB_REPOSIT repo
	where  repo.RECID = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_TASKINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_TASKINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_TASKINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_TASKINST]
AS
select ' ' "REPOSITORY_ID",
'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "CLASS_ID",
     'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tinst.INSTANCE_ID)) "ELEMENT_ID",
	   tinst.VERSION_NUMBER "VERSION_NUM",
	   tinst.INSTANCE_NAME "ELEMENT_NAME", tinst.INSTANCE_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", tinst.COMMENTS "ELEMENT_DESC",
	   '' "ELEMENT_USAGE",
           otype.OBJECT_TYPE_NAME "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE",
	   'WORKFLOW_NAME' "ELEMENT_ATTR1", tasks.TASK_NAME "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2",
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
         'Y' "VALID_FLAG", (CASE WHEN tinst.IS_ENABLED=0 THEN 'Y' ELSE 'N' END) "DISABLED_FLAG",
	   '' "SRC_CREATE_DT", tasks.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   tasks.SUBJECT_ID	"SUBJECT_ID"
	   from OPB_TASK_INST tinst, OPB_OBJECT_TYPE otype, OPB_TASK tasks
	   where tinst.TASK_TYPE = otype.OBJECT_TYPE_ID and 
	   tasks.TASK_ID = tinst.WORKFLOW_ID and ( tasks.TASK_TYPE = 71 OR tasks.TASK_TYPE = 70 ) 
and tasks.VERSION_NUMBER = tinst.VERSION_NUMBER
and tasks.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_TASKS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_TASKS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_TASKS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_TASKS]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.process.' + Replace(otype.OBJECT_TYPE_NAME,' ','') "CLASS_ID", 
     otype.OBJECT_TYPE_NAME + '_' + ltrim(str(tasks.TASK_ID)) "ELEMENT_ID", tasks.VERSION_NUMBER "VERSION_NUM",
	   tasks.TASK_NAME "ELEMENT_NAME", tasks.TASK_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", tasks.COMMENTS "ELEMENT_DESC",
	   '' "ELEMENT_USAGE", otype.OBJECT_TYPE_NAME "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE",
	   'REUSABLE' "ELEMENT_ATTR1", 'Yes' "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2",
	   'TASK_PROPERTY' "ELEMENT_ATTR3", str(tasks.TASK_PROPERTY) "ELEMENT_VALUE3",
     (CASE WHEN tasks.IS_VALID=1 THEN 'Y' ELSE 'N' END) "VALID_FLAG",  (CASE WHEN tasks.IS_ENABLED=0 THEN 'Y' ELSE 'N' END) "DISABLED_FLAG",
	   '' "SRC_CREATE_DT", LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   tasks.SUBJECT_ID	"SUBJECT_ID"
       from OPB_TASK tasks, OPB_OBJECT_TYPE otype
	  where otype.OBJECT_TYPE_ID = tasks.TASK_TYPE and
              IS_REUSABLE = 1 and tasks.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_TGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_TGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_TGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_TGTS]
AS
select
' ' "REPOSITORY_ID",
'com.informatica.powercenter.map.TargetDefinition' "CLASS_ID",
       'Target Definition_' + ltrim(str(targ.TARGET_ID)) "ELEMENT_ID", targ.VERSION_NUMBER "VERSION_NUM",
	   targ.TARGET_NAME "ELEMENT_NAME", targ.TARGET_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", targ.TARGET_DESC "ELEMENT_DESC",
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE",
	  'Target Definition' "ELEMENT_SUBTYPE",
	 'BUSINESS_NAME' "ELEMENT_ATTR1", BUSINESS_NAME "ELEMENT_VALUE1",
	 'DATABASE_TYPE' "ELEMENT_ATTR2", mtype.DBTYPE_NAME "ELEMENT_VALUE2",
	 '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
'Y' "VALID_FLAG", 'N' "DISABLED_FLAG",
'' "SRC_CREATE_DT", LAST_SAVED "SRC_UPDATE_DT",
	 '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   targ.SUBJ_ID	"SUBJECT_ID"
    from OPB_TARG targ,  OPB_MMD_DBTYPE mtype
	where mtype.DBTYPE_ID = DBTYPE and targ.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_TGTWDGFLD].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_TGTWDGFLD]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_TGTWDGFLD] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_TGTWDGFLD]
AS 
select ' ' "REPOSITORY_ID", 
     'com.informatica.powercenter.map.TargetDefinitionPort' "CLASS_ID",
     'Target Definition_' + 'Field_' +
     ltrim(str(targ.TARGET_ID)) + '_' + ltrim(str(fld.FLDID)) "ELEMENT_ID" ,
     targ.VERSION_NUMBER "VERSION_NUM",
	   fld.TARGET_NAME "ELEMENT_NAME", fld.TARGET_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", fld.TARGET_DESC "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 
           'Target Definition Field' "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE", 
	   'BUSINESS_NAME' "ELEMENT_ATTR1", fld.BUSINESS_NAME "ELEMENT_VALUE1",
	   'precision' "ELEMENT_ATTR2",  LTRIM(STR(fld.DPREC)) "ELEMENT_VALUE2", 
	   'scale' "ELEMENT_ATTR3", LTRIM(STR(fld.DSCALE)) "ELEMENT_VALUE3",
     'Y' "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", targ.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   targ.SUBJ_ID	"SUBJECT_ID"
    from OPB_TARG targ, OPB_TARG_FLD fld
	where 
              fld.TARGET_ID = targ.TARGET_ID and targ.VERSION_NUMBER = fld.VERSION_NUMBER
and targ.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_TSK_CMDLINE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_TSK_CMDLINE]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_TSK_CMDLINE] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_TSK_CMDLINE]
AS 
select ' ' "REPOSITORY_ID", 
	'com.informatica.powercenter.process.CommandLine' "CLASS_ID", 
        'CommandLine_' + ltrim(str(tasks.TASK_ID))+'~'+
	ltrim(str(tval.INSTANCE_ID))+'~'+ltrim(str(tval.EXEC_ORDER)) "ELEMENT_ID", 
	tasks.VERSION_NUMBER "VERSION_NUM",
	CASE WHEN tval.VAL_NAME IS NULL THEN 'CommandLineTask'+ltrim(str(tval.EXEC_ORDER))
	ELSE tval.VAL_NAME END "ELEMENT_NAME", 
	CASE WHEN tval.VAL_NAME IS NULL THEN 'CommandLineTask'+ltrim(str(tval.EXEC_ORDER))
	ELSE tval.VAL_NAME END "ELEMENT_LABEL",
	'' "ELEMENT_ALIAS", DESCRIPTION "ELEMENT_DESC",
	'' "ELEMENT_USAGE", 'CommandLine' "ELEMENT_TYPE",
	'' "ELEMENT_SUBTYPE",
	'command' "ELEMENT_ATTR1", PM_VALUE "ELEMENT_VALUE1",
	'overridden' "ELEMENT_ATTR2", CASE WHEN tval.INSTANCE_ID<>0 THEN 'Yes' END "ELEMENT_VALUE2",
	'executionOrder' "ELEMENT_ATTR3", str(tval.EXEC_ORDER) "ELEMENT_VALUE3",
        'Y' "VALID_FLAG",  'N' "DISABLED_FLAG",
	'' "SRC_CREATE_DT", tasks.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",  '' "EFF_TO_DT",
	tasks.SUBJECT_ID	"SUBJECT_ID"
from 
	OPB_TASK tasks,
	OPB_TASK_VAL_LIST  tval
where  
	tasks.TASK_TYPE = 58 and
	tasks.TASK_ID =  tval.TASK_ID AND
	tasks.VERSION_NUMBER =  tval.VERSION_NUMBER AND
	tval.LINE_NO = 1 AND
	tasks.IS_VISIBLE = 1 AND
	tval.SESSION_ID = 0 AND	
	tval.INSTANCE_ID = 0
UNION ALL
select  ' ' "REPOSITORY_ID", 
	'com.informatica.powercenter.process.CommandLine' "CLASS_ID", 
	'CommandLine_' + ltrim(str(tval.TASK_ID))+'~'+
	ltrim(str(tval.INSTANCE_ID))+'~'+ltrim(str(tval.EXEC_ORDER)) "ELEMENT_ID", 
	wflow.VERSION_NUMBER "VERSION_NUM",
	CASE WHEN tval.VAL_NAME IS NULL THEN 'CommandLineTask'+ltrim(str(tval.EXEC_ORDER))
	ELSE tval.VAL_NAME END "ELEMENT_NAME", 
	CASE WHEN tval.VAL_NAME IS NULL THEN 'CommandLineTask'+ltrim(str(tval.EXEC_ORDER))
	ELSE tval.VAL_NAME END "ELEMENT_LABEL",
	'' "ELEMENT_ALIAS", DESCRIPTION "ELEMENT_DESC",
	'' "ELEMENT_USAGE", 'CommandLine' "ELEMENT_TYPE",
	'' "ELEMENT_SUBTYPE",
	'command' "ELEMENT_ATTR1", PM_VALUE "ELEMENT_VALUE1",
	'overridden' "ELEMENT_ATTR2", CASE WHEN tval.INSTANCE_ID<>0 THEN 'Yes' END "ELEMENT_VALUE2",
	'executionOrder' "ELEMENT_ATTR3", str(tval.EXEC_ORDER) "ELEMENT_VALUE3",
	'Y' "VALID_FLAG",  'N' "DISABLED_FLAG",
	'' "SRC_CREATE_DT", wflow.LAST_SAVED "SRC_UPDATE_DT",
	'' "EFF_FROM_DT",  '' "EFF_TO_DT",
	wflow.SUBJECT_ID	"SUBJECT_ID"
from 
	OPB_TASK wflow,
	OPB_TASK_INST tinst,
	OPB_TASK_VAL_LIST  tval
where  
	tval.TASK_TYPE = 58 and
	tinst.INSTANCE_ID =  tval.INSTANCE_ID AND
	tval.WORKFLOW_ID = wflow.TASK_ID AND 
	tinst.VERSION_NUMBER =  tval.VERSION_NUMBER AND
	wflow.VERSION_NUMBER =  tval.VERSION_NUMBER AND
	tval.LINE_NO = 1 AND
	wflow.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_WDGINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_WDGINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_WDGINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_WDGINST]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+ 'Instance' "CLASS_ID", 
       'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME + '_' + ltrim(str(winst.MAPPING_ID)) + '_'+ ltrim(str(winst.INSTANCE_ID)) "ELEMENT_ID",
 	   winst.VERSION_NUMBER "VERSION_NUM",
	   winst.INSTANCE_NAME "ELEMENT_NAME", winst.INSTANCE_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", winst.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE", 
	   'WIDGET_INSTANCE_' + otype.OBJECT_TYPE_NAME  "ELEMENT_SUBTYPE", 
	   '' "ELEMENT_ATTR1", '' "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2", 
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
  'Y' "VALID_FLAG", 'N' "DISABLED_FLAG", 
  '' "SRC_CREATE_DT", map.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   map.SUBJECT_ID	"SUBJECT_ID"
	   from OPB_WIDGET_INST winst, OPB_OBJECT_TYPE otype, OPB_MAPPING map
	   where winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID and
	         map.MAPPING_ID = winst.MAPPING_ID and map.VERSION_NUMBER = winst.VERSION_NUMBER 
and map.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_WDGT_FLDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_WDGT_FLDS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_WDGT_FLDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_WDGT_FLDS]
AS 
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','') + 'Port' "CLASS_ID", 
otype.OBJECT_TYPE_NAME + '_' + 'Field_' + ltrim(str(widget.WIDGET_ID)) +
'_' + ltrim(str(fld.FIELD_ID)) "ELEMENT_ID" , 
          widget.VERSION_NUMBER "VERSION_NUM",
	   fld.FIELD_NAME "ELEMENT_NAME", fld.FIELD_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", fld.COMMENTS "ELEMENT_DESC", 
	   '' "ELEMENT_USAGE", 
     otype.OBJECT_TYPE_NAME + ' Field' "ELEMENT_TYPE",
	   '' "ELEMENT_SUBTYPE",
	   'DEFAULT_VALUE' "ELEMENT_ATTR1", fld.DEFAULT_VALUE "ELEMENT_VALUE1",
	   '' "ELEMENT_ATTR2", '' "ELEMENT_VALUE2",
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
     'Y' "VALID_FLAG", 'N' "DISABLED_FLAG",
	   '' "SRC_CREATE_DT", widget.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   widget.SUBJECT_ID	"SUBJECT_ID"
    from OPB_WIDGET widget, OPB_WIDGET_FIELD fld, OPB_OBJECT_TYPE otype
	where otype.OBJECT_TYPE_ID = widget.WIDGET_TYPE and
              widget.WIDGET_ID = fld.WIDGET_ID and
              widget.VERSION_NUMBER = fld.VERSION_NUMBER
and widget.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_ELMNT_WDGTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_ELMNT_WDGTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_ELMNT_WDGTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_ELMNT_WDGTS]
AS
select ' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.' + Replace(otype.OBJECT_TYPE_NAME,' ','') "CLASS_ID", 
     otype.OBJECT_TYPE_NAME +  '_'+  ltrim(str(widg.WIDGET_ID)) "ELEMENT_ID", widg.VERSION_NUMBER "VERSION_NUM",
	   widg.WIDGET_NAME "ELEMENT_NAME", widg.WIDGET_NAME "ELEMENT_LABEL",
	   '' "ELEMENT_ALIAS", widg.COMMENTS "ELEMENT_DESC",
	   '' "ELEMENT_USAGE", 'Application' "ELEMENT_TYPE",
	   otype.OBJECT_TYPE_NAME "ELEMENT_SUBTYPE",
	   'REUSABLE' "ELEMENT_ATTR1", 'Yes' "ELEMENT_VALUE1",
	   CASE WHEN map.IS_VALID IS NULL THEN '' ELSE 'VALID' END   "ELEMENT_ATTR2", 
   	   CASE WHEN map.IS_VALID IS NULL THEN '' ELSE ( CASE WHEN  map.IS_VALID = 0 THEN 'No' ELSE 'Yes' END) END   "ELEMENT_VALUE2",  
	   '' "ELEMENT_ATTR3", '' "ELEMENT_VALUE3",
           CASE WHEN map.IS_VALID = 0 THEN 'N' ELSE 'Y' END "VALID_FLAG", 'N' "DISABLED_FLAG", 
	   '' "SRC_CREATE_DT", widg.LAST_SAVED "SRC_UPDATE_DT",
	   '' "EFF_FROM_DT",  '' "EFF_TO_DT",
	   widg.SUBJECT_ID	"SUBJECT_ID"
    from OPB_OBJECT_TYPE otype, OPB_WIDGET widg LEFT OUTER JOIN OPB_MAPPING map ON
	 widg.WIDGET_ID = map.REF_WIDGET_ID and map.IS_VISIBLE = 1
	where otype.OBJECT_TYPE_ID = WIDGET_TYPE and IS_REUSABLE = 1 and widg.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_IME_CONNECTION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_CONNECTION]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_CONNECTION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_CONNECTION]
AS
select  ' ' "REPOSITORY_ID", 
		'com.informatica.powercenter.deployment.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "CLASS_ID", 
        otype.OBJECT_TYPE_NAME + '_' + ltrim(str(cnx.OBJECT_ID)) "CONNECTION_ID", 
	'' "CATALOG_ID",
	'' "DATA_MGR_CLASS_ID",
	'' "DATA_MANAGER_ID",
	'' "SCHEMA_CLASS_ID",
	'' "SCHEMA_ID",
	otype.OBJECT_TYPE_NAME "CONNECTION_TYPE", 
	cnx.OBJECT_NAME "CONNECTION_NAME", 
	cnx.COMMENTS "CONNECTION_DESC", 
	mmd_cnx.CNX_SUBTYPE_NAME "CONNECTION_SUBTYPE", 
	cnx.CONNECT_STRING "HOST_NAME", '' "SCHEMA_NAME",
        cnx.USER_NAME "USER_NAME", '' "ADDRESS",
        '' "CONNECTION_TEXT1", '' "CONNECTION_TEXT2",
        '' "CONNECTION_TEXT3", '1' "VERSION_NUM",
        '' "SRC_CREATE_DT", '' "SRC_UPDATE_DT",
        '' "EFF_FROM_DT", '' "EFF_TO_DT"
    from OPB_CNX cnx, OPB_OBJECT_TYPE otype, OPB_REPOSIT repo, OPB_MMD_CNX mmd_cnx
	where otype.OBJECT_TYPE_ID in (73, 74, 75, 76, 77) and repo.RECID = 1 and
              otype.OBJECT_TYPE_ID = cnx.OBJECT_TYPE and
              cnx.OBJECT_TYPE = mmd_cnx.CNX_OBJECT_TYPE and
              cnx.OBJECT_SUBTYPE = mmd_cnx.CNX_OBJECT_SUBTYPE and
              repo.RECID = 1
GO

GO
--SqlScripter----[dbo].[V_IME_EVENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_EVENT]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_EVENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_EVENT]
AS
select  ' ' "REPOSITORY_ID",
        'com.informatica.powercenter.process.TriggerRunEvent' "CLASS_ID",
        'PC_DEFAULT_EVENT_OBJECT' "EVENT_ID",
        'External' "EVENT_TYPE", 'Event-based' "FREQUENCY_TYPE",
        '' "EVENT_NAME", ''"EVENT_DESC", '' "EVENT_USAGE",
        '' "EVENT_TEXT1",'' "EVENT_TEXT2", '' "EVENT_TEXT3",
        '1' "VERSION_NUM", 
	      '' "SRC_CREATE_DT", '' "SRC_UPDATE_DT",
	      '' "EFF_FROM_DT", '' "EFF_TO_DT"
from OPB_REPOSIT repo where repo.RECID = 1
GO

GO
--SqlScripter----[dbo].[V_IME_PART_SINST].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_PART_SINST]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_PART_SINST] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_PART_SINST]
AS
SELECT ' ' "REPOSITORY_ID",
'com.informatica.powercenter.process.' +REPLACE(otype.OBJECT_TYPE_NAME,' ','') + 
                   'Partition' "PARTITION_CLASS_ID",
         otype.OBJECT_TYPE_NAME + '_' + 'Partition' + '_' +
                   LTRIM(STR(partdef.SESSION_ID)) + '_' +
                   LTRIM(STR(partdef.SESS_WIDG_INST_ID)) + '_' +
                   LTRIM(STR(partdef.PARTITION_ID)) "PARTITION_ID",
       'TASK_INSTANCE_' + otype.OBJECT_TYPE_NAME +'_'+
	         LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
       'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','')+'TaskInstance' "TASK_CLASS_ID",
	  CASE WHEN swinst.PARTITION_TYPE = 1 THEN 'Pass-Through' ELSE (
	  CASE WHEN swinst.PARTITION_TYPE = 3 THEN 'Round-Robin' ELSE (
	  CASE WHEN swinst.PARTITION_TYPE = 4 THEN 'Key-Range' ELSE ( 
	  CASE WHEN swinst.PARTITION_TYPE = 5 THEN 'Hash-Key' 
	  ELSE 'Other' END) END) END) END "PARTITION_TYPE",
	   partdef.PARTITION_NAME "PARTITION_NAME",
	   partdef.PARTITION_NAME "PARTITION_DESC",
	   '' "PARTITION_TEXT1",
	   '' "PARTITION_TEXT2",
	   '' "PARTITION_TEXT3",
         '1' "VERSION_NUM",
	   partdef.LAST_SAVED "SRC_CREATE_DT",
         partdef.LAST_SAVED "SRC_UPDATE_DT",
 	   '' "EFF_FROM_DT",
         '' "EFF_TO_DT",
tsk.SUBJECT_ID "SUBJECT_ID"
FROM   OPB_REPOSIT repo,
       OPB_OBJECT_TYPE otype,
       OPB_PARTITION_DEF partdef,
       OPB_TASK_INST tinst,
       OPB_TASK tsk,
       OPB_SWIDGET_INST swinst, OPB_TASK wkflow_or_wklet
WHERE  
  repo.RECID = 1 AND
  otype.OBJECT_TYPE_ID = 68 AND
  otype.OBJECT_TYPE_ID = tinst.TASK_TYPE AND
  partdef.SESSION_ID = tinst.TASK_ID AND partdef.SESSION_ID = tsk.TASK_ID
AND partdef.VERSION_NUMBER = tsk.VERSION_NUMBER
AND tsk.IS_VISIBLE = 1
AND tsk.TASK_TYPE = 68
AND
  tsk.IS_REUSABLE = 0 AND
  tinst.TASK_ID = tsk.TASK_ID AND tinst.WORKFLOW_ID = wkflow_or_wklet.TASK_ID
AND tinst.VERSION_NUMBER = wkflow_or_wklet.VERSION_NUMBER
AND wkflow_or_wklet.TASK_TYPE IN (70,71)
AND wkflow_or_wklet.IS_VISIBLE = 1
AND
  swinst.SESS_WIDG_INST_ID = partdef.SESS_WIDG_INST_ID AND
  swinst.SESSION_ID = partdef.SESSION_ID AND swinst.VERSION_NUMBER = partdef.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[V_IME_PARTITION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_PARTITION]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_PARTITION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_PARTITION]
AS
select  ' ' "REPOSITORY_ID",
	   'com.informatica.powercenter.process.' +REPLACE(otype.OBJECT_TYPE_NAME,' ','') + 
                   'Partition' "PARTITION_CLASS_ID",
         otype.OBJECT_TYPE_NAME + '_' + 'Partition' + '_' +
                   ltrim(str(partdef.SESSION_ID)) + '_' +
                   ltrim(str(partdef.SESS_WIDG_INST_ID)) + '_' +
                   ltrim(str(partdef.PARTITION_ID)) "PARTITION_ID",
         otype.OBJECT_TYPE_NAME + '_' + 
                ltrim(str(partdef.SESSION_ID)) "TASK_ID",
         'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TASK_CLASS_ID", 
	  CASE WHEN swinst.PARTITION_TYPE = 1 THEN 'Pass-Through' ELSE (
	  CASE WHEN swinst.PARTITION_TYPE = 3 THEN 'Round-Robin' ELSE (
	  CASE WHEN swinst.PARTITION_TYPE = 4 THEN 'Key-Range' ELSE ( 
	  CASE WHEN swinst.PARTITION_TYPE = 5 THEN 'Hash-Key' 
	  ELSE 'Other' END) END) END) END "PARTITION_TYPE",
	   partdef.PARTITION_NAME "PARTITION_NAME",
	   partdef.PARTITION_NAME "PARTITION_DESC",
	   '' "PARTITION_TEXT1",
	   '' "PARTITION_TEXT2",
	   '' "PARTITION_TEXT3",
         '1' "VERSION_NUM",
	   partdef.LAST_SAVED "SRC_CREATE_DT",
         partdef.LAST_SAVED "SRC_UPDATE_DT",
 	   '' "EFF_FROM_DT",
         '' "EFF_TO_DT",
tsk.SUBJECT_ID "SUBJECT_ID"
FROM   OPB_REPOSIT repo,
       OPB_OBJECT_TYPE otype,
       OPB_PARTITION_DEF partdef,
       OPB_TASK tsk,
       OPB_SWIDGET_INST swinst
WHERE  
  repo.RECID = 1 AND
  otype.OBJECT_TYPE_ID = 68 AND
  otype.OBJECT_TYPE_ID = tsk.TASK_TYPE AND
  partdef.SESSION_ID = tsk.TASK_ID AND partdef.VERSION_NUMBER = tsk.VERSION_NUMBER
AND tsk.IS_VISIBLE = 1
AND
  tsk.IS_REUSABLE = 1 AND
  swinst.SESS_WIDG_INST_ID = partdef.SESS_WIDG_INST_ID AND
  swinst.SESSION_ID = partdef.SESSION_ID AND swinst.VERSION_NUMBER = partdef.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[V_IME_RUN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_RUN]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_RUN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_RUN]
AS 
select     
	' ' "REPOSITORY_ID",          
	'com.informatica.powercenter.operation.Run' "CLASS_ID",       
	'PC_RUN_' + ltrim(str(wflow_run.WORKFLOW_RUN_ID)) "RUN_ID",           
	'com.informatica.powercenter.deployment.IntegrationService' "SERVER_CLASS_ID",      
	'Integration Service_' + ltrim(str(wflow_run.SERVER_ID)) "SERVER_ID",    
	''  USER_ACCT_CLASS_ID, 	     ''  USER_ACCOUNT_ID, 	
	'com.informatica.powercenter.process.TriggerRunEvent'  EVENT_CLASS_ID, 
	'PC_DEFAULT_EVENT_OBJECT'  EVENT_ID,                    
	'com.informatica.powercenter.process.'+REPLACE(otype.OBJECT_TYPE_NAME,' ','') "ACTIVITY_CLASS_ID",     
	otype.OBJECT_TYPE_NAME + '_' + ltrim(str(wflow_run.WORKFLOW_ID)) "ACTIVITY_ID",     
	'com.informatica.powercenter.package.Folder'  "FOLDER_CLASS_ID", 	
	otype2.OBJECT_TYPE_NAME + '_' + ltrim(str(subject.SUBJ_ID))  "FOLDER_ID",
	'com.informatica.powercenter.operation.RunStatus'  "STATUS_CLASS_ID",
	ltrim(str(wflow_run.RUN_STATUS_CODE)) + '~' + ltrim(str(wflow_run.RUN_ERR_CODE)) "STATUS_ID",   
	wflow_run.START_TIME "RUN_START_DT",       
	wflow_run.END_TIME "RUN_END_DT",       
	wflow_run.WORKFLOW_RUN_ID "RUN_NUMBER", 
	'' 	     "PARENT_RUN_NUMBER",      
	'Y' "NORMAL_RUN_FLAG",            
	wflow_run.RUN_ERR_MSG "MESSAGE",          
	wflow_run.LOG_FILE "ACTIVITY_RUN_TEXT1",        
	'' "ACTIVITY_RUN_TEXT2", 
	'' "ACTIVITY_RUN_TEXT3",         
	'' "SRC_CREATE_DT",  
	'' "SRC_UPDATE_DT",
	subject.SUBJ_ID "SUBJECT_ID"    
from 
	OPB_WFLOW_RUN wflow_run,
	OPB_OBJECT_TYPE otype,
	OPB_REPOSIT repo,
	OPB_OBJECT_TYPE otype1,
	OPB_OBJECT_TYPE otype2,
	OPB_WORKFLOW workflow,
	OPB_TASK tasks,
	OPB_SUBJECT subject      
where 
	otype.OBJECT_TYPE_ID  = 71 and         
	repo.RECID = 1 and         
	wflow_run.WORKFLOW_ID = workflow.WORKFLOW_ID and wflow_run.VERSION_NUMBER = workflow.VERSION_NUMBER and 
	otype1.OBJECT_TYPE_ID = 41 and         
	otype2.OBJECT_TYPE_ID = 29 and         
	tasks.TASK_ID = workflow.WORKFLOW_ID and tasks.VERSION_NUMBER = workflow.VERSION_NUMBER
and tasks.IS_VISIBLE = 1
and 
	tasks.TASK_TYPE = 71 and        
	tasks.SUBJECT_ID = subject.SUBJ_ID
GO

GO
--SqlScripter----[dbo].[V_IME_TASK_LOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_IME_TASK_LOG]') IS NULL EXEC('CREATE VIEW [dbo].[V_IME_TASK_LOG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_IME_TASK_LOG]
AS
select  ' ' "REPOSITORY_ID", 
        'com.informatica.powercenter.deployment.IntegrationService' "SERVER_CLASS_ID", 
        'Integration Service_' + ltrim(str(wflow_run.SERVER_ID)) "SERVER_ID", 
	''  USER_ACCT_CLASS_ID,
	''  USER_ACCOUNT_ID,
	'com.informatica.powercenter.process.TriggerRunEvent'  EVENT_CLASS_ID,
	'PC_DEFAULT_EVENT_OBJECT'  EVENT_ID,
	taskinst_log.START_TIME "START_DATE",
	taskinst_log.END_TIME "END_DATE",
	'com.informatica.powercenter.operation.Run'  "RUN_CLASS_ID",
	'PC_RUN_' + ltrim(str(taskinst_log.WORKFLOW_RUN_ID))  "RUN_ID",
	'com.informatica.powercenter.process.' + REPLACE(otype2.OBJECT_TYPE_NAME,' ','')  "ACTIVITY_CLASS_ID",
	otype2.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.WORKFLOW_ID))  "ACTIVITY_ID",
	'com.informatica.powercenter.process.' + REPLACE(otype3.OBJECT_TYPE_NAME,' ','')+'TaskInstance'  "STEP_CLASS_ID",
	'TASK_INSTANCE_' + otype3.OBJECT_TYPE_NAME + '_'+ ltrim(str(taskinst_log.INSTANCE_ID)) "STEP_ID",
	CASE WHEN task.IS_REUSABLE = 1 THEN 'com.informatica.powercenter.process.'+REPLACE(otype3.OBJECT_TYPE_NAME,' ','') ELSE
	'com.informatica.powercenter.process.' +REPLACE(otype3.OBJECT_TYPE_NAME,' ','')+'TaskInstance'  END "TASK_CLASS_ID",
	CASE WHEN task.IS_REUSABLE = 1 THEN 
	otype3.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.TASK_ID)) ELSE
	'TASK_INSTANCE_' + otype3.OBJECT_TYPE_NAME + '_'+ ltrim(str(taskinst_log.INSTANCE_ID)) END "TASK_ID",
	''  "TRANSFORM_CLASS_ID",
	''  "TRANSFORM_ID",
        'com.informatica.powercenter.package' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')  "FOLDER_CLASS_ID",
	otype.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.SUBJECT_ID))  "FOLDER_ID",
	'com.informatica.powercenter.operation.RunStatus'  "STATUS_CLASS_ID",
	ltrim(str(taskinst_log.RUN_STATUS_CODE)) + '~' + ltrim(str(taskinst_log.RUN_ERR_CODE))  "STATUS_ID",
	taskinst_log.CHILD_RUN_ID  "STEP_RUN_NUMBER",
	0  "INPUT_ROWS",
	0  "REJECTED_ROWS",
	0  "FAILED_ROWS",
	0  "OUTPUT_ROWS",
	0  "LOG_BLOCK_READS",
	0  "PHY_BLOCK_READS",
	0  "LOG_BLOCK_WRITES",
	0  "PHY_BLOCK_WRITES",
	datediff(s,taskinst_log.START_TIME,taskinst_log.END_TIME)*1000  "EXECUTION_MSECS",
	0  "READ_MSECS",
	0  "WRITE_MSECS",
	0  "IDLE_WAIT_MSECS",
	0  "BUSY_WAIT_MSECS",
	0  "IDLE_WAIT_EVENTS",
	0  "BUSY_WAIT_EVENTS",       taskinst_log.RUN_ERR_MSG "MESSAGE",
	task.SUBJECT_ID "SUBJECT_ID"
from OPB_OBJECT_TYPE otype, OPB_OBJECT_TYPE otype1, OPB_REPOSIT repo, 
           OPB_OBJECT_TYPE otype2, OPB_OBJECT_TYPE otype3, OPB_WORKFLOW workflow,
           OPB_TASK_INST_RUN taskinst_log,OPB_WFLOW_RUN wflow_run,
           OPB_TASK task, OPB_TASK wkflow_task
	   where repo.RECID = 1 and
           otype.OBJECT_TYPE_ID = 29 and 
           taskinst_log.WORKFLOW_RUN_ID = wflow_run.WORKFLOW_RUN_ID and
           taskinst_log.WORKFLOW_ID = workflow.WORKFLOW_ID and workflow.WORKFLOW_ID = wkflow_task.TASK_ID
and workflow.VERSION_NUMBER = wkflow_task.VERSION_NUMBER
and wkflow_task.TASK_TYPE = 71
and wkflow_task.IS_VISIBLE = 1
and
           otype1.OBJECT_TYPE_ID = 41 and
           otype2.OBJECT_TYPE_ID = 71 and
           otype3.OBJECT_TYPE_ID = 70 and
           taskinst_log.TASK_TYPE = 70 and
           taskinst_log.TASK_ID = task.TASK_ID and taskinst_log.VERSION_NUMBER = task.VERSION_NUMBER
AND taskinst_log.FRAGMENT_ID IN (1,-1)
and task.IS_VISIBLE = 1
and task.TASK_TYPE = 70
UNION ALL
select  ' ' "REPOSITORY_ID", 
        'com.informatica.powercenter.deployment.IntegrationService' "SERVER_CLASS_ID", 
        'Integration Service_' + ltrim(str(wflow_run.SERVER_ID)) "SERVER_ID", 
	''  USER_ACCT_CLASS_ID,
	''  USER_ACCOUNT_ID,
	'com.informatica.powercenter.process.TriggerRunEvent'  EVENT_CLASS_ID,
	'PC_DEFAULT_EVENT_OBJECT'  EVENT_ID,
	taskinst_log.START_TIME "START_DATE",
	taskinst_log.END_TIME "END_DATE",
	'com.informatica.powercenter.operation.Run' "RUN_CLASS_ID",
	'PC_RUN_' + ltrim(str(taskinst_log.WORKFLOW_RUN_ID))  "RUN_ID",
	'com.informatica.powercenter.process.'+REPLACE(otype2.OBJECT_TYPE_NAME,' ','')   "ACTIVITY_CLASS_ID",
	otype2.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.WORKFLOW_ID))  "ACTIVITY_ID",
	'com.informatica.powercenter.process.' + REPLACE(otype3.OBJECT_TYPE_NAME,' ','')+'TaskInstance'  "STEP_CLASS_ID",
	'TASK_INSTANCE_' + otype3.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.INSTANCE_ID)) "STEP_ID",
	CASE WHEN task.IS_REUSABLE = 1 THEN 'com.informatica.powercenter.process.'+REPLACE(otype3.OBJECT_TYPE_NAME,' ','') ELSE
	'com.informatica.powercenter.process.' +REPLACE(otype3.OBJECT_TYPE_NAME,' ','')+'TaskInstance'  END "TASK_CLASS_ID",
	CASE WHEN task.IS_REUSABLE = 1 THEN 
	otype3.OBJECT_TYPE_NAME + '_' + ltrim(str(taskinst_log.TASK_ID)) ELSE
	'TASK_INSTANCE_' + otype3.OBJECT_TYPE_NAME + '_'+ ltrim(str(taskinst_log.INSTANCE_ID)) END "TASK_ID",
	'com.informatica.powercenter.map.'+REPLACE(otype4.OBJECT_TYPE_NAME,' ','') "TRANSFORM_CLASS_ID",
	otype4.OBJECT_TYPE_NAME + '_' + ltrim(str(sess.MAPPING_ID)) "TRANSFORM_ID",
       'com.informatica.powercenter.package.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','')  "FOLDER_CLASS_ID",
	otype.OBJECT_TYPE_NAME + '_' +  ltrim(str(taskinst_log.SUBJECT_ID))  "FOLDER_ID",
	'com.informatica.powercenter.operation.RunStatus'  "STATUS_CLASS_ID",
	ltrim(str(taskinst_log.RUN_STATUS_CODE)) + '~' + ltrim(str(taskinst_log.RUN_ERR_CODE))  "STATUS_ID",
	taskinst_log.WORKLET_RUN_ID   "STEP_RUN_NUMBER",
	sesstask_log.SRC_SUCCESS_ROWS  "INPUT_ROWS",
	sesstask_log.SRC_FAILED_ROWS  "REJECTED_ROWS",
	sesstask_log.TARG_FAILED_ROWS  "FAILED_ROWS",
	sesstask_log.TARG_SUCCESS_ROWS  "OUTPUT_ROWS",
	0  "LOG_BLOCK_READS",
	0  "PHY_BLOCK_READS",
	0  "LOG_BLOCK_WRITES",
	0  "PHY_BLOCK_WRITES",
	datediff(s,taskinst_log.START_TIME,taskinst_log.END_TIME)*1000  "EXECUTION_MSECS",
	0  "READ_MSECS",
	0  "WRITE_MSECS",
	0  "IDLE_WAIT_MSECS",
	0  "BUSY_WAIT_MSECS",
	0  "IDLE_WAIT_EVENTS",
	0  "BUSY_WAIT_EVENTS",       taskinst_log.RUN_ERR_MSG "MESSAGE",
task.SUBJECT_ID "SUBJECT_ID"
from OPB_OBJECT_TYPE otype, OPB_OBJECT_TYPE otype1, OPB_REPOSIT repo, 
           OPB_OBJECT_TYPE otype2, OPB_OBJECT_TYPE otype3, OPB_OBJECT_TYPE otype4, 
	   OPB_WORKFLOW workflow, OPB_SESSION sess, OPB_SESS_TASK_LOG sesstask_log,
           OPB_TASK_INST_RUN taskinst_log,OPB_WFLOW_RUN wflow_run,
           OPB_TASK task, OPB_TASK wkflow_task
	   where repo.RECID = 1 and
           otype.OBJECT_TYPE_ID = 29 and 
           taskinst_log.WORKFLOW_RUN_ID = wflow_run.WORKFLOW_RUN_ID and
           taskinst_log.WORKFLOW_ID = workflow.WORKFLOW_ID and workflow.WORKFLOW_ID = wkflow_task.TASK_ID
and workflow.VERSION_NUMBER = wkflow_task.VERSION_NUMBER
and wkflow_task.TASK_TYPE = 71
and wkflow_task.IS_VISIBLE = 1
and
           otype1.OBJECT_TYPE_ID = 41 and
           otype2.OBJECT_TYPE_ID = 71 and
           otype3.OBJECT_TYPE_ID = 68 and
           otype4.OBJECT_TYPE_ID = 21 and
           taskinst_log.TASK_TYPE = 68 and
           taskinst_log.TASK_ID = sess.SESSION_ID and taskinst_log.VERSION_NUMBER = sess.VERSION_NUMBER and
           taskinst_log.WORKFLOW_ID = sesstask_log.WORKFLOW_ID and
           taskinst_log.WORKFLOW_RUN_ID = sesstask_log.WORKFLOW_RUN_ID and
           taskinst_log.WORKLET_RUN_ID = sesstask_log.WORKLET_RUN_ID and
           taskinst_log.INSTANCE_ID = sesstask_log.INSTANCE_ID and           
           taskinst_log.TASK_ID = task.TASK_ID and taskinst_log.VERSION_NUMBER = task.VERSION_NUMBER
AND taskinst_log.FRAGMENT_ID IN (1,-1)
and task.IS_VISIBLE = 1
and task.TASK_TYPE = 68
GO

GO
--SqlScripter----[dbo].[V_LKP_FLDS_IN_COND_EXTRACT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_LKP_FLDS_IN_COND_EXTRACT]') IS NULL EXEC('CREATE VIEW [dbo].[V_LKP_FLDS_IN_COND_EXTRACT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_LKP_FLDS_IN_COND_EXTRACT]
(WIDGET_ID,FIELD_NAME,FIELD_ID,MAPPING_ID,REF_WIDGET_ID,MAP_INSTANCE_ID,
EXPRESSION,MAP_UPDATE_DATE,WIDGET_UPDATE_DATE,SUBJECT_ID) AS
SELECT 
wdgt.WIDGET_ID "WIDGET_ID",
wdgtfld.FIELD_NAME "FIELD_NAME",
wdgtfld.FIELD_ID "FIELD_ID",
map.MAPPING_ID "MAPPING_ID",
map.REF_WIDGET_ID "REF_WIDGET_ID",
wdgtattr.INSTANCE_ID "MAP_INSTANCE_ID",
cast(wdgtattr.ATTR_VALUE as varchar(4000)) "EXPRESSION",
CAST(map.LAST_SAVED as datetime) "MAP_UPDATE_DATE",
CAST(wdgt.LAST_SAVED as datetime) "WIDGET_UPDATE_DATE",
wdgt.SUBJECT_ID "SUBJECT_ID"
FROM 
OPB_WIDGET wdgt,
OPB_WIDGET_FIELD wdgtfld,
OPB_WIDGET_ATTR wdgtattr,
OPB_WIDGET_INST wdgtinst,
OPB_MAPPING map
WHERE 
wdgt.WIDGET_ID = wdgtfld.WIDGET_ID AND
wdgt.WIDGET_ID = wdgtattr.WIDGET_ID AND
wdgtattr.ATTR_ID = 5 AND
wdgtattr.MAPPING_ID = wdgtinst.MAPPING_ID AND
wdgtattr.INSTANCE_ID = wdgtinst.INSTANCE_ID AND
wdgtattr.VERSION_NUMBER = wdgtinst.VERSION_NUMBER AND
map.VERSION_NUMBER = wdgtinst.VERSION_NUMBER AND
wdgt.VERSION_NUMBER = wdgtfld.VERSION_NUMBER AND
wdgtinst.MAPPING_ID = map.MAPPING_ID AND
wdgt.IS_VISIBLE = 1 AND 
map.IS_VISIBLE = 1 AND
wdgtattr.LINE_NO=1 AND
wdgt.WIDGET_TYPE=11 AND wdgtfld.PORTTYPE IN(1,3,7) 
UNION ALL			
SELECT 
wdgt.WIDGET_ID "WIDGET_ID",
wdgtfld.FIELD_NAME "FIELD_NAME",
wdgtfld.FIELD_ID "FIELD_ID",
map.MAPPING_ID "MAPPING_ID",
map.REF_WIDGET_ID "REF_WIDGET_ID",
wdgtinst.INSTANCE_ID "MAP_INSTANCE_ID",
cast(wdgtattr.ATTR_VALUE as varchar(4000)) "EXPRESSION",
CAST(map.LAST_SAVED as datetime) "MAP_UPDATE_DATE",
CAST(wdgt.LAST_SAVED as datetime) "WIDGET_UPDATE_DATE",
wdgt.SUBJECT_ID "SUBJECT_ID"
FROM
OPB_WIDGET wdgt,
OPB_WIDGET_FIELD wdgtfld,
OPB_WIDGET_ATTR wdgtattr,
OPB_MAPPING map,
OPB_WIDGET_INST wdgtinst
WHERE
wdgtinst.MAPPING_ID = map.MAPPING_ID AND
wdgtinst.WIDGET_ID = wdgt.WIDGET_ID AND
wdgt.WIDGET_ID = wdgtfld.WIDGET_ID AND
wdgt.WIDGET_ID = wdgtattr.WIDGET_ID AND
wdgt.IS_VISIBLE = 1 AND
map.IS_VISIBLE = 1 AND 
wdgt.VERSION_NUMBER = wdgtattr.VERSION_NUMBER AND
wdgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND 
wdgt.VERSION_NUMBER = wdgtfld.VERSION_NUMBER AND 
wdgtattr.ATTR_ID = 5 AND
wdgtattr.MAPPING_ID = 0 AND
wdgt.WIDGET_TYPE=11 AND 
wdgtattr.LINE_NO=1 AND
NOT EXISTS (SELECT 'X' FROM OPB_WIDGET_ATTR wdgtattr1 WHERE wdgtattr1.WIDGET_ID = wdgt.WIDGET_ID AND
wdgtattr1.MAPPING_ID=map.MAPPING_ID AND wdgtinst.INSTANCE_ID=wdgtattr1.INSTANCE_ID AND wdgtattr1.ATTR_ID = wdgtattr.ATTR_ID) AND 
wdgtfld.PORTTYPE IN(1,3,7)
GO

GO
--SqlScripter----[dbo].[V_PC8x_CONNECTION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_CONNECTION]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_CONNECTION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_CONNECTION]
AS
select REPOSITORY_ID, CLASS_ID, CONNECTION_ID,
       CATALOG_ID, DATA_MGR_CLASS_ID, DATA_MANAGER_ID,
       SCHEMA_CLASS_ID, SCHEMA_ID, CONNECTION_TYPE,
       CONNECTION_NAME, CONNECTION_DESC, CONNECTION_SUBTYPE,
       HOST_NAME, USER_NAME, SCHEMA_NAME, ADDRESS,
       CONNECTION_TEXT1, CONNECTION_TEXT2, CONNECTION_TEXT3,
       VERSION_NUM, SRC_CREATE_DT,
       SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT
from V_IME_CONNECTION
GO

GO
--SqlScripter----[dbo].[V_PC8x_DEFILE_CNX].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_DEFILE_CNX]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_DEFILE_CNX] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_DEFILE_CNX]
AS
select REPOSITORY_ID, CLASS_ID, CONNECTION_ID,
       CATALOG_ID, DATA_MGR_CLASS_ID, DATA_MANAGER_ID,
       SCHEMA_CLASS_ID, SCHEMA_ID, CONNECTION_TYPE,
       CONNECTION_NAME, CONNECTION_DESC, CONNECTION_SUBTYPE,
       HOST_NAME, USER_NAME, SCHEMA_NAME, ADDRESS,
       CONNECTION_TEXT1, CONNECTION_TEXT2, CONNECTION_TEXT3,
       VERSION_NUM, SRC_CREATE_DT,
       SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT
from V_DEFAULT_FILE_CNX
GO

GO
--SqlScripter----[dbo].[V_PC8x_ELEMENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_ELEMENT]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_ELEMENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_ELEMENT]
AS
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_SRCS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_TGTS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_WDGTS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_MAPPINGS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_WDGINST
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_TASKS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_TASKINST
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_FOLDERS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_LOCAL_SC
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_GLOBAL_SC
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_SRCWDGFLD
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_TGTWDGFLD
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_WDGT_FLDS
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_SERVICE
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_SW_COMP
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_DTYPES
UNION ALL
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
       SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from V_ELMNT_TSK_CMDLINE
GO

GO
--SqlScripter----[dbo].[V_PC8x_ELMNT_ASOC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_ELMNT_ASOC]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_ELMNT_ASOC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_ELMNT_ASOC]
AS
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WDG_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SRC_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_TGT_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG,  EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_RTASKS_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_L_SC_TO_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_G_SC_TO_FLDR
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SRCINST_SRC
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_TGTINST_TGT
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WDGINST_WDG
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WSRCTGT_MAP
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_REPO_FOLDER
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_FLDR_MAP
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_TASK_TSKINST
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WFLOW_T_INST
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WLET_T_INST
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SRCFLDS_SRCS
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_TGTFLDS_TGTS
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WFLDS_WDGTS
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SESSION_MAP
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_WFLOW_SRVC
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SWSYSTEM
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_SRVC_REPO
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_LSC_TO_ELMNT
UNION ALL
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG, EFF_FROM_DT, EFF_TO_DT , SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_ASC_CMD_CMDLINE
GO

GO
--SqlScripter----[dbo].[V_PC8x_ELMNT_ATTR_1].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_ELMNT_ATTR_1]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_ELMNT_ATTR_1] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_ELMNT_ATTR_1]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_SRCS
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_TGT
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_WDGT
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_TASK
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_METVAL
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_RMETVAL
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_SRCFLD
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from   V_ATTRIBUTE_TRGFLD
GO

GO
--SqlScripter----[dbo].[V_PC8x_ELMNT_ATTR_2].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_ELMNT_ATTR_2]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_ELMNT_ATTR_2] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_ELMNT_ATTR_2]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_WDGFLD_1
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT, EFF_TO_DT  , SUBJECT_ID
from  V_ATTRIBUTE_WDGFLD_2
GO

GO
--SqlScripter----[dbo].[V_PC8x_EVENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_EVENT]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_EVENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_EVENT]
AS
select REPOSITORY_ID, CLASS_ID, EVENT_ID,
       EVENT_TYPE, FREQUENCY_TYPE, EVENT_NAME,
       EVENT_DESC, EVENT_USAGE,
       EVENT_TEXT1, EVENT_TEXT2, EVENT_TEXT3,
       VERSION_NUM, 
       SRC_CREATE_DT, SRC_UPDATE_DT,
       EFF_FROM_DT, EFF_TO_DT
from V_IME_EVENT
GO

GO
--SqlScripter----[dbo].[V_PC8X_EXPR_PARSE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_EXPR_PARSE]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_EXPR_PARSE] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_EXPR_PARSE]
AS
SELECT  
 winst.MAPPING_ID MAPPING_ID,  
	map.VERSION_NUMBER MAPPING_VERS_NUM,
 otype.OBJECT_TYPE_NAME WIDGET_TYPE,  
 winst.WIDGET_ID WIDGET_ID,
	widg.VERSION_NUMBER WIDGET_VERS_NUM,  
 winst.INSTANCE_ID INSTANCE_ID,  
 winst.INSTANCE_NAME INSTANCE_NAME,  
 wdgtfld.FIELD_ID FIELD_ID,  
 wdgtfld.FIELD_NAME    FIELD_NAME,  
 expr.EXPRESSION    EXPR, 
 2		TRANSFORMATION_TYPE,   
 (CASE WHEN expr.LINE_NO IS NULL THEN 1  ELSE expr.LINE_NO END )       LINE_NUM,  
 map.REF_WIDGET_ID  REF_WIDGET_ID,  
 ' ' REPOSITORY_ID,
 CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 widg.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
 OPB_OBJECT_TYPE otype,  
 OPB_MAPPING map,  
 OPB_WIDGET_FIELD wdgtfld,  
 OPB_WIDGET_INST winst,
	OPB_WIDGET widg,  
 OPB_WIDGET_EXPR wexpr LEFT OUTER JOIN OPB_EXPRESSION expr ON
   wexpr.EXPR_ID = expr.EXPR_ID AND wexpr.VERSION_NUMBER = expr.VERSION_NUMBER 
WHERE  
 winst.WIDGET_TYPE IN (9,26,5) AND  
 winst.WIDGET_ID = wexpr.WIDGET_ID AND  
 wdgtfld.FIELD_ID = wexpr.OUTPUT_FIELD_ID AND  
	wdgtfld.VERSION_NUMBER = wexpr.VERSION_NUMBER AND 
 map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND 
	map.IS_VISIBLE = 1 AND
 wdgtfld.WIDGET_ID =  winst.WIDGET_ID AND  
	wdgtfld.WIDGET_ID = widg.WIDGET_ID AND
	wdgtfld.VERSION_NUMBER = widg.VERSION_NUMBER AND
	widg.IS_VISIBLE = 1 AND 
 wdgtfld.PORTTYPE IN ( 2, 32) AND  
 otype.OBJECT_TYPE_ID = winst.WIDGET_TYPE
UNION ALL
SELECT  
 winst.MAPPING_ID MAPPING_ID,  
	map.VERSION_NUMBER MAPPING_VERS_NUM,
 otype.OBJECT_TYPE_NAME WIDGET_TYPE,  
 winst.WIDGET_ID WIDGET_ID,  
	widg.VERSION_NUMBER WIDGET_VERS_NUM,
 winst.INSTANCE_ID INSTANCE_ID,  
 winst.INSTANCE_NAME INSTANCE_NAME,  
 wdgtfld.FIELD_ID FIELD_ID,  
 wdgtfld.FIELD_NAME    FIELD_NAME,  
 NULL    EXPR,  
 CASE WHEN winst.WIDGET_TYPE IN ( 11,6,8) THEN 1 ELSE 2 END	TRANSFORMATION_TYPE,  
 1       LINE_NUM,  
 map.REF_WIDGET_ID  REF_WIDGET_ID,  
 ' ' REPOSITORY_ID,
 CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 widg.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
 OPB_OBJECT_TYPE otype,  
 OPB_WIDGET_FIELD wdgtfld,  
 OPB_MAPPING map,  
 OPB_WIDGET_INST winst,
	OPB_WIDGET widg  
WHERE  
 ((winst.WIDGET_TYPE IN (11, 6, 8) AND  
 wdgtfld.PORTTYPE IN ( 6,7,14)) OR  
 (winst.WIDGET_TYPE IN  (9,26,5) AND  
 wdgtfld.PORTTYPE NOT IN (2,32))) AND  
 map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND 
	map.IS_VISIBLE = 1 AND
 wdgtfld.WIDGET_ID =  winst.WIDGET_ID AND  
	wdgtfld.WIDGET_ID = widg.WIDGET_ID AND
	wdgtfld.VERSION_NUMBER = widg.VERSION_NUMBER AND
	widg.IS_VISIBLE = 1 AND
 otype.OBJECT_TYPE_ID = winst.WIDGET_TYPE
GO

GO
--SqlScripter----[dbo].[V_PC8X_FEAT_MAP_HLINKS_1].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FEAT_MAP_HLINKS_1]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FEAT_MAP_HLINKS_1] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FEAT_MAP_HLINKS_1]
AS
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(widgdep.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(src_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(src_winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(src_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.FROM_FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+otype2.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(tgt_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgt_winst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype2.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  otype2.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(tgt_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.TO_FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype2.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  src.SUBJECT_ID "SRC_SUBJECT_ID",
  tgt.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET_DEP widgdep,
  OPB_WIDGET src,
  OPB_WIDGET tgt,
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST tgt_winst,
  OPB_OBJECT_TYPE otype2,
  OPB_WIDGET_INST src_winst,
  OPB_MAPPING map
WHERE
 widgdep.FROM_INSTANCE_ID =  src_winst.INSTANCE_ID AND
 widgdep.MAPPING_ID = src_winst.MAPPING_ID AND
	widgdep.VERSION_NUMBER = src_winst.VERSION_NUMBER AND
 src_winst.WIDGET_ID =  src.WIDGET_ID AND
 src_winst.WIDGET_TYPE = src.WIDGET_TYPE AND 
 	src.IS_VISIBLE = 1 AND
  widgdep.TO_INSTANCE_ID =  tgt_winst.INSTANCE_ID AND
 widgdep.MAPPING_ID = tgt_winst.MAPPING_ID AND
	widgdep.VERSION_NUMBER = tgt_winst.VERSION_NUMBER AND
 tgt_winst.WIDGET_ID =  tgt.WIDGET_ID AND 
 tgt_winst.WIDGET_TYPE =  tgt.WIDGET_TYPE AND 
	tgt.IS_VISIBLE = 1 AND
 src_winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
 tgt_winst.WIDGET_TYPE = otype2.OBJECT_TYPE_ID AND
 widgdep.MAPPING_ID = map.MAPPING_ID AND
	widgdep.VERSION_NUMBER = map.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(widget_inst.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_'+(select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE)+'_'+  LTRIM(STR(widget_inst.MAPPING_ID)) + '_' +
  LTRIM(STR(widget_inst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.'+REPLACE(REPLACE((select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE),' ',''),'-','')+'Instance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  (select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE) + '_' + 'Field_' + LTRIM(STR(widget_inst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(cust_portdep.IN_FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE((select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE),' ',''),'-','')+
  		'Port' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+(select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE)+'_'+  LTRIM(STR(widget_inst.MAPPING_ID)) + '_' +
  LTRIM(STR(widget_inst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE((select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE),' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  (select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE) + '_' + 'Field_' + LTRIM(STR(widget_inst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(cust_portdep.OUT_FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE((select otype.OBJECT_TYPE_NAME from OPB_OBJECT_TYPE otype where otype.OBJECT_TYPE_ID=widget_inst.WIDGET_TYPE),' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  widget.SUBJECT_ID "SRC_SUBJECT_ID",
  widget.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_WIDGET widget,
  OPB_WIDGET_INST widget_inst,
  OPB_MAPPING map,    
  OPB_WFLD_INOUTDEP cust_portdep  
WHERE
widget.WIDGET_ID = widget_inst.WIDGET_ID AND
widget_inst.MAPPING_ID = map.MAPPING_ID AND
widget.IS_VISIBLE = 1 AND
widget.VERSION_NUMBER = map.VERSION_NUMBER AND 
widget_inst.WIDGET_ID = cust_portdep.WIDGET_ID AND
widget_inst.WIDGET_TYPE = cust_portdep.WIDGET_TYPE AND
widget_inst.VERSION_NUMBER = map.VERSION_NUMBER AND
widget.VERSION_NUMBER = cust_portdep.VERSION_NUMBER AND map.IS_VISIBLE=1
GO

GO
--SqlScripter----[dbo].[V_PC8X_FEAT_MAP_HLINKS_2].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FEAT_MAP_HLINKS_2]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FEAT_MAP_HLINKS_2] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FEAT_MAP_HLINKS_2]
AS
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(widgdep.MAPPING_ID)) 	"TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping' 	"TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(src_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(src_winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(src_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.FROM_FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgt_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgt_winst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.TargetDefinitionInstance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  'Target Definition_Field_' + LTRIM(STR(tgt_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.TO_FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.TargetDefinitionPort' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID ,
    map.SUBJECT_ID "TRFN_SUBJECT_ID",
    src.SUBJECT_ID "SRC_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM  
OPB_OBJECT_TYPE otype,
OPB_WIDGET src,  
OPB_WIDGET_INST src_winst,  
OPB_WIDGET_INST tgt_winst,  
OPB_WIDGET_DEP widgdep,  
OPB_MAPPING map,  
OPB_TARG tgt,
OPB_TARG_FLD tgt_fld
WHERE  
widgdep.FROM_INSTANCE_ID =  src_winst.INSTANCE_ID AND  
widgdep.MAPPING_ID = src_winst.MAPPING_ID AND  
widgdep.VERSION_NUMBER = src_winst.VERSION_NUMBER AND  
src_winst.WIDGET_ID =  src.WIDGET_ID AND  
src_winst.WIDGET_TYPE = src.WIDGET_TYPE AND  
src.IS_VISIBLE = 1 AND
tgt.TARGET_ID = tgt_fld.TARGET_ID AND 
tgt.VERSION_NUMBER = tgt_fld.VERSION_NUMBER AND 
widgdep.TO_FIELD_ID = tgt_fld.FLDID AND
widgdep.TO_INSTANCE_ID =  tgt_winst.INSTANCE_ID AND  
widgdep.MAPPING_ID = tgt_winst.MAPPING_ID AND  
widgdep.VERSION_NUMBER = tgt_winst.VERSION_NUMBER AND  
tgt_winst.WIDGET_ID =  tgt.TARGET_ID AND  
tgt.IS_VISIBLE = 1 AND  
tgt_winst.WIDGET_TYPE = 2  AND  
src_winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
widgdep.MAPPING_ID = map.MAPPING_ID AND  
widgdep.VERSION_NUMBER = map.VERSION_NUMBER AND  
map.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(widgdep.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID", 
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_Source Definition_'+  LTRIM(STR(src_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(src_winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.SourceDefinitionInstance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  'Source Definition_Field_' + LTRIM(STR(src_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.FROM_FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.SourceDefinitionPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+otype2.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(tgt_winst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgt_winst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype2.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  otype2.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(tgt_winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(widgdep.TO_FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype2.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  src.SUBJ_ID "SRC_SUBJECT_ID",
  tgt.SUBJECT_ID "TGT_SUBJECT_ID"
FROM  
OPB_OBJECT_TYPE otype2,  
OPB_WIDGET_INST src_winst,  
OPB_WIDGET tgt,  
OPB_WIDGET_INST tgt_winst,  
OPB_WIDGET_DEP widgdep,  
OPB_MAPPING map,  
OPB_SRC src,
OPB_SRC_FLD src_fld
WHERE  
widgdep.FROM_INSTANCE_ID =  src_winst.INSTANCE_ID AND  
widgdep.MAPPING_ID = src_winst.MAPPING_ID AND  
widgdep.VERSION_NUMBER = src_winst.VERSION_NUMBER AND  
src_winst.WIDGET_TYPE = 1 AND  
src_winst.WIDGET_ID =  src.SRC_ID AND  
src.IS_VISIBLE = 1 AND  
src.SRC_ID = src_fld.SRC_ID AND 
src.VERSION_NUMBER = src_fld.VERSION_NUMBER AND 
widgdep.FROM_FIELD_ID = src_fld.FLDID AND
widgdep.MAPPING_ID = tgt_winst.MAPPING_ID AND  
widgdep.TO_INSTANCE_ID =  tgt_winst.INSTANCE_ID AND  
widgdep.VERSION_NUMBER = tgt_winst.VERSION_NUMBER AND  
tgt_winst.WIDGET_TYPE = otype2.OBJECT_TYPE_ID AND  
tgt_winst.WIDGET_ID =  tgt.WIDGET_ID AND  
tgt.WIDGET_TYPE = tgt_winst.WIDGET_TYPE AND  
tgt.IS_VISIBLE = 1 AND  
widgdep.MAPPING_ID = map.MAPPING_ID AND  
widgdep.VERSION_NUMBER = map.VERSION_NUMBER AND  
map.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(winst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID", 
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_Mapplet_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.MappletInstance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  'Mapplet_Field_' + LTRIM(STR(wfld.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wfld.FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.MappletPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_Input Transformation_'+  LTRIM(STR(mplt.MAPPING_ID)) + '_' +
  LTRIM(STR(wfld.GROUP_ID))  	"TARGET_ID",  		
  'com.informatica.powercenter.map.InputTransformationInstance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  'Input Transformation_' + 'Field_' + LTRIM(STR(mpltwinst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wfld.WIDGET_FLD_PROP)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.InputTransformationPort' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  map.SUBJECT_ID "SRC_SUBJECT_ID",
  widg.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_FIELD wfld,
OPB_MAPPING map,
OPB_WIDGET_INST winst,
OPB_WIDGET_INST mpltwinst,
OPB_MAPPING mplt,
	OPB_WIDGET widg
WHERE 
map.MAPPING_ID = winst.MAPPING_ID AND 
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND 
winst.WIDGET_ID = wfld.WIDGET_ID AND 
winst.WIDGET_TYPE = 44  AND
mplt.REF_WIDGET_ID = winst.WIDGET_ID AND
mplt.MAPPING_ID = mpltwinst.MAPPING_ID AND
	mplt.VERSION_NUMBER = mpltwinst.VERSION_NUMBER AND
	mplt.IS_VISIBLE = 1 AND 
wfld.GROUP_ID = mpltwinst.INSTANCE_ID AND
mpltwinst.WIDGET_TYPE = 46 AND
	wfld.WIDGET_ID = widg.WIDGET_ID AND
	wfld.VERSION_NUMBER = widg.VERSION_NUMBER AND
	widg.IS_VISIBLE = 1
UNION ALL
SELECT
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(winst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Output Transformation_'+  LTRIM(STR(mplt.MAPPING_ID)) + '_' +
  LTRIM(STR(wfld.GROUP_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.OutputTransformationInstance' "SOURCE_CLASS_ID",
  ' ' 		"SOURCE_REPO_ID", 
  'Output Transformation_' + 'Field_' + LTRIM(STR(mpltwinst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wfld.WIDGET_FLD_PROP)) "SRC_FEATURE_ID",  		     
  'com.informatica.powercenter.map.OutputTransformationPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",
  'WIDGET_INSTANCE_Mapplet_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"TARGET_ID",
  'com.informatica.powercenter.map.MappletInstance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  'Mapplet_Field_' + LTRIM(STR(wfld.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wfld.FIELD_ID)) "TGT_FEATURE_ID",     
  'com.informatica.powercenter.map.MappletPort' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME" , 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
      map.SUBJECT_ID "TRFN_SUBJECT_ID",
      widg.SUBJECT_ID "SRC_SUBJECT_ID",
  map.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_FIELD wfld,
OPB_MAPPING map,
OPB_WIDGET_INST winst,
OPB_WIDGET_INST mpltwinst,
OPB_MAPPING mplt,
	OPB_WIDGET widg
WHERE 
map.MAPPING_ID = winst.MAPPING_ID AND 
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND 
winst.WIDGET_ID = wfld.WIDGET_ID AND 
winst.WIDGET_TYPE = 44  AND
mplt.REF_WIDGET_ID = winst.WIDGET_ID AND
mplt.MAPPING_ID = mpltwinst.MAPPING_ID AND
	mplt.VERSION_NUMBER = mpltwinst.VERSION_NUMBER AND
	mplt.IS_VISIBLE = 1 AND 
wfld.GROUP_ID = mpltwinst.INSTANCE_ID AND
mpltwinst.WIDGET_TYPE = 47 AND
wfld.WIDGET_ID = widg.WIDGET_ID AND
wfld.VERSION_NUMBER = widg.VERSION_NUMBER AND
widg.IS_VISIBLE = 1
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(map.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wgt_fld.WIDGET_FLD_PROP)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wgt_fld.FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
    map.SUBJECT_ID "TRFN_SUBJECT_ID",
    wgt.SUBJECT_ID "SRC_SUBJECT_ID",
  wgt.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST winst,
  OPB_WIDGET wgt,
  OPB_WIDGET_FIELD wgt_fld,
  OPB_MAPPING map    
WHERE
 winst.WIDGET_ID = wgt.WIDGET_ID AND
 winst.WIDGET_TYPE = wgt.WIDGET_TYPE AND
 wgt.WIDGET_ID = wgt_fld.WIDGET_ID AND
 wgt.VERSION_NUMBER = wgt_fld.VERSION_NUMBER  AND
 wgt.IS_VISIBLE = 1 AND
 wgt.WIDGET_TYPE =15 AND
 wgt.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
 winst.MAPPING_ID = map.MAPPING_ID AND
 winst.VERSION_NUMBER = map.VERSION_NUMBER AND
 wgt_fld.PORTTYPE = 2 AND
 map.IS_VISIBLE = 1 AND wgt_fld.WIDGET_FLD_PROP!=0
 UNION ALL
  SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(map.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wgt_fld.FIELD_ID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(tgt_fld.FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
    map.SUBJECT_ID "TRFN_SUBJECT_ID",
    wgt.SUBJECT_ID "SRC_SUBJECT_ID",
  wgt.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST winst,
  OPB_WIDGET wgt,
  OPB_WIDGET_FIELD wgt_fld,
  OPB_MAPPING map,
  OPB_NORM_FLD norm_fld,
  OPB_WIDGET_FIELD tgt_fld    
WHERE
 winst.WIDGET_ID = wgt.WIDGET_ID AND
 winst.WIDGET_TYPE = wgt.WIDGET_TYPE AND
 wgt.WIDGET_ID = wgt_fld.WIDGET_ID AND
 wgt.VERSION_NUMBER = wgt_fld.VERSION_NUMBER  AND
 wgt.IS_VISIBLE = 1 AND
 winst.WIDGET_TYPE = 14 AND
 winst.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
 winst.MAPPING_ID = map.MAPPING_ID AND
 winst.VERSION_NUMBER = map.VERSION_NUMBER AND
 wgt_fld.PORTTYPE = 1 AND
 map.IS_VISIBLE = 1 AND
 norm_fld.WIDGET_ID = wgt.WIDGET_ID AND
 norm_fld.VERSION_NUMBER = wgt.VERSION_NUMBER AND
 wgt_fld.SRC_FIELD_ID = norm_fld.NORMAL_FLDID AND norm_fld.FLDTYPE=1 AND
 ltrim(rtrim(norm_fld.SRC_NAME)) = ltrim(rtrim(tgt_fld.FIELD_NAME)) AND 
 tgt_fld.WIDGET_ID = norm_fld.WIDGET_ID AND norm_fld.VERSION_NUMBER = tgt_fld.VERSION_NUMBER 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  CAST(NULL AS VARCHAR) "TASK_ID",
  CAST(NULL AS VARCHAR) "TASK_CLASS_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN ('Mapping_'+ LTRIM(STR(map.MAPPING_ID))) 	
  ELSE ('Mapplet_'+ LTRIM(STR(map.REF_WIDGET_ID)))  END) "TRANSFORM_ID",
  (CASE WHEN map.REF_WIDGET_ID = 0 THEN 'com.informatica.powercenter.map.Mapping' 
  ELSE 'com.informatica.powercenter.map.Mapplet'   END) "TRANSFORM_CLASS_ID",   
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",  
  'WIDGET_INSTANCE_MQ Source Qualifier_'+  LTRIM(STR(winst.MAPPING_ID)) + '_' +
  LTRIM(STR(winst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.MQSourceQualifierInstance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  'MQ Source Qualifier_' + 'Field_' + LTRIM(STR(winst.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wgt_fld.WIDGET_FLD_PROP)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.MQSourceQualifierPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME",  		
  'WIDGET_INSTANCE_'+otype.OBJECT_TYPE_NAME+'_'+  LTRIM(STR(winst1.MAPPING_ID)) + '_' +
  LTRIM(STR(winst1.INSTANCE_ID))  	"TARGET_ID",  		
    'com.informatica.powercenter.map.'+REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+'Instance' "TARGET_CLASS_ID",     
  ' ' 		"TARGET_REPO_ID", 
  otype.OBJECT_TYPE_NAME + '_' + 'Field_' + LTRIM(STR(winst1.WIDGET_ID)) + 
  		'_' + LTRIM(STR(wgt_fld1.FIELD_ID)) "TGT_FEATURE_ID",  		     
  'com.informatica.powercenter.map.' + REPLACE(REPLACE(otype.OBJECT_TYPE_NAME,' ',''),'-','')+
  		'Port' "TGT_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "TGT_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "TGT_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  CAST(NULL AS VARCHAR) "TARGET_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "TGT_FEATURE_NAME", 
  CAST(NULL as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(map.LAST_SAVED as datetime) MAP_UPDATE_DT,
  map.MAPPING_ID,
    map.SUBJECT_ID "TRFN_SUBJECT_ID",
    wgt.SUBJECT_ID "SRC_SUBJECT_ID",
  wgt.SUBJECT_ID "TGT_SUBJECT_ID"
FROM 
  OPB_OBJECT_TYPE otype,
  OPB_WIDGET_INST winst,
  OPB_WIDGET_INST winst1,
  OPB_WIDGET wgt,
  OPB_WIDGET wgt1,
  OPB_WIDGET_FIELD wgt_fld,
  OPB_WIDGET_FIELD wgt_fld1,
  OPB_MAPPING map    
WHERE
 winst.WIDGET_ID = wgt.WIDGET_ID AND
 winst.WIDGET_TYPE = wgt.WIDGET_TYPE AND
 wgt.WIDGET_ID = wgt_fld.WIDGET_ID AND
 wgt.VERSION_NUMBER = wgt_fld.VERSION_NUMBER  AND
 wgt.IS_VISIBLE = 1 AND
 winst1.WIDGET_ID = wgt1.WIDGET_ID AND
 winst1.WIDGET_TYPE = wgt1.WIDGET_TYPE AND
 wgt1.WIDGET_ID = wgt_fld1.WIDGET_ID AND
 wgt1.VERSION_NUMBER = wgt_fld1.VERSION_NUMBER  AND
 wgt1.IS_VISIBLE = 1 AND
 winst.WIDGET_TYPE =56 AND
 winst.WIDGET_PROP =winst1.INSTANCE_ID AND 
 winst.MAPPING_ID =winst1.MAPPING_ID AND
 winst.VERSION_NUMBER =winst1.VERSION_NUMBER AND
 winst1.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND
 winst.MAPPING_ID = map.MAPPING_ID AND
 winst.VERSION_NUMBER = map.VERSION_NUMBER AND
 wgt_fld.FIELD_NAME = 'MsgId' AND
 map.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_PC8X_FF_FIELDS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FF_FIELDS]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FF_FIELDS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FF_FIELDS]
AS 
 SELECT 
  src.SRC_ID WIDGET_ID,
  src.VERSION_NUMBER,
  srcfld.FLDID,
  srcfld.SRC_NAME FIELD_NAME,
  srcfld.FLDNO FIELD_ORDER,
  picdsc.SRC_PREC,
  picdsc.SRC_SCALE ,
  (select  MIN(DTYPE_NAME)  from REP_FLD_DATATYPE dtype where (( picdsc.SRC_TYPE = dtype.DTYPE_NUM) OR 
  (picdsc.SRC_NTYPE = dtype.DTYPE_NUM))) DTYPE_NAME,
  picdsc.SRC_NTYPE DTYPE_NUM,
  1 WIDGET_TYPE,
  src.SUBJ_ID SUBJECT_ID
FROM 
  OPB_SRC src,
  OPB_SRC_FLD srcfld,
  OPB_DBD dbd,
  OPB_PICDSC picdsc
WHERE 
  src.SRC_ID = srcfld.SRC_ID AND
  src.VERSION_NUMBER = srcfld.VERSION_NUMBER	AND
  src.IS_VISIBLE = 1 AND
  srcfld.PICID = picdsc.PICID AND
  dbd.DBDID = src.DBDID AND
  dbd.VERSION_NUMBER=src.VERSION_NUMBER AND 
  dbd.DBTYPE NOT IN (12, 0) AND
  srcfld.VERSION_NUMBER = picdsc.VERSION_NUMBER AND
  exists   ( SELECT 'X' FROM       OPB_SESS_FILE_REF ,  OPB_SWIDGET_INST  WHERE       OPB_SESS_FILE_REF.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID  AND
  OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
  src.SRC_ID = OPB_SWIDGET_INST.WIDGET_ID AND
  OPB_SWIDGET_INST.WIDGET_TYPE = 1  ) 
  UNION ALL 
  SELECT   
  targ.TARGET_ID WIDGET_ID,
  targ.VERSION_NUMBER, 
  targfld.FLDID, 
  targfld.TARGET_NAME FIELD_NAME,
  targfld.FLDNO FIELD_ORDER,
  targfld.DPREC FIELD_PREC ,
  targfld.DSCALE FIELD_SCALE ,
  (select MIN(DTYPE_NAME) from REP_FLD_DATATYPE dtype where (( targfld.DTYPE = dtype.DTYPE_NUM) OR 
  (targfld.NDTYPE = dtype.DTYPE_NUM))) DTYPE_NAME,  
  targfld.DTYPE DTYPE_NUM,
  2 WIDGET_TYPE    ,
  targ.SUBJ_ID SUBJECT_ID
  FROM OPB_TARG targ,      OPB_TARG_FLD targfld WHERE  
        targ.TARGET_ID = targfld.TARGET_ID AND
  targ.VERSION_NUMBER = targfld.VERSION_NUMBER AND
  targ.IS_VISIBLE = 1 AND
  targ.DBTYPE != 12 AND
  EXISTS    ( SELECT 'X' FROM OPB_SESS_FILE_REF ,       OPB_SWIDGET_INST  WHERE       OPB_SESS_FILE_REF.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID  AND
  OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
  targ.TARGET_ID = OPB_SWIDGET_INST.WIDGET_ID AND
  OPB_SWIDGET_INST.WIDGET_TYPE = 2  ) 
  UNION ALL 
  SELECT    
  wgt.WIDGET_ID,    
  wgt.VERSION_NUMBER,  
  wfld.FIELD_ID FLDID,    
  wfld.FIELD_NAME FIELD_NAME,
  wfld.FIELD_ORDER FIELD_ORDER,
  wfld.WGT_PREC FIELD_PREC ,
  wfld.WGT_SCALE FIELD_SCALE ,
  dtype.DTYPE_NAME FIELD_DATA_TYPE,
  dtype.DTYPE_NUM FIELD_DTYPE_NUM,
  11 WIDGET_TYPE,
  wgt.SUBJECT_ID SUBJECT_ID
  FROM OPB_WIDGET wgt,      
  OPB_WIDGET_FIELD wfld,      
  REP_FLD_DATATYPE dtype, 	
  OPB_WIDGET_ATTR wattr
  WHERE 
  wgt.WIDGET_ID = wfld.WIDGET_ID AND
  wgt.VERSION_NUMBER = wfld.VERSION_NUMBER AND
  wgt.IS_VISIBLE = 1 AND
  wgt.WIDGET_TYPE = 11 AND
  wfld.WGT_DATATYPE = dtype.DTYPE_NUM AND
  wattr.WIDGET_ID = wgt.WIDGET_ID AND
  wattr.WIDGET_TYPE = wgt.WIDGET_TYPE AND
  wattr.VERSION_NUMBER = wgt.VERSION_NUMBER AND
  wattr.ATTR_ID = 7 AND
  CAST(wattr.ATTR_VALUE AS VARCHAR(255)) = '2' AND
  EXISTS    ( SELECT 'X' FROM OPB_SESS_FILE_REF ,       OPB_SWIDGET_INST  WHERE       OPB_SESS_FILE_REF.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID  AND
  OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
  wgt.WIDGET_ID = OPB_SWIDGET_INST.WIDGET_ID AND
  OPB_SWIDGET_INST.WIDGET_TYPE = wgt.WIDGET_TYPE  ) AND
  wfld.PORTTYPE IN ( 8,10,14,2050)
GO

GO
--SqlScripter----[dbo].[V_PC8X_FF_FTP_CONN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FF_FTP_CONN]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FF_FTP_CONN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FF_FTP_CONN]
AS
SELECT 
  OPB_CNX.OBJECT_NAME,
  OPB_TASK_INST.INSTANCE_ID,
  OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID,
  OPB_SESS_CNX_REFS.PARTITION_ID 
FROM 
  OPB_TASK,
  OPB_SESS_CNX_REFS,
  OPB_CNX,
  OPB_TASK_INST
WHERE 
  OPB_SESS_CNX_REFS.SESSION_ID = OPB_TASK.TASK_ID AND
  OPB_SESS_CNX_REFS.VERSION_NUMBER = OPB_TASK.VERSION_NUMBER AND
  OPB_TASK.IS_VISIBLE = 1 AND
  OPB_SESS_CNX_REFS.SESSION_ID =OPB_TASK_INST.TASK_ID AND
  OPB_SESS_CNX_REFS.REF_OBJECT_ID = OPB_CNX.OBJECT_ID AND
  OPB_SESS_CNX_REFS.SESSION_INST_ID = 0 AND
  OPB_CNX.OBJECT_TYPE = 75 AND
  NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS A WHERE A.SESSION_INST_ID =  OPB_TASK_INST.INSTANCE_ID  AND
  A.SESS_WIDG_INST_ID = OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID AND
  A.PARTITION_ID = OPB_SESS_CNX_REFS.PARTITION_ID AND
  A.VERSION_NUMBER =  OPB_TASK_INST.VERSION_NUMBER ) 
  UNION ALL
  SELECT OPB_CNX.OBJECT_NAME, 
  OPB_TASK_INST.INSTANCE_ID, 
  OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID,
  OPB_SESS_CNX_REFS.PARTITION_ID 
from  
	OPB_TASK, 
	OPB_SESS_CNX_REFS, 
	OPB_CNX,  
	OPB_TASK_INST 
WHERE 
  OPB_SESS_CNX_REFS.SESSION_ID = OPB_TASK.TASK_ID AND
  OPB_TASK.IS_VISIBLE = 1 AND
  OPB_SESS_CNX_REFS.SESSION_INST_ID =OPB_TASK_INST.INSTANCE_ID AND
  OPB_SESS_CNX_REFS.REF_OBJECT_ID = OPB_CNX.OBJECT_ID AND
  OPB_CNX.OBJECT_TYPE = 75
GO

GO
--SqlScripter----[dbo].[V_PC8X_FF_OBJECTS].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FF_OBJECTS]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FF_OBJECTS] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FF_OBJECTS]
AS
SELECT
tinst.INSTANCE_ID TASK_INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
mtype.DBTYPE_NAME  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_DBD dbd,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_SRC src
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = src.SRC_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 1 AND
dbd.DBDID = src.DBDID AND
src.IS_VISIBLE = 1 AND
dbd.VERSION_NUMBER = src.VERSION_NUMBER AND
mtype.DBTYPE_ID = dbd.DBTYPE and
dbd.DBTYPE IN (0,7,12) AND
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 78 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 78 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 78 AND
xattr3.ATTR_ID in (1,2)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
mtype.DBTYPE_NAME  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_DBD dbd,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_SRC src
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = src.SRC_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 1 AND
dbd.DBDID = src.DBDID AND
src.IS_VISIBLE = 1 AND
dbd.VERSION_NUMBER = src.VERSION_NUMBER AND
mtype.DBTYPE_ID = dbd.DBTYPE and
dbd.DBTYPE IN (0,7,12) AND
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 78 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 78 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 78 AND
xattr3.ATTR_ID in (1))  AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
mtype.DBTYPE_NAME  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_DBD dbd,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_SRC src
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = src.SRC_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 1 AND
dbd.DBDID = src.DBDID AND
src.IS_VISIBLE = 1 AND
dbd.VERSION_NUMBER = src.VERSION_NUMBER AND
mtype.DBTYPE_ID = dbd.DBTYPE and
dbd.DBTYPE IN (0,7,12) AND
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 78 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 78 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 78 AND
xattr3.ATTR_ID in (2))  AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
mtype.DBTYPE_NAME  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_DBD dbd,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_SRC src
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = src.SRC_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 1 AND
dbd.DBDID = src.DBDID AND
src.IS_VISIBLE = 1 AND
dbd.VERSION_NUMBER = src.VERSION_NUMBER AND
mtype.DBTYPE_ID = dbd.DBTYPE and
dbd.DBTYPE IN (0,7,12) AND
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 78 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 78 AND
xattr2.ATTR_ID = 2  AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
(CASE WHEN tgt.DBTYPE = 12 THEN 'XML' ELSE 'Flat File' END)  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK task,
OPB_TASK wflow,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_TARG tgt
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = tgt.TARGET_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 2 AND
tgt.IS_VISIBLE = 1 AND
tgt.DBTYPE = mtype.DBTYPE_ID  AND
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 79 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 79 AND
xattr2.ATTR_ID = 2 AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 79 AND
xattr3.ATTR_ID in (1,2)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
(CASE WHEN tgt.DBTYPE = 12 THEN 'XML' ELSE 'Flat File' END)  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK task,
OPB_TASK wflow,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_TARG tgt
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = tgt.TARGET_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 2 AND
tgt.IS_VISIBLE = 1 AND
tgt.DBTYPE = mtype.DBTYPE_ID  AND
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 79 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 79 AND
xattr2.ATTR_ID = 2 AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 79 AND
xattr3.ATTR_ID in (1))  AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
(CASE WHEN tgt.DBTYPE = 12 THEN 'XML' ELSE 'Flat File' END) "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK task,
OPB_TASK wflow,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_TARG tgt
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = tgt.TARGET_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 2 AND
tgt.IS_VISIBLE = 1 AND
tgt.DBTYPE = mtype.DBTYPE_ID  AND
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 79 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 79 AND
xattr2.ATTR_ID = 2 AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 79 AND
xattr3.ATTR_ID in (2)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
(CASE WHEN tgt.DBTYPE = 12 THEN 'XML' ELSE 'Flat File' END) "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK task,
OPB_TASK wflow,
OPB_MMD_DBTYPE mtype ,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_TARG tgt
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = tgt.TARGET_ID AND
OPB_SWIDGET_INST.WIDGET_TYPE = 2 AND
tgt.IS_VISIBLE = 1 AND
tgt.DBTYPE = mtype.DBTYPE_ID  AND
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 79 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 79 AND
xattr2.ATTR_ID = 2  AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
'Flat File'  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_WIDGET wgt, 
OPB_WIDGET_ATTR wattr 
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = wgt.WIDGET_ID AND 
OPB_SWIDGET_INST.WIDGET_TYPE = wgt.WIDGET_TYPE AND 
OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND 
wgt.IS_VISIBLE = 1 AND 
wattr.WIDGET_ID = wgt.WIDGET_ID AND 
wattr.VERSION_NUMBER = wgt.VERSION_NUMBER AND 
wattr.ATTR_ID = 7 AND CAST(wattr.ATTR_VALUE AS VARCHAR(255)) = '2' AND 
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 103 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 103 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.OBJECT_TYPE = 103 AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.ATTR_ID in (1,2)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
'Flat File'  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_WIDGET wgt, 
OPB_WIDGET_ATTR wattr 
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = wgt.WIDGET_ID AND 
OPB_SWIDGET_INST.WIDGET_TYPE = wgt.WIDGET_TYPE AND 
OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND 
wgt.IS_VISIBLE = 1 AND 
wattr.WIDGET_ID = wgt.WIDGET_ID AND 
wattr.VERSION_NUMBER = wgt.VERSION_NUMBER AND 
wattr.ATTR_ID = 7 AND CAST(wattr.ATTR_VALUE AS VARCHAR(255))= '2' AND 
xattr.SESSION_INST_ID = 0 AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 103 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 103 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 103 AND
xattr3.ATTR_ID in (1)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
'Flat File'  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_WIDGET wgt, 
OPB_WIDGET_ATTR wattr 
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = wgt.WIDGET_ID AND 
OPB_SWIDGET_INST.WIDGET_TYPE = wgt.WIDGET_TYPE AND 
OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND 
wgt.IS_VISIBLE = 1 AND 
wattr.WIDGET_ID = wgt.WIDGET_ID AND 
wattr.VERSION_NUMBER = wgt.VERSION_NUMBER AND 
wattr.ATTR_ID = 7 AND CAST(wattr.ATTR_VALUE AS VARCHAR(255)) = '2' AND 
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 103 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = 0 AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  OPB_SWIDGET_INST.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 103 AND
xattr2.ATTR_ID = 2  AND
NOT EXISTS ( SELECT 'X' FROM OPB_EXTN_ATTR xattr3 WHERE
xattr3.SESSION_INST_ID =  tinst.INSTANCE_ID AND
xattr3.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr3.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr3.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr3.PARTITION_ID = xattr2.PARTITION_ID AND
xattr3.OBJECT_TYPE = 103 AND
xattr3.ATTR_ID in (2)) AND 
xattr2.ATTR_VALUE IS NOT NULL
UNION ALL
SELECT
tinst.INSTANCE_ID,
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID,
OPB_SESS_FILE_REF.FILE_ID,
xattr2.ATTR_VALUE  FILE_NAME,
xattr.ATTR_VALUE  DIR_NAME,
OPB_SWIDGET_INST.MAPPING_ID,
OPB_SWIDGET_INST.MAPPLET_MAP_ID,
OPB_SWIDGET_INST.WIDGET_ID,
OPB_SWIDGET_INST.WIDGET_TYPE,
CAST((65535 & OPB_SWIDGET_INST.INSTANCE_ID) AS INTEGER) WIDGET_INST_ID,
'Flat File'  "DB_TYPE",
xattr.PARTITION_ID,
task.SUBJECT_ID
FROM
OPB_SESS_FILE_REF,
OPB_SWIDGET_INST ,
OPB_MAPPING,
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK task,
OPB_EXTN_ATTR xattr,
OPB_EXTN_ATTR xattr2,
OPB_WIDGET wgt, 
OPB_WIDGET_ATTR wattr 
WHERE
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1 AND
OPB_SWIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
OPB_MAPPING.IS_VISIBLE = 1 AND
tinst.TASK_ID =  OPB_SESS_FILE_REF.SESSION_ID AND
task.TASK_ID =OPB_SWIDGET_INST.SESSION_ID AND
task.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
task.IS_VISIBLE = 1 AND
OPB_SESS_FILE_REF.SESSION_ID =OPB_SWIDGET_INST.SESSION_ID AND
OPB_SESS_FILE_REF.VERSION_NUMBER =OPB_SWIDGET_INST.VERSION_NUMBER AND
OPB_SESS_FILE_REF.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
OPB_SWIDGET_INST.WIDGET_ID = wgt.WIDGET_ID AND 
OPB_SWIDGET_INST.WIDGET_TYPE = wgt.WIDGET_TYPE AND 
OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND 
wgt.IS_VISIBLE = 1 AND 
wattr.WIDGET_ID = wgt.WIDGET_ID AND 
wattr.VERSION_NUMBER = wgt.VERSION_NUMBER AND 
wattr.ATTR_ID = 7 AND CAST(wattr.ATTR_VALUE AS VARCHAR(255)) = '2' AND 
xattr.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr.OBJECT_TYPE = 103 AND
xattr.ATTR_ID = 1 AND
xattr.PARTITION_ID = xattr2.PARTITION_ID AND
xattr2.SESSION_INST_ID = tinst.INSTANCE_ID AND
xattr2.SESSION_ID =  OPB_SWIDGET_INST.SESSION_ID AND
xattr2.VERSION_NUMBER =  tinst.VERSION_NUMBER AND
xattr2.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
xattr2.OBJECT_TYPE = 103 AND
xattr2.ATTR_ID = 2 AND 
xattr2.ATTR_VALUE IS NOT NULL
GO

GO
--SqlScripter----[dbo].[V_PC8X_FILE_TYPE].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_FILE_TYPE]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_FILE_TYPE] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_FILE_TYPE]
AS
 select (CASE WHEN CAST(ATTR_VALUE AS VARCHAR) = '0' THEN 'Direct' ELSE 'Indirect' END)  SRC_FILE_TYPE , OPB_SESS_FILE_REF.FILE_ID, OPB_TASK_INST.INSTANCE_ID, OPB_EXTN_ATTR.PARTITION_ID  from 
 OPB_EXTN_ATTR,
 OPB_SESS_FILE_REF,
 OPB_TASK_INST,
 OPB_TASK 
 where 
 OPB_TASK.TASK_ID = OPB_EXTN_ATTR.SESSION_ID  AND
 OPB_TASK.IS_VISIBLE = 1 AND
 OPB_EXTN_ATTR.SESSION_INST_ID = 0 AND
 OPB_TASK.VERSION_NUMBER = OPB_EXTN_ATTR.VERSION_NUMBER AND
 OPB_SESS_FILE_REF.SESSION_ID =   OPB_EXTN_ATTR.SESSION_ID AND
 OPB_SESS_FILE_REF.VERSION_NUMBER =   OPB_EXTN_ATTR.VERSION_NUMBER AND
 OPB_SESS_FILE_REF.SESS_WIDG_INST_ID =   OPB_EXTN_ATTR.SESS_WIDG_INST_ID AND
 OPB_EXTN_ATTR.OBJECT_TYPE IN (78,103) AND OPB_EXTN_ATTR.ATTR_ID  = 3 AND
 OPB_TASK.TASK_ID = OPB_TASK_INST.TASK_ID AND
 EXISTS ( SELECT 'X' FROM OPB_TASK WFLOW 
 where OPB_TASK_INST.WORKFLOW_ID = WFLOW.TASK_ID AND 
 WFLOW.IS_VISIBLE = 1 AND WFLOW.VERSION_NUMBER = OPB_TASK_INST.VERSION_NUMBER)
 AND
 NOT EXISTS (
 SELECT 'X' FROM  OPB_EXTN_ATTR A WHERE 
 A.SESSION_INST_ID = OPB_TASK_INST.INSTANCE_ID AND
 A.VERSION_NUMBER = OPB_TASK_INST.VERSION_NUMBER AND
 A.OBJECT_TYPE IN (78,103) AND A.ATTR_ID  = 3 AND
 OPB_SESS_FILE_REF.SESS_WIDG_INST_ID =  A.SESS_WIDG_INST_ID)
  UNION ALL
  SELECT  (CASE WHEN CAST(ATTR_VALUE AS VARCHAR) = '0' THEN 'Direct' ELSE 'Indirect'  END ) SRC_FILE_TYPE, OPB_SESS_FILE_REF.FILE_ID, OPB_TASK_INST.INSTANCE_ID, OPB_EXTN_ATTR.PARTITION_ID  from 
 OPB_EXTN_ATTR,
 OPB_SESS_FILE_REF,
 OPB_TASK_INST,
 OPB_TASK 
 where 
 OPB_TASK.TASK_ID = OPB_EXTN_ATTR.SESSION_ID  AND
 OPB_TASK.IS_VISIBLE = 1 AND
 OPB_SESS_FILE_REF.SESSION_ID =   OPB_EXTN_ATTR.SESSION_ID AND
 OPB_SESS_FILE_REF.VERSION_NUMBER =   OPB_EXTN_ATTR.VERSION_NUMBER AND
 OPB_SESS_FILE_REF.SESS_WIDG_INST_ID =   OPB_EXTN_ATTR.SESS_WIDG_INST_ID AND
 OPB_EXTN_ATTR.OBJECT_TYPE IN (78,103) AND OPB_EXTN_ATTR.ATTR_ID  = 3 AND
 OPB_EXTN_ATTR.SESSION_INST_ID = OPB_TASK_INST.INSTANCE_ID AND 
 OPB_TASK_INST.VERSION_NUMBER = OPB_EXTN_ATTR.VERSION_NUMBER
GO

GO
--SqlScripter----[dbo].[V_PC8X_LKP_SESS_INST_CNX].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_LKP_SESS_INST_CNX]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_LKP_SESS_INST_CNX] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_LKP_SESS_INST_CNX]
AS
   SELECT 
       OPB_SWIDGET_INST.SESS_WIDG_INST_ID "SESSION_WIDG_INST_ID", 
       OPB_SESS_CNX_REFS.SESSION_INST_ID "SESSION_INST_ID",
       OPB_SESS_CNX_REFS.SESSION_ID "SESSION_ID",
       OPB_SWIDGET_INST.VERSION_NUMBER "VERSION_NUMBER",
       OPB_SWIDGET_INST.MAPPING_ID "ORIG_MAPPING_ID",
      ( CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID = 0  THEN OPB_SWIDGET_INST.MAPPING_ID ELSE OPB_SWIDGET_INST.MAPPLET_MAP_ID END) "MAPPING_ID",
       OPB_SWIDGET_INST.INSTANCE_ID "MAP_INSTANCE_ID",
       CAST((65535 & CAST(OPB_SWIDGET_INST.INSTANCE_ID as INT)) as INT) "INSTANCE_ID",
       OPB_SWIDGET_INST.WIDGET_ID "WIDGET_ID", 
       OPB_SESS_CNX_REFS.REF_OBJECT_VALUE "REF_OBJECT_VALUE",
       OPB_SESS_CNX_REFS.REF_OBJECT_ID "REF_OBJECT_ID",
       OPB_WIDGET.SUBJECT_ID "SUBJECT_ID"
   FROM 
       OPB_SESS_CNX_REFS, OPB_TASK WFLOW, OPB_TASK SESS, OPB_SWIDGET_INST,OPB_WIDGET
   WHERE
      OPB_SESS_CNX_REFS.SESSION_INST_ID != 0 AND
      WFLOW.TASK_ID = OPB_SESS_CNX_REFS.WORKFLOW_ID AND
      WFLOW.VERSION_NUMBER = OPB_SESS_CNX_REFS.VERSION_NUMBER  AND
      WFLOW.IS_VISIBLE = 1 AND
      SESS.TASK_ID = OPB_SWIDGET_INST.SESSION_ID AND
      SESS.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER  AND
      SESS.IS_VISIBLE = 1 AND
      OPB_SESS_CNX_REFS.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER AND        
      OPB_SESS_CNX_REFS.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID AND
      OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
      OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND
      OPB_SWIDGET_INST.WIDGET_ID = OPB_WIDGET.WIDGET_ID AND
      OPB_WIDGET.IS_VISIBLE = 1
UNION ALL
SELECT 
    OPB_SWIDGET_INST.SESS_WIDG_INST_ID "SESSION_WIDG_INST_ID", 
    TINST.INSTANCE_ID "SESSION_INST_ID",
    OPB_SESS_CNX_REFS.SESSION_ID "SESSION_ID",
    OPB_SWIDGET_INST.VERSION_NUMBER "VERSION_NUMBER",
    OPB_SWIDGET_INST.MAPPING_ID "ORIG_MAPPING_ID",
   ( CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID = 0  THEN OPB_SWIDGET_INST.MAPPING_ID ELSE OPB_SWIDGET_INST.MAPPLET_MAP_ID END) "MAPPING_ID",
    OPB_SWIDGET_INST.INSTANCE_ID "MAP_INSTANCE_ID",
    CAST((65535 & CAST(OPB_SWIDGET_INST.INSTANCE_ID as INT)) as INT) "INSTANCE_ID",
    OPB_SWIDGET_INST.WIDGET_ID "WIDGET_ID", 
    OPB_SESS_CNX_REFS.REF_OBJECT_VALUE "REF_OBJECT_VALUE",
    OPB_SESS_CNX_REFS.REF_OBJECT_ID "REF_OBJECT_ID",
    OPB_WIDGET.SUBJECT_ID "SUBJECT_ID"
FROM 
    OPB_SESS_CNX_REFS, OPB_TASK WFLOW, OPB_TASK_INST TINST , OPB_TASK SESS,  OPB_SWIDGET_INST,OPB_WIDGET
WHERE
   OPB_SESS_CNX_REFS.SESSION_INST_ID = 0 AND
   OPB_SESS_CNX_REFS.WORKFLOW_ID = 0  AND
   SESS.TASK_ID = OPB_SWIDGET_INST.SESSION_ID AND
   SESS.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER  AND
   SESS.IS_VISIBLE = 1 AND
   SESS.TASK_ID = TINST.TASK_ID AND
   WFLOW.TASK_ID = TINST.WORKFLOW_ID AND
   WFLOW.VERSION_NUMBER = TINST.VERSION_NUMBER  AND
   WFLOW.IS_VISIBLE = 1 AND
   OPB_SESS_CNX_REFS.VERSION_NUMBER = OPB_SWIDGET_INST.VERSION_NUMBER AND     
   OPB_SESS_CNX_REFS.SESSION_ID = OPB_SWIDGET_INST.SESSION_ID AND
   OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID = OPB_SWIDGET_INST.SESS_WIDG_INST_ID AND
   OPB_SWIDGET_INST.WIDGET_TYPE = 11 AND
   OPB_SWIDGET_INST.WIDGET_ID = OPB_WIDGET.WIDGET_ID AND
   OPB_WIDGET.IS_VISIBLE = 1 AND NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS B 
   WHERE B.SESSION_INST_ID = TINST.INSTANCE_ID AND
   B.SESSION_ID = OPB_SESS_CNX_REFS.SESSION_ID AND
   B.SESS_WIDG_INST_ID = OPB_SESS_CNX_REFS.SESS_WIDG_INST_ID )
GO

GO
--SqlScripter----[dbo].[V_PC8X_MAPPING_INCR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_MAPPING_INCR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_MAPPING_INCR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_MAPPING_INCR]
AS 
SELECT OPB_WIDGET_INST.MAPPING_ID, CAST(OPB_WIDGET.LAST_SAVED as datetime) WGT_UPDATE_DT  
FROM  
OPB_WIDGET_INST,  
OPB_WIDGET,
	OPB_MAPPING  
WHERE  
OPB_WIDGET.WIDGET_ID = OPB_WIDGET_INST.WIDGET_ID AND  
OPB_WIDGET.WIDGET_TYPE = OPB_WIDGET_INST.WIDGET_TYPE AND
	OPB_WIDGET.IS_VISIBLE = 1 AND
	OPB_MAPPING.MAPPING_ID = OPB_WIDGET_INST.MAPPING_ID AND
	OPB_MAPPING.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER AND
	OPB_MAPPING.IS_VISIBLE = 1
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_CONNECTION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_CONNECTION]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_CONNECTION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_CONNECTION]
AS
select REPOSITORY_ID, CLASS_ID, CONNECTION_ID,
       CATALOG_ID, DATA_MGR_CLASS_ID, DATA_MANAGER_ID,
       SCHEMA_CLASS_ID, SCHEMA_ID, CONNECTION_TYPE,
       CONNECTION_NAME, CONNECTION_DESC, CONNECTION_SUBTYPE,
       HOST_NAME, USER_NAME, SCHEMA_NAME, ADDRESS,
       CONNECTION_TEXT1, CONNECTION_TEXT2, CONNECTION_TEXT3,
       VERSION_NUM, 
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT"
from V_PC8x_CONNECTION
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_DEFILE_CNX].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_DEFILE_CNX]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_DEFILE_CNX] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_DEFILE_CNX]
AS
select REPOSITORY_ID, CLASS_ID, CONNECTION_ID,
       CATALOG_ID, DATA_MGR_CLASS_ID, DATA_MANAGER_ID,
       SCHEMA_CLASS_ID, SCHEMA_ID, CONNECTION_TYPE,
       CONNECTION_NAME, CONNECTION_DESC, CONNECTION_SUBTYPE,
       HOST_NAME, USER_NAME, SCHEMA_NAME, ADDRESS,
       CONNECTION_TEXT1, CONNECTION_TEXT2, CONNECTION_TEXT3,
       VERSION_NUM, 
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT"
from  V_PC8x_DEFILE_CNX
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_ELEMENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_ELEMENT]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_ELEMENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_ELEMENT]
AS
select REPOSITORY_ID, CLASS_ID, ELEMENT_ID, VERSION_NUM,
       ELEMENT_NAME, ELEMENT_LABEL, ELEMENT_ALIAS, ELEMENT_DESC,
       ELEMENT_USAGE, ELEMENT_TYPE, ELEMENT_SUBTYPE,
       ELEMENT_ATTR1, ELEMENT_VALUE1, ELEMENT_ATTR2, ELEMENT_VALUE2,
       ELEMENT_ATTR3, ELEMENT_VALUE3, VALID_FLAG, DISABLED_FLAG,
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT",    SUBJECT_ID
from V_PC8x_ELEMENT
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_ELMNT_ASOC].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_ELMNT_ASOC]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_ELMNT_ASOC] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_ELMNT_ASOC]
AS
select REPOSITORY_ID, FROM_CLASS_ID, FROM_ELEMENT_ID,
       FROM_REPO_ID, TO_CLASS_ID, TO_ELEMENT_ID,
       TO_REPO_ID, ASSOCIATION_ID, ASSOCIATION_SEQ,
       HIDDEN_FLAG,  
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT", SRC_SUBJECT_ID, TGT_SUBJECT_ID
from V_PC8x_ELMNT_ASOC
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_ELMNT_ATTR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_ELMNT_ATTR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT ,
       EFF_TO_DT, SUBJECT_ID
from  V_PC8x_ELMNT_ATTR_1
UNION ALL
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, SRC_CREATE_DT, SRC_UPDATE_DT, EFF_FROM_DT ,
       EFF_TO_DT, SUBJECT_ID
from  V_PC8x_ELMNT_ATTR_2
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_ELMNT_ATTR_1].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_ELMNT_ATTR_1]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR_1] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR_1]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, 
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT",    SUBJECT_ID
from  V_PC8x_ELMNT_ATTR_1
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_ELMNT_ATTR_2].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_ELMNT_ATTR_2]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR_2] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_ELMNT_ATTR_2]
AS
select REPOSITORY_ID, ELEMENT_CLASS_ID, ELEMENT_ID, SCOPE_TYPE,
       ELMNT_ATTR_NAME, ELMNT_ATTR_VALUE, ELMNT_ATTR_DESC,
       DATA_TYPE, 
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT",    SUBJECT_ID
from  V_PC8x_ELMNT_ATTR_2
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_EVENT].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_EVENT]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_EVENT] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_EVENT]
AS
select REPOSITORY_ID, CLASS_ID, EVENT_ID,
       EVENT_TYPE, FREQUENCY_TYPE, EVENT_NAME,
       EVENT_DESC, EVENT_USAGE,
       EVENT_TEXT1, EVENT_TEXT2, EVENT_TEXT3,
       VERSION_NUM, 
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT"
from V_PC8x_EVENT
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_EXPRESSION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_EXPRESSION]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_EXPRESSION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_EXPRESSION]
AS
SELECT 
' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.MapExpression'  "CLASS_ID", 
otype.OBJECT_TYPE_NAME+'_Field_'+ ltrim(str(wdgtfld.WIDGET_ID))+'_'+ ltrim(str(wdgtfld.FIELD_ID))  "EXPRESSION_ID", 
'SQL' "LANGUAGE", 
cast(expr.EXPRESSION as varchar(4000))  "EXPRESSION_TEXT", 
'' "EXPRESSION_TEXT1", 
'' "EXPRESSION_TEXT2", 
'' "EXPRESSION_TEXT3", 
CAST(NULL as datetime) "SRC_CREATE_DT", 
CAST(LAST_SAVED as datetime) "SRC_UPDATE_DT", 
CAST(NULL as datetime) "EFF_FROM_DT", 
CAST(NULL as datetime) "EFF_TO_DT" ,
wdgt.SUBJECT_ID "SUBJECT_ID"
FROM 
OPB_REPOSIT repo, 
OPB_OBJECT_TYPE otype, 
OPB_EXPRESSION expr,
OPB_WIDGET_EXPR wexpr,
OPB_WIDGET_FIELD wdgtfld, 
OPB_WIDGET wdgt 
WHERE 
repo.RECID = 1 AND 
wdgt.WIDGET_TYPE IN (9,26,5) AND 
wdgt.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND 
wdgt.WIDGET_ID =   wdgtfld.WIDGET_ID AND 
wdgt.VERSION_NUMBER =   wdgtfld.VERSION_NUMBER AND 
wdgtfld.WIDGET_ID = wexpr.WIDGET_ID AND 
wdgtfld.VERSION_NUMBER = wexpr.VERSION_NUMBER AND 
wdgtfld.FIELD_ID = wexpr.OUTPUT_FIELD_ID AND 
wexpr.EXPR_ID = expr.EXPR_ID and 
wexpr.VERSION_NUMBER = expr.VERSION_NUMBER and 
expr.LINE_NO = 1 and 
wdgtfld.PORTTYPE IN ( 2, 32)and
wdgt.IS_VISIBLE = 1
UNION ALL 
SELECT 
' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.MapExpression' "CLASS_ID", 
otype.OBJECT_TYPE_NAME+'_'+ltrim(str(map.MAPPING_ID))+'_'+ltrim(str(wdgtinst.INSTANCE_ID)) "EXPRESSION_ID", 
'SQL' "LANGUAGE", 
'LOOKUP CONDITION:'+cast(wdgtattr.ATTR_VALUE as varchar(4000)) "EXPRESSION_TEXT", 
'' "EXPRESSION_TEXT1", 
'' "EXPRESSION_TEXT2", 
'' "EXPRESSION_TEXT3", 
CAST(NULL as datetime) "SRC_CREATE_DT", 
CAST(wdgt.LAST_SAVED as datetime) "SRC_UPDATE_DT", 
CAST(NULL as datetime) "EFF_FROM_DT", 
CAST(NULL as datetime) "EFF_TO_DT", 
wdgt.SUBJECT_ID "SUBJECT_ID" 
FROM 
OPB_OBJECT_TYPE otype, 
OPB_WIDGET wdgt, 
OPB_WIDGET_ATTR wdgtattr, 
OPB_WIDGET_INST wdgtinst, 
OPB_MAPPING map 
WHERE 
wdgt.WIDGET_ID = wdgtattr.WIDGET_ID AND 
wdgt.IS_VISIBLE = 1 AND 
map.IS_VISIBLE=1 AND
wdgtinst.VERSION_NUMBER = wdgtattr.VERSION_NUMBER AND 
wdgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND 
wdgt.WIDGET_TYPE=11 AND 
wdgt.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND 
wdgt.WIDGET_TYPE = wdgtattr.WIDGET_TYPE AND
wdgtattr.MAPPING_ID = map.MAPPING_ID AND 
wdgtinst.MAPPING_ID = wdgtattr.MAPPING_ID AND 
wdgtinst.INSTANCE_ID = wdgtattr.INSTANCE_ID AND 
wdgtattr.ATTR_ID = 5 AND
wdgtattr.LINE_NO = 1
UNION ALL 
SELECT 
' ' "REPOSITORY_ID", 
'com.informatica.powercenter.map.MapExpression' "CLASS_ID", 
otype.OBJECT_TYPE_NAME+'_'+ltrim(str(map.MAPPING_ID))+'_'+ltrim(str(wdgtinst.INSTANCE_ID)) "EXPRESSION_ID", 
'SQL' "LANGUAGE", 
'LOOKUP CONDITION:'+cast(wdgtattr.ATTR_VALUE as varchar(4000)) "EXPRESSION_TEXT", 
'' "EXPRESSION_TEXT1", 
'' "EXPRESSION_TEXT2", 
'' "EXPRESSION_TEXT3", 
CAST(NULL as datetime) "SRC_CREATE_DT", 
CAST(wdgt.LAST_SAVED as datetime) "SRC_UPDATE_DT", 
CAST(NULL as datetime) "EFF_FROM_DT", 
CAST(NULL as datetime) "EFF_TO_DT", 
wdgt.SUBJECT_ID "SUBJECT_ID" 
FROM 
OPB_OBJECT_TYPE otype, 
OPB_WIDGET wdgt, 
OPB_WIDGET_ATTR wdgtattr, 
OPB_WIDGET_INST wdgtinst, 
OPB_MAPPING map 
WHERE 
wdgt.WIDGET_ID = wdgtattr.WIDGET_ID AND 
wdgt.WIDGET_ID = wdgtinst.WIDGET_ID AND 
wdgtinst.MAPPING_ID = map.MAPPING_ID AND 
wdgt.IS_VISIBLE = 1 AND 
map.IS_VISIBLE =1 AND
wdgt.VERSION_NUMBER = wdgtattr.VERSION_NUMBER AND 
wdgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND 
wdgt.WIDGET_TYPE=11 AND 
wdgt.WIDGET_TYPE = otype.OBJECT_TYPE_ID AND 
wdgt.WIDGET_TYPE = wdgtattr.WIDGET_TYPE AND
wdgtattr.ATTR_ID=5 AND 
wdgtattr.MAPPING_ID = 0 AND 
wdgtattr.LINE_NO = 1 AND
NOT EXISTS 
(SELECT 'X' FROM OPB_WIDGET_ATTR wdgtattr1 WHERE wdgtattr1.INSTANCE_ID = wdgtinst.INSTANCE_ID AND 
wdgtattr1.MAPPING_ID=map.MAPPING_ID AND wdgtattr1.ATTR_ID = wdgtattr.ATTR_ID)
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_PARTITION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_PARTITION]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_PARTITION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_PARTITION]
AS
select REPOSITORY_ID,PARTITION_CLASS_ID,PARTITION_ID,
       TASK_ID,TASK_CLASS_ID,PARTITION_TYPE,
	 PARTITION_NAME,PARTITION_DESC,PARTITION_TEXT1,
	 PARTITION_TEXT2,PARTITION_TEXT3,VERSION_NUM,
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT",
      (CASE WHEN EFF_FROM_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_FROM_DT AS datetime) END) "EFF_FROM_DT",
      (CASE WHEN EFF_TO_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(EFF_TO_DT AS datetime) END) "EFF_TO_DT", SUBJECT_ID 
from V_PC8x_PARTITION
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_RUN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_RUN]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_RUN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_RUN]
AS select REPOSITORY_ID, CLASS_ID, RUN_ID,        SERVER_CLASS_ID, SERVER_ID, USER_ACCT_CLASS_ID, USER_ACCOUNT_ID,        EVENT_CLASS_ID, EVENT_ID,ACTIVITY_CLASS_ID, ACTIVITY_ID,        FOLDER_CLASS_ID, FOLDER_ID, STATUS_CLASS_ID, STATUS_ID,        RUN_START_DT, RUN_END_DT, RUN_NUMBER,        PARENT_RUN_NUMBER, NORMAL_RUN_FLAG,MESSAGE,
       ACTIVITY_RUN_TEXT1, ACTIVITY_RUN_TEXT2,
       ACTIVITY_RUN_TEXT3,
      (CASE WHEN SRC_CREATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_CREATE_DT AS datetime) END) "SRC_CREATE_DT",
      (CASE WHEN SRC_UPDATE_DT='' THEN CAST(NULL as datetime)
        ELSE CAST(SRC_UPDATE_DT AS datetime) END) "SRC_UPDATE_DT", SUBJECT_ID 
from V_PC8x_RUN
GO

GO
--SqlScripter----[dbo].[V_PC8x_MASTER_TSK_LOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_MASTER_TSK_LOG]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_MASTER_TSK_LOG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_MASTER_TSK_LOG]
AS
select REPOSITORY_ID, SERVER_CLASS_ID, SERVER_ID,
       USER_ACCT_CLASS_ID, USER_ACCOUNT_ID, EVENT_CLASS_ID,
       EVENT_ID, START_DATE, END_DATE,
       RUN_CLASS_ID,RUN_ID, ACTIVITY_CLASS_ID, ACTIVITY_ID, STEP_CLASS_ID,
       STEP_ID, TASK_CLASS_ID, TASK_ID,
       TRANSFORM_CLASS_ID, TRANSFORM_ID, FOLDER_CLASS_ID,
       FOLDER_ID, STATUS_CLASS_ID, STATUS_ID, STEP_RUN_NUMBER,
       INPUT_ROWS, REJECTED_ROWS, FAILED_ROWS, OUTPUT_ROWS,
       LOG_BLOCK_READS, PHY_BLOCK_READS, LOG_BLOCK_WRITES,
       PHY_BLOCK_WRITES, EXECUTION_MSECS, READ_MSECS,
       WRITE_MSECS, IDLE_WAIT_MSECS, BUSY_WAIT_MSECS,
       IDLE_WAIT_EVENTS, BUSY_WAIT_EVENTS,MESSAGE, SUBJECT_ID 
from V_PC8x_TSK_LOG
GO

GO
--SqlScripter----[dbo].[V_PC8x_PARTITION].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_PARTITION]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_PARTITION] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_PARTITION]
AS
select REPOSITORY_ID,PARTITION_CLASS_ID,PARTITION_ID,
       TASK_ID,TASK_CLASS_ID,PARTITION_TYPE,
	 PARTITION_NAME,PARTITION_DESC,PARTITION_TEXT1,
	 PARTITION_TEXT2,PARTITION_TEXT3,VERSION_NUM,
	 SRC_CREATE_DT,SRC_UPDATE_DT,EFF_FROM_DT,
       EFF_TO_DT,    SUBJECT_ID
from V_IME_PARTITION
UNION ALL
select REPOSITORY_ID,PARTITION_CLASS_ID,PARTITION_ID,
       TASK_ID,TASK_CLASS_ID,PARTITION_TYPE,
	 PARTITION_NAME,PARTITION_DESC,PARTITION_TEXT1,
	 PARTITION_TEXT2,PARTITION_TEXT3,VERSION_NUM,
	 SRC_CREATE_DT,SRC_UPDATE_DT,EFF_FROM_DT,
       EFF_TO_DT,    SUBJECT_ID
from V_IME_PART_SINST
GO

GO
--SqlScripter----[dbo].[V_PC8x_RUN].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_RUN]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_RUN] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_RUN]
AS 
select REPOSITORY_ID, CLASS_ID, RUN_ID,     
SERVER_CLASS_ID, SERVER_ID, USER_ACCT_CLASS_ID, USER_ACCOUNT_ID,   
EVENT_CLASS_ID, EVENT_ID,ACTIVITY_CLASS_ID, ACTIVITY_ID,     
FOLDER_CLASS_ID, FOLDER_ID, STATUS_CLASS_ID, STATUS_ID,       
RUN_START_DT, RUN_END_DT, RUN_NUMBER,        
PARENT_RUN_NUMBER, NORMAL_RUN_FLAG,MESSAGE,  
ACTIVITY_RUN_TEXT1, ACTIVITY_RUN_TEXT2,    
ACTIVITY_RUN_TEXT3, SRC_CREATE_DT, 
SRC_UPDATE_DT,    SUBJECT_ID from V_IME_RUN
GO

GO
--SqlScripter----[dbo].[V_PC8X_SESS_CNX_VAL].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_SESS_CNX_VAL]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_SESS_CNX_VAL] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_SESS_CNX_VAL]
AS 
SELECT  
tinst.INSTANCE_ID TASK_INSTANCE_ID,  
tinst.TASK_ID TASK_ID, 
tsk.VERSION_NUMBER TASK_VERS_NUM,
tattr.ATTR_ID ATTR_ID,  
tattr.ATTR_VALUE  ATTR_VALUE,  
wflow.SUBJECT_ID SUBJECT_ID
FROM  
OPB_TASK_ATTR tattr,  
OPB_TASK_INST tinst,
OPB_TASK tsk,
OPB_TASK wflow  
WHERE  
tinst.WORKFLOW_ID = tattr.WORKFLOW_ID AND  
tinst.TASK_ID = tattr.TASK_ID AND  
tinst.TASK_TYPE = tattr.TASK_TYPE AND  
tinst.INSTANCE_ID = tattr.INSTANCE_ID AND  
tinst.VERSION_NUMBER  = tattr.VERSION_NUMBER AND  
tattr.ATTR_ID in (7,8) AND
tinst.TASK_ID = tsk.TASK_ID AND  
tsk.IS_VISIBLE = 1  AND
wflow.TASK_ID = tinst.WORKFLOW_ID AND
wflow.VERSION_NUMBER = tinst.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1  
AND tattr.ATTR_VALUE IS NOT NULL 
UNION ALL  
SELECT  
tinst.INSTANCE_ID,  
tinst.TASK_ID,  
tsk.VERSION_NUMBER TASK_VERS_NUM,
tattr.ATTR_ID,  
tattr.ATTR_VALUE ATTR_VALUE,
wflow.SUBJECT_ID SUBJECT_ID  
FROM  
OPB_TASK_ATTR tattr,  
OPB_TASK_INST tinst,
OPB_TASK wflow,
OPB_TASK tsk  
WHERE  
tattr.WORKFLOW_ID = 0 AND  
tinst.TASK_ID = tattr.TASK_ID AND  
tinst.TASK_TYPE = tattr.TASK_TYPE AND  
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1  AND
tsk.VERSION_NUMBER = tattr.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.IS_VISIBLE = 1  AND  
tattr.INSTANCE_ID = 0 AND  
tattr.ATTR_ID in (7,8) AND  
NOT EXISTS ( SELECT 'X' FROM OPB_TASK_ATTR tattr1  
WHERE  
tinst.WORKFLOW_ID =  tattr1.WORKFLOW_ID AND  
tinst.VERSION_NUMBER = tattr1.VERSION_NUMBER AND
tinst.TASK_ID = tattr1.TASK_ID AND  
tinst.INSTANCE_ID = tattr1.INSTANCE_ID AND  
tattr1.ATTR_ID in (7,8))  
AND tattr.ATTR_VALUE IS NOT NULL
GO

GO
--SqlScripter----[dbo].[V_PC8X_SESS_DSQ_CNX].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_SESS_DSQ_CNX]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_SESS_DSQ_CNX] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_SESS_DSQ_CNX]
AS
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM, 
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPLET_MAP_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
cnxref.REF_OBJECT_ID  CONNECTION_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND 
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND   
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  tinst.INSTANCE_ID AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPLET_MAP_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
map.MAPPING_ID = winst.MAPPING_ID AND  65535 & CAST(swinst.INSTANCE_ID as INT) = winst.INSTANCE_ID  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPLET_MAP_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID, 
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
cnxref.REF_OBJECT_ID  CONNECTION_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND   
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  0 AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPLET_MAP_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
65535 & CAST(swinst.INSTANCE_ID as INT) = winst.INSTANCE_ID AND  
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE  
cnxref2.SESSION_ID  = tinst.TASK_ID AND  
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND  
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
	cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPING_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID, 
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
cnxref.REF_OBJECT_ID  CONNECTION_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  tinst.INSTANCE_ID AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
swinst.INSTANCE_ID = winst.INSTANCE_ID  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPING_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,  
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
cnxref.REF_OBJECT_ID  CONNECTION_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow   
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND 
	tsk.IS_VISIBLE = 1 AND 
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  0 AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
swinst.INSTANCE_ID = winst.INSTANCE_ID AND  
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE  
cnxref2.SESSION_ID  = tinst.TASK_ID AND  
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND  
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)
GO

GO
--SqlScripter----[dbo].[V_PC8X_SESS_DSQ_CNX_PAR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_SESS_DSQ_CNX_PAR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_SESS_DSQ_CNX_PAR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_SESS_DSQ_CNX_PAR]
AS
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM, 
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPLET_MAP_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,  
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
UPPER(cnxref.REF_OBJECT_VALUE)  PARM_NAME,
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND 
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND   
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  tinst.INSTANCE_ID AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPLET_MAP_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
map.MAPPING_ID = winst.MAPPING_ID AND  65535 & CAST(swinst.INSTANCE_ID as INT) = winst.INSTANCE_ID  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPLET_MAP_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,  
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
UPPER(cnxref.REF_OBJECT_VALUE)  PARM_NAME,
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND   
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  0 AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPLET_MAP_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
65535 & CAST(swinst.INSTANCE_ID as INT) = winst.INSTANCE_ID AND  
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE  
cnxref2.SESSION_ID  = tinst.TASK_ID AND  
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND  
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
	cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPING_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,  
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
UPPER(cnxref.REF_OBJECT_VALUE)  PARM_NAME,
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND  
	tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  tinst.INSTANCE_ID AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
swinst.INSTANCE_ID = winst.INSTANCE_ID  
UNION ALL  
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
tinst.TASK_ID     TASK_ID,  
	tsk.VERSION_NUMBER TASK_VERS_NUM,
swinst.MAPPING_ID ORIG_MAPPING_ID,  
swinst.MAPPING_ID MAPPING_ID,  
swinst.INSTANCE_ID MAP_INSTANCE_ID,  
winst.INSTANCE_ID  INSTANCE_ID,  
winst.WIDGET_ID    WIDGET_ID,  
winst.WIDGET_TYPE  WIDGET_TYPE,  
UPPER(cnxref.REF_OBJECT_VALUE)  PARM_NAME,
CASE WHEN swinst.MAPPLET_INST_NAME IS NOT NULL THEN swinst.MAPPLET_INST_NAME
ELSE map.MAPPING_NAME END MAP_CONTEXT_NAME,
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID"
FROM  
OPB_SWIDGET_INST swinst,  
OPB_MAPPING map,  
OPB_WIDGET_INST winst,  
OPB_SESS_CNX_REFS cnxref,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,
	OPB_TASK wflow   
WHERE  
swinst.WIDGET_TYPE IN (3,45) AND  
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
tinst.TASK_ID = tsk.TASK_ID AND 
	tsk.IS_VISIBLE = 1 AND 
tinst.TASK_ID = swinst.SESSION_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
wfvar.VAR_NAME = 'Status' AND  
	wfvar.VERSION_NUMBER = tinst.VERSION_NUMBER AND
	wfvar.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
	wfvar.WORKFLOW_ID = wflow.TASK_ID AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND  
cnxref.SESSION_INST_ID =  0 AND  
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND  
	cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
	cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = winst.MAPPING_ID AND  
map.MAPPING_ID = winst.MAPPING_ID AND  
	map.VERSION_NUMBER = winst.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND
swinst.INSTANCE_ID = winst.INSTANCE_ID AND  
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE  
cnxref2.SESSION_ID  = tinst.TASK_ID AND  
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND  
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)
GO

GO
--SqlScripter----[dbo].[V_PC8X_SESSION_INCR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_SESSION_INCR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_SESSION_INCR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_SESSION_INCR]
AS
SELECT OPB_WIDGET_INST.MAPPING_ID, CAST(OPB_WIDGET.LAST_SAVED as datetime) WGT_UPDATE_DT  
FROM  
OPB_WIDGET  ,
OPB_WIDGET_INST,
	OPB_MAPPING
WHERE  
OPB_WIDGET.WIDGET_ID = OPB_WIDGET_INST.WIDGET_ID AND  
OPB_WIDGET.WIDGET_TYPE = OPB_WIDGET_INST.WIDGET_TYPE AND
OPB_WIDGET.WIDGET_TYPE IN (11,3,45)  AND
	OPB_WIDGET.IS_VISIBLE = 1 AND
	OPB_WIDGET_INST.MAPPING_ID = OPB_MAPPING.MAPPING_ID AND
	OPB_WIDGET_INST.VERSION_NUMBER = OPB_MAPPING.VERSION_NUMBER AND
	OPB_MAPPING.IS_VISIBLE = 1
UNION ALL  
SELECT  
winst1.MAPPING_ID, 
 CAST(wgt1.LAST_SAVED as datetime) WGT_UPDATE_DT  
FROM  
OPB_WIDGET wgt1 , 
OPB_MAPPING map1, 
OPB_WIDGET_INST winst2, 
OPB_WIDGET_INST winst1,
	OPB_MAPPING map
WHERE winst1.WIDGET_TYPE = 44 AND  
	winst1.MAPPING_ID = map.MAPPING_ID AND
	winst1.VERSION_NUMBER = map.VERSION_NUMBER AND
	map.IS_VISIBLE = 1 AND 
winst1.WIDGET_ID = map1.REF_WIDGET_ID AND  
winst2.MAPPING_ID = map1.MAPPING_ID AND  
	winst2.VERSION_NUMBER = map1.VERSION_NUMBER AND  
	map1.IS_VISIBLE = 1 AND
wgt1.WIDGET_ID = winst2.WIDGET_ID AND  
wgt1.WIDGET_TYPE = winst2.WIDGET_TYPE AND 
	wgt1.IS_VISIBLE = 1 AND 
winst2.WIDGET_TYPE IN (3,11,45)
GO

GO
--SqlScripter----[dbo].[V_PC8X_TASK_INST_LKP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TASK_INST_LKP]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TASK_INST_LKP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TASK_INST_LKP]
AS
SELECT  
swinst.SESSION_ID SESSION_ID,  
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID,  
tinst.INSTANCE_ID TASK_INST_ID,  
swinst.SESSION_ID TASK_ID,  
	swinst.VERSION_NUMBER TASK_VERS_NUM,  
swinst.MAPPING_ID ORIG_MAPPING_ID,  
( CASE WHEN swinst.MAPPLET_MAP_ID = 0  THEN swinst.MAPPING_ID ELSE  swinst.MAPPLET_MAP_ID END) MAPPING_ID,  
swinst.INSTANCE_ID  LKP_MAP_INST_ID,  
CAST((65535 & CAST(swinst.INSTANCE_ID as INT)) as INT)  LKP_INST_ID,  
swinst.WIDGET_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
	CAST(NULL as datetime) "EFF_FROM_DT",
	CAST(NULL as datetime) "EFF_TO_DT",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 wgt.SUBJECT_ID "TGT_SUBJECT_ID"
from  
OPB_WIDGET wgt,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,  
OPB_MAPPING map,  
OPB_SWIDGET_INST swinst,
	OPB_TASK wflow  
WHERE  
swinst.WIDGET_TYPE = 11 AND  
swinst.WIDGET_ID = wgt.WIDGET_ID AND  
	wgt.IS_VISIBLE = 1 AND 
swinst.MAPPING_ID = map.MAPPING_ID AND  
	map.IS_VISIBLE = 1 AND 
swinst.SESSION_ID = tsk.TASK_ID AND  
	swinst.VERSION_NUMBER = tsk.VERSION_NUMBER AND
	tsk.IS_VISIBLE = 1 AND 
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
swinst.SESSION_ID = tinst.TASK_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
	tinst.VERSION_NUMBER = wfvar.VERSION_NUMBER AND 
	tinst.WORKFLOW_ID = wflow.TASK_ID AND
	tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
	wflow.TASK_TYPE IN (70,71) AND
	wflow.IS_VISIBLE = 1 AND
wfvar.VAR_NAME = 'Status'
GO

GO
--SqlScripter----[dbo].[V_PC8X_TASK_INST_SP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TASK_INST_SP]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TASK_INST_SP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TASK_INST_SP]
AS
SELECT  
swinst.SESSION_ID SESSION_ID, 
swinst.SESS_WIDG_INST_ID SESSION_WIDG_INST_ID, 
tinst.INSTANCE_ID TASK_INST_ID,  
swinst.SESSION_ID TASK_ID,  
swinst.VERSION_NUMBER TASK_VERS_NUM,  
swinst.MAPPING_ID ORIG_MAPPING_ID,  
( CASE WHEN swinst.MAPPLET_MAP_ID = 0  THEN swinst.MAPPING_ID ELSE  swinst.MAPPLET_MAP_ID END) MAPPING_ID,  
swinst.INSTANCE_ID  SP_MAP_INST_ID,  
CAST((65535 & CAST(swinst.INSTANCE_ID as INT)) as INT)  SP_INST_ID,  
swinst.WIDGET_ID,  
CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,  
CAST(wfvar.LAST_SAVED as datetime) ACT_UPDATE_DT,
CAST(NULL as datetime)  EFF_FROM_DT, 
CAST(NULL as datetime)  EFF_TO_DT,
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 wgt.SUBJECT_ID "TGT_SUBJECT_ID"
from  
OPB_WIDGET wgt,  
OPB_TASK tsk,  
OPB_WFLOW_VAR wfvar,  
OPB_TASK_INST tinst,  
OPB_MAPPING map,  
OPB_SWIDGET_INST swinst ,
OPB_TASK wflow
WHERE  
swinst.WIDGET_TYPE = 6 AND  
swinst.WIDGET_ID = wgt.WIDGET_ID AND  
wgt.IS_VISIBLE = 1 AND 
swinst.MAPPING_ID = map.MAPPING_ID AND  
map.IS_VISIBLE = 1 AND 
swinst.SESSION_ID = tsk.TASK_ID AND  
swinst.VERSION_NUMBER = tsk.VERSION_NUMBER AND
tsk.IS_VISIBLE = 1 AND 
wfvar.SUBJECT_ID = tsk.SUBJECT_ID AND  
swinst.SESSION_ID = tinst.TASK_ID AND  
tinst.WORKFLOW_ID = wfvar.WORKFLOW_ID AND  
tinst.INSTANCE_NAME = wfvar.TASK_INST_NAME AND  
tinst.VERSION_NUMBER = wfvar.VERSION_NUMBER AND 
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wfvar.VAR_NAME = 'Status'
GO

GO
--SqlScripter----[dbo].[V_PC8X_TASK_SRC_TGT_PAR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TASK_SRC_TGT_PAR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TASK_SRC_TGT_PAR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TASK_SRC_TGT_PAR]
AS 
SELECT  
' '	"REPOSITORY_ID",
tsk.TASK_ID,   
task_inst.INSTANCE_ID TASK_INSTANCE_ID,  
CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 THEN OPB_SWIDGET_INST.INSTANCE_ID
ELSE 65535 & CAST(OPB_SWIDGET_INST.INSTANCE_ID AS INT) END WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, 
CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 THEN OPB_MAPPING.MAPPING_ID 
ELSE OPB_SWIDGET_INST.MAPPLET_MAP_ID END MAPPING_ID, 
ATTR_ID,
tsk.SUBJECT_ID,
CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 THEN OPB_MAPPING.MAPPING_NAME ELSE
OPB_SWIDGET_INST.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
FROM 
OPB_SWIDGET_INST, 
OPB_SWIDGET_ATTR,
OPB_TASK_INST task_inst,
OPB_MAPPING,
OPB_WIDGET_DEP,
OPB_TASK tsk,
OPB_TASK wflow, 
OPB_WIDGET_INST wdep   
WHERE  
task_inst.TASK_ID=OPB_SWIDGET_INST.SESSION_ID AND  
task_inst.TASK_ID = tsk.TASK_ID AND 
tsk.VERSION_NUMBER=OPB_SWIDGET_INST.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
OPB_SWIDGET_INST.SESSION_ID=OPB_SWIDGET_ATTR.SESSION_ID AND  
OPB_SWIDGET_INST.SESS_WIDG_INST_ID=OPB_SWIDGET_ATTR.SESS_WIDG_INST_ID  
AND OPB_SWIDGET_INST.VERSION_NUMBER=OPB_SWIDGET_ATTR.VERSION_NUMBER  
and ATTR_VALUE IS NOT NULL  
AND ((OPB_SWIDGET_INST.MAPPING_ID=OPB_MAPPING.MAPPING_ID AND OPB_SWIDGET_INST.MAPPLET_MAP_ID=0)
OR(OPB_SWIDGET_INST.MAPPLET_MAP_ID=OPB_MAPPING.MAPPING_ID AND OPB_SWIDGET_INST.MAPPLET_MAP_ID!=0))  AND 
OPB_MAPPING.IS_VISIBLE = 1 AND  
OPB_WIDGET_DEP.MAPPING_ID=OPB_MAPPING.MAPPING_ID AND 
OPB_WIDGET_DEP.VERSION_NUMBER=OPB_MAPPING.VERSION_NUMBER AND  
OPB_WIDGET_DEP.FROM_INSTANCE_ID = 65535 & CAST(OPB_SWIDGET_INST.INSTANCE_ID AS INT) AND 
TO_FIELD_ID=1 AND 
((OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 AND OPB_SWIDGET_INST.MAPPING_ID=wdep.MAPPING_ID)
OR (OPB_SWIDGET_INST.MAPPLET_MAP_ID!=0 AND OPB_SWIDGET_INST.MAPPLET_MAP_ID=wdep.MAPPING_ID))  
AND OPB_WIDGET_DEP.TO_INSTANCE_ID=wdep.INSTANCE_ID  
AND OPB_SWIDGET_ATTR.ATTR_ID =31 AND 
OPB_SWIDGET_INST.WIDGET_TYPE=1  
AND  
NOT EXISTS (  
SELECT 'X' 
FROM OPB_SWIDGET_ATTR swidg_attr,
OPB_SWIDGET_INST WGT 
WHERE  
swidg_attr.SESSION_ID=OPB_SWIDGET_ATTR.SESSION_ID  AND  
swidg_attr.VERSION_NUMBER=OPB_SWIDGET_ATTR.VERSION_NUMBER AND 
ATTR_ID=1 AND  
WGT.SESSION_ID=swidg_attr.SESSION_ID AND  
WGT.VERSION_NUMBER=swidg_attr.VERSION_NUMBER AND  
WGT.SESS_WIDG_INST_ID=swidg_attr.SESS_WIDG_INST_ID AND
WGT.WIDGET_TYPE IN (3,45) AND  
65535 & CAST(OPB_SWIDGET_INST.INSTANCE_ID AS INT) = OPB_WIDGET_DEP.TO_INSTANCE_ID AND  
ATTR_VALUE IS NOT NULL )  
AND NOT EXISTS  
(SELECT 'X' from OPB_WIDGET_ATTR WHERE wdep.WIDGET_ID=OPB_WIDGET_ATTR.WIDGET_ID AND 
wdep.VERSION_NUMBER=OPB_WIDGET_ATTR.VERSION_NUMBER AND  
OPB_WIDGET_ATTR.WIDGET_TYPE IN (3,45) AND  
OPB_WIDGET_ATTR.ATTR_ID = 1 AND  
ATTR_VALUE IS NOT NULL)  
UNION ALL  
SELECT 
' '	"REPOSITORY_ID",
tsk.TASK_ID,
task_inst.INSTANCE_ID TASK_INSTANCE_ID,   
CASE WHEN swidg_inst.MAPPLET_MAP_ID=0 THEN swidg_inst.INSTANCE_ID
ELSE 65535 & CAST(swidg_inst.INSTANCE_ID AS INT) END WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, 
OPB_WIDGET_INST.MAPPING_ID, 
ATTR_ID  ,
tsk.SUBJECT_ID,
CASE WHEN swidg_inst.MAPPLET_MAP_ID=0 THEN map.MAPPING_NAME ELSE
swidg_inst.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
from 
OPB_WIDGET_ATTR widg_attr,
OPB_SWIDGET_INST swidg_inst,
OPB_WIDGET_INST, 
OPB_WIDGET_INST wdep,  
OPB_WIDGET_DEP, 
OPB_MAPPING map,  
OPB_TASK_INST task_inst , 
OPB_TASK tsk, 
OPB_TASK wflow  
WHERE  
task_inst.TASK_ID=swidg_inst.SESSION_ID  AND  
task_inst.TASK_ID = tsk.TASK_ID AND 
tsk.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
((swidg_inst.MAPPLET_MAP_ID=0 AND swidg_inst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID)
OR (swidg_inst.MAPPLET_MAP_ID!=0 AND swidg_inst.MAPPLET_MAP_ID=OPB_WIDGET_INST.MAPPING_ID)) AND 
65535 & CAST(swidg_inst.INSTANCE_ID AS INT) = OPB_WIDGET_INST.INSTANCE_ID AND  
widg_attr.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND 
widg_attr.VERSION_NUMBER=OPB_WIDGET_INST.VERSION_NUMBER AND  
map.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND 
map.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER AND 
map.IS_VISIBLE=1 AND  
widg_attr.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID and 
widg_attr.WIDGET_TYPE=1 AND  
ATTR_ID =31 
AND  
(SUBSTRING(ATTR_VALUE, 1, 255) != '0' OR widg_attr.ATTR_VALUE IS NOT NULL)  
AND OPB_WIDGET_DEP.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND 
OPB_WIDGET_DEP.VERSION_NUMBER=OPB_WIDGET_INST.VERSION_NUMBER AND 
OPB_WIDGET_DEP.FROM_INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID AND 
TO_FIELD_ID=1 AND 
((swidg_inst.MAPPLET_MAP_ID=0 AND swidg_inst.MAPPING_ID=wdep.MAPPING_ID  ) OR (swidg_inst.MAPPLET_MAP_ID!=0 AND swidg_inst.MAPPLET_MAP_ID=wdep.MAPPING_ID))  
AND OPB_WIDGET_DEP.TO_INSTANCE_ID=wdep.INSTANCE_ID  
AND NOT EXISTS (  
SELECT 'X' 
FROM 
OPB_SWIDGET_ATTR swidg_attr,
OPB_SWIDGET_INST WGT 
where swidg_attr.SESSION_ID=swidg_inst.SESSION_ID AND  
swidg_attr.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND 
ATTR_ID=1 AND  
WGT.SESSION_ID=swidg_attr.SESSION_ID AND  
WGT.VERSION_NUMBER=swidg_attr.VERSION_NUMBER AND  
WGT.SESS_WIDG_INST_ID=swidg_attr.SESS_WIDG_INST_ID AND 
WGT.WIDGET_TYPE IN (3,45) AND  
65535 & CAST(WGT.INSTANCE_ID AS INT)=OPB_WIDGET_DEP.TO_INSTANCE_ID AND  
ATTR_VALUE IS NOT NULL )  
AND NOT EXISTS  
(SELECT 'X' 
from OPB_WIDGET_ATTR 
WHERE wdep.WIDGET_ID=OPB_WIDGET_ATTR.WIDGET_ID AND 
wdep.VERSION_NUMBER=OPB_WIDGET_ATTR.VERSION_NUMBER AND  
OPB_WIDGET_ATTR.WIDGET_TYPE IN (3,45) AND  
OPB_WIDGET_ATTR.ATTR_ID = 1 AND  
ATTR_VALUE IS NOT NULL)  
AND NOT EXISTS  
(SELECT  
'X'  
FROM OPB_SWIDGET_INST sinst, OPB_SWIDGET_ATTR sattr WHERE  
sinst.SESSION_ID=swidg_inst.SESSION_ID AND  
sinst.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
sinst.SESSION_ID=sattr.SESSION_ID AND  
sinst.SESS_WIDG_INST_ID=sattr.SESS_WIDG_INST_ID  
AND sinst.VERSION_NUMBER=sattr.VERSION_NUMBER  
AND ((sinst.MAPPLET_MAP_ID=0 AND sinst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID)
OR (sinst.MAPPLET_MAP_ID!=0 AND sinst.MAPPLET_MAP_ID = OPB_WIDGET_INST.MAPPING_ID)) AND 
65535 & CAST(sinst.INSTANCE_ID AS INT) = OPB_WIDGET_INST.INSTANCE_ID   
and ATTR_ID =31 AND WIDGET_TYPE=1 AND ATTR_VALUE IS NOT NULL )  
UNION ALL  
SELECT  
' '	"REPOSITORY_ID",  
tsk.TASK_ID ,  
task_inst.INSTANCE_ID TASK_INSTANCE_ID,OPB_SWIDGET_INST.INSTANCE_ID WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, OPB_MAPPING.MAPPING_ID,  
ATTR_ID,tsk.SUBJECT_ID, CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 THEN OPB_MAPPING.MAPPING_NAME ELSE
OPB_SWIDGET_INST.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
FROM OPB_SWIDGET_INST, OPB_SWIDGET_ATTR,OPB_TASK_INST task_inst,OPB_MAPPING,OPB_TASK tsk,OPB_TASK wflow WHERE  
task_inst.TASK_ID=OPB_SWIDGET_INST.SESSION_ID AND  
task_inst.TASK_ID = tsk.TASK_ID AND tsk.VERSION_NUMBER=OPB_SWIDGET_INST.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
OPB_SWIDGET_INST.SESSION_ID=OPB_SWIDGET_ATTR.SESSION_ID AND  
OPB_SWIDGET_INST.SESS_WIDG_INST_ID=OPB_SWIDGET_ATTR.SESS_WIDG_INST_ID  
AND OPB_SWIDGET_INST.VERSION_NUMBER=OPB_SWIDGET_ATTR.VERSION_NUMBER  
and (SUBSTRING(ATTR_VALUE, 1, 255) != '0' or ATTR_VALUE IS NOT NULL)   
AND OPB_SWIDGET_INST.MAPPING_ID=OPB_MAPPING.MAPPING_ID AND OPB_MAPPING.IS_VISIBLE = 1  
and ATTR_ID =19 AND WIDGET_TYPE=2  
UNION ALL  
select ' '	"REPOSITORY_ID",  
tsk.TASK_ID ,  
task_inst.INSTANCE_ID TASK_INSTANCE_ID, swidg_inst.INSTANCE_ID WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, OPB_WIDGET_INST.MAPPING_ID,  
ATTR_ID ,tsk.SUBJECT_ID,CASE WHEN swidg_inst.MAPPLET_MAP_ID=0 THEN map.MAPPING_NAME ELSE
swidg_inst.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
from OPB_WIDGET_ATTR widg_attr,OPB_SWIDGET_INST swidg_inst,OPB_WIDGET_INST,  
OPB_TASK_INST task_inst   , OPB_TASK tsk, OPB_TASK wflow,OPB_MAPPING map  
where  
task_inst.TASK_ID=swidg_inst.SESSION_ID  AND  
task_inst.TASK_ID = tsk.TASK_ID AND tsk.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
swidg_inst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND swidg_inst.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID AND  
widg_attr.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND widg_attr.VERSION_NUMBER=OPB_WIDGET_INST.VERSION_NUMBER AND  
map.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND map.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER AND map.IS_VISIBLE=1 AND  
widg_attr.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID and  
ATTR_ID =19 AND 
(SUBSTRING(widg_attr.ATTR_VALUE, 1, 255) != '0' or widg_attr.ATTR_VALUE IS NOT NULL)  
AND NOT EXISTS  
(SELECT  
'X'  
FROM OPB_SWIDGET_INST sinst, OPB_SWIDGET_ATTR sattr WHERE  
sinst.SESSION_ID=swidg_inst.SESSION_ID AND  
sinst.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
sinst.SESSION_ID=sattr.SESSION_ID AND  
sinst.SESS_WIDG_INST_ID=sattr.SESS_WIDG_INST_ID  
AND sinst.VERSION_NUMBER=sattr.VERSION_NUMBER  
AND sinst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND sinst.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID  
and ATTR_ID =19 AND WIDGET_TYPE=2 AND ATTR_VALUE IS NOT NULL )
UNION ALL
SELECT  
' '	"REPOSITORY_ID",  
tsk.TASK_ID ,  
task_inst.INSTANCE_ID TASK_INSTANCE_ID,OPB_SWIDGET_INST.INSTANCE_ID WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, OPB_MAPPING.MAPPING_ID,  
ATTR_ID,tsk.SUBJECT_ID, CASE WHEN OPB_SWIDGET_INST.MAPPLET_MAP_ID=0 THEN OPB_MAPPING.MAPPING_NAME ELSE
OPB_SWIDGET_INST.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
FROM OPB_SWIDGET_INST, OPB_SWIDGET_ATTR,OPB_TASK_INST task_inst,OPB_MAPPING,OPB_TASK tsk,OPB_TASK wflow WHERE  
task_inst.TASK_ID=OPB_SWIDGET_INST.SESSION_ID AND  
task_inst.TASK_ID = tsk.TASK_ID AND tsk.VERSION_NUMBER=OPB_SWIDGET_INST.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
OPB_SWIDGET_INST.SESSION_ID=OPB_SWIDGET_ATTR.SESSION_ID AND  
OPB_SWIDGET_INST.SESS_WIDG_INST_ID=OPB_SWIDGET_ATTR.SESS_WIDG_INST_ID  
AND OPB_SWIDGET_INST.VERSION_NUMBER=OPB_SWIDGET_ATTR.VERSION_NUMBER  
and (SUBSTRING(ATTR_VALUE, 1, 255) != '0' or ATTR_VALUE IS NOT NULL)   
AND OPB_SWIDGET_INST.MAPPING_ID=OPB_MAPPING.MAPPING_ID AND OPB_MAPPING.IS_VISIBLE = 1  
and ATTR_ID =3 AND WIDGET_TYPE=2  
UNION ALL  
select ' '	"REPOSITORY_ID",  
tsk.TASK_ID ,  
task_inst.INSTANCE_ID TASK_INSTANCE_ID, swidg_inst.INSTANCE_ID WIDGET_INSTANCE_ID,  
ATTR_VALUE PARAM_NAME, OPB_WIDGET_INST.MAPPING_ID,  
ATTR_ID ,tsk.SUBJECT_ID,CASE WHEN swidg_inst.MAPPLET_MAP_ID=0 THEN map.MAPPING_NAME ELSE
swidg_inst.MAPPLET_INST_NAME END MAP_CONTEXT_NAME
from OPB_WIDGET_ATTR widg_attr,OPB_SWIDGET_INST swidg_inst,OPB_WIDGET_INST,  
OPB_TASK_INST task_inst   , OPB_TASK tsk, OPB_TASK wflow,OPB_MAPPING map  
where  
task_inst.TASK_ID=swidg_inst.SESSION_ID  AND  
task_inst.TASK_ID = tsk.TASK_ID AND tsk.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
task_inst.TASK_TYPE = 68 AND  
tsk.IS_VISIBLE = 1 AND  
task_inst.WORKFLOW_ID = wflow.TASK_ID AND  
task_inst.VERSION_NUMBER = wflow.VERSION_NUMBER AND  
wflow.TASK_TYPE IN (70,71) AND  
wflow.IS_VISIBLE = 1 AND  
swidg_inst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND swidg_inst.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID AND  
widg_attr.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND widg_attr.VERSION_NUMBER=OPB_WIDGET_INST.VERSION_NUMBER AND  
map.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND map.VERSION_NUMBER = OPB_WIDGET_INST.VERSION_NUMBER AND map.IS_VISIBLE=1 AND  
widg_attr.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID and  
ATTR_ID =3 AND 
(SUBSTRING(widg_attr.ATTR_VALUE, 1, 255) != '0' or widg_attr.ATTR_VALUE IS NOT NULL)  
AND NOT EXISTS  
(SELECT  
'X'  
FROM OPB_SWIDGET_INST sinst, OPB_SWIDGET_ATTR sattr WHERE  
sinst.SESSION_ID=swidg_inst.SESSION_ID AND  
sinst.VERSION_NUMBER=swidg_inst.VERSION_NUMBER AND  
sinst.SESSION_ID=sattr.SESSION_ID AND  
sinst.SESS_WIDG_INST_ID=sattr.SESS_WIDG_INST_ID  
AND sinst.VERSION_NUMBER=sattr.VERSION_NUMBER  
AND sinst.MAPPING_ID=OPB_WIDGET_INST.MAPPING_ID AND sinst.INSTANCE_ID=OPB_WIDGET_INST.INSTANCE_ID  
and ATTR_ID =3 AND WIDGET_TYPE=2 AND ATTR_VALUE IS NOT NULL )
GO

GO
--SqlScripter----[dbo].[V_PC8X_TGT_DB_CONN_PAR].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TGT_DB_CONN_PAR]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TGT_DB_CONN_PAR] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TGT_DB_CONN_PAR]
AS
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE", 
   UPPER(cnxref.REF_OBJECT_VALUE) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) 
UNION ALL
SELECT 
  tinst.INSTANCE_ID "TASK_ID",
  tsk.TASK_ID "SESSION_ID",
  swinst.MAPPING_ID "TRANSFORM_ID",
  tgtinst.INSTANCE_ID  	"TGT_INST_ID",
  tgtfld.TARGET_ID "TARGET_ID",
  tgtfld.FLDID "TGT_FIELD_ID",   
  otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",
  UPPER(cnxref.REF_OBJECT_VALUE) "PARM_NAME",
  UPPER(tgt.TARGET_NAME) "TARGET_NAME",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 )
UNION ALL
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",    
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",  
   UPPER(cnxref.REF_OBJECT_VALUE) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_OBJECT_TYPE otype,
OPB_SESS_CNX_REFS cnxref, 
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)
UNION ALL
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",    
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",  
   UPPER(cnxref.REF_OBJECT_VALUE) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID = 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 )
UNION ALL
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE", 
   UPPER(cnx.OBJECT_NAME) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_SESS_CNX_REFS cnxref, 
OPB_CNX cnx,
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
wattr.ATTR_VALUE LIKE '$%' AND
cnxref.REF_OBJECT_ID = cnx.OBJECT_ID AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) AND NOT EXISTS
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
UNION ALL
SELECT 
  tinst.INSTANCE_ID "TASK_ID",
  tsk.TASK_ID "SESSION_ID",
  swinst.MAPPING_ID "TRANSFORM_ID",
  tgtinst.INSTANCE_ID  	"TGT_INST_ID",
  tgtfld.TARGET_ID "TARGET_ID",
  tgtfld.FLDID "TGT_FIELD_ID",   
  otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",
  UPPER(cnx.OBJECT_NAME) "PARM_NAME",
  UPPER(tgt.TARGET_NAME) "TARGET_NAME",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_CNX cnx,
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.ATTR_VALUE LIKE '$%' AND
cnxref.REF_OBJECT_ID = cnx.OBJECT_ID AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 ) AND NOT EXISTS
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
UNION ALL
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",    
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",  
   UPPER(cnx.OBJECT_NAME) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_OBJECT_TYPE otype,
OPB_SESS_CNX_REFS cnxref, 
OPB_CNX cnx,
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
wattr.ATTR_VALUE LIKE '$%' AND
cnxref.REF_OBJECT_ID = cnx.OBJECT_ID AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER) AND NOT EXISTS
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
UNION ALL
SELECT 
   tinst.INSTANCE_ID "TASK_ID",
   tsk.TASK_ID "SESSION_ID",
   swinst.MAPPING_ID "TRANSFORM_ID",
   tgtinst.INSTANCE_ID  	"TGT_INST_ID",
   tgtfld.TARGET_ID "TARGET_ID",
   tgtfld.FLDID "TGT_FIELD_ID",    
   otype.OBJECT_TYPE_NAME "CONNECTION_TYPE",  
   UPPER(cnx.OBJECT_NAME) "PARM_NAME",
   UPPER(tgt.TARGET_NAME) "TARGET_NAME",
   UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
   UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
   CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
   CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
   tsk.SUBJECT_ID "TASK_SUBJECT_ID",
   map.SUBJECT_ID "TRFN_SUBJECT_ID",
   tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_CNX cnx,
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.ATTR_VALUE LIKE '$%' AND
cnxref.REF_OBJECT_ID = cnx.OBJECT_ID AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 ) AND NOT EXISTS
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
GO

GO
--SqlScripter----[dbo].[V_PC8X_TGT_DB_FEAT_MAP].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TGT_DB_FEAT_MAP]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TGT_DB_FEAT_MAP] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TGT_DB_FEAT_MAP]
AS 
SELECT 
  ' ' 	"REPOSITORY_ID",
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"STRUCT_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "STRUCT_CLASS_ID",     
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "FEATURE_CLASS_ID",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "REF_PACKAGE_NAME",
  UPPER(tgt.TARGET_NAME) "REF_STRUCT_NAME",
  UPPER(tgtfld.TARGET_NAME) "REF_FEATURE_NAME",
  1 "DIRECTION",
  0 "TYPE",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "CONNECTION_CLASS_ID",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND wattr.ATTR_VALUE NOT LIKE('$%') AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) 
AND NOT EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)  
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"STRUCT_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "STRUCT_CLASS_ID",     
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "FEATURE_CLASS_ID",
    UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "REF_PACKAGE_NAME",
  UPPER(tgt.TARGET_NAME) "REF_STRUCT_NAME",
    UPPER(tgtfld.TARGET_NAME) "REF_FEATURE_NAME",
  1 "DIRECTION",
  0 "TYPE",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "CONNECTION_CLASS_ID",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND wattr.ATTR_VALUE NOT LIKE('$%') AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 ) 
AND NOT EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)  
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"STRUCT_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "STRUCT_CLASS_ID",     
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "FEATURE_CLASS_ID",
    UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "REF_PACKAGE_NAME",
  UPPER(tgt.TARGET_NAME) "REF_STRUCT_NAME",
  UPPER(tgtfld.TARGET_NAME) "REF_FEATURE_NAME",
  1 "DIRECTION",
  0 "TYPE",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "CONNECTION_ID",
  'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "CONNECTION_CLASS_ID",
 tsk.SUBJECT_ID "TASK_SUBJECT_ID",
 map.SUBJECT_ID "TRFN_SUBJECT_ID",
 tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_OBJECT_TYPE otype,
OPB_SESS_CNX_REFS cnxref, 
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND wattr.ATTR_VALUE NOT LIKE('$%') AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)
AND NOT EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL) 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"STRUCT_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "STRUCT_CLASS_ID",     
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "FEATURE_CLASS_ID",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "REF_PACKAGE_NAME",
  UPPER(tgt.TARGET_NAME) "REF_STRUCT_NAME",
  UPPER(tgtfld.TARGET_NAME) "REF_FEATURE_NAME",
  1 "DIRECTION",
  0 "TYPE",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "CONNECTION_ID",
  'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "CONNECTION_CLASS_ID",
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
 tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND wattr.ATTR_VALUE NOT LIKE('$%') AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 ) 
AND NOT EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL)  AND NOT EXISTS
(SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
GO

GO
--SqlScripter----[dbo].[V_PC8X_TGT_DB_FEAT_MAP_1].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8X_TGT_DB_FEAT_MAP_1]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8X_TGT_DB_FEAT_MAP_1] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8X_TGT_DB_FEAT_MAP_1]
AS
SELECT 
  ' ' 	"REPOSITORY_ID",
  tinst.INSTANCE_ID "TASK_INSTANCE_ID",  
  swinst.INSTANCE_ID "WIDGET_INSTANCE_ID",  
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "SOURCE_CLASS_ID",     
  ' '		"SOURCE_REPO_ID", 
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME" , 
  CAST(NULL AS VARCHAR) 	"TARGET_ID",
  CAST(NULL AS VARCHAR)  "TARGET_CLASS_ID",
  CAST(NULL AS VARCHAR)	"TARGET_REPO_ID", 
  CAST(NULL AS VARCHAR) "TGT_FEATURE_ID",  		     
  CAST(NULL AS VARCHAR) "TGT_FEAT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "TGT_CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TGT_CONN_CLASS_ID",
  UPPER(tgt.TARGET_NAME) "ORG_TARGET_NAME",  
  CAST(NULL AS VARCHAR) "TARGET_NAME",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  swinst.MAPPING_ID,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) 
AND EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL 
UNION ALL
SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL) 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  tinst.INSTANCE_ID "TASK_INSTANCE_ID",  
  swinst.INSTANCE_ID "WIDGET_INSTANCE_ID",  
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "SOURCE_CLASS_ID",     
  ' '		"SOURCE_REPO_ID", 
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME" , 
  CAST(NULL AS VARCHAR) 	"TARGET_ID",
  CAST(NULL AS VARCHAR)  "TARGET_CLASS_ID",
  CAST(NULL AS VARCHAR)	"TARGET_REPO_ID", 
  CAST(NULL AS VARCHAR) "TGT_FEATURE_ID",  		     
  CAST(NULL AS VARCHAR) "TGT_FEAT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "TGT_CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TGT_CONN_CLASS_ID",
  UPPER(tgt.TARGET_NAME) "ORG_TARGET_NAME",  
  CAST(NULL AS VARCHAR)  "TARGET_NAME",  
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255)) "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  swinst.MAPPING_ID,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst ,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tinst.TASK_TYPE = 68 AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = tinst.INSTANCE_ID AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
tgtinst.WIDGET_TYPE = 2 AND
map.IS_VISIBLE = 1 AND
swinst.MAPPING_ID = map.MAPPING_ID AND
tgtfld.TARGET_ID =  tgt.TARGET_ID AND
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND
wtdep.VERSION_NUMBER = map.VERSION_NUMBER ) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 )
AND EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL 
UNION ALL
SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL) 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  tinst.INSTANCE_ID "TASK_INSTANCE_ID",  
  swinst.INSTANCE_ID "WIDGET_INSTANCE_ID",  
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME" , 
  CAST(NULL AS VARCHAR) 	"TARGET_ID",
  CAST(NULL AS VARCHAR)  "TARGET_CLASS_ID",
  CAST(NULL AS VARCHAR)	"TARGET_REPO_ID", 
  CAST(NULL AS VARCHAR) "TGT_FEATURE_ID",  		     
  CAST(NULL AS VARCHAR) "TGT_FEAT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "TGT_CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TGT_CONN_CLASS_ID",
  UPPER(tgt.TARGET_NAME) "ORG_TARGET_NAME",  
  CAST(NULL AS VARCHAR)  "TARGET_NAME",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  swinst.MAPPING_ID,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_SWIDGET_INST swinst, 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SWIDGET_ATTR wattr,
OPB_OBJECT_TYPE otype,
OPB_SESS_CNX_REFS cnxref, 
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
wattr.SESSION_ID = swinst.SESSION_ID AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr.ATTR_ID = 3 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER)
AND EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL 
UNION ALL
SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL) 
UNION ALL
SELECT 
  ' ' 	"REPOSITORY_ID",
  tinst.INSTANCE_ID "TASK_INSTANCE_ID",  
  swinst.INSTANCE_ID "WIDGET_INSTANCE_ID",  
  'TASK_INSTANCE_Session_'+LTRIM(STR(tinst.INSTANCE_ID)) "TASK_ID",
  'com.informatica.powercenter.process.SessionTaskInstance' "TASK_CLASS_ID",
  'Mapping_'+ LTRIM(STR(swinst.MAPPING_ID)) "TRANSFORM_ID",
  'com.informatica.powercenter.map.Mapping'   "TRANSFORM_CLASS_ID",
  'Default_Expression' "MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "MAP_CLASS_ID",
  'Default_FieldExpression' "FEATURE_MAP_ID",
  'com.informatica.powercenter.map.MapExpression' "FEAT_MAP_CLASS_ID",
  'WIDGET_INSTANCE_Target Definition_'+  LTRIM(STR(tgtinst.MAPPING_ID)) + '_' +
  LTRIM(STR(tgtinst.INSTANCE_ID))  	"SOURCE_ID",
  'com.informatica.powercenter.map.TargetDefinitionInstance' "SOURCE_CLASS_ID",     
  ' ' 		"SOURCE_REPO_ID", 
  'Target Definition_Field_' + LTRIM(STR(tgtfld.TARGET_ID)) + 
  		'_' + LTRIM(STR(tgtfld.FLDID)) "SRC_FEATURE_ID",     
  'com.informatica.powercenter.map.TargetDefinitionPort' "SRC_FEAT_CLASS_ID",
  CAST(NULL AS VARCHAR) "SRC_CONNECTION_ID",
  CAST(NULL AS VARCHAR) "SRC_CONN_CLASS_ID",
  CAST(NULL AS VARCHAR) "SOURCE_NAME",
  CAST(NULL AS VARCHAR) "SOURCE_SCHEMA_NAME",
  CAST(NULL AS VARCHAR) "SRC_FEATURE_NAME" , 
  CAST(NULL AS VARCHAR) 	"TARGET_ID",
  CAST(NULL AS VARCHAR)  "TARGET_CLASS_ID",
  CAST(NULL AS VARCHAR)	"TARGET_REPO_ID", 
  CAST(NULL AS VARCHAR) "TGT_FEATURE_ID",  		     
  CAST(NULL AS VARCHAR) "TGT_FEAT_CLASS_ID",
  otype.OBJECT_TYPE_NAME + '_' + LTRIM(STR(cnxref.REF_OBJECT_ID)) "TGT_CONNECTION_ID",
 'com.informatica.powercenter.deployment.' + REPLACE(otype.OBJECT_TYPE_NAME,' ','') "TGT_CONN_CLASS_ID",
  UPPER(tgt.TARGET_NAME) "ORG_TARGET_NAME",  
   CAST(NULL AS VARCHAR)  "TARGET_NAME",
  UPPER(SUBSTRING(ATTR_VALUE, 1, 255))  "TARGET_SCHEMA_NAME",
  UPPER(tgtfld.TARGET_NAME) "TGT_FEATURE_NAME",
  CAST(tsk.LAST_SAVED as datetime) "EFF_FROM_DT",
  CAST(NULL as datetime) "EFF_TO_DT",
  CAST(tsk.LAST_SAVED as datetime) TASK_UPDATE_DT,
  CAST(wflow.LAST_SAVED as datetime) ACT_UPDATE_DT,
  swinst.MAPPING_ID,
  tsk.SUBJECT_ID "TASK_SUBJECT_ID",
  map.SUBJECT_ID "TRFN_SUBJECT_ID",
  tgt.SUBJ_ID "TGT_SUBJECT_ID"
FROM 
OPB_WIDGET_INST tgtinst, 
OPB_TARG tgt, 
OPB_TARG_FLD tgtfld, 
OPB_SESS_CNX_REFS cnxref, 
OPB_OBJECT_TYPE otype,
OPB_TASK tsk,
OPB_TASK_INST tinst,
OPB_MAPPING map,
OPB_TASK wflow,
OPB_SWIDGET_INST swinst LEFT OUTER JOIN OPB_WIDGET_ATTR wattr ON
wattr.SESSION_TASK_ID = 0 AND
wattr.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr.MAPPING_ID = swinst.MAPPING_ID AND
wattr.INSTANCE_ID = swinst.INSTANCE_ID AND
wattr.ATTR_ID = 3 AND
wattr.WIDGET_TYPE = 2
WHERE
swinst.WIDGET_TYPE =2 AND 
tinst.TASK_ID = tsk.TASK_ID AND
tsk.IS_VISIBLE = 1 AND
tinst.TASK_TYPE = 68 AND
tinst.TASK_ID = swinst.SESSION_ID AND
tinst.VERSION_NUMBER = wflow.VERSION_NUMBER AND
tinst.WORKFLOW_ID = wflow.TASK_ID AND
wflow.TASK_TYPE IN (70,71) AND
wflow.IS_VISIBLE = 1 AND
cnxref.REF_OBJECT_ID != 0 AND
cnxref.SESSION_ID =  swinst.SESSION_ID AND 
cnxref.SESSION_INST_ID = 0 AND 
cnxref.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND 
cnxref.VERSION_NUMBER = swinst.VERSION_NUMBER AND
cnxref.VERSION_NUMBER = tsk.VERSION_NUMBER AND
swinst.MAPPING_ID = tgtinst.MAPPING_ID AND 
swinst.INSTANCE_ID = tgtinst.INSTANCE_ID AND 
tgtinst.MAPPING_ID = map.MAPPING_ID AND
tgtinst.VERSION_NUMBER = map.VERSION_NUMBER AND
map.IS_VISIBLE = 1 AND
tgtfld.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtinst.WIDGET_TYPE = 2 AND 
tgt.TARGET_ID =  tgtinst.WIDGET_ID AND
tgtfld.VERSION_NUMBER = tgt.VERSION_NUMBER AND
tgt.IS_VISIBLE = 1 AND 
cnxref.REF_OBJECT_TYPE = otype.OBJECT_TYPE_ID AND 
cnxref.REF_OBJECT_TYPE != 75 AND EXISTS 
( SELECT 'X' FROM OPB_WIDGET_DEP wtdep 
WHERE wtdep.MAPPING_ID = swinst.MAPPING_ID AND 
wtdep.TO_INSTANCE_ID = swinst.INSTANCE_ID AND 
wtdep.TO_FIELD_ID = tgtfld.FLDID AND 
wtdep.VERSION_NUMBER = map.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SESS_CNX_REFS cnxref2 WHERE 
cnxref2.SESSION_ID  = tinst.TASK_ID AND 
cnxref2.SESSION_INST_ID  = tinst.INSTANCE_ID AND 
cnxref2.SESS_WIDG_INST_ID =  swinst.SESS_WIDG_INST_ID AND
cnxref2.VERSION_NUMBER = swinst.VERSION_NUMBER) AND
NOT EXISTS ( SELECT 'X' FROM OPB_SWIDGET_ATTR wattr1 WHERE
wattr1.SESSION_ID = swinst.SESSION_ID AND
wattr1.VERSION_NUMBER = swinst.VERSION_NUMBER AND
wattr1.SESS_WIDG_INST_ID = swinst.SESS_WIDG_INST_ID AND
wattr1.ATTR_ID = 3 )
AND EXISTS  
(SELECT 'X' FROM OPB_SWIDGET_ATTR sattr WHERE  
sattr.SESSION_ID=swinst.SESSION_ID AND sattr.SESS_WIDG_INST_ID =swinst.SESS_WIDG_INST_ID AND  
sattr.ATTR_ID=19 and tsk.VERSION_NUMBER = sattr.VERSION_NUMBER and sattr.ATTR_VALUE IS NOT NULL 
UNION ALL
SELECT 'X' FROM OPB_WIDGET_ATTR wattr1 WHERE  
wattr1.MAPPING_ID=swinst.MAPPING_ID AND wattr1.INSTANCE_ID =swinst.INSTANCE_ID AND  
wattr1.ATTR_ID=19 and wattr1.VERSION_NUMBER = map.VERSION_NUMBER and wattr1.ATTR_VALUE IS NOT NULL)
GO

GO
--SqlScripter----[dbo].[V_PC8x_TSK_LOG].sql
GO
SET ANSI_NULLS ON
SET QUOTED_IDENTIFIER OFF
GO
IF OBJECT_ID('[dbo].[V_PC8x_TSK_LOG]') IS NULL EXEC('CREATE VIEW [dbo].[V_PC8x_TSK_LOG] AS /*TEMPORARY OBJECT, DELETE AFTER ALL OBJECTS ARE CREATED*/ SELECT 0 C1')
GO
ALTER VIEW [dbo].[V_PC8x_TSK_LOG]
AS
select REPOSITORY_ID, SERVER_CLASS_ID, SERVER_ID,
       USER_ACCT_CLASS_ID, USER_ACCOUNT_ID, EVENT_CLASS_ID,
       EVENT_ID, START_DATE, END_DATE, RUN_CLASS_ID,
       RUN_ID, ACTIVITY_CLASS_ID, ACTIVITY_ID, STEP_CLASS_ID,
       STEP_ID, TASK_CLASS_ID, TASK_ID,
       TRANSFORM_CLASS_ID, TRANSFORM_ID, FOLDER_CLASS_ID,
       FOLDER_ID, STATUS_CLASS_ID, STATUS_ID, STEP_RUN_NUMBER,
       INPUT_ROWS, REJECTED_ROWS, FAILED_ROWS, OUTPUT_ROWS,
       LOG_BLOCK_READS, PHY_BLOCK_READS, LOG_BLOCK_WRITES,
       PHY_BLOCK_WRITES, EXECUTION_MSECS, READ_MSECS,
       WRITE_MSECS, IDLE_WAIT_MSECS, BUSY_WAIT_MSECS,
       IDLE_WAIT_EVENTS, BUSY_WAIT_EVENTS,MESSAGE,    SUBJECT_ID
from V_IME_TASK_LOG
GO
